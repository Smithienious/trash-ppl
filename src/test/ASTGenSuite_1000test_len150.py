import unittest
from TestUtils import TestAST
from AST import *


class ASTGenSuite(unittest.TestCase):
    def test_0(self):
        line = '''Class W:_{Val $_,$5,Y_6,__33,s98_X:Array [Array [Int ,0XC_39],35_3];}Class DwV_:WM{}Class O:F{Destructor (){Continue ;}Constructor (Q_,_u:Array [Array [Array [String ,0B11_1],0B1],5]){} }'''
        expect = '''Program([ClassDecl(Id(W),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(353,ArrayType(3129,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(353,ArrayType(3129,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(Y_6),ArrayType(353,ArrayType(3129,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(__33),ArrayType(353,ArrayType(3129,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(s98_X),ArrayType(353,ArrayType(3129,IntType)),None))]),ClassDecl(Id(DwV_),Id(WM),[]),ClassDecl(Id(O),Id(F),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(Q_),ArrayType(5,ArrayType(1,ArrayType(7,StringType)))),param(Id(_u),ArrayType(5,ArrayType(1,ArrayType(7,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 0))

    def test_1(self):
        line = '''Class h_Q{}Class R2:w{Val H6,$l,_,I__80,$__4w,$896_,$_,_W,$0:_x;Constructor (){}Constructor (r:ps;_X,FJ_,U_4,t:Array [Int ,0x4];_2:Array [Array [Float ,0b1_0],0B1];_O,__0:Array [Array [Array [Array [Boolean ,07],0b1011000],0X2],011];O9c:Array [Array [Boolean ,1],0x57];_I:Boolean ){} }Class _3__j9{}'''
        expect = '''Program([ClassDecl(Id(h_Q),[]),ClassDecl(Id(R2),Id(w),[AttributeDecl(Instance,ConstDecl(Id(H6),ClassType(Id(_x)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($l),ClassType(Id(_x)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_x)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(I__80),ClassType(Id(_x)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__4w),ClassType(Id(_x)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($896_),ClassType(Id(_x)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_x)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_W),ClassType(Id(_x)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(_x)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(r),ClassType(Id(ps))),param(Id(_X),ArrayType(4,IntType)),param(Id(FJ_),ArrayType(4,IntType)),param(Id(U_4),ArrayType(4,IntType)),param(Id(t),ArrayType(4,IntType)),param(Id(_2),ArrayType(1,ArrayType(2,FloatType))),param(Id(_O),ArrayType(9,ArrayType(2,ArrayType(88,ArrayType(7,BoolType))))),param(Id(__0),ArrayType(9,ArrayType(2,ArrayType(88,ArrayType(7,BoolType))))),param(Id(O9c),ArrayType(87,ArrayType(1,BoolType))),param(Id(_I),BoolType)],Block([]))]),ClassDecl(Id(_3__j9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 1))

    def test_2(self):
        line = '''Class _{}Class Y__3{}Class __:h{Val _R:Array [Array [Array [Array [Int ,32],32],0B1_00],32];}Class _U_{$0(T:String ;v,_39,BlX,_:Array [Boolean ,010];c,M_S,_7k,__45:Int ;w,e,r,b,_N:_){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(Y__3),[]),ClassDecl(Id(__),Id(h),[AttributeDecl(Instance,ConstDecl(Id(_R),ArrayType(32,ArrayType(4,ArrayType(32,ArrayType(32,IntType)))),None))]),ClassDecl(Id(_U_),[MethodDecl(Id($0),Static,[param(Id(T),StringType),param(Id(v),ArrayType(8,BoolType)),param(Id(_39),ArrayType(8,BoolType)),param(Id(BlX),ArrayType(8,BoolType)),param(Id(_),ArrayType(8,BoolType)),param(Id(c),IntType),param(Id(M_S),IntType),param(Id(_7k),IntType),param(Id(__45),IntType),param(Id(w),ClassType(Id(_))),param(Id(e),ClassType(Id(_))),param(Id(r),ClassType(Id(_))),param(Id(b),ClassType(Id(_))),param(Id(_N),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 2))

    def test_3(self):
        line = '''Class h:_8{Constructor (A,HR,K,e_:Array [Array [Array [Float ,6],0B101101],3];_,U:_;uV:_8;_,rY,w:Array [Array [Array [Float ,31],0B101101],0X50];DP0_:String ){}Destructor (){}Val $_,$x9j:__;Destructor (){}Val $1,___:_0;Destructor (){} }Class b:_{Constructor (D_9C,_,G:__An;n:Array [Int ,045];_,_,I3:__;_,N8Ff,_:__489){Break ;} }'''
        expect = '''Program([ClassDecl(Id(h),Id(_8),[MethodDecl(Id(Constructor),Instance,[param(Id(A),ArrayType(3,ArrayType(45,ArrayType(6,FloatType)))),param(Id(HR),ArrayType(3,ArrayType(45,ArrayType(6,FloatType)))),param(Id(K),ArrayType(3,ArrayType(45,ArrayType(6,FloatType)))),param(Id(e_),ArrayType(3,ArrayType(45,ArrayType(6,FloatType)))),param(Id(_),ClassType(Id(_))),param(Id(U),ClassType(Id(_))),param(Id(uV),ClassType(Id(_8))),param(Id(_),ArrayType(80,ArrayType(45,ArrayType(31,FloatType)))),param(Id(rY),ArrayType(80,ArrayType(45,ArrayType(31,FloatType)))),param(Id(w),ArrayType(80,ArrayType(45,ArrayType(31,FloatType)))),param(Id(DP0_),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($x9j),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(_0)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(___),ClassType(Id(_0)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(b),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(D_9C),ClassType(Id(__An))),param(Id(_),ClassType(Id(__An))),param(Id(G),ClassType(Id(__An))),param(Id(n),ArrayType(37,IntType)),param(Id(_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(I3),ClassType(Id(__))),param(Id(_),ClassType(Id(__489))),param(Id(N8Ff),ClassType(Id(__489))),param(Id(_),ClassType(Id(__489)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 3))

    def test_4(self):
        line = '''Class G{}Class xA:Ib1{Var $200__U:Array [Array [Array [Array [Int ,01_6_0],28],0xA_5D],0100];Destructor (){}Val $A,_,$_p_:Array [Array [Array [Array [Array [Int ,06],0100],0100],47],0100];}'''
        expect = '''Program([ClassDecl(Id(G),[]),ClassDecl(Id(xA),Id(Ib1),[AttributeDecl(Static,VarDecl(Id($200__U),ArrayType(64,ArrayType(2653,ArrayType(28,ArrayType(112,IntType)))))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($A),ArrayType(64,ArrayType(47,ArrayType(64,ArrayType(64,ArrayType(6,IntType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(64,ArrayType(47,ArrayType(64,ArrayType(64,ArrayType(6,IntType))))),None)),AttributeDecl(Static,ConstDecl(Id($_p_),ArrayType(64,ArrayType(47,ArrayType(64,ArrayType(64,ArrayType(6,IntType))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 4))

    def test_5(self):
        line = '''Class ebSg7:__{Destructor (){}$d(D_,J,_:Array [Boolean ,0xF];_A_ak0,b:fo;_Y_Row_:Array [Float ,022]){Return ;}$_(){Return ;}Var $_,$_,$_R,_,$C:Array [Boolean ,01_1];Var $7_V:Array [Boolean ,0XB_1];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(ebSg7),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($d),Static,[param(Id(D_),ArrayType(15,BoolType)),param(Id(J),ArrayType(15,BoolType)),param(Id(_),ArrayType(15,BoolType)),param(Id(_A_ak0),ClassType(Id(fo))),param(Id(b),ClassType(Id(fo))),param(Id(_Y_Row_),ArrayType(18,FloatType))],Block([Return()])),MethodDecl(Id($_),Static,[],Block([Return()])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(9,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(9,BoolType))),AttributeDecl(Static,VarDecl(Id($_R),ArrayType(9,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(9,BoolType))),AttributeDecl(Static,VarDecl(Id($C),ArrayType(9,BoolType))),AttributeDecl(Static,VarDecl(Id($7_V),ArrayType(177,BoolType))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 5))

    def test_6(self):
        line = '''Class k:_{Oe(d:Array [Int ,0b1_01_1001];__0,f_,_M:Array [Array [Int ,74],0B111011];__t3:u___5;H:Array [Array [Array [Array [Array [Boolean ,04],0B1],0b1011011],74],0X64];Pp,h:_;B_:Array [Int ,0B111011]){} }'''
        expect = '''Program([ClassDecl(Id(k),Id(_),[MethodDecl(Id(Oe),Instance,[param(Id(d),ArrayType(89,IntType)),param(Id(__0),ArrayType(59,ArrayType(74,IntType))),param(Id(f_),ArrayType(59,ArrayType(74,IntType))),param(Id(_M),ArrayType(59,ArrayType(74,IntType))),param(Id(__t3),ClassType(Id(u___5))),param(Id(H),ArrayType(100,ArrayType(74,ArrayType(91,ArrayType(1,ArrayType(4,BoolType)))))),param(Id(Pp),ClassType(Id(_))),param(Id(h),ClassType(Id(_))),param(Id(B_),ArrayType(59,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 6))

    def test_7(self):
        line = '''Class w{Constructor (_:Array [Array [Array [Boolean ,0XE2],4204],0b111];K,d_,_,z3v_Z,l:_;IUh2e2s,_7__e,P:String ;M,uO,G7FBs:Boolean ;_0:L_;_5:d;_:Q_P){Var EL9:__;} }'''
        expect = '''Program([ClassDecl(Id(w),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(7,ArrayType(4204,ArrayType(226,BoolType)))),param(Id(K),ClassType(Id(_))),param(Id(d_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(z3v_Z),ClassType(Id(_))),param(Id(l),ClassType(Id(_))),param(Id(IUh2e2s),StringType),param(Id(_7__e),StringType),param(Id(P),StringType),param(Id(M),BoolType),param(Id(uO),BoolType),param(Id(G7FBs),BoolType),param(Id(_0),ClassType(Id(L_))),param(Id(_5),ClassType(Id(d))),param(Id(_),ClassType(Id(Q_P)))],Block([VarDecl(Id(EL9),ClassType(Id(__)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 7))

    def test_8(self):
        line = '''Class N{Constructor (AMjlC_kDk_,P:Array [Int ,012];q,_,y,j_X:Int ){}Constructor (_:_;_82:Array [Array [Boolean ,05],0x3C];q:Array [String ,2_3_83];G:Array [String ,07];_:__){} }Class _0p:_{}'''
        expect = '''Program([ClassDecl(Id(N),[MethodDecl(Id(Constructor),Instance,[param(Id(AMjlC_kDk_),ArrayType(10,IntType)),param(Id(P),ArrayType(10,IntType)),param(Id(q),IntType),param(Id(_),IntType),param(Id(y),IntType),param(Id(j_X),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_82),ArrayType(60,ArrayType(5,BoolType))),param(Id(q),ArrayType(2383,StringType)),param(Id(G),ArrayType(7,StringType)),param(Id(_),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(_0p),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 8))

    def test_9(self):
        line = '''Class _{}Class _:P{_(__,_1:Float ){}Val $3_:Array [Array [Array [Boolean ,0x56],041],3_4215];Val $e_7_5:__7;Var __,_R,l:Array [String ,041];v(_E,V,Cu,_:Array [String ,0B1];J,__5_k_,_p,_,_,v:Array [String ,0xF_C_5_B]){}Val ___3,_:Array [Array [Array [Boolean ,0b11_0],99],99];Var $_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(P),[MethodDecl(Id(_),Instance,[param(Id(__),FloatType),param(Id(_1),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($3_),ArrayType(34215,ArrayType(33,ArrayType(86,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($e_7_5),ClassType(Id(__7)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(33,StringType))),AttributeDecl(Instance,VarDecl(Id(_R),ArrayType(33,StringType))),AttributeDecl(Instance,VarDecl(Id(l),ArrayType(33,StringType))),MethodDecl(Id(v),Instance,[param(Id(_E),ArrayType(1,StringType)),param(Id(V),ArrayType(1,StringType)),param(Id(Cu),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(J),ArrayType(64603,StringType)),param(Id(__5_k_),ArrayType(64603,StringType)),param(Id(_p),ArrayType(64603,StringType)),param(Id(_),ArrayType(64603,StringType)),param(Id(_),ArrayType(64603,StringType)),param(Id(v),ArrayType(64603,StringType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(___3),ArrayType(99,ArrayType(99,ArrayType(6,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(99,ArrayType(99,ArrayType(6,BoolType))),None)),AttributeDecl(Static,VarDecl(Id($_),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 9))

    def test_10(self):
        line = '''Class __Z7{Var $I:Int ;Val $I:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0x11],013_0],033],6],6],0x11],0X74_4],4],2_27];Destructor (){} }Class _:__{Val _,_9:_5;}Class O{}'''
        expect = '''Program([ClassDecl(Id(__Z7),[AttributeDecl(Static,VarDecl(Id($I),IntType)),AttributeDecl(Static,ConstDecl(Id($I),ArrayType(227,ArrayType(4,ArrayType(1860,ArrayType(17,ArrayType(6,ArrayType(6,ArrayType(27,ArrayType(88,ArrayType(17,FloatType))))))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(__),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_5)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_9),ClassType(Id(_5)),NullLiteral()))]),ClassDecl(Id(O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 10))

    def test_11(self):
        line = '''Class __{}Class _:d{}Class t_{Val _1S04_:Float ;Var $1_a6__,I:Array [Array [Array [Float ,72],72],0x22];_(){}_(_6_,_,_d:Array [Array [Boolean ,8],72]){} }Class yu5_:T__{}Class R{}Class v:P{}Class e0{}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(_),Id(d),[]),ClassDecl(Id(t_),[AttributeDecl(Instance,ConstDecl(Id(_1S04_),FloatType,None)),AttributeDecl(Static,VarDecl(Id($1_a6__),ArrayType(34,ArrayType(72,ArrayType(72,FloatType))))),AttributeDecl(Instance,VarDecl(Id(I),ArrayType(34,ArrayType(72,ArrayType(72,FloatType))))),MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(_6_),ArrayType(72,ArrayType(8,BoolType))),param(Id(_),ArrayType(72,ArrayType(8,BoolType))),param(Id(_d),ArrayType(72,ArrayType(8,BoolType)))],Block([]))]),ClassDecl(Id(yu5_),Id(T__),[]),ClassDecl(Id(R),[]),ClassDecl(Id(v),Id(P),[]),ClassDecl(Id(e0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 11))

    def test_12(self):
        line = '''Class o8:_2{Val _8,__7n_tB,_x,$0C,JRFt,Z,g2,b:e;Constructor (_G:Array [Array [Boolean ,0X2],0x6];a_:Float ;w7K:String ;t,_:_;b_V_:Array [Array [Float ,0B1_0],38]){} }Class _{Val $bB:MO;}'''
        expect = '''Program([ClassDecl(Id(o8),Id(_2),[AttributeDecl(Instance,ConstDecl(Id(_8),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__7n_tB),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_x),ClassType(Id(e)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($0C),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(JRFt),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Z),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(g2),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(b),ClassType(Id(e)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_G),ArrayType(6,ArrayType(2,BoolType))),param(Id(a_),FloatType),param(Id(w7K),StringType),param(Id(t),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(b_V_),ArrayType(38,ArrayType(2,FloatType)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($bB),ClassType(Id(MO)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 12))

    def test_13(self):
        line = '''Class e{Val $W,j:_;Val $9Z,_:Array [Array [Array [Boolean ,0xD_A],0B1],035];}Class G{Constructor (_:Array [Boolean ,0B11010];p:Array [Array [Array [Int ,035],0X6],7]){Continue ;} }Class _M:_kv_{Destructor (){}Var $PZ:_;}'''
        expect = '''Program([ClassDecl(Id(e),[AttributeDecl(Static,ConstDecl(Id($W),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(j),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9Z),ArrayType(29,ArrayType(1,ArrayType(218,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(29,ArrayType(1,ArrayType(218,BoolType))),None))]),ClassDecl(Id(G),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(26,BoolType)),param(Id(p),ArrayType(7,ArrayType(6,ArrayType(29,IntType))))],Block([Continue]))]),ClassDecl(Id(_M),Id(_kv_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($PZ),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 13))

    def test_14(self):
        line = '''Class V:_{}Class K:_{Constructor (){}Val $C,$6:String ;}Class __{Var $__,$5:Int ;Var _:Int ;}Class _45{}Class _4:K0r7U{Constructor (R,_e:Float ;_,D,_wB87_:Array [Boolean ,0B1_0]){}Destructor (){ {} }}Class f_8{}'''
        expect = '''Program([ClassDecl(Id(V),Id(_),[]),ClassDecl(Id(K),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($C),StringType,None)),AttributeDecl(Static,ConstDecl(Id($6),StringType,None))]),ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($__),IntType)),AttributeDecl(Static,VarDecl(Id($5),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType))]),ClassDecl(Id(_45),[]),ClassDecl(Id(_4),Id(K0r7U),[MethodDecl(Id(Constructor),Instance,[param(Id(R),FloatType),param(Id(_e),FloatType),param(Id(_),ArrayType(2,BoolType)),param(Id(D),ArrayType(2,BoolType)),param(Id(_wB87_),ArrayType(2,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(f_8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 14))

    def test_15(self):
        line = '''Class c:Q{Var _,$__:Array [Array [Array [Array [Float ,063],0xFF],0X2_2],9_6];Val $D,$____:cX;}Class ___Z:_{}Class G:y{Constructor (i:_4t;_,_,P:Int ;_,o,i:Float ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(c),Id(Q),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(96,ArrayType(34,ArrayType(255,ArrayType(51,FloatType)))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(96,ArrayType(34,ArrayType(255,ArrayType(51,FloatType)))))),AttributeDecl(Static,ConstDecl(Id($D),ClassType(Id(cX)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($____),ClassType(Id(cX)),NullLiteral()))]),ClassDecl(Id(___Z),Id(_),[]),ClassDecl(Id(G),Id(y),[MethodDecl(Id(Constructor),Instance,[param(Id(i),ClassType(Id(_4t))),param(Id(_),IntType),param(Id(_),IntType),param(Id(P),IntType),param(Id(_),FloatType),param(Id(o),FloatType),param(Id(i),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 15))

    def test_16(self):
        line = '''Class _:_{$qI(___,_3_X,_1,q,W,G:Int ;_,y___,m_:Int ){}Destructor (){}$H_(f,X,__:J;__,_:s;E:_;_,__,_,_:Int ){Var _2w_1,_KL2N_,__,_6:Array [Array [Array [Array [Array [String ,027],0B1100],7],0b111011],04];Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id($qI),Static,[param(Id(___),IntType),param(Id(_3_X),IntType),param(Id(_1),IntType),param(Id(q),IntType),param(Id(W),IntType),param(Id(G),IntType),param(Id(_),IntType),param(Id(y___),IntType),param(Id(m_),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($H_),Static,[param(Id(f),ClassType(Id(J))),param(Id(X),ClassType(Id(J))),param(Id(__),ClassType(Id(J))),param(Id(__),ClassType(Id(s))),param(Id(_),ClassType(Id(s))),param(Id(E),ClassType(Id(_))),param(Id(_),IntType),param(Id(__),IntType),param(Id(_),IntType),param(Id(_),IntType)],Block([VarDecl(Id(_2w_1),ArrayType(4,ArrayType(59,ArrayType(7,ArrayType(12,ArrayType(23,StringType)))))),VarDecl(Id(_KL2N_),ArrayType(4,ArrayType(59,ArrayType(7,ArrayType(12,ArrayType(23,StringType)))))),VarDecl(Id(__),ArrayType(4,ArrayType(59,ArrayType(7,ArrayType(12,ArrayType(23,StringType)))))),VarDecl(Id(_6),ArrayType(4,ArrayType(59,ArrayType(7,ArrayType(12,ArrayType(23,StringType)))))),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 16))

    def test_17(self):
        line = '''Class m1{Constructor (_:LW;o:Array [Float ,3];S:Boolean ){Var D,_P,d,_:Array [Array [Boolean ,026],46];Break ;}Constructor (_3:_X1){} }Class __:n{Var $_,_D:Array [Array [Boolean ,46],05];}'''
        expect = '''Program([ClassDecl(Id(m1),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(LW))),param(Id(o),ArrayType(3,FloatType)),param(Id(S),BoolType)],Block([VarDecl(Id(D),ArrayType(46,ArrayType(22,BoolType))),VarDecl(Id(_P),ArrayType(46,ArrayType(22,BoolType))),VarDecl(Id(d),ArrayType(46,ArrayType(22,BoolType))),VarDecl(Id(_),ArrayType(46,ArrayType(22,BoolType))),Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_3),ClassType(Id(_X1)))],Block([]))]),ClassDecl(Id(__),Id(n),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(5,ArrayType(46,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_D),ArrayType(5,ArrayType(46,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 17))

    def test_18(self):
        line = '''Class M8Z_D:b_{_8r(){}P_(_C16_:Array [Array [Float ,0X8],04]){}Var $_5:String ;Var $d,_,$_3_:Array [Array [Int ,89],0X8];}Class _{Val t,_:__;Val $_,$A1g_:B_;}Class Y:_{Val I_9_:w;$5(){}$7v(_3_x,_:Int ;Vs_5,h:Array [Array [Int ,3],0b1_10]){}Var NE:Boolean ;}Class _{}Class _:_E{}'''
        expect = '''Program([ClassDecl(Id(M8Z_D),Id(b_),[MethodDecl(Id(_8r),Instance,[],Block([])),MethodDecl(Id(P_),Instance,[param(Id(_C16_),ArrayType(4,ArrayType(8,FloatType)))],Block([])),AttributeDecl(Static,VarDecl(Id($_5),StringType)),AttributeDecl(Static,VarDecl(Id($d),ArrayType(8,ArrayType(89,IntType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(8,ArrayType(89,IntType)))),AttributeDecl(Static,VarDecl(Id($_3_),ArrayType(8,ArrayType(89,IntType))))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(t),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(B_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($A1g_),ClassType(Id(B_)),NullLiteral()))]),ClassDecl(Id(Y),Id(_),[AttributeDecl(Instance,ConstDecl(Id(I_9_),ClassType(Id(w)),NullLiteral())),MethodDecl(Id($5),Static,[],Block([])),MethodDecl(Id($7v),Static,[param(Id(_3_x),IntType),param(Id(_),IntType),param(Id(Vs_5),ArrayType(6,ArrayType(3,IntType))),param(Id(h),ArrayType(6,ArrayType(3,IntType)))],Block([])),AttributeDecl(Instance,VarDecl(Id(NE),BoolType))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_E),[])])'''
        self.assertTrue(TestAST.test(line, expect, 18))

    def test_19(self):
        line = '''Class q{}Class l{}Class w:y2__{Constructor (){}Destructor (){ {Return ;Continue ;} }Constructor (){Continue ;} }Class h_{Destructor (){Return ;Break ;Val __:__;___l::$_E._();} }'''
        expect = '''Program([ClassDecl(Id(q),[]),ClassDecl(Id(l),[]),ClassDecl(Id(w),Id(y2__),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([Return(),Continue])])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))]),ClassDecl(Id(h_),[MethodDecl(Id(Destructor),Instance,[],Block([Return(),Break,ConstDecl(Id(__),ClassType(Id(__)),NullLiteral()),Call(FieldAccess(Id(___l),Id($_E)),Id(_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 19))

    def test_20(self):
        line = '''Class t:e_{Val $__,$d9g:sN;_(_,X,_,_415OF1,__,k,_:Array [Array [Array [Array [Boolean ,0125_0_1_6],01],0105],0B1_0];W0uF49q:String ;_,_:_;_UG__,jn,R:Boolean ;V:Float ){} }Class D0:_16{}Class q_5G_:N_7k{_7(_,x,X_:Float ;m1:_){} }'''
        expect = '''Program([ClassDecl(Id(t),Id(e_),[AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(sN)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($d9g),ClassType(Id(sN)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(2,ArrayType(69,ArrayType(1,ArrayType(43534,BoolType))))),param(Id(X),ArrayType(2,ArrayType(69,ArrayType(1,ArrayType(43534,BoolType))))),param(Id(_),ArrayType(2,ArrayType(69,ArrayType(1,ArrayType(43534,BoolType))))),param(Id(_415OF1),ArrayType(2,ArrayType(69,ArrayType(1,ArrayType(43534,BoolType))))),param(Id(__),ArrayType(2,ArrayType(69,ArrayType(1,ArrayType(43534,BoolType))))),param(Id(k),ArrayType(2,ArrayType(69,ArrayType(1,ArrayType(43534,BoolType))))),param(Id(_),ArrayType(2,ArrayType(69,ArrayType(1,ArrayType(43534,BoolType))))),param(Id(W0uF49q),StringType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_UG__),BoolType),param(Id(jn),BoolType),param(Id(R),BoolType),param(Id(V),FloatType)],Block([]))]),ClassDecl(Id(D0),Id(_16),[]),ClassDecl(Id(q_5G_),Id(N_7k),[MethodDecl(Id(_7),Instance,[param(Id(_),FloatType),param(Id(x),FloatType),param(Id(X_),FloatType),param(Id(m1),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 20))

    def test_21(self):
        line = '''Class e{$__X(){Continue ;}$___(_,_,_T:Array [Array [Boolean ,0xB3],0X58];SW,S452:Array [Array [String ,0b1001011],074];_,a:Array [Array [String ,0X8],0b1001011];d0,_:Array [Int ,0B1]){} }Class pZnS_{Destructor (){_::$_().___v();Break ;} }'''
        expect = '''Program([ClassDecl(Id(e),[MethodDecl(Id($__X),Static,[],Block([Continue])),MethodDecl(Id($___),Static,[param(Id(_),ArrayType(88,ArrayType(179,BoolType))),param(Id(_),ArrayType(88,ArrayType(179,BoolType))),param(Id(_T),ArrayType(88,ArrayType(179,BoolType))),param(Id(SW),ArrayType(60,ArrayType(75,StringType))),param(Id(S452),ArrayType(60,ArrayType(75,StringType))),param(Id(_),ArrayType(75,ArrayType(8,StringType))),param(Id(a),ArrayType(75,ArrayType(8,StringType))),param(Id(d0),ArrayType(1,IntType)),param(Id(_),ArrayType(1,IntType))],Block([]))]),ClassDecl(Id(pZnS_),[MethodDecl(Id(Destructor),Instance,[],Block([Call(CallExpr(Id(_),Id($_),[]),Id(___v),[]),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 21))

    def test_22(self):
        line = '''Class __{Val $u,_qq,i,_B_,$f:Array [Array [Array [String ,0B11],11],6];}Class _{}Class X4:DL{Rj_9(h_6,__,k:Array [Array [Boolean ,0xFE_6],02]){Break ;} }Class _w_t3_{}Class _sV{Constructor (){} }Class _5__4:e{}Class ZE:Jz{Val _:B2;}'''
        expect = '''Program([ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($u),ArrayType(6,ArrayType(11,ArrayType(3,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(_qq),ArrayType(6,ArrayType(11,ArrayType(3,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(i),ArrayType(6,ArrayType(11,ArrayType(3,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(_B_),ArrayType(6,ArrayType(11,ArrayType(3,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($f),ArrayType(6,ArrayType(11,ArrayType(3,StringType))),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(X4),Id(DL),[MethodDecl(Id(Rj_9),Instance,[param(Id(h_6),ArrayType(2,ArrayType(4070,BoolType))),param(Id(__),ArrayType(2,ArrayType(4070,BoolType))),param(Id(k),ArrayType(2,ArrayType(4070,BoolType)))],Block([Break]))]),ClassDecl(Id(_w_t3_),[]),ClassDecl(Id(_sV),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_5__4),Id(e),[]),ClassDecl(Id(ZE),Id(Jz),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(B2)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 22))

    def test_23(self):
        line = '''Class _:a8_{}Class _:X_2{Constructor (P:Array [Int ,0X6_7];W,_,_Y:Array [Boolean ,0B111100];I_:_p_){}Var $_2:Array [String ,3_8807];Constructor (E:Array [Array [Boolean ,0B111100],0xC]){ {} }}'''
        expect = '''Program([ClassDecl(Id(_),Id(a8_),[]),ClassDecl(Id(_),Id(X_2),[MethodDecl(Id(Constructor),Instance,[param(Id(P),ArrayType(103,IntType)),param(Id(W),ArrayType(60,BoolType)),param(Id(_),ArrayType(60,BoolType)),param(Id(_Y),ArrayType(60,BoolType)),param(Id(I_),ClassType(Id(_p_)))],Block([])),AttributeDecl(Static,VarDecl(Id($_2),ArrayType(38807,StringType))),MethodDecl(Id(Constructor),Instance,[param(Id(E),ArrayType(12,ArrayType(60,BoolType)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 23))

    def test_24(self):
        line = '''Class __{X_(E,g:Float ;q5,_IW:Array [Array [Float ,07],0B1010000]){}Val B564,$7Nd,z:Array [Array [Boolean ,0xE_C],0x41];}Class _L_:_8y{}Class ZO{Destructor (){}Constructor (){Break ;} }Class CA{}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(X_),Instance,[param(Id(E),FloatType),param(Id(g),FloatType),param(Id(q5),ArrayType(80,ArrayType(7,FloatType))),param(Id(_IW),ArrayType(80,ArrayType(7,FloatType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(B564),ArrayType(65,ArrayType(236,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($7Nd),ArrayType(65,ArrayType(236,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(z),ArrayType(65,ArrayType(236,BoolType)),None))]),ClassDecl(Id(_L_),Id(_8y),[]),ClassDecl(Id(ZO),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(CA),[])])'''
        self.assertTrue(TestAST.test(line, expect, 24))

    def test_25(self):
        line = '''Class _{Destructor (){}Constructor (){} }Class k{}Class _6{Var k3,n,__,$2:_;}Class _:____{Destructor (){}Var d:Array [Array [Float ,07],5_5];Val _d_1v:Array [Array [Float ,0X5E],0B1001000];}Class y__0_:n{f(D5,_:Array [String ,0B1];_,bp,_:_;_1FX5:m_2_;c1N_4_,d,V7,_n:___u;n,_:s83;_,je:Array [Boolean ,0x6_4_1_A]){} }Class _:K{Constructor (){}Var $Y,_o_e50h:N_;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(k),[]),ClassDecl(Id(_6),[AttributeDecl(Instance,VarDecl(Id(k3),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(n),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(____),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(d),ArrayType(55,ArrayType(7,FloatType)))),AttributeDecl(Instance,ConstDecl(Id(_d_1v),ArrayType(72,ArrayType(94,FloatType)),None))]),ClassDecl(Id(y__0_),Id(n),[MethodDecl(Id(f),Instance,[param(Id(D5),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(_),ClassType(Id(_))),param(Id(bp),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_1FX5),ClassType(Id(m_2_))),param(Id(c1N_4_),ClassType(Id(___u))),param(Id(d),ClassType(Id(___u))),param(Id(V7),ClassType(Id(___u))),param(Id(_n),ClassType(Id(___u))),param(Id(n),ClassType(Id(s83))),param(Id(_),ClassType(Id(s83))),param(Id(_),ArrayType(25626,BoolType)),param(Id(je),ArrayType(25626,BoolType))],Block([]))]),ClassDecl(Id(_),Id(K),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($Y),ClassType(Id(N_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_o_e50h),ClassType(Id(N_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 25))

    def test_26(self):
        line = '''Class H{}Class _u{}Class L_:x__{}Class v{_(_,_1,W:_;V06:Array [Array [Array [Array [Array [Array [Array [Int ,3],0b1010110],2],05],05],0x8],0B11_0]){} }Class __:__{}Class _{Var p_,__,h17:TX_;}Class s_v{}Class fi9__:q{}'''
        expect = '''Program([ClassDecl(Id(H),[]),ClassDecl(Id(_u),[]),ClassDecl(Id(L_),Id(x__),[]),ClassDecl(Id(v),[MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_1),ClassType(Id(_))),param(Id(W),ClassType(Id(_))),param(Id(V06),ArrayType(6,ArrayType(8,ArrayType(5,ArrayType(5,ArrayType(2,ArrayType(86,ArrayType(3,IntType))))))))],Block([]))]),ClassDecl(Id(__),Id(__),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(p_),ClassType(Id(TX_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(TX_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(h17),ClassType(Id(TX_)),NullLiteral()))]),ClassDecl(Id(s_v),[]),ClassDecl(Id(fi9__),Id(q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 26))

    def test_27(self):
        line = '''Class _:dS{$_(_:Array [Int ,0X3_32_DE_2];_,_,X,_,_:Float ;_B:Array [Array [Array [Array [Float ,3],060],2],24]){}Val $fZ7,_:Array [Array [Array [Array [Boolean ,0X7],24],0X25],24];c(uZ:String ){Return ;Continue ;Continue ;Var s0_,_y:Float ;}Val $_,$0:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(dS),[MethodDecl(Id($_),Static,[param(Id(_),ArrayType(3354082,IntType)),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(X),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_B),ArrayType(24,ArrayType(2,ArrayType(48,ArrayType(3,FloatType)))))],Block([])),AttributeDecl(Static,ConstDecl(Id($fZ7),ArrayType(24,ArrayType(37,ArrayType(24,ArrayType(7,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(24,ArrayType(37,ArrayType(24,ArrayType(7,BoolType)))),None)),MethodDecl(Id(c),Instance,[param(Id(uZ),StringType)],Block([Return(),Continue,Continue,VarDecl(Id(s0_),FloatType),VarDecl(Id(_y),FloatType)])),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($0),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 27))

    def test_28(self):
        line = '''Class _{Destructor (){} }Class g_:_67R1{}Class E:_K{}Class m{Var $7g80:_TY;$_(T6:Array [Array [String ,0b1],0X17];PY:Array [Array [Int ,0X17],63];_,_41_1,M_:Int ){Break ;}Constructor (){}Val $Y:Array [Array [Float ,0X17],63];Constructor (_,A,bm8:Array [Array [Boolean ,0XF],0B1_10_0_0111];__:Int ;_:Array [Array [Array [Int ,0x8],0B1],0XE0E_7]){_::$7._6();} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(g_),Id(_67R1),[]),ClassDecl(Id(E),Id(_K),[]),ClassDecl(Id(m),[AttributeDecl(Static,VarDecl(Id($7g80),ClassType(Id(_TY)),NullLiteral())),MethodDecl(Id($_),Static,[param(Id(T6),ArrayType(23,ArrayType(1,StringType))),param(Id(PY),ArrayType(63,ArrayType(23,IntType))),param(Id(_),IntType),param(Id(_41_1),IntType),param(Id(M_),IntType)],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($Y),ArrayType(63,ArrayType(23,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(199,ArrayType(15,BoolType))),param(Id(A),ArrayType(199,ArrayType(15,BoolType))),param(Id(bm8),ArrayType(199,ArrayType(15,BoolType))),param(Id(__),IntType),param(Id(_),ArrayType(57575,ArrayType(1,ArrayType(8,IntType))))],Block([Call(FieldAccess(Id(_),Id($7)),Id(_6),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 28))

    def test_29(self):
        line = '''Class _:_{Destructor (){} }Class U_{Var _:_;Val $_,_,$U,$0,_,$0,M:Array [Boolean ,05];_(__:Boolean ;S:G;CL_,_,s59,_v9,_6,_:Array [Array [Boolean ,074],0x81_F_7];_,_,n___Z,_7:Array [Array [Boolean ,0b10],0X3]){Break ;}_5a5_(_,RO_:Array [String ,04];_82_,l,_7:W){Val qA:_6;Break ;} }Class _2f:k{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(U_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(5,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(5,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($U),ArrayType(5,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(5,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(5,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(5,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(M),ArrayType(5,BoolType),None)),MethodDecl(Id(_),Instance,[param(Id(__),BoolType),param(Id(S),ClassType(Id(G))),param(Id(CL_),ArrayType(33271,ArrayType(60,BoolType))),param(Id(_),ArrayType(33271,ArrayType(60,BoolType))),param(Id(s59),ArrayType(33271,ArrayType(60,BoolType))),param(Id(_v9),ArrayType(33271,ArrayType(60,BoolType))),param(Id(_6),ArrayType(33271,ArrayType(60,BoolType))),param(Id(_),ArrayType(33271,ArrayType(60,BoolType))),param(Id(_),ArrayType(3,ArrayType(2,BoolType))),param(Id(_),ArrayType(3,ArrayType(2,BoolType))),param(Id(n___Z),ArrayType(3,ArrayType(2,BoolType))),param(Id(_7),ArrayType(3,ArrayType(2,BoolType)))],Block([Break])),MethodDecl(Id(_5a5_),Instance,[param(Id(_),ArrayType(4,StringType)),param(Id(RO_),ArrayType(4,StringType)),param(Id(_82_),ClassType(Id(W))),param(Id(l),ClassType(Id(W))),param(Id(_7),ClassType(Id(W)))],Block([ConstDecl(Id(qA),ClassType(Id(_6)),NullLiteral()),Break]))]),ClassDecl(Id(_2f),Id(k),[])])'''
        self.assertTrue(TestAST.test(line, expect, 29))

    def test_30(self):
        line = '''Class ___:Z{}Class f8:G{Destructor (){}Var E8,$_,$6Y9,_:d2;Constructor (){ {Continue ;} }w(__:Boolean ;_:Float ){Break ;} }Class _37_{Val k_,$Cl__zhR_:_8;}Class _{}Class _0{}'''
        expect = '''Program([ClassDecl(Id(___),Id(Z),[]),ClassDecl(Id(f8),Id(G),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(E8),ClassType(Id(d2)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(d2)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6Y9),ClassType(Id(d2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(d2)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Block([Continue])])),MethodDecl(Id(w),Instance,[param(Id(__),BoolType),param(Id(_),FloatType)],Block([Break]))]),ClassDecl(Id(_37_),[AttributeDecl(Instance,ConstDecl(Id(k_),ClassType(Id(_8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($Cl__zhR_),ClassType(Id(_8)),NullLiteral()))]),ClassDecl(Id(_),[]),ClassDecl(Id(_0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 30))

    def test_31(self):
        line = '''Class K3:W{Constructor (J:String ;_,v_,_:Boolean ){New _T1().__();} }Class X:r{Constructor (_m7__,_U6,_,EL_,_,wA:_9;a1_T,k9,fZvH:Array [Array [Array [String ,0x30],75],0B1];_,zU:String ;_:String ){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(K3),Id(W),[MethodDecl(Id(Constructor),Instance,[param(Id(J),StringType),param(Id(_),BoolType),param(Id(v_),BoolType),param(Id(_),BoolType)],Block([Call(NewExpr(Id(_T1),[]),Id(__),[])]))]),ClassDecl(Id(X),Id(r),[MethodDecl(Id(Constructor),Instance,[param(Id(_m7__),ClassType(Id(_9))),param(Id(_U6),ClassType(Id(_9))),param(Id(_),ClassType(Id(_9))),param(Id(EL_),ClassType(Id(_9))),param(Id(_),ClassType(Id(_9))),param(Id(wA),ClassType(Id(_9))),param(Id(a1_T),ArrayType(1,ArrayType(75,ArrayType(48,StringType)))),param(Id(k9),ArrayType(1,ArrayType(75,ArrayType(48,StringType)))),param(Id(fZvH),ArrayType(1,ArrayType(75,ArrayType(48,StringType)))),param(Id(_),StringType),param(Id(zU),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 31))

    def test_32(self):
        line = '''Class _B{Var d,$0,E_9,Su,V3:Array [Array [Array [Array [String ,0b1010111],02],0x57],98];Var $_:Array [Boolean ,06_65_1];}Class _4:o{$Y(_1q1:_;___:A;U__6t:Array [Boolean ,0x57];_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_B),[AttributeDecl(Instance,VarDecl(Id(d),ArrayType(98,ArrayType(87,ArrayType(2,ArrayType(87,StringType)))))),AttributeDecl(Static,VarDecl(Id($0),ArrayType(98,ArrayType(87,ArrayType(2,ArrayType(87,StringType)))))),AttributeDecl(Instance,VarDecl(Id(E_9),ArrayType(98,ArrayType(87,ArrayType(2,ArrayType(87,StringType)))))),AttributeDecl(Instance,VarDecl(Id(Su),ArrayType(98,ArrayType(87,ArrayType(2,ArrayType(87,StringType)))))),AttributeDecl(Instance,VarDecl(Id(V3),ArrayType(98,ArrayType(87,ArrayType(2,ArrayType(87,StringType)))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3497,BoolType)))]),ClassDecl(Id(_4),Id(o),[MethodDecl(Id($Y),Static,[param(Id(_1q1),ClassType(Id(_))),param(Id(___),ClassType(Id(A))),param(Id(U__6t),ArrayType(87,BoolType)),param(Id(_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 32))

    def test_33(self):
        line = '''Class _{}Class _i:J_{Var I:Int ;}Class _9_Y:N{}Class f9:c_{$vw(){}Constructor (_9,u__,_LJ:Array [Array [Array [Boolean ,0X5B_55],0X2D],21];n_:Array [String ,0b1010010];Op,__,_O:_3kID3_){}$o(_:_;_,_,_C:Array [String ,21];_9_,z:Array [String ,0b1_1]){} }Class m__{Destructor (){} }Class _t{}Class xGu6:b{Var $N_,$_V:Float ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_i),Id(J_),[AttributeDecl(Instance,VarDecl(Id(I),IntType))]),ClassDecl(Id(_9_Y),Id(N),[]),ClassDecl(Id(f9),Id(c_),[MethodDecl(Id($vw),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_9),ArrayType(21,ArrayType(45,ArrayType(23381,BoolType)))),param(Id(u__),ArrayType(21,ArrayType(45,ArrayType(23381,BoolType)))),param(Id(_LJ),ArrayType(21,ArrayType(45,ArrayType(23381,BoolType)))),param(Id(n_),ArrayType(82,StringType)),param(Id(Op),ClassType(Id(_3kID3_))),param(Id(__),ClassType(Id(_3kID3_))),param(Id(_O),ClassType(Id(_3kID3_)))],Block([])),MethodDecl(Id($o),Static,[param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(21,StringType)),param(Id(_),ArrayType(21,StringType)),param(Id(_C),ArrayType(21,StringType)),param(Id(_9_),ArrayType(3,StringType)),param(Id(z),ArrayType(3,StringType))],Block([]))]),ClassDecl(Id(m__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_t),[]),ClassDecl(Id(xGu6),Id(b),[AttributeDecl(Static,VarDecl(Id($N_),FloatType)),AttributeDecl(Static,VarDecl(Id($_V),FloatType)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 33))

    def test_34(self):
        line = '''Class J8YV3{Destructor (){}Val _R:Boolean ;Constructor (uk,_1_,F,n,__,_8,_:_;b:K;E:Array [Array [Array [Array [Array [Array [Array [Array [String ,03],07],0XE_49_D_E_B_F],47],0B1],0B1100001],0b1_000],0111]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(J8YV3),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_R),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(uk),ClassType(Id(_))),param(Id(_1_),ClassType(Id(_))),param(Id(F),ClassType(Id(_))),param(Id(n),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(_8),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(b),ClassType(Id(K))),param(Id(E),ArrayType(73,ArrayType(8,ArrayType(97,ArrayType(1,ArrayType(47,ArrayType(239722175,ArrayType(7,ArrayType(3,StringType)))))))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 34))

    def test_35(self):
        line = '''Class _b{Constructor (_2_:Float ;__:k;_41:Array [Array [Float ,06],2];_,l,W1:_){}Val I9Z,$h,$T:Array [Array [Float ,0X8_F],0b1011010];}Class h_A___{}Class y1{}Class Ex2_:K{}'''
        expect = '''Program([ClassDecl(Id(_b),[MethodDecl(Id(Constructor),Instance,[param(Id(_2_),FloatType),param(Id(__),ClassType(Id(k))),param(Id(_41),ArrayType(2,ArrayType(6,FloatType))),param(Id(_),ClassType(Id(_))),param(Id(l),ClassType(Id(_))),param(Id(W1),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(I9Z),ArrayType(90,ArrayType(143,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($h),ArrayType(90,ArrayType(143,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($T),ArrayType(90,ArrayType(143,FloatType)),None))]),ClassDecl(Id(h_A___),[]),ClassDecl(Id(y1),[]),ClassDecl(Id(Ex2_),Id(K),[])])'''
        self.assertTrue(TestAST.test(line, expect, 35))

    def test_36(self):
        line = '''Class w_:__{}Class H5_:__{Destructor (){}Constructor (S_M,_A:Array [Array [Boolean ,063],07_0];_,_6:Float ;d6:_;_,_HZ,E,_,g,U_,_:Array [String ,0X1]){Break ;}Var x7,$3_:Array [Float ,15];}'''
        expect = '''Program([ClassDecl(Id(w_),Id(__),[]),ClassDecl(Id(H5_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(S_M),ArrayType(56,ArrayType(51,BoolType))),param(Id(_A),ArrayType(56,ArrayType(51,BoolType))),param(Id(_),FloatType),param(Id(_6),FloatType),param(Id(d6),ClassType(Id(_))),param(Id(_),ArrayType(1,StringType)),param(Id(_HZ),ArrayType(1,StringType)),param(Id(E),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(g),ArrayType(1,StringType)),param(Id(U_),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType))],Block([Break])),AttributeDecl(Instance,VarDecl(Id(x7),ArrayType(15,FloatType))),AttributeDecl(Static,VarDecl(Id($3_),ArrayType(15,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 36))

    def test_37(self):
        line = '''Class _:z9{Val $__4:_;}Class i_{Destructor (){Val DS_,_:Array [Array [Boolean ,94],0X1_4];} }Class u:u{Destructor (){}Val $i:Float ;Constructor (){}Var c2pc_:_;}Class v{}'''
        expect = '''Program([ClassDecl(Id(_),Id(z9),[AttributeDecl(Static,ConstDecl(Id($__4),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(i_),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(DS_),ArrayType(20,ArrayType(94,BoolType)),None),ConstDecl(Id(_),ArrayType(20,ArrayType(94,BoolType)),None)]))]),ClassDecl(Id(u),Id(u),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($i),FloatType,None)),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(c2pc_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(v),[])])'''
        self.assertTrue(TestAST.test(line, expect, 37))

    def test_38(self):
        line = '''Class B:I{$353(I__,Jr:Boolean ;E:Array [Array [Array [Boolean ,56],2],041];_:Array [Array [Array [Float ,06_0],56],7]){} }Class H_x_J{Constructor (){Continue ;{} }$30VF2(){}Val J,$_:_24;}Class H:c_{Val $X_48:String ;}'''
        expect = '''Program([ClassDecl(Id(B),Id(I),[MethodDecl(Id($353),Static,[param(Id(I__),BoolType),param(Id(Jr),BoolType),param(Id(E),ArrayType(33,ArrayType(2,ArrayType(56,BoolType)))),param(Id(_),ArrayType(7,ArrayType(56,ArrayType(48,FloatType))))],Block([]))]),ClassDecl(Id(H_x_J),[MethodDecl(Id(Constructor),Instance,[],Block([Continue,Block([])])),MethodDecl(Id($30VF2),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(J),ClassType(Id(_24)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_24)),NullLiteral()))]),ClassDecl(Id(H),Id(c_),[AttributeDecl(Static,ConstDecl(Id($X_48),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 38))

    def test_39(self):
        line = '''Class l:Q{$US(__,_,e7,_:Float ;f:_;_4,Mh:String ;_9f_:Boolean ;z:_Xw){}Var X:w__;}Class _{$x_(V2_,___T:Array [Array [Boolean ,0b10110],0X38];w_,__,_:_e;cIew:Float ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(l),Id(Q),[MethodDecl(Id($US),Static,[param(Id(__),FloatType),param(Id(_),FloatType),param(Id(e7),FloatType),param(Id(_),FloatType),param(Id(f),ClassType(Id(_))),param(Id(_4),StringType),param(Id(Mh),StringType),param(Id(_9f_),BoolType),param(Id(z),ClassType(Id(_Xw)))],Block([])),AttributeDecl(Instance,VarDecl(Id(X),ClassType(Id(w__)),NullLiteral()))]),ClassDecl(Id(_),[MethodDecl(Id($x_),Static,[param(Id(V2_),ArrayType(56,ArrayType(22,BoolType))),param(Id(___T),ArrayType(56,ArrayType(22,BoolType))),param(Id(w_),ClassType(Id(_e))),param(Id(__),ClassType(Id(_e))),param(Id(_),ClassType(Id(_e))),param(Id(cIew),FloatType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 39))

    def test_40(self):
        line = '''Class FW{Constructor (_,B:Float ;h_4_1:_w;w_:_;p__,_:z){}Constructor (Z,_3IC,_,_ov,B,G:Array [Array [Boolean ,0x61],0B1011];d,_:Array [Array [Array [Array [String ,0b100111],0xAD],0x61],0b10]){} }Class _2{}'''
        expect = '''Program([ClassDecl(Id(FW),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(B),FloatType),param(Id(h_4_1),ClassType(Id(_w))),param(Id(w_),ClassType(Id(_))),param(Id(p__),ClassType(Id(z))),param(Id(_),ClassType(Id(z)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Z),ArrayType(11,ArrayType(97,BoolType))),param(Id(_3IC),ArrayType(11,ArrayType(97,BoolType))),param(Id(_),ArrayType(11,ArrayType(97,BoolType))),param(Id(_ov),ArrayType(11,ArrayType(97,BoolType))),param(Id(B),ArrayType(11,ArrayType(97,BoolType))),param(Id(G),ArrayType(11,ArrayType(97,BoolType))),param(Id(d),ArrayType(2,ArrayType(97,ArrayType(173,ArrayType(39,StringType))))),param(Id(_),ArrayType(2,ArrayType(97,ArrayType(173,ArrayType(39,StringType)))))],Block([]))]),ClassDecl(Id(_2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 40))

    def test_41(self):
        line = '''Class m_q{}Class q18:k1Q_3{Val _,$_r:String ;Val _7__:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,6],8],0B1_1],0X2B8],6],0X5D],6],2_6];Val _,$9_,$_2,_:_dT4;Constructor (){Continue ;} }Class e_{}Class _:L1{Var $y:T;}Class S{Constructor (_:_){} }Class _1{}Class _6:_{Destructor (){} }Class _:b0{}'''
        expect = '''Program([ClassDecl(Id(m_q),[]),ClassDecl(Id(q18),Id(k1Q_3),[AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_r),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_7__),ArrayType(26,ArrayType(6,ArrayType(93,ArrayType(6,ArrayType(696,ArrayType(3,ArrayType(8,ArrayType(6,BoolType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_dT4)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9_),ClassType(Id(_dT4)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_2),ClassType(Id(_dT4)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_dT4)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))]),ClassDecl(Id(e_),[]),ClassDecl(Id(_),Id(L1),[AttributeDecl(Static,VarDecl(Id($y),ClassType(Id(T)),NullLiteral()))]),ClassDecl(Id(S),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_1),[]),ClassDecl(Id(_6),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(b0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 41))

    def test_42(self):
        line = '''Class g_:_{Constructor (__m2f:Array [Array [Float ,9_1_3],052]){}Constructor (q_:Array [Boolean ,0X56];__:F_;Y:Array [Array [Array [Boolean ,0B100],07],06];_,_N,F:_){} }Class ot:ZJS_qH{}Class v_:v14{}Class Y:_{}'''
        expect = '''Program([ClassDecl(Id(g_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__m2f),ArrayType(42,ArrayType(913,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(q_),ArrayType(86,BoolType)),param(Id(__),ClassType(Id(F_))),param(Id(Y),ArrayType(6,ArrayType(7,ArrayType(4,BoolType)))),param(Id(_),ClassType(Id(_))),param(Id(_N),ClassType(Id(_))),param(Id(F),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(ot),Id(ZJS_qH),[]),ClassDecl(Id(v_),Id(v14),[]),ClassDecl(Id(Y),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 42))

    def test_43(self):
        line = '''Class _8{Val $7L,$E2,_2r_a:Array [Array [Boolean ,6_5_6_1_7],01_4_5_022];}Class _{Var $3,$Y_l:Array [Boolean ,0B11_0];}Class e_{}Class _Q_:_{Destructor (){} }Class _O_{$H_(){} }Class __:g{__(_b_,__5:_;X__,F2___4:Zq){} }'''
        expect = '''Program([ClassDecl(Id(_8),[AttributeDecl(Static,ConstDecl(Id($7L),ArrayType(51730,ArrayType(65617,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($E2),ArrayType(51730,ArrayType(65617,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_2r_a),ArrayType(51730,ArrayType(65617,BoolType)),None))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($3),ArrayType(6,BoolType))),AttributeDecl(Static,VarDecl(Id($Y_l),ArrayType(6,BoolType)))]),ClassDecl(Id(e_),[]),ClassDecl(Id(_Q_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_O_),[MethodDecl(Id($H_),Static,[],Block([]))]),ClassDecl(Id(__),Id(g),[MethodDecl(Id(__),Instance,[param(Id(_b_),ClassType(Id(_))),param(Id(__5),ClassType(Id(_))),param(Id(X__),ClassType(Id(Zq))),param(Id(F2___4),ClassType(Id(Zq)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 43))

    def test_44(self):
        line = '''Class _0{$R(Jb,U_:_){Break ;Continue ;}Constructor (s,_:Array [Array [Array [Array [Float ,041],30],0X10_B5],0B101101];_F:m;__4bwH,k,_H_:__){Break ;}Var $99_,i__,$I_:Array [Array [Int ,0x5],7_82_9_9_10_9_1_1_3];}'''
        expect = '''Program([ClassDecl(Id(_0),[MethodDecl(Id($R),Static,[param(Id(Jb),ClassType(Id(_))),param(Id(U_),ClassType(Id(_)))],Block([Break,Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(s),ArrayType(45,ArrayType(4277,ArrayType(30,ArrayType(33,FloatType))))),param(Id(_),ArrayType(45,ArrayType(4277,ArrayType(30,ArrayType(33,FloatType))))),param(Id(_F),ClassType(Id(m))),param(Id(__4bwH),ClassType(Id(__))),param(Id(k),ClassType(Id(__))),param(Id(_H_),ClassType(Id(__)))],Block([Break])),AttributeDecl(Static,VarDecl(Id($99_),ArrayType(78299109113,ArrayType(5,IntType)))),AttributeDecl(Instance,VarDecl(Id(i__),ArrayType(78299109113,ArrayType(5,IntType)))),AttributeDecl(Static,VarDecl(Id($I_),ArrayType(78299109113,ArrayType(5,IntType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 44))

    def test_45(self):
        line = '''Class _6{Destructor (){}Var $58RK:Int ;Val _WS,g:Array [Array [String ,0B1010000],0XC_1_C_9];}Class f{Constructor (ON,_:_;_2:Array [Array [Array [Int ,0114],0114],67]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_6),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($58RK),IntType)),AttributeDecl(Instance,ConstDecl(Id(_WS),ArrayType(49609,ArrayType(80,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(g),ArrayType(49609,ArrayType(80,StringType)),None))]),ClassDecl(Id(f),[MethodDecl(Id(Constructor),Instance,[param(Id(ON),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_2),ArrayType(67,ArrayType(76,ArrayType(76,IntType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 45))

    def test_46(self):
        line = '''Class l:_{}Class _V:w_{Val $6,$48_:Array [Array [Array [Array [Float ,0X9B_8F],0xA],0B1000010],01];Var $2_:Array [String ,0B1];Var $6:Array [Array [Array [Array [Int ,93],47],0X4],7];$I1e(){}__Sl(L3:Array [Array [Array [String ,0112],414],06];_:_;r_,g,C:Float ){} }Class l{}Class C:_02R{}'''
        expect = '''Program([ClassDecl(Id(l),Id(_),[]),ClassDecl(Id(_V),Id(w_),[AttributeDecl(Static,ConstDecl(Id($6),ArrayType(1,ArrayType(66,ArrayType(10,ArrayType(39823,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($48_),ArrayType(1,ArrayType(66,ArrayType(10,ArrayType(39823,FloatType)))),None)),AttributeDecl(Static,VarDecl(Id($2_),ArrayType(1,StringType))),AttributeDecl(Static,VarDecl(Id($6),ArrayType(7,ArrayType(4,ArrayType(47,ArrayType(93,IntType)))))),MethodDecl(Id($I1e),Static,[],Block([])),MethodDecl(Id(__Sl),Instance,[param(Id(L3),ArrayType(6,ArrayType(414,ArrayType(74,StringType)))),param(Id(_),ClassType(Id(_))),param(Id(r_),FloatType),param(Id(g),FloatType),param(Id(C),FloatType)],Block([]))]),ClassDecl(Id(l),[]),ClassDecl(Id(C),Id(_02R),[])])'''
        self.assertTrue(TestAST.test(line, expect, 46))

    def test_47(self):
        line = '''Class _:_15{o(_IJ:Int ;E:Array [Boolean ,0B10];U,XL:Boolean ){}Destructor (){ {} }Val $Y2_:k;Constructor (e_4_3:Array [Array [Array [Float ,8],03],07];_S:w_8;_2:Array [Int ,91]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_15),[MethodDecl(Id(o),Instance,[param(Id(_IJ),IntType),param(Id(E),ArrayType(2,BoolType)),param(Id(U),BoolType),param(Id(XL),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($Y2_),ClassType(Id(k)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(e_4_3),ArrayType(7,ArrayType(3,ArrayType(8,FloatType)))),param(Id(_S),ClassType(Id(w_8))),param(Id(_2),ArrayType(91,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 47))

    def test_48(self):
        line = '''Class __P_{}Class v5Y2K_{Val $__,$_8,$__z:Boolean ;}Class _a:_{Constructor (J3i2,K:_9;_:C){}Val $_,$__,$t_:String ;Constructor (_gF4k,_x:Array [Array [Float ,6_6_4_68],1_5]){Break ;} }Class _:Z{Val _,_,t,__76,$8,o:String ;}Class __:vE{}Class _{}Class x__0:_J9B{}Class _:_{}Class Ce:Bg__3{}'''
        expect = '''Program([ClassDecl(Id(__P_),[]),ClassDecl(Id(v5Y2K_),[AttributeDecl(Static,ConstDecl(Id($__),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_8),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($__z),BoolType,None))]),ClassDecl(Id(_a),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(J3i2),ClassType(Id(_9))),param(Id(K),ClassType(Id(_9))),param(Id(_),ClassType(Id(C)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($__),StringType,None)),AttributeDecl(Static,ConstDecl(Id($t_),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_gF4k),ArrayType(15,ArrayType(66468,FloatType))),param(Id(_x),ArrayType(15,ArrayType(66468,FloatType)))],Block([Break]))]),ClassDecl(Id(_),Id(Z),[AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(t),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(__76),StringType,None)),AttributeDecl(Static,ConstDecl(Id($8),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(o),StringType,None))]),ClassDecl(Id(__),Id(vE),[]),ClassDecl(Id(_),[]),ClassDecl(Id(x__0),Id(_J9B),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(Ce),Id(Bg__3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 48))

    def test_49(self):
        line = '''Class __:_{_(cv:Array [Array [Array [Array [String ,3],0127],0x5],06623_4];__,o,__h2:String ){}$s29(W_Eo:Array [Array [Boolean ,0B1],0127];p:A_3_;_:Int ;_,_32,_,_6n,_,C_:Array [Int ,0B111101]){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[MethodDecl(Id(_),Instance,[param(Id(cv),ArrayType(27804,ArrayType(5,ArrayType(87,ArrayType(3,StringType))))),param(Id(__),StringType),param(Id(o),StringType),param(Id(__h2),StringType)],Block([])),MethodDecl(Id($s29),Static,[param(Id(W_Eo),ArrayType(87,ArrayType(1,BoolType))),param(Id(p),ClassType(Id(A_3_))),param(Id(_),IntType),param(Id(_),ArrayType(61,IntType)),param(Id(_32),ArrayType(61,IntType)),param(Id(_),ArrayType(61,IntType)),param(Id(_6n),ArrayType(61,IntType)),param(Id(_),ArrayType(61,IntType)),param(Id(C_),ArrayType(61,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 49))

    def test_50(self):
        line = '''Class _5{$4(_____,hL68,__,_,i,_:Float ;_4,_00_1_,y,n2,_fo,F_7,E:__;__:_){}Val _:Array [Array [String ,0106],580_85_73];}Class ct7{}Class _0:P26_4_{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_5),[MethodDecl(Id($4),Static,[param(Id(_____),FloatType),param(Id(hL68),FloatType),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(i),FloatType),param(Id(_),FloatType),param(Id(_4),ClassType(Id(__))),param(Id(_00_1_),ClassType(Id(__))),param(Id(y),ClassType(Id(__))),param(Id(n2),ClassType(Id(__))),param(Id(_fo),ClassType(Id(__))),param(Id(F_7),ClassType(Id(__))),param(Id(E),ClassType(Id(__))),param(Id(__),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(5808573,ArrayType(70,StringType)),None))]),ClassDecl(Id(ct7),[]),ClassDecl(Id(_0),Id(P26_4_),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 50))

    def test_51(self):
        line = '''Class _{B(){} }Class _Xu_:__3{Constructor (gs_,z:_gs;JpI:Array [Array [Array [Array [Array [Array [Float ,0x6],9],037],037],30],7_8_7_6];b,_,dHI,_Z,md35:Array [String ,0B1001100];M__,x:q4){Break ;{} }}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(B),Instance,[],Block([]))]),ClassDecl(Id(_Xu_),Id(__3),[MethodDecl(Id(Constructor),Instance,[param(Id(gs_),ClassType(Id(_gs))),param(Id(z),ClassType(Id(_gs))),param(Id(JpI),ArrayType(7876,ArrayType(30,ArrayType(31,ArrayType(31,ArrayType(9,ArrayType(6,FloatType))))))),param(Id(b),ArrayType(76,StringType)),param(Id(_),ArrayType(76,StringType)),param(Id(dHI),ArrayType(76,StringType)),param(Id(_Z),ArrayType(76,StringType)),param(Id(md35),ArrayType(76,StringType)),param(Id(M__),ClassType(Id(q4))),param(Id(x),ClassType(Id(q4)))],Block([Break,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 51))

    def test_52(self):
        line = '''Class t__J_{Constructor (a,x_1,_0:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0X6_E],0xC],0b100101],0X42],0b11_10],0xBE],023],017],9],0b100101];C:_){Continue ;} }Class h:I0{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(t__J_),[MethodDecl(Id(Constructor),Instance,[param(Id(a),ArrayType(37,ArrayType(9,ArrayType(15,ArrayType(19,ArrayType(190,ArrayType(14,ArrayType(66,ArrayType(37,ArrayType(12,ArrayType(110,StringType))))))))))),param(Id(x_1),ArrayType(37,ArrayType(9,ArrayType(15,ArrayType(19,ArrayType(190,ArrayType(14,ArrayType(66,ArrayType(37,ArrayType(12,ArrayType(110,StringType))))))))))),param(Id(_0),ArrayType(37,ArrayType(9,ArrayType(15,ArrayType(19,ArrayType(190,ArrayType(14,ArrayType(66,ArrayType(37,ArrayType(12,ArrayType(110,StringType))))))))))),param(Id(C),ClassType(Id(_)))],Block([Continue]))]),ClassDecl(Id(h),Id(I0),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 52))

    def test_53(self):
        line = '''Class K{Var _:Array [Boolean ,3];}Class _{Val $_:Array [Array [Array [Array [Int ,01_5],0106],0X8_3_0],0106];hn(_,_,M6:String ){Break ;Return ;0x0.N5.__._();}Val _:String ;}'''
        expect = '''Program([ClassDecl(Id(K),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,BoolType)))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(70,ArrayType(2096,ArrayType(70,ArrayType(13,IntType)))),None)),MethodDecl(Id(hn),Instance,[param(Id(_),StringType),param(Id(_),StringType),param(Id(M6),StringType)],Block([Break,Return(),Call(FieldAccess(FieldAccess(IntLit(0),Id(N5)),Id(__)),Id(_),[])])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 53))

    def test_54(self):
        line = '''Class __:y{}Class o__23c{Constructor (){}Constructor (){}Val $J4,_1_m:Array [Boolean ,0XF];Constructor (Q:Array [Array [Array [Boolean ,037],0x64],9];_,_Y_6:M;_,K__,c1_:_){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(y),[]),ClassDecl(Id(o__23c),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($J4),ArrayType(15,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_1_m),ArrayType(15,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(Q),ArrayType(9,ArrayType(100,ArrayType(31,BoolType)))),param(Id(_),ClassType(Id(M))),param(Id(_Y_6),ClassType(Id(M))),param(Id(_),ClassType(Id(_))),param(Id(K__),ClassType(Id(_))),param(Id(c1_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 54))

    def test_55(self):
        line = '''Class _:oC{}Class va_:_{}Class _JV9_:h3{}Class _:_{Destructor (){Val _7,_t,_:Float ;Return ;} }Class __2_{Destructor (){Var W2K,_:Array [Array [Boolean ,0X8],0X5B];{Continue ;} }}'''
        expect = '''Program([ClassDecl(Id(_),Id(oC),[]),ClassDecl(Id(va_),Id(_),[]),ClassDecl(Id(_JV9_),Id(h3),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_7),FloatType,None),ConstDecl(Id(_t),FloatType,None),ConstDecl(Id(_),FloatType,None),Return()]))]),ClassDecl(Id(__2_),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(W2K),ArrayType(91,ArrayType(8,BoolType))),VarDecl(Id(_),ArrayType(91,ArrayType(8,BoolType))),Block([Continue])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 55))

    def test_56(self):
        line = '''Class NhAm:_{Var t_:String ;Constructor (y:_1tr;_8f:Array [Array [Float ,0b100000],0x2];E,E9_,_:String ;v,ym_k:Array [Int ,0B10001];Y,_:Array [Array [Array [Boolean ,84],0B10001],06_7]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(NhAm),Id(_),[AttributeDecl(Instance,VarDecl(Id(t_),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(y),ClassType(Id(_1tr))),param(Id(_8f),ArrayType(2,ArrayType(32,FloatType))),param(Id(E),StringType),param(Id(E9_),StringType),param(Id(_),StringType),param(Id(v),ArrayType(17,IntType)),param(Id(ym_k),ArrayType(17,IntType)),param(Id(Y),ArrayType(55,ArrayType(17,ArrayType(84,BoolType)))),param(Id(_),ArrayType(55,ArrayType(17,ArrayType(84,BoolType))))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 56))

    def test_57(self):
        line = '''Class _5{}Class _2{}Class _3U{Val _1,$q__0_D0_2,g:Float ;Constructor (_,Wx:___n;N_83l:Array [Boolean ,0b1011001];m7:Int ;i:_U;ES4O,_b__E,cx,_4:Boolean ;i,h:Array [Array [Boolean ,054],054]){Break ;}Constructor (){}Val __6E,$0:_;}'''
        expect = '''Program([ClassDecl(Id(_5),[]),ClassDecl(Id(_2),[]),ClassDecl(Id(_3U),[AttributeDecl(Instance,ConstDecl(Id(_1),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($q__0_D0_2),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(g),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(___n))),param(Id(Wx),ClassType(Id(___n))),param(Id(N_83l),ArrayType(89,BoolType)),param(Id(m7),IntType),param(Id(i),ClassType(Id(_U))),param(Id(ES4O),BoolType),param(Id(_b__E),BoolType),param(Id(cx),BoolType),param(Id(_4),BoolType),param(Id(i),ArrayType(44,ArrayType(44,BoolType))),param(Id(h),ArrayType(44,ArrayType(44,BoolType)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(__6E),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 57))

    def test_58(self):
        line = '''Class f:k__{Var $__,$_,p4,$Q39:Boolean ;}Class ___:y2{}Class _y_0:__8{Var n,s_6I9,_,$m__:Int ;Constructor (__z:Int ;_:Boolean ;hz:Array [Array [Boolean ,0b1100010],024];o,_y,__,lx:b){Return ;} }Class _{Var _:String ;}'''
        expect = '''Program([ClassDecl(Id(f),Id(k__),[AttributeDecl(Static,VarDecl(Id($__),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(p4),BoolType)),AttributeDecl(Static,VarDecl(Id($Q39),BoolType))]),ClassDecl(Id(___),Id(y2),[]),ClassDecl(Id(_y_0),Id(__8),[AttributeDecl(Instance,VarDecl(Id(n),IntType)),AttributeDecl(Instance,VarDecl(Id(s_6I9),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($m__),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(__z),IntType),param(Id(_),BoolType),param(Id(hz),ArrayType(20,ArrayType(98,BoolType))),param(Id(o),ClassType(Id(b))),param(Id(_y),ClassType(Id(b))),param(Id(__),ClassType(Id(b))),param(Id(lx),ClassType(Id(b)))],Block([Return()]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 58))

    def test_59(self):
        line = '''Class _:_{k_(__:Int ;V3_:Int ;e_,___5ty,f5:Boolean ;N8Et,_,_164,G:_K__){New _I().d();}Val W,_:Array [Array [Array [Array [Array [Int ,81],060],81],044],0X63];Val $_i,$_:_;Constructor (_:__6){} }Class _{Var $8___:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(k_),Instance,[param(Id(__),IntType),param(Id(V3_),IntType),param(Id(e_),BoolType),param(Id(___5ty),BoolType),param(Id(f5),BoolType),param(Id(N8Et),ClassType(Id(_K__))),param(Id(_),ClassType(Id(_K__))),param(Id(_164),ClassType(Id(_K__))),param(Id(G),ClassType(Id(_K__)))],Block([Call(NewExpr(Id(_I),[]),Id(d),[])])),AttributeDecl(Instance,ConstDecl(Id(W),ArrayType(99,ArrayType(36,ArrayType(81,ArrayType(48,ArrayType(81,IntType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(99,ArrayType(36,ArrayType(81,ArrayType(48,ArrayType(81,IntType))))),None)),AttributeDecl(Static,ConstDecl(Id($_i),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__6)))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($8___),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 59))

    def test_60(self):
        line = '''Class r{}Class _:_584_6{}Class n03{}Class _{}Class h{}Class _T:j{Destructor (){}Val __330:Int ;$_E(_x1:Boolean ;U,Ijxn2,W:Boolean ;i_:String ){Return ;}Var _D:Array [String ,0500];}Class _{}'''
        expect = '''Program([ClassDecl(Id(r),[]),ClassDecl(Id(_),Id(_584_6),[]),ClassDecl(Id(n03),[]),ClassDecl(Id(_),[]),ClassDecl(Id(h),[]),ClassDecl(Id(_T),Id(j),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(__330),IntType,None)),MethodDecl(Id($_E),Static,[param(Id(_x1),BoolType),param(Id(U),BoolType),param(Id(Ijxn2),BoolType),param(Id(W),BoolType),param(Id(i_),StringType)],Block([Return()])),AttributeDecl(Instance,VarDecl(Id(_D),ArrayType(320,StringType)))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 60))

    def test_61(self):
        line = '''Class _:_0{}Class _{Destructor (){}$1(_:Array [Array [Array [Array [Boolean ,045],321_0_4_98_7],3],0B10010];_6,_,_,_,_:Array [Array [Array [Array [String ,0B10010],0X39],8],01];m:Array [Array [Array [Array [Int ,0B10010],0b1010010],0b1010010],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_0),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($1),Static,[param(Id(_),ArrayType(18,ArrayType(3,ArrayType(32104987,ArrayType(37,BoolType))))),param(Id(_6),ArrayType(1,ArrayType(8,ArrayType(57,ArrayType(18,StringType))))),param(Id(_),ArrayType(1,ArrayType(8,ArrayType(57,ArrayType(18,StringType))))),param(Id(_),ArrayType(1,ArrayType(8,ArrayType(57,ArrayType(18,StringType))))),param(Id(_),ArrayType(1,ArrayType(8,ArrayType(57,ArrayType(18,StringType))))),param(Id(_),ArrayType(1,ArrayType(8,ArrayType(57,ArrayType(18,StringType))))),param(Id(m),ArrayType(1,ArrayType(82,ArrayType(82,ArrayType(18,IntType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 61))

    def test_62(self):
        line = '''Class eM:RM_{Var _,_:Array [Array [Array [Array [String ,0X39],69],06],0731];Destructor (){} }Class e:_{}Class _:_t{}Class _{}Class _m:_{Destructor (){} }Class _Q08_{Var $4s:Array [String ,0x34];}Class k:S{}'''
        expect = '''Program([ClassDecl(Id(eM),Id(RM_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(473,ArrayType(6,ArrayType(69,ArrayType(57,StringType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(473,ArrayType(6,ArrayType(69,ArrayType(57,StringType)))))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(e),Id(_),[]),ClassDecl(Id(_),Id(_t),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_m),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_Q08_),[AttributeDecl(Static,VarDecl(Id($4s),ArrayType(52,StringType)))]),ClassDecl(Id(k),Id(S),[])])'''
        self.assertTrue(TestAST.test(line, expect, 62))

    def test_63(self):
        line = '''Class _{}Class _87_{Constructor (_:Array [Array [Int ,97],0XB_4_A];_:Float ;zl,Zz:Array [Boolean ,0b1_00_0];_0,u_,j5oGJ:Boolean ;__,_,P:Array [Array [Int ,97],0x18]){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_87_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(2890,ArrayType(97,IntType))),param(Id(_),FloatType),param(Id(zl),ArrayType(8,BoolType)),param(Id(Zz),ArrayType(8,BoolType)),param(Id(_0),BoolType),param(Id(u_),BoolType),param(Id(j5oGJ),BoolType),param(Id(__),ArrayType(24,ArrayType(97,IntType))),param(Id(_),ArrayType(24,ArrayType(97,IntType))),param(Id(P),ArrayType(24,ArrayType(97,IntType)))],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 63))

    def test_64(self):
        line = '''Class _{}Class V{Var $_,_8,f__:Array [Array [Array [String ,0X10],072],0XE];}Class _1R{Destructor (){ {}Continue ;}Var $O:Array [Array [Array [Array [Array [Int ,0b100],072],0x26],5_15_5_0_7],3_0];Val _,$0R,$P:Array [Float ,89];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(V),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(14,ArrayType(58,ArrayType(16,StringType))))),AttributeDecl(Instance,VarDecl(Id(_8),ArrayType(14,ArrayType(58,ArrayType(16,StringType))))),AttributeDecl(Instance,VarDecl(Id(f__),ArrayType(14,ArrayType(58,ArrayType(16,StringType)))))]),ClassDecl(Id(_1R),[MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Continue])),AttributeDecl(Static,VarDecl(Id($O),ArrayType(30,ArrayType(515507,ArrayType(38,ArrayType(58,ArrayType(4,IntType))))))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(89,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($0R),ArrayType(89,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($P),ArrayType(89,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 64))

    def test_65(self):
        line = '''Class gU{Constructor (h,B__:Array [String ,0b1_1_1_00];_:Array [Array [Array [String ,035],0b1001],0b1];_:Array [String ,0x2]){}$_N(_b:Array [Array [Boolean ,2_9_4],04]){Continue ;{} }Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(gU),[MethodDecl(Id(Constructor),Instance,[param(Id(h),ArrayType(28,StringType)),param(Id(B__),ArrayType(28,StringType)),param(Id(_),ArrayType(1,ArrayType(9,ArrayType(29,StringType)))),param(Id(_),ArrayType(2,StringType))],Block([])),MethodDecl(Id($_N),Static,[param(Id(_b),ArrayType(4,ArrayType(294,BoolType)))],Block([Continue,Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 65))

    def test_66(self):
        line = '''Class _9{$__(){}Constructor (){Var t_:Int ;Return ;}$_(_0,_:Array [Boolean ,0XA_0C1_6_4];_,_:String ;_,_M_h:Boolean ;_,kCnD63:n1n;_6,i:Float ;_,c1:Array [Int ,0132]){}$C_4(){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_9),[MethodDecl(Id($__),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(t_),IntType),Return()])),MethodDecl(Id($_),Static,[param(Id(_0),ArrayType(10535268,BoolType)),param(Id(_),ArrayType(10535268,BoolType)),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),BoolType),param(Id(_M_h),BoolType),param(Id(_),ClassType(Id(n1n))),param(Id(kCnD63),ClassType(Id(n1n))),param(Id(_6),FloatType),param(Id(i),FloatType),param(Id(_),ArrayType(90,IntType)),param(Id(c1),ArrayType(90,IntType))],Block([])),MethodDecl(Id($C_4),Static,[],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 66))

    def test_67(self):
        line = '''Class CO:_{$1(RIMQ,d6,__,z:ZEX){}Var $r,_:Array [Array [Array [Array [Array [Boolean ,0b1],017],0x2],0x5],0x12];Val m___5:L__W_;Var _o3:Array [Array [Int ,017],060_3];}Class _:_0_{}Class t{}Class _Ga__{}'''
        expect = '''Program([ClassDecl(Id(CO),Id(_),[MethodDecl(Id($1),Static,[param(Id(RIMQ),ClassType(Id(ZEX))),param(Id(d6),ClassType(Id(ZEX))),param(Id(__),ClassType(Id(ZEX))),param(Id(z),ClassType(Id(ZEX)))],Block([])),AttributeDecl(Static,VarDecl(Id($r),ArrayType(18,ArrayType(5,ArrayType(2,ArrayType(15,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(18,ArrayType(5,ArrayType(2,ArrayType(15,ArrayType(1,BoolType))))))),AttributeDecl(Instance,ConstDecl(Id(m___5),ClassType(Id(L__W_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_o3),ArrayType(387,ArrayType(15,IntType))))]),ClassDecl(Id(_),Id(_0_),[]),ClassDecl(Id(t),[]),ClassDecl(Id(_Ga__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 67))

    def test_68(self):
        line = '''Class F:_{}Class ___:_6{_H(x:Array [Array [Array [String ,0b110000],03],94];_:Array [Array [Array [Int ,94],0312],0x4C];y_8U,_:Int ){}Var _j,$4:_I;$C(J:_5_;X:E__;_:_){}$1(VI9,E,s,m_,___:Float ){} }'''
        expect = '''Program([ClassDecl(Id(F),Id(_),[]),ClassDecl(Id(___),Id(_6),[MethodDecl(Id(_H),Instance,[param(Id(x),ArrayType(94,ArrayType(3,ArrayType(48,StringType)))),param(Id(_),ArrayType(76,ArrayType(202,ArrayType(94,IntType)))),param(Id(y_8U),IntType),param(Id(_),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_j),ClassType(Id(_I)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(_I)),NullLiteral())),MethodDecl(Id($C),Static,[param(Id(J),ClassType(Id(_5_))),param(Id(X),ClassType(Id(E__))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id($1),Static,[param(Id(VI9),FloatType),param(Id(E),FloatType),param(Id(s),FloatType),param(Id(m_),FloatType),param(Id(___),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 68))

    def test_69(self):
        line = '''Class Z:Q7_4{_2_(_,__:Array [Array [Array [Array [Array [Float ,0B1],053],053],064],3];_3:Array [Array [Array [Float ,06],0b1_1],0B1001111];n:Array [Array [Array [Int ,0B1001111],05_2_3_2],0B1001111];e_,YX:Boolean ;L:Array [Array [Float ,053],053];Eo,x,b_,_,_e,i,r:__;_3:Array [Array [Float ,3],0B1001111];L__,g_10:Array [Array [Array [Array [String ,3],053],0x47],677_70]){}Constructor (_2_,n,y,_:String ){} }'''
        expect = '''Program([ClassDecl(Id(Z),Id(Q7_4),[MethodDecl(Id(_2_),Instance,[param(Id(_),ArrayType(3,ArrayType(52,ArrayType(43,ArrayType(43,ArrayType(1,FloatType)))))),param(Id(__),ArrayType(3,ArrayType(52,ArrayType(43,ArrayType(43,ArrayType(1,FloatType)))))),param(Id(_3),ArrayType(79,ArrayType(3,ArrayType(6,FloatType)))),param(Id(n),ArrayType(79,ArrayType(2714,ArrayType(79,IntType)))),param(Id(e_),BoolType),param(Id(YX),BoolType),param(Id(L),ArrayType(43,ArrayType(43,FloatType))),param(Id(Eo),ClassType(Id(__))),param(Id(x),ClassType(Id(__))),param(Id(b_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(_e),ClassType(Id(__))),param(Id(i),ClassType(Id(__))),param(Id(r),ClassType(Id(__))),param(Id(_3),ArrayType(79,ArrayType(3,FloatType))),param(Id(L__),ArrayType(67770,ArrayType(71,ArrayType(43,ArrayType(3,StringType))))),param(Id(g_10),ArrayType(67770,ArrayType(71,ArrayType(43,ArrayType(3,StringType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_2_),StringType),param(Id(n),StringType),param(Id(y),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 69))

    def test_70(self):
        line = '''Class Eq:U_{Var $_Ke_99kO,$S,a,$y0m:A;Constructor (w:Array [Array [Boolean ,0B1001],0B11]){}Val f:Array [Array [Array [Boolean ,0xA],0x2],02];Destructor (){ {} }Val $_6_g:_;}'''
        expect = '''Program([ClassDecl(Id(Eq),Id(U_),[AttributeDecl(Static,VarDecl(Id($_Ke_99kO),ClassType(Id(A)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($S),ClassType(Id(A)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(a),ClassType(Id(A)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($y0m),ClassType(Id(A)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(w),ArrayType(3,ArrayType(9,BoolType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(f),ArrayType(2,ArrayType(2,ArrayType(10,BoolType))),None)),MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($_6_g),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 70))

    def test_71(self):
        line = '''Class O7tM_7:_B_5{Constructor (){pH3::$G1();Break ;}Val _5,$_,ta:String ;Constructor (_7_,_:k;Y,P_,j31,_:Int ;_:_){Var RZ,__:Array [Array [Array [Array [Int ,04],0X1_F_B],0114],0114];} }Class o6:__7{}Class l:_w49{}'''
        expect = '''Program([ClassDecl(Id(O7tM_7),Id(_B_5),[MethodDecl(Id(Constructor),Instance,[],Block([Call(Id(pH3),Id($G1),[]),Break])),AttributeDecl(Instance,ConstDecl(Id(_5),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(ta),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_7_),ClassType(Id(k))),param(Id(_),ClassType(Id(k))),param(Id(Y),IntType),param(Id(P_),IntType),param(Id(j31),IntType),param(Id(_),IntType),param(Id(_),ClassType(Id(_)))],Block([VarDecl(Id(RZ),ArrayType(76,ArrayType(76,ArrayType(507,ArrayType(4,IntType))))),VarDecl(Id(__),ArrayType(76,ArrayType(76,ArrayType(507,ArrayType(4,IntType)))))]))]),ClassDecl(Id(o6),Id(__7),[]),ClassDecl(Id(l),Id(_w49),[])])'''
        self.assertTrue(TestAST.test(line, expect, 71))

    def test_72(self):
        line = '''Class _:_{Constructor (){}Constructor (_:Array [Int ,3];s__,x_,d__:Array [Int ,0xE6]){Val q71_,F:Array [Boolean ,0B1_1_0_1_0];}Destructor (){}Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3,IntType)),param(Id(s__),ArrayType(230,IntType)),param(Id(x_),ArrayType(230,IntType)),param(Id(d__),ArrayType(230,IntType))],Block([ConstDecl(Id(q71_),ArrayType(26,BoolType),None),ConstDecl(Id(F),ArrayType(26,BoolType),None)])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 72))

    def test_73(self):
        line = '''Class A:kB{}Class _{Var iLw:j8l5;Var $3,$_,_:Array [Int ,0b110];}Class _:_3{}Class _9f3:b0Th{___(_:Float ){} }Class f{}Class F6{}Class _Sx:Ig9fG{}Class j{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(A),Id(kB),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(iLw),ClassType(Id(j8l5)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($3),ArrayType(6,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(6,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(6,IntType)))]),ClassDecl(Id(_),Id(_3),[]),ClassDecl(Id(_9f3),Id(b0Th),[MethodDecl(Id(___),Instance,[param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(f),[]),ClassDecl(Id(F6),[]),ClassDecl(Id(_Sx),Id(Ig9fG),[]),ClassDecl(Id(j),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 73))

    def test_74(self):
        line = '''Class _:t{_(Z5:String ;s1,__:k14769;U,T:Array [String ,07];i,Q:Array [Array [Array [Array [Array [Array [Array [Float ,0131],02_2],0131],0X9_2],0131],0131],0B100010];_,_,_:Array [String ,0X8_C6]){}Constructor (){} }Class __:E29{}'''
        expect = '''Program([ClassDecl(Id(_),Id(t),[MethodDecl(Id(_),Instance,[param(Id(Z5),StringType),param(Id(s1),ClassType(Id(k14769))),param(Id(__),ClassType(Id(k14769))),param(Id(U),ArrayType(7,StringType)),param(Id(T),ArrayType(7,StringType)),param(Id(i),ArrayType(34,ArrayType(89,ArrayType(89,ArrayType(146,ArrayType(89,ArrayType(18,ArrayType(89,FloatType)))))))),param(Id(Q),ArrayType(34,ArrayType(89,ArrayType(89,ArrayType(146,ArrayType(89,ArrayType(18,ArrayType(89,FloatType)))))))),param(Id(_),ArrayType(2246,StringType)),param(Id(_),ArrayType(2246,StringType)),param(Id(_),ArrayType(2246,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(E29),[])])'''
        self.assertTrue(TestAST.test(line, expect, 74))

    def test_75(self):
        line = '''Class __:_0_{Constructor (__O,Sq,Q,_k:Array [Array [Float ,0b11001],0xB];o,_w:Array [Array [Array [String ,13],5],0135];_:_;e,A:Array [Array [Array [String ,03_0],0B111],0X4]){A::$E();} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_0_),[MethodDecl(Id(Constructor),Instance,[param(Id(__O),ArrayType(11,ArrayType(25,FloatType))),param(Id(Sq),ArrayType(11,ArrayType(25,FloatType))),param(Id(Q),ArrayType(11,ArrayType(25,FloatType))),param(Id(_k),ArrayType(11,ArrayType(25,FloatType))),param(Id(o),ArrayType(93,ArrayType(5,ArrayType(13,StringType)))),param(Id(_w),ArrayType(93,ArrayType(5,ArrayType(13,StringType)))),param(Id(_),ClassType(Id(_))),param(Id(e),ArrayType(4,ArrayType(7,ArrayType(24,StringType)))),param(Id(A),ArrayType(4,ArrayType(7,ArrayType(24,StringType))))],Block([Call(Id(A),Id($E),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 75))

    def test_76(self):
        line = '''Class _{}Class y:_{Destructor (){}Constructor (_:_T;_R4:Array [Array [Boolean ,4_5_053],0B110]){ {_::$h8._();{} }}Val Z,r,A5a,$W_x:Boolean ;}Class q0:O{_9(){Continue ;} }Class c_{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(y),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_T))),param(Id(_R4),ArrayType(6,ArrayType(45053,BoolType)))],Block([Block([Call(FieldAccess(Id(_),Id($h8)),Id(_),[]),Block([])])])),AttributeDecl(Instance,ConstDecl(Id(Z),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(r),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(A5a),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($W_x),BoolType,None))]),ClassDecl(Id(q0),Id(O),[MethodDecl(Id(_9),Instance,[],Block([Continue]))]),ClassDecl(Id(c_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 76))

    def test_77(self):
        line = '''Class M6_:_{Constructor (_2,_,m:Array [Array [Array [Array [Int ,0B1001000],01],0x54],0B1001000];_6:Int ;_:Array [Array [Boolean ,0b1000111],0xE];_:_8Q_3){Break ;}Destructor (){f_74_::$_1();Var S:__9_;} }'''
        expect = '''Program([ClassDecl(Id(M6_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_2),ArrayType(72,ArrayType(84,ArrayType(1,ArrayType(72,IntType))))),param(Id(_),ArrayType(72,ArrayType(84,ArrayType(1,ArrayType(72,IntType))))),param(Id(m),ArrayType(72,ArrayType(84,ArrayType(1,ArrayType(72,IntType))))),param(Id(_6),IntType),param(Id(_),ArrayType(14,ArrayType(71,BoolType))),param(Id(_),ClassType(Id(_8Q_3)))],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(f_74_),Id($_1),[]),VarDecl(Id(S),ClassType(Id(__9_)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 77))

    def test_78(self):
        line = '''Class U_9:Y_1_{Constructor (o_E,n,_4:Array [Array [Array [Array [String ,0xA],0b1011000],06],0b1011000];_o:Array [Array [Array [Array [Array [Array [Int ,49],0XB],017_5_4],06],0b1],0X1];_m1:_;hT,_7dhR:Boolean ;_:Array [Array [Float ,0B1],0xF_D_DA];__o8Sp,_2_x56_:_;y:Array [Float ,012_3];_:Array [Float ,6]){} }Class B:nO{}Class x_5:a_4_9{}Class k:_{Constructor (B,H:q){} }'''
        expect = '''Program([ClassDecl(Id(U_9),Id(Y_1_),[MethodDecl(Id(Constructor),Instance,[param(Id(o_E),ArrayType(88,ArrayType(6,ArrayType(88,ArrayType(10,StringType))))),param(Id(n),ArrayType(88,ArrayType(6,ArrayType(88,ArrayType(10,StringType))))),param(Id(_4),ArrayType(88,ArrayType(6,ArrayType(88,ArrayType(10,StringType))))),param(Id(_o),ArrayType(1,ArrayType(1,ArrayType(6,ArrayType(1004,ArrayType(11,ArrayType(49,IntType))))))),param(Id(_m1),ClassType(Id(_))),param(Id(hT),BoolType),param(Id(_7dhR),BoolType),param(Id(_),ArrayType(64986,ArrayType(1,FloatType))),param(Id(__o8Sp),ClassType(Id(_))),param(Id(_2_x56_),ClassType(Id(_))),param(Id(y),ArrayType(83,FloatType)),param(Id(_),ArrayType(6,FloatType))],Block([]))]),ClassDecl(Id(B),Id(nO),[]),ClassDecl(Id(x_5),Id(a_4_9),[]),ClassDecl(Id(k),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(B),ClassType(Id(q))),param(Id(H),ClassType(Id(q)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 78))

    def test_79(self):
        line = '''Class _:_{Constructor (__y_y_,Z:t6;_,F:k;_57:String ;_:Array [Array [Array [Int ,0x27],1],0X26];y:Int ){} }Class H:m{Var _:Array [Boolean ,1_04];}Class _c_{Destructor (){} }Class _9:_39{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__y_y_),ClassType(Id(t6))),param(Id(Z),ClassType(Id(t6))),param(Id(_),ClassType(Id(k))),param(Id(F),ClassType(Id(k))),param(Id(_57),StringType),param(Id(_),ArrayType(38,ArrayType(1,ArrayType(39,IntType)))),param(Id(y),IntType)],Block([]))]),ClassDecl(Id(H),Id(m),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(104,BoolType)))]),ClassDecl(Id(_c_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_9),Id(_39),[])])'''
        self.assertTrue(TestAST.test(line, expect, 79))

    def test_80(self):
        line = '''Class _{Val cS:String ;Var $__2,_:Array [Int ,014];}Class _{__(P:Array [Boolean ,014]){}Destructor (){}Var D_:Float ;Val $_,h,__81,__79__,$I:Array [String ,0x31];}Class lx:_V9{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(cS),StringType,None)),AttributeDecl(Static,VarDecl(Id($__2),ArrayType(12,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(12,IntType)))]),ClassDecl(Id(_),[MethodDecl(Id(__),Instance,[param(Id(P),ArrayType(12,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(D_),FloatType)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(49,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(h),ArrayType(49,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(__81),ArrayType(49,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(__79__),ArrayType(49,StringType),None)),AttributeDecl(Static,ConstDecl(Id($I),ArrayType(49,StringType),None))]),ClassDecl(Id(lx),Id(_V9),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 80))

    def test_81(self):
        line = '''Class L:_{$Zsy__58e(){}Constructor (){Return ;Val _0:Int ;}$_Ny(k,__ErT,_:m){}Val y,I,_8VN:String ;Val Sj:Array [String ,1];}Class _:_1{Destructor (){}Var W:lpvl_90__;}Class oEd{}'''
        expect = '''Program([ClassDecl(Id(L),Id(_),[MethodDecl(Id($Zsy__58e),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Return(),ConstDecl(Id(_0),IntType,None)])),MethodDecl(Id($_Ny),Static,[param(Id(k),ClassType(Id(m))),param(Id(__ErT),ClassType(Id(m))),param(Id(_),ClassType(Id(m)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(y),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(I),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_8VN),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(Sj),ArrayType(1,StringType),None))]),ClassDecl(Id(_),Id(_1),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(W),ClassType(Id(lpvl_90__)),NullLiteral()))]),ClassDecl(Id(oEd),[])])'''
        self.assertTrue(TestAST.test(line, expect, 81))

    def test_82(self):
        line = '''Class N{Destructor (){Break ;{_::$3();}Continue ;} }Class _{}Class jT0:_{Constructor (ug7,_:Int ;BK03ZK:Array [Array [Array [Array [Array [Array [Array [Float ,8],26],0B1000011],0x27],0x27],3_92],0B1000011]){} }Class S{}Class G{Destructor (){Continue ;} }Class r:h{}Class Z_d__{}'''
        expect = '''Program([ClassDecl(Id(N),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Block([Call(Id(_),Id($3),[])]),Continue]))]),ClassDecl(Id(_),[]),ClassDecl(Id(jT0),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(ug7),IntType),param(Id(_),IntType),param(Id(BK03ZK),ArrayType(67,ArrayType(392,ArrayType(39,ArrayType(39,ArrayType(67,ArrayType(26,ArrayType(8,FloatType))))))))],Block([]))]),ClassDecl(Id(S),[]),ClassDecl(Id(G),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(r),Id(h),[]),ClassDecl(Id(Z_d__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 82))

    def test_83(self):
        line = '''Class __{_(d:__;l,__:Array [Boolean ,02_4_7_5]){}_(){}pW(){} }Class m3:_d{Val $_,$01,__8:Boolean ;Constructor (S:_;l:N;_M2H__B:Array [Array [Float ,0x35],0XF]){Break ;}Var w7f_4_,$4,U:Array [Array [Array [Boolean ,7],0XB],2_8];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(_),Instance,[param(Id(d),ClassType(Id(__))),param(Id(l),ArrayType(1341,BoolType)),param(Id(__),ArrayType(1341,BoolType))],Block([])),MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(pW),Instance,[],Block([]))]),ClassDecl(Id(m3),Id(_d),[AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($01),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(__8),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(S),ClassType(Id(_))),param(Id(l),ClassType(Id(N))),param(Id(_M2H__B),ArrayType(15,ArrayType(53,FloatType)))],Block([Break])),AttributeDecl(Instance,VarDecl(Id(w7f_4_),ArrayType(28,ArrayType(11,ArrayType(7,BoolType))))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(28,ArrayType(11,ArrayType(7,BoolType))))),AttributeDecl(Instance,VarDecl(Id(U),ArrayType(28,ArrayType(11,ArrayType(7,BoolType))))),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 83))

    def test_84(self):
        line = '''Class _:_{Var $3,q,$_,$2m,_,$G1,xRb,$Z:Array [String ,0x8];}Class _8{pI(I4:__;_:Float ){}Var $_:Float ;Constructor (_N,_:Array [Array [Int ,0x3],82];_:String ;_,u32:tr_){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($3),ArrayType(8,StringType))),AttributeDecl(Instance,VarDecl(Id(q),ArrayType(8,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(8,StringType))),AttributeDecl(Static,VarDecl(Id($2m),ArrayType(8,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(8,StringType))),AttributeDecl(Static,VarDecl(Id($G1),ArrayType(8,StringType))),AttributeDecl(Instance,VarDecl(Id(xRb),ArrayType(8,StringType))),AttributeDecl(Static,VarDecl(Id($Z),ArrayType(8,StringType)))]),ClassDecl(Id(_8),[MethodDecl(Id(pI),Instance,[param(Id(I4),ClassType(Id(__))),param(Id(_),FloatType)],Block([])),AttributeDecl(Static,VarDecl(Id($_),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(_N),ArrayType(82,ArrayType(3,IntType))),param(Id(_),ArrayType(82,ArrayType(3,IntType))),param(Id(_),StringType),param(Id(_),ClassType(Id(tr_))),param(Id(u32),ClassType(Id(tr_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 84))

    def test_85(self):
        line = '''Class G:_{__(_,_U_,_:_){}Constructor (r_,_Yt:String ;feR,s,C:Array [Float ,0B1_0]){} }Class e{}Class k405{Var a:Array [Float ,0B1011011];Var ___q_s:Array [Array [Array [Array [Array [Int ,0b1000010],0B1011011],0X4],0b1000010],65];}'''
        expect = '''Program([ClassDecl(Id(G),Id(_),[MethodDecl(Id(__),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_U_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(r_),StringType),param(Id(_Yt),StringType),param(Id(feR),ArrayType(2,FloatType)),param(Id(s),ArrayType(2,FloatType)),param(Id(C),ArrayType(2,FloatType))],Block([]))]),ClassDecl(Id(e),[]),ClassDecl(Id(k405),[AttributeDecl(Instance,VarDecl(Id(a),ArrayType(91,FloatType))),AttributeDecl(Instance,VarDecl(Id(___q_s),ArrayType(65,ArrayType(66,ArrayType(4,ArrayType(91,ArrayType(66,IntType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 85))

    def test_86(self):
        line = '''Class _:F9{Destructor (){} }Class _:M__7{Constructor (_2_wV:v5j505L2;_:Float ;__,_a4_e,T3_3:Int ;_j,gT:Array [String ,0x6];W,y,_:Array [Array [Boolean ,0x13],0B1011111];a,m__:Array [Array [Array [String ,066],7],0B1_001];_,Ob:Float ;a6n:Array [Int ,0XC_0]){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(F9),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(M__7),[MethodDecl(Id(Constructor),Instance,[param(Id(_2_wV),ClassType(Id(v5j505L2))),param(Id(_),FloatType),param(Id(__),IntType),param(Id(_a4_e),IntType),param(Id(T3_3),IntType),param(Id(_j),ArrayType(6,StringType)),param(Id(gT),ArrayType(6,StringType)),param(Id(W),ArrayType(95,ArrayType(19,BoolType))),param(Id(y),ArrayType(95,ArrayType(19,BoolType))),param(Id(_),ArrayType(95,ArrayType(19,BoolType))),param(Id(a),ArrayType(9,ArrayType(7,ArrayType(54,StringType)))),param(Id(m__),ArrayType(9,ArrayType(7,ArrayType(54,StringType)))),param(Id(_),FloatType),param(Id(Ob),FloatType),param(Id(a6n),ArrayType(192,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 86))

    def test_87(self):
        line = '''Class _0:c184__f_{}Class U:e{$T(){} }Class _3{Var $8,$h,uN4:___7;$7(k_U2_:Int ;n6_x,p,wb:_;_,P:Boolean ){}Var _:Array [Array [Array [Array [String ,0X6],6],04],0XD];}'''
        expect = '''Program([ClassDecl(Id(_0),Id(c184__f_),[]),ClassDecl(Id(U),Id(e),[MethodDecl(Id($T),Static,[],Block([]))]),ClassDecl(Id(_3),[AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(___7)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($h),ClassType(Id(___7)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(uN4),ClassType(Id(___7)),NullLiteral())),MethodDecl(Id($7),Static,[param(Id(k_U2_),IntType),param(Id(n6_x),ClassType(Id(_))),param(Id(p),ClassType(Id(_))),param(Id(wb),ClassType(Id(_))),param(Id(_),BoolType),param(Id(P),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(13,ArrayType(4,ArrayType(6,ArrayType(6,StringType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 87))

    def test_88(self):
        line = '''Class Z{Destructor (){} }Class _:A{Val _:H__mIN;Var $l:Int ;}Class t_{Destructor (){} }Class f_89{Var $1P:NjPo6U;Val $9:Array [Int ,04_5];Constructor (){Val _,R:_F__;} }Class C{Constructor (_2:B_72__){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(Z),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(A),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(H__mIN)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($l),IntType))]),ClassDecl(Id(t_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(f_89),[AttributeDecl(Static,VarDecl(Id($1P),ClassType(Id(NjPo6U)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(37,IntType),None)),MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(_),ClassType(Id(_F__)),NullLiteral()),ConstDecl(Id(R),ClassType(Id(_F__)),NullLiteral())]))]),ClassDecl(Id(C),[MethodDecl(Id(Constructor),Instance,[param(Id(_2),ClassType(Id(B_72__)))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 88))

    def test_89(self):
        line = '''Class DB:_{Var a,_X:g;Var $7I:Int ;}Class _Yb_d5{$4(_5:String ;_:Array [Float ,040];f4,_,_:Boolean ){}Val __9f6,$b,_,u:Array [Int ,0x1271];Constructor (__2uM,DA:a;_,N:Boolean ){Return ;Var _:Array [String ,0xC];}$2(){} }'''
        expect = '''Program([ClassDecl(Id(DB),Id(_),[AttributeDecl(Instance,VarDecl(Id(a),ClassType(Id(g)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_X),ClassType(Id(g)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($7I),IntType))]),ClassDecl(Id(_Yb_d5),[MethodDecl(Id($4),Static,[param(Id(_5),StringType),param(Id(_),ArrayType(32,FloatType)),param(Id(f4),BoolType),param(Id(_),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(__9f6),ArrayType(4721,IntType),None)),AttributeDecl(Static,ConstDecl(Id($b),ArrayType(4721,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4721,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(u),ArrayType(4721,IntType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__2uM),ClassType(Id(a))),param(Id(DA),ClassType(Id(a))),param(Id(_),BoolType),param(Id(N),BoolType)],Block([Return(),VarDecl(Id(_),ArrayType(12,StringType))])),MethodDecl(Id($2),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 89))

    def test_90(self):
        line = '''Class k{Constructor (Y7,_,_____,_,_,G_,o__,s7v:Array [Int ,0x3F];_ovW:Array [Array [Array [Array [Float ,0X45],0X45],04_3_4],5];D,K_:_;__:Int ){}Var $tm:Array [Boolean ,0x3F];Var $8,_G,u,$__:Array [Array [Array [Float ,0111],37_0],16];}Class u{}'''
        expect = '''Program([ClassDecl(Id(k),[MethodDecl(Id(Constructor),Instance,[param(Id(Y7),ArrayType(63,IntType)),param(Id(_),ArrayType(63,IntType)),param(Id(_____),ArrayType(63,IntType)),param(Id(_),ArrayType(63,IntType)),param(Id(_),ArrayType(63,IntType)),param(Id(G_),ArrayType(63,IntType)),param(Id(o__),ArrayType(63,IntType)),param(Id(s7v),ArrayType(63,IntType)),param(Id(_ovW),ArrayType(5,ArrayType(284,ArrayType(69,ArrayType(69,FloatType))))),param(Id(D),ClassType(Id(_))),param(Id(K_),ClassType(Id(_))),param(Id(__),IntType)],Block([])),AttributeDecl(Static,VarDecl(Id($tm),ArrayType(63,BoolType))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(16,ArrayType(370,ArrayType(73,FloatType))))),AttributeDecl(Instance,VarDecl(Id(_G),ArrayType(16,ArrayType(370,ArrayType(73,FloatType))))),AttributeDecl(Instance,VarDecl(Id(u),ArrayType(16,ArrayType(370,ArrayType(73,FloatType))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(16,ArrayType(370,ArrayType(73,FloatType)))))]),ClassDecl(Id(u),[])])'''
        self.assertTrue(TestAST.test(line, expect, 90))

    def test_91(self):
        line = '''Class oj___x{Var IMB:Int ;Var $9,$ct,$q:_2;}Class _:_7Z{Var __,d_:Array [Float ,0x31];fT04(_9:m;o:Array [Array [String ,0B100101],062]){}Constructor (){}Val _:Array [Boolean ,0B11];Val J_,u:Array [Array [Int ,0X4],3];}'''
        expect = '''Program([ClassDecl(Id(oj___x),[AttributeDecl(Instance,VarDecl(Id(IMB),IntType)),AttributeDecl(Static,VarDecl(Id($9),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($ct),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($q),ClassType(Id(_2)),NullLiteral()))]),ClassDecl(Id(_),Id(_7Z),[AttributeDecl(Instance,VarDecl(Id(__),ArrayType(49,FloatType))),AttributeDecl(Instance,VarDecl(Id(d_),ArrayType(49,FloatType))),MethodDecl(Id(fT04),Instance,[param(Id(_9),ClassType(Id(m))),param(Id(o),ArrayType(50,ArrayType(37,StringType)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(J_),ArrayType(3,ArrayType(4,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(u),ArrayType(3,ArrayType(4,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 91))

    def test_92(self):
        line = '''Class ws7{Var _,$1,_J,$j_:String ;Var _c___,$7v,$n__:_;Constructor (_:Array [Float ,0xA_8_0C];__,_xB:String ;_U9:Array [Array [Array [Int ,0xE_3],0x2E],0B110000];_:Array [Array [Float ,0X9],6];_1e,l2:Array [Array [Array [Int ,0X2B],0b1],06];_:Float ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(ws7),[AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($1),StringType)),AttributeDecl(Instance,VarDecl(Id(_J),StringType)),AttributeDecl(Static,VarDecl(Id($j_),StringType)),AttributeDecl(Instance,VarDecl(Id(_c___),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($7v),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($n__),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(43020,FloatType)),param(Id(__),StringType),param(Id(_xB),StringType),param(Id(_U9),ArrayType(48,ArrayType(46,ArrayType(227,IntType)))),param(Id(_),ArrayType(6,ArrayType(9,FloatType))),param(Id(_1e),ArrayType(6,ArrayType(1,ArrayType(43,IntType)))),param(Id(l2),ArrayType(6,ArrayType(1,ArrayType(43,IntType)))),param(Id(_),FloatType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 92))

    def test_93(self):
        line = '''Class _0h_22:I{Var j_:Array [String ,043];Var $e:Array [Array [Array [Int ,03],9],0b110];_k(__:Float ;_:Array [Array [Array [Array [Int ,4_2_6_6],01_5],043],966_3];m1_:Int ;B,p_,n:fY9;B_9:Array [Array [Array [String ,04],04],0XD7];_,__:N;_h_5:Array [String ,0X1];a,_8tW:Array [Boolean ,03]){} }'''
        expect = '''Program([ClassDecl(Id(_0h_22),Id(I),[AttributeDecl(Instance,VarDecl(Id(j_),ArrayType(35,StringType))),AttributeDecl(Static,VarDecl(Id($e),ArrayType(6,ArrayType(9,ArrayType(3,IntType))))),MethodDecl(Id(_k),Instance,[param(Id(__),FloatType),param(Id(_),ArrayType(9663,ArrayType(35,ArrayType(13,ArrayType(4266,IntType))))),param(Id(m1_),IntType),param(Id(B),ClassType(Id(fY9))),param(Id(p_),ClassType(Id(fY9))),param(Id(n),ClassType(Id(fY9))),param(Id(B_9),ArrayType(215,ArrayType(4,ArrayType(4,StringType)))),param(Id(_),ClassType(Id(N))),param(Id(__),ClassType(Id(N))),param(Id(_h_5),ArrayType(1,StringType)),param(Id(a),ArrayType(3,BoolType)),param(Id(_8tW),ArrayType(3,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 93))

    def test_94(self):
        line = '''Class n{Val $9,$73:_;Var _:Float ;}Class _{Constructor (){Break ;} }Class H{}Class VC:I72{}Class Tv_n9:_{}Class __{Var __:Boolean ;Constructor (){}Destructor (){} }Class tc:_L3_{}'''
        expect = '''Program([ClassDecl(Id(n),[AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($73),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),FloatType))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(H),[]),ClassDecl(Id(VC),Id(I72),[]),ClassDecl(Id(Tv_n9),Id(_),[]),ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(__),BoolType)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(tc),Id(_L3_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 94))

    def test_95(self):
        line = '''Class b____4:_{_Wc(_:Array [Array [Array [String ,0b10011],0X5C],067];_:Array [Array [Array [Array [Float ,056],43],0B101110],5];_,p:Int ;_,_z3,_:W;z,_:Int ;U_,Of5,___:Array [Array [Array [Array [Array [String ,056],02],032_2],0x4C],3];I_,O0Tp8:Array [Int ,8];G:Float ){}Var $6_,v,$0,_:Array [Int ,1];}Class X_:__{Destructor (){} }Class __:T{Val J,h_:Array [Array [String ,0b10011],0B101110];}'''
        expect = '''Program([ClassDecl(Id(b____4),Id(_),[MethodDecl(Id(_Wc),Instance,[param(Id(_),ArrayType(55,ArrayType(92,ArrayType(19,StringType)))),param(Id(_),ArrayType(5,ArrayType(46,ArrayType(43,ArrayType(46,FloatType))))),param(Id(_),IntType),param(Id(p),IntType),param(Id(_),ClassType(Id(W))),param(Id(_z3),ClassType(Id(W))),param(Id(_),ClassType(Id(W))),param(Id(z),IntType),param(Id(_),IntType),param(Id(U_),ArrayType(3,ArrayType(76,ArrayType(210,ArrayType(2,ArrayType(46,StringType)))))),param(Id(Of5),ArrayType(3,ArrayType(76,ArrayType(210,ArrayType(2,ArrayType(46,StringType)))))),param(Id(___),ArrayType(3,ArrayType(76,ArrayType(210,ArrayType(2,ArrayType(46,StringType)))))),param(Id(I_),ArrayType(8,IntType)),param(Id(O0Tp8),ArrayType(8,IntType)),param(Id(G),FloatType)],Block([])),AttributeDecl(Static,VarDecl(Id($6_),ArrayType(1,IntType))),AttributeDecl(Instance,VarDecl(Id(v),ArrayType(1,IntType))),AttributeDecl(Static,VarDecl(Id($0),ArrayType(1,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,IntType)))]),ClassDecl(Id(X_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(T),[AttributeDecl(Instance,ConstDecl(Id(J),ArrayType(46,ArrayType(19,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(h_),ArrayType(46,ArrayType(19,StringType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 95))

    def test_96(self):
        line = '''Class _f2_6_:I{Z_(a:C){}$_(){Break ;}Val _:Int ;}Class s_J2{Var $198:s;_9c3(R_2:F){} }Class _r:_11{Constructor (R:Array [Int ,0b1_1_1_1]){} }Class o:rL{Destructor (){}Var _,_13_Yz_:_8;}'''
        expect = '''Program([ClassDecl(Id(_f2_6_),Id(I),[MethodDecl(Id(Z_),Instance,[param(Id(a),ClassType(Id(C)))],Block([])),MethodDecl(Id($_),Static,[],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None))]),ClassDecl(Id(s_J2),[AttributeDecl(Static,VarDecl(Id($198),ClassType(Id(s)),NullLiteral())),MethodDecl(Id(_9c3),Instance,[param(Id(R_2),ClassType(Id(F)))],Block([]))]),ClassDecl(Id(_r),Id(_11),[MethodDecl(Id(Constructor),Instance,[param(Id(R),ArrayType(15,IntType))],Block([]))]),ClassDecl(Id(o),Id(rL),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_8)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_13_Yz_),ClassType(Id(_8)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 96))

    def test_97(self):
        line = '''Class S:_{Constructor (Z__B,_:Array [Array [Array [Float ,03_5],0XC0DA],01];K0:_l){} }Class H{Destructor (){}Var _,ld:_;Constructor (){} }Class _2M:H2{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(S),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(Z__B),ArrayType(1,ArrayType(49370,ArrayType(29,FloatType)))),param(Id(_),ArrayType(1,ArrayType(49370,ArrayType(29,FloatType)))),param(Id(K0),ClassType(Id(_l)))],Block([]))]),ClassDecl(Id(H),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(ld),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_2M),Id(H2),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 97))

    def test_98(self):
        line = '''Class _4{Constructor (_,G8:__2;n,V,f:Array [Array [Int ,4],0x30];j1:_;_h,U8_8:Array [Boolean ,04];_:_;__:_o){}Constructor (X7__,d9,YA,a,_AV,_,V:Int ){} }Class _:s6HHU{}Class _f3:__2{}Class _:___{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_4),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__2))),param(Id(G8),ClassType(Id(__2))),param(Id(n),ArrayType(48,ArrayType(4,IntType))),param(Id(V),ArrayType(48,ArrayType(4,IntType))),param(Id(f),ArrayType(48,ArrayType(4,IntType))),param(Id(j1),ClassType(Id(_))),param(Id(_h),ArrayType(4,BoolType)),param(Id(U8_8),ArrayType(4,BoolType)),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_o)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(X7__),IntType),param(Id(d9),IntType),param(Id(YA),IntType),param(Id(a),IntType),param(Id(_AV),IntType),param(Id(_),IntType),param(Id(V),IntType)],Block([]))]),ClassDecl(Id(_),Id(s6HHU),[]),ClassDecl(Id(_f3),Id(__2),[]),ClassDecl(Id(_),Id(___),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 98))

    def test_99(self):
        line = '''Class _{}Class _e_:M3{Constructor (Q,W8,_,f0_,E____:Boolean ;i,__1EA1:String ;_,__T,O04__8_59:O;Nf0P:Boolean ;D4_:_;__,JE,S_,_y:L_16;B,q,_pe,Vu,__785,L3J,bT05:d){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_e_),Id(M3),[MethodDecl(Id(Constructor),Instance,[param(Id(Q),BoolType),param(Id(W8),BoolType),param(Id(_),BoolType),param(Id(f0_),BoolType),param(Id(E____),BoolType),param(Id(i),StringType),param(Id(__1EA1),StringType),param(Id(_),ClassType(Id(O))),param(Id(__T),ClassType(Id(O))),param(Id(O04__8_59),ClassType(Id(O))),param(Id(Nf0P),BoolType),param(Id(D4_),ClassType(Id(_))),param(Id(__),ClassType(Id(L_16))),param(Id(JE),ClassType(Id(L_16))),param(Id(S_),ClassType(Id(L_16))),param(Id(_y),ClassType(Id(L_16))),param(Id(B),ClassType(Id(d))),param(Id(q),ClassType(Id(d))),param(Id(_pe),ClassType(Id(d))),param(Id(Vu),ClassType(Id(d))),param(Id(__785),ClassType(Id(d))),param(Id(L3J),ClassType(Id(d))),param(Id(bT05),ClassType(Id(d)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 99))

    def test_100(self):
        line = '''Class O_{Destructor (){}_(_:String ;j,fp_,_:Array [Array [Array [Array [Float ,0X22],6_1_0_9],0b101000],14];o:String ;R:String ;_,D_:Boolean ){Return ;} }Class ___16{Val _Zp:Array [Array [Float ,0x1],6];}'''
        expect = '''Program([ClassDecl(Id(O_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),StringType),param(Id(j),ArrayType(14,ArrayType(40,ArrayType(6109,ArrayType(34,FloatType))))),param(Id(fp_),ArrayType(14,ArrayType(40,ArrayType(6109,ArrayType(34,FloatType))))),param(Id(_),ArrayType(14,ArrayType(40,ArrayType(6109,ArrayType(34,FloatType))))),param(Id(o),StringType),param(Id(R),StringType),param(Id(_),BoolType),param(Id(D_),BoolType)],Block([Return()]))]),ClassDecl(Id(___16),[AttributeDecl(Instance,ConstDecl(Id(_Zp),ArrayType(6,ArrayType(1,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 100))

    def test_101(self):
        line = '''Class _{Var _:_;}Class S{$ji17Z(Nq:Array [Int ,0B1];f4__,c,__5_,_:Array [Array [Array [Array [Boolean ,0b1000111],0b11],0b1],07_5_56];D6:T;_8,_,_:Array [Array [String ,5],0XB]){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(S),[MethodDecl(Id($ji17Z),Static,[param(Id(Nq),ArrayType(1,IntType)),param(Id(f4__),ArrayType(3950,ArrayType(1,ArrayType(3,ArrayType(71,BoolType))))),param(Id(c),ArrayType(3950,ArrayType(1,ArrayType(3,ArrayType(71,BoolType))))),param(Id(__5_),ArrayType(3950,ArrayType(1,ArrayType(3,ArrayType(71,BoolType))))),param(Id(_),ArrayType(3950,ArrayType(1,ArrayType(3,ArrayType(71,BoolType))))),param(Id(D6),ClassType(Id(T))),param(Id(_8),ArrayType(11,ArrayType(5,StringType))),param(Id(_),ArrayType(11,ArrayType(5,StringType))),param(Id(_),ArrayType(11,ArrayType(5,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 101))

    def test_102(self):
        line = '''Class _{Var Ng:Boolean ;}Class _{Constructor (H:Int ;_,O_0:Array [Array [Array [Array [Array [Float ,07],0B1_101],0B10001],0B1_1],0B11_1];x:Float ;__u,U97:_2;_:Array [Array [Int ,79],0B1];K,__:String ;_,z8:Array [Array [Int ,0X46],01];h_:__;Z__,_4v:Array [Int ,0b101111]){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(Ng),BoolType))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(H),IntType),param(Id(_),ArrayType(7,ArrayType(3,ArrayType(17,ArrayType(13,ArrayType(7,FloatType)))))),param(Id(O_0),ArrayType(7,ArrayType(3,ArrayType(17,ArrayType(13,ArrayType(7,FloatType)))))),param(Id(x),FloatType),param(Id(__u),ClassType(Id(_2))),param(Id(U97),ClassType(Id(_2))),param(Id(_),ArrayType(1,ArrayType(79,IntType))),param(Id(K),StringType),param(Id(__),StringType),param(Id(_),ArrayType(1,ArrayType(70,IntType))),param(Id(z8),ArrayType(1,ArrayType(70,IntType))),param(Id(h_),ClassType(Id(__))),param(Id(Z__),ArrayType(47,IntType)),param(Id(_4v),ArrayType(47,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 102))

    def test_103(self):
        line = '''Class _0:z{$M__(_,_,_P6X_9__,_,d6_6,__,DD82_43:Array [Boolean ,19];_i:Array [String ,0b110];_y:Array [Array [Array [Array [Int ,65],0X37],0B111000],0xF];_3_,x7S:Boolean ;bj41,U_,_pg,A6t,t:Boolean ){}Var n49:f;}'''
        expect = '''Program([ClassDecl(Id(_0),Id(z),[MethodDecl(Id($M__),Static,[param(Id(_),ArrayType(19,BoolType)),param(Id(_),ArrayType(19,BoolType)),param(Id(_P6X_9__),ArrayType(19,BoolType)),param(Id(_),ArrayType(19,BoolType)),param(Id(d6_6),ArrayType(19,BoolType)),param(Id(__),ArrayType(19,BoolType)),param(Id(DD82_43),ArrayType(19,BoolType)),param(Id(_i),ArrayType(6,StringType)),param(Id(_y),ArrayType(15,ArrayType(56,ArrayType(55,ArrayType(65,IntType))))),param(Id(_3_),BoolType),param(Id(x7S),BoolType),param(Id(bj41),BoolType),param(Id(U_),BoolType),param(Id(_pg),BoolType),param(Id(A6t),BoolType),param(Id(t),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(n49),ClassType(Id(f)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 103))

    def test_104(self):
        line = '''Class _8{_Q(){} }Class IW:N{}Class _:hi{}Class m_6G{$_(_:Array [Float ,0X17];_,L,v__91___5:Int ;k__:_;j,_:Array [String ,0B1];_,_,_0,Z,QC4_H:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0b1],0b1_1],15],0xA],65],066],15],0B1011],0b101],15],0B1011],4],0X4_2],066]){}_z6(_,_,AA,h_:Array [Array [Boolean ,15],0b1_00]){ {} }Constructor (W6:Float ){ {}Break ;}Destructor (){Continue ;}Val Fz:Array [Boolean ,0x5];Constructor (___,_:Array [Array [Array [Float ,066],15],0x57]){} }'''
        expect = '''Program([ClassDecl(Id(_8),[MethodDecl(Id(_Q),Instance,[],Block([]))]),ClassDecl(Id(IW),Id(N),[]),ClassDecl(Id(_),Id(hi),[]),ClassDecl(Id(m_6G),[MethodDecl(Id($_),Static,[param(Id(_),ArrayType(23,FloatType)),param(Id(_),IntType),param(Id(L),IntType),param(Id(v__91___5),IntType),param(Id(k__),ClassType(Id(_))),param(Id(j),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(_),ArrayType(54,ArrayType(66,ArrayType(4,ArrayType(11,ArrayType(15,ArrayType(5,ArrayType(11,ArrayType(15,ArrayType(54,ArrayType(65,ArrayType(10,ArrayType(15,ArrayType(3,ArrayType(1,IntType))))))))))))))),param(Id(_),ArrayType(54,ArrayType(66,ArrayType(4,ArrayType(11,ArrayType(15,ArrayType(5,ArrayType(11,ArrayType(15,ArrayType(54,ArrayType(65,ArrayType(10,ArrayType(15,ArrayType(3,ArrayType(1,IntType))))))))))))))),param(Id(_0),ArrayType(54,ArrayType(66,ArrayType(4,ArrayType(11,ArrayType(15,ArrayType(5,ArrayType(11,ArrayType(15,ArrayType(54,ArrayType(65,ArrayType(10,ArrayType(15,ArrayType(3,ArrayType(1,IntType))))))))))))))),param(Id(Z),ArrayType(54,ArrayType(66,ArrayType(4,ArrayType(11,ArrayType(15,ArrayType(5,ArrayType(11,ArrayType(15,ArrayType(54,ArrayType(65,ArrayType(10,ArrayType(15,ArrayType(3,ArrayType(1,IntType))))))))))))))),param(Id(QC4_H),ArrayType(54,ArrayType(66,ArrayType(4,ArrayType(11,ArrayType(15,ArrayType(5,ArrayType(11,ArrayType(15,ArrayType(54,ArrayType(65,ArrayType(10,ArrayType(15,ArrayType(3,ArrayType(1,IntType)))))))))))))))],Block([])),MethodDecl(Id(_z6),Instance,[param(Id(_),ArrayType(4,ArrayType(15,BoolType))),param(Id(_),ArrayType(4,ArrayType(15,BoolType))),param(Id(AA),ArrayType(4,ArrayType(15,BoolType))),param(Id(h_),ArrayType(4,ArrayType(15,BoolType)))],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(W6),FloatType)],Block([Block([]),Break])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(Fz),ArrayType(5,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(___),ArrayType(87,ArrayType(15,ArrayType(54,FloatType)))),param(Id(_),ArrayType(87,ArrayType(15,ArrayType(54,FloatType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 104))

    def test_105(self):
        line = '''Class e:_{}Class O:D{Val c50,$_03o46,__:Array [String ,06_0_40];Constructor (_,_,v,__,o:j_WI9;_k:_2;T,g_2,OJ8Y:Array [Boolean ,0XA];Vn__C__:Array [Array [Array [Array [Boolean ,0b10],0X49],0121],0X49];x0:Int ;_,yG:_;x__:Array [String ,0X49];_:_8;J_:Boolean ;_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(e),Id(_),[]),ClassDecl(Id(O),Id(D),[AttributeDecl(Instance,ConstDecl(Id(c50),ArrayType(3104,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_03o46),ArrayType(3104,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(3104,StringType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(j_WI9))),param(Id(_),ClassType(Id(j_WI9))),param(Id(v),ClassType(Id(j_WI9))),param(Id(__),ClassType(Id(j_WI9))),param(Id(o),ClassType(Id(j_WI9))),param(Id(_k),ClassType(Id(_2))),param(Id(T),ArrayType(10,BoolType)),param(Id(g_2),ArrayType(10,BoolType)),param(Id(OJ8Y),ArrayType(10,BoolType)),param(Id(Vn__C__),ArrayType(73,ArrayType(81,ArrayType(73,ArrayType(2,BoolType))))),param(Id(x0),IntType),param(Id(_),ClassType(Id(_))),param(Id(yG),ClassType(Id(_))),param(Id(x__),ArrayType(73,StringType)),param(Id(_),ClassType(Id(_8))),param(Id(J_),BoolType),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 105))

    def test_106(self):
        line = '''Class Y:_{}Class z:Y1bL{Val l:Array [Boolean ,7];Val $_:_;Var D,S_:Array [Array [Array [String ,0144],0144],0144];Val $VC,$6_,_7:Float ;}Class _:_{}Class S7:ar{$3(Q,b,t___v__8,_,p,o_:Array [Float ,2]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(Y),Id(_),[]),ClassDecl(Id(z),Id(Y1bL),[AttributeDecl(Instance,ConstDecl(Id(l),ArrayType(7,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(D),ArrayType(100,ArrayType(100,ArrayType(100,StringType))))),AttributeDecl(Instance,VarDecl(Id(S_),ArrayType(100,ArrayType(100,ArrayType(100,StringType))))),AttributeDecl(Static,ConstDecl(Id($VC),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($6_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_7),FloatType,None))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(S7),Id(ar),[MethodDecl(Id($3),Static,[param(Id(Q),ArrayType(2,FloatType)),param(Id(b),ArrayType(2,FloatType)),param(Id(t___v__8),ArrayType(2,FloatType)),param(Id(_),ArrayType(2,FloatType)),param(Id(p),ArrayType(2,FloatType)),param(Id(o_),ArrayType(2,FloatType))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 106))

    def test_107(self):
        line = '''Class _4{Constructor (_cg_1:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0XDF],0X5F_6B],0X8],0xE],2_61],0B111111],58],02],0X47];m7,m_,_5:E_;_l:_3;c2:String ;Q:Boolean ;v:Int ;_RU_,_,L3O1_,_:nw6o1;V,Og:_;_,b:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_4),[MethodDecl(Id(Constructor),Instance,[param(Id(_cg_1),ArrayType(71,ArrayType(2,ArrayType(58,ArrayType(63,ArrayType(261,ArrayType(14,ArrayType(8,ArrayType(24427,ArrayType(223,StringType)))))))))),param(Id(m7),ClassType(Id(E_))),param(Id(m_),ClassType(Id(E_))),param(Id(_5),ClassType(Id(E_))),param(Id(_l),ClassType(Id(_3))),param(Id(c2),StringType),param(Id(Q),BoolType),param(Id(v),IntType),param(Id(_RU_),ClassType(Id(nw6o1))),param(Id(_),ClassType(Id(nw6o1))),param(Id(L3O1_),ClassType(Id(nw6o1))),param(Id(_),ClassType(Id(nw6o1))),param(Id(V),ClassType(Id(_))),param(Id(Og),ClassType(Id(_))),param(Id(_),BoolType),param(Id(b),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 107))

    def test_108(self):
        line = '''Class _7:D{}Class P2_7:y{_(){Break ;Return ;}Constructor (hS,H,_,t_87A,E,_3y7_0_2_n:_x2;K,_Js,p_,_,bPp,F:Float ){}Var _,_,$X6_:Array [Array [Array [Array [Float ,0B10],4],0b1],0x5_E_9];}'''
        expect = '''Program([ClassDecl(Id(_7),Id(D),[]),ClassDecl(Id(P2_7),Id(y),[MethodDecl(Id(_),Instance,[],Block([Break,Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(hS),ClassType(Id(_x2))),param(Id(H),ClassType(Id(_x2))),param(Id(_),ClassType(Id(_x2))),param(Id(t_87A),ClassType(Id(_x2))),param(Id(E),ClassType(Id(_x2))),param(Id(_3y7_0_2_n),ClassType(Id(_x2))),param(Id(K),FloatType),param(Id(_Js),FloatType),param(Id(p_),FloatType),param(Id(_),FloatType),param(Id(bPp),FloatType),param(Id(F),FloatType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1513,ArrayType(1,ArrayType(4,ArrayType(2,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1513,ArrayType(1,ArrayType(4,ArrayType(2,FloatType)))))),AttributeDecl(Static,VarDecl(Id($X6_),ArrayType(1513,ArrayType(1,ArrayType(4,ArrayType(2,FloatType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 108))

    def test_109(self):
        line = '''Class _6__s6{RO(D_:Array [Array [Boolean ,015],0xB7];X,__,ljn:Array [Array [Array [Array [Int ,0b1],0B110111],100],0x6];_3,_:Float ){Continue ;}h02(____8,q,_,z7h,g:Array [Array [Array [Array [Array [Int ,0B1_1],0X3E],0562],06_7],0b1]){}$26___(_l_,q0:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_6__s6),[MethodDecl(Id(RO),Instance,[param(Id(D_),ArrayType(183,ArrayType(13,BoolType))),param(Id(X),ArrayType(6,ArrayType(100,ArrayType(55,ArrayType(1,IntType))))),param(Id(__),ArrayType(6,ArrayType(100,ArrayType(55,ArrayType(1,IntType))))),param(Id(ljn),ArrayType(6,ArrayType(100,ArrayType(55,ArrayType(1,IntType))))),param(Id(_3),FloatType),param(Id(_),FloatType)],Block([Continue])),MethodDecl(Id(h02),Instance,[param(Id(____8),ArrayType(1,ArrayType(55,ArrayType(370,ArrayType(62,ArrayType(3,IntType)))))),param(Id(q),ArrayType(1,ArrayType(55,ArrayType(370,ArrayType(62,ArrayType(3,IntType)))))),param(Id(_),ArrayType(1,ArrayType(55,ArrayType(370,ArrayType(62,ArrayType(3,IntType)))))),param(Id(z7h),ArrayType(1,ArrayType(55,ArrayType(370,ArrayType(62,ArrayType(3,IntType)))))),param(Id(g),ArrayType(1,ArrayType(55,ArrayType(370,ArrayType(62,ArrayType(3,IntType))))))],Block([])),MethodDecl(Id($26___),Static,[param(Id(_l_),FloatType),param(Id(q0),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 109))

    def test_110(self):
        line = '''Class _{Val $6:Array [Int ,0116];}Class Cu:_{Var $_1n1,_1_,$2:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0b100_10],0x54],0B10_1],85],0543],0116],7],0X5A];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($6),ArrayType(78,IntType),None))]),ClassDecl(Id(Cu),Id(_),[AttributeDecl(Static,VarDecl(Id($_1n1),ArrayType(90,ArrayType(7,ArrayType(78,ArrayType(355,ArrayType(85,ArrayType(5,ArrayType(84,ArrayType(18,IntType)))))))))),AttributeDecl(Instance,VarDecl(Id(_1_),ArrayType(90,ArrayType(7,ArrayType(78,ArrayType(355,ArrayType(85,ArrayType(5,ArrayType(84,ArrayType(18,IntType)))))))))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(90,ArrayType(7,ArrayType(78,ArrayType(355,ArrayType(85,ArrayType(5,ArrayType(84,ArrayType(18,IntType))))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 110))

    def test_111(self):
        line = '''Class _:JVB{Destructor (){Continue ;Break ;}K(){} }Class n_:d_{Var $6_:Array [Array [String ,0B101101],030];Var _bo,_F:Array [Array [Array [Array [Float ,8],0B1],0b1],8];}Class hR65:a{Var _3H:String ;}Class iF{}'''
        expect = '''Program([ClassDecl(Id(_),Id(JVB),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Break])),MethodDecl(Id(K),Instance,[],Block([]))]),ClassDecl(Id(n_),Id(d_),[AttributeDecl(Static,VarDecl(Id($6_),ArrayType(24,ArrayType(45,StringType)))),AttributeDecl(Instance,VarDecl(Id(_bo),ArrayType(8,ArrayType(1,ArrayType(1,ArrayType(8,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(_F),ArrayType(8,ArrayType(1,ArrayType(1,ArrayType(8,FloatType))))))]),ClassDecl(Id(hR65),Id(a),[AttributeDecl(Instance,VarDecl(Id(_3H),StringType))]),ClassDecl(Id(iF),[])])'''
        self.assertTrue(TestAST.test(line, expect, 111))

    def test_112(self):
        line = '''Class G{}Class S1{Constructor (A9__,_n,__:Array [Array [Int ,017],0B110_10];Y68ZE2,_,Bo,F07:Int ){}Constructor (_y:Array [Array [Array [Array [Float ,0X41],0B100111],05],01_1];e3T,W:Float ;T:Array [Array [Int ,4],0X41];_Z0,c5_:Array [Int ,0X41]){}Val w,$_:Array [Int ,0B1];}'''
        expect = '''Program([ClassDecl(Id(G),[]),ClassDecl(Id(S1),[MethodDecl(Id(Constructor),Instance,[param(Id(A9__),ArrayType(26,ArrayType(15,IntType))),param(Id(_n),ArrayType(26,ArrayType(15,IntType))),param(Id(__),ArrayType(26,ArrayType(15,IntType))),param(Id(Y68ZE2),IntType),param(Id(_),IntType),param(Id(Bo),IntType),param(Id(F07),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_y),ArrayType(9,ArrayType(5,ArrayType(39,ArrayType(65,FloatType))))),param(Id(e3T),FloatType),param(Id(W),FloatType),param(Id(T),ArrayType(65,ArrayType(4,IntType))),param(Id(_Z0),ArrayType(65,IntType)),param(Id(c5_),ArrayType(65,IntType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(w),ArrayType(1,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(1,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 112))

    def test_113(self):
        line = '''Class v:B__9{$q68v(_,_,z82_I_5__8,P4ZY:Array [Boolean ,0x4C];_X,z,I:Array [Array [Boolean ,8],02_6]){} }Class pz:o{Constructor (_m:Boolean ){}Val $l:Yh;Val $zB:Array [Float ,0B10111];}Class _{}'''
        expect = '''Program([ClassDecl(Id(v),Id(B__9),[MethodDecl(Id($q68v),Static,[param(Id(_),ArrayType(76,BoolType)),param(Id(_),ArrayType(76,BoolType)),param(Id(z82_I_5__8),ArrayType(76,BoolType)),param(Id(P4ZY),ArrayType(76,BoolType)),param(Id(_X),ArrayType(22,ArrayType(8,BoolType))),param(Id(z),ArrayType(22,ArrayType(8,BoolType))),param(Id(I),ArrayType(22,ArrayType(8,BoolType)))],Block([]))]),ClassDecl(Id(pz),Id(o),[MethodDecl(Id(Constructor),Instance,[param(Id(_m),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($l),ClassType(Id(Yh)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($zB),ArrayType(23,FloatType),None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 113))

    def test_114(self):
        line = '''Class f{Constructor (){}_(){}Destructor (){Return ;{Break ;}Continue ;}$52x4i(u0,_7:Array [Array [Boolean ,076],0B1001110];d56:Array [Array [Array [String ,03_2],0x4_C],0x2]){} }'''
        expect = '''Program([ClassDecl(Id(f),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return(),Block([Break]),Continue])),MethodDecl(Id($52x4i),Static,[param(Id(u0),ArrayType(78,ArrayType(62,BoolType))),param(Id(_7),ArrayType(78,ArrayType(62,BoolType))),param(Id(d56),ArrayType(2,ArrayType(76,ArrayType(26,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 114))

    def test_115(self):
        line = '''Class A:_6{Var $H7:Boolean ;EJ(U_,__:Array [Array [Boolean ,63],0x31];__9:Array [String ,0XB_54];K_n,V1T0_,_:__Q_6_;_90_f,o5,O:Array [Array [Boolean ,0B10010],0101];_,_,_h0xX_,_:_;_,_,_H,_T,M,Z2X:Array [Int ,07]){} }'''
        expect = '''Program([ClassDecl(Id(A),Id(_6),[AttributeDecl(Static,VarDecl(Id($H7),BoolType)),MethodDecl(Id(EJ),Instance,[param(Id(U_),ArrayType(49,ArrayType(63,BoolType))),param(Id(__),ArrayType(49,ArrayType(63,BoolType))),param(Id(__9),ArrayType(2900,StringType)),param(Id(K_n),ClassType(Id(__Q_6_))),param(Id(V1T0_),ClassType(Id(__Q_6_))),param(Id(_),ClassType(Id(__Q_6_))),param(Id(_90_f),ArrayType(65,ArrayType(18,BoolType))),param(Id(o5),ArrayType(65,ArrayType(18,BoolType))),param(Id(O),ArrayType(65,ArrayType(18,BoolType))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_h0xX_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(7,IntType)),param(Id(_),ArrayType(7,IntType)),param(Id(_H),ArrayType(7,IntType)),param(Id(_T),ArrayType(7,IntType)),param(Id(M),ArrayType(7,IntType)),param(Id(Z2X),ArrayType(7,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 115))

    def test_116(self):
        line = '''Class _z:W{}Class _:_{Val $M200,$_K,_CB,___:Array [Boolean ,0x1_3_C];$_T(__9,P_B____:oo;DS:Array [Boolean ,0X60];_:_5V;_:Array [Float ,0B11010];_:Array [Array [Boolean ,0b1],58];_P,Co:_;_,_8:Boolean ){Break ;}Var _,$__,_,$12,k:Array [Array [Array [Int ,58],0b10110],0X5B_6];_Y(){}Var i9:Boolean ;Var E__T,$3:Array [String ,1];}Class h:_0{}'''
        expect = '''Program([ClassDecl(Id(_z),Id(W),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($M200),ArrayType(316,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_K),ArrayType(316,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_CB),ArrayType(316,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(___),ArrayType(316,BoolType),None)),MethodDecl(Id($_T),Static,[param(Id(__9),ClassType(Id(oo))),param(Id(P_B____),ClassType(Id(oo))),param(Id(DS),ArrayType(96,BoolType)),param(Id(_),ClassType(Id(_5V))),param(Id(_),ArrayType(26,FloatType)),param(Id(_),ArrayType(58,ArrayType(1,BoolType))),param(Id(_P),ClassType(Id(_))),param(Id(Co),ClassType(Id(_))),param(Id(_),BoolType),param(Id(_8),BoolType)],Block([Break])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1462,ArrayType(22,ArrayType(58,IntType))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(1462,ArrayType(22,ArrayType(58,IntType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1462,ArrayType(22,ArrayType(58,IntType))))),AttributeDecl(Static,VarDecl(Id($12),ArrayType(1462,ArrayType(22,ArrayType(58,IntType))))),AttributeDecl(Instance,VarDecl(Id(k),ArrayType(1462,ArrayType(22,ArrayType(58,IntType))))),MethodDecl(Id(_Y),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(i9),BoolType)),AttributeDecl(Instance,VarDecl(Id(E__T),ArrayType(1,StringType))),AttributeDecl(Static,VarDecl(Id($3),ArrayType(1,StringType)))]),ClassDecl(Id(h),Id(_0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 116))

    def test_117(self):
        line = '''Class r:_oa{}Class _6:_071__z{Constructor (C:r3_0;F_:Array [Array [Array [Int ,054],84],7]){}$p64wKJ(){}Constructor (_:Array [Array [Boolean ,054],01_6];u,_:Array [Float ,0b100100]){} }'''
        expect = '''Program([ClassDecl(Id(r),Id(_oa),[]),ClassDecl(Id(_6),Id(_071__z),[MethodDecl(Id(Constructor),Instance,[param(Id(C),ClassType(Id(r3_0))),param(Id(F_),ArrayType(7,ArrayType(84,ArrayType(44,IntType))))],Block([])),MethodDecl(Id($p64wKJ),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(14,ArrayType(44,BoolType))),param(Id(u),ArrayType(36,FloatType)),param(Id(_),ArrayType(36,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 117))

    def test_118(self):
        line = '''Class G:k{Constructor (_9R98,_2,_,Z:q){Continue ;} }Class A41i_a5z5n{}Class _{}Class V{Constructor (_,_:_;__7,_g,O:Array [Array [Array [Int ,59],0X89],0X1_32A];rNa:Array [Array [String ,0x6],061];_U_4,_T9,uOiU_,T3:Array [Boolean ,59];F,A,e_,b:X34g_d;T,_2:Int ){}Var vv:Array [Array [Array [Array [Array [Boolean ,0B1000],0x6],0b111110],59],045];}'''
        expect = '''Program([ClassDecl(Id(G),Id(k),[MethodDecl(Id(Constructor),Instance,[param(Id(_9R98),ClassType(Id(q))),param(Id(_2),ClassType(Id(q))),param(Id(_),ClassType(Id(q))),param(Id(Z),ClassType(Id(q)))],Block([Continue]))]),ClassDecl(Id(A41i_a5z5n),[]),ClassDecl(Id(_),[]),ClassDecl(Id(V),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__7),ArrayType(4906,ArrayType(137,ArrayType(59,IntType)))),param(Id(_g),ArrayType(4906,ArrayType(137,ArrayType(59,IntType)))),param(Id(O),ArrayType(4906,ArrayType(137,ArrayType(59,IntType)))),param(Id(rNa),ArrayType(49,ArrayType(6,StringType))),param(Id(_U_4),ArrayType(59,BoolType)),param(Id(_T9),ArrayType(59,BoolType)),param(Id(uOiU_),ArrayType(59,BoolType)),param(Id(T3),ArrayType(59,BoolType)),param(Id(F),ClassType(Id(X34g_d))),param(Id(A),ClassType(Id(X34g_d))),param(Id(e_),ClassType(Id(X34g_d))),param(Id(b),ClassType(Id(X34g_d))),param(Id(T),IntType),param(Id(_2),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(vv),ArrayType(37,ArrayType(59,ArrayType(62,ArrayType(6,ArrayType(8,BoolType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 118))

    def test_119(self):
        line = '''Class s:G{}Class _75:_{Constructor (P3O_J:Int ;o:String ;_J2,d,G,_,_3,S,_,m5n_:Array [Array [Array [Array [Array [Array [String ,0x6],65],0b1],0xD],0B1011011],055];S2:Array [Array [Array [Array [Array [Boolean ,65],0x3C],0x3C],5],0b1]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(s),Id(G),[]),ClassDecl(Id(_75),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(P3O_J),IntType),param(Id(o),StringType),param(Id(_J2),ArrayType(45,ArrayType(91,ArrayType(13,ArrayType(1,ArrayType(65,ArrayType(6,StringType))))))),param(Id(d),ArrayType(45,ArrayType(91,ArrayType(13,ArrayType(1,ArrayType(65,ArrayType(6,StringType))))))),param(Id(G),ArrayType(45,ArrayType(91,ArrayType(13,ArrayType(1,ArrayType(65,ArrayType(6,StringType))))))),param(Id(_),ArrayType(45,ArrayType(91,ArrayType(13,ArrayType(1,ArrayType(65,ArrayType(6,StringType))))))),param(Id(_3),ArrayType(45,ArrayType(91,ArrayType(13,ArrayType(1,ArrayType(65,ArrayType(6,StringType))))))),param(Id(S),ArrayType(45,ArrayType(91,ArrayType(13,ArrayType(1,ArrayType(65,ArrayType(6,StringType))))))),param(Id(_),ArrayType(45,ArrayType(91,ArrayType(13,ArrayType(1,ArrayType(65,ArrayType(6,StringType))))))),param(Id(m5n_),ArrayType(45,ArrayType(91,ArrayType(13,ArrayType(1,ArrayType(65,ArrayType(6,StringType))))))),param(Id(S2),ArrayType(1,ArrayType(5,ArrayType(60,ArrayType(60,ArrayType(65,BoolType))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 119))

    def test_120(self):
        line = '''Class _:C{___(){}Destructor (){} }Class _et{}Class f{Val $_:Array [Boolean ,0x55];Destructor (){}$7D(_:String ;e:Array [Array [Array [Int ,0X3C],0b110010],40];X8,_8,N0:Array [Boolean ,04];_,o,B_b1__9:Int ;_,_,_33_,e_:Array [Array [Int ,0x9],0X3C];y,H_:Array [Array [Array [Array [Array [Float ,04],0111],78],7],03_4]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(C),[MethodDecl(Id(___),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_et),[]),ClassDecl(Id(f),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(85,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($7D),Static,[param(Id(_),StringType),param(Id(e),ArrayType(40,ArrayType(50,ArrayType(60,IntType)))),param(Id(X8),ArrayType(4,BoolType)),param(Id(_8),ArrayType(4,BoolType)),param(Id(N0),ArrayType(4,BoolType)),param(Id(_),IntType),param(Id(o),IntType),param(Id(B_b1__9),IntType),param(Id(_),ArrayType(60,ArrayType(9,IntType))),param(Id(_),ArrayType(60,ArrayType(9,IntType))),param(Id(_33_),ArrayType(60,ArrayType(9,IntType))),param(Id(e_),ArrayType(60,ArrayType(9,IntType))),param(Id(y),ArrayType(28,ArrayType(7,ArrayType(78,ArrayType(73,ArrayType(4,FloatType)))))),param(Id(H_),ArrayType(28,ArrayType(7,ArrayType(78,ArrayType(73,ArrayType(4,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 120))

    def test_121(self):
        line = '''Class n_{Var $8f,$sR,_:Array [String ,0B11];Constructor (){}Constructor (L:Array [Float ,0b1110];_,__9k_fE:_;A,_:Array [Boolean ,073];a,_F_90,___4W,x:Array [Array [Array [Float ,29],0x39],0X47]){} }Class __4p{}'''
        expect = '''Program([ClassDecl(Id(n_),[AttributeDecl(Static,VarDecl(Id($8f),ArrayType(3,StringType))),AttributeDecl(Static,VarDecl(Id($sR),ArrayType(3,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,StringType))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(L),ArrayType(14,FloatType)),param(Id(_),ClassType(Id(_))),param(Id(__9k_fE),ClassType(Id(_))),param(Id(A),ArrayType(59,BoolType)),param(Id(_),ArrayType(59,BoolType)),param(Id(a),ArrayType(71,ArrayType(57,ArrayType(29,FloatType)))),param(Id(_F_90),ArrayType(71,ArrayType(57,ArrayType(29,FloatType)))),param(Id(___4W),ArrayType(71,ArrayType(57,ArrayType(29,FloatType)))),param(Id(x),ArrayType(71,ArrayType(57,ArrayType(29,FloatType))))],Block([]))]),ClassDecl(Id(__4p),[])])'''
        self.assertTrue(TestAST.test(line, expect, 121))

    def test_122(self):
        line = '''Class e:_{Constructor (_:__Rv;_w_10:Int ){ {j::$b_();} }Constructor (w_K,___KN,r:Float ;U_:Array [Int ,0132];MC,__:Array [Array [Float ,0B10],0x6_1];Gg:Array [Int ,35]){} }Class _:_w{Constructor (W2:Array [Boolean ,05];n:Int ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(e),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__Rv))),param(Id(_w_10),IntType)],Block([Block([Call(Id(j),Id($b_),[])])])),MethodDecl(Id(Constructor),Instance,[param(Id(w_K),FloatType),param(Id(___KN),FloatType),param(Id(r),FloatType),param(Id(U_),ArrayType(90,IntType)),param(Id(MC),ArrayType(97,ArrayType(2,FloatType))),param(Id(__),ArrayType(97,ArrayType(2,FloatType))),param(Id(Gg),ArrayType(35,IntType))],Block([]))]),ClassDecl(Id(_),Id(_w),[MethodDecl(Id(Constructor),Instance,[param(Id(W2),ArrayType(5,BoolType)),param(Id(n),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 122))

    def test_123(self):
        line = '''Class f{Val _RA,Y:Int ;}Class _:__2__{Constructor (kD,_6,UE,_:Int ;_,A054,wz:_5_){} }Class w:c{Val _,_,$Q,Mni5,D57__,_J6m_,_,dx,_:Array [Array [Array [Array [Boolean ,0137],0b1],0X1A],0X1A];Val __u,__:v;$_(){Val DM,_,_:_;} }Class qfOS__i8:p{}Class _8s{}Class _:x9y8nx_{}'''
        expect = '''Program([ClassDecl(Id(f),[AttributeDecl(Instance,ConstDecl(Id(_RA),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(Y),IntType,None))]),ClassDecl(Id(_),Id(__2__),[MethodDecl(Id(Constructor),Instance,[param(Id(kD),IntType),param(Id(_6),IntType),param(Id(UE),IntType),param(Id(_),IntType),param(Id(_),ClassType(Id(_5_))),param(Id(A054),ClassType(Id(_5_))),param(Id(wz),ClassType(Id(_5_)))],Block([]))]),ClassDecl(Id(w),Id(c),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,ArrayType(26,ArrayType(1,ArrayType(95,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,ArrayType(26,ArrayType(1,ArrayType(95,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($Q),ArrayType(26,ArrayType(26,ArrayType(1,ArrayType(95,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(Mni5),ArrayType(26,ArrayType(26,ArrayType(1,ArrayType(95,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(D57__),ArrayType(26,ArrayType(26,ArrayType(1,ArrayType(95,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_J6m_),ArrayType(26,ArrayType(26,ArrayType(1,ArrayType(95,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,ArrayType(26,ArrayType(1,ArrayType(95,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(dx),ArrayType(26,ArrayType(26,ArrayType(1,ArrayType(95,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,ArrayType(26,ArrayType(1,ArrayType(95,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(__u),ClassType(Id(v)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(v)),NullLiteral())),MethodDecl(Id($_),Static,[],Block([ConstDecl(Id(DM),ClassType(Id(_)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(_)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())]))]),ClassDecl(Id(qfOS__i8),Id(p),[]),ClassDecl(Id(_8s),[]),ClassDecl(Id(_),Id(x9y8nx_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 123))

    def test_124(self):
        line = '''Class L9:_4{Val $_,__:Float ;$___TO_q2__(_:Array [Array [Array [Float ,13],0B110111],037]){} }Class a3k{Val c_:Boolean ;Constructor (R,_,Q:Array [Array [Array [Int ,0B110111],95],95];q_:Boolean ;_,C:Array [Array [Boolean ,042],0B1]){} }Class M{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(L9),Id(_4),[AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(__),FloatType,None)),MethodDecl(Id($___TO_q2__),Static,[param(Id(_),ArrayType(31,ArrayType(55,ArrayType(13,FloatType))))],Block([]))]),ClassDecl(Id(a3k),[AttributeDecl(Instance,ConstDecl(Id(c_),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(R),ArrayType(95,ArrayType(95,ArrayType(55,IntType)))),param(Id(_),ArrayType(95,ArrayType(95,ArrayType(55,IntType)))),param(Id(Q),ArrayType(95,ArrayType(95,ArrayType(55,IntType)))),param(Id(q_),BoolType),param(Id(_),ArrayType(1,ArrayType(34,BoolType))),param(Id(C),ArrayType(1,ArrayType(34,BoolType)))],Block([]))]),ClassDecl(Id(M),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 124))

    def test_125(self):
        line = '''Class _{Val $_:Array [Boolean ,8_1_2];Var $Lek,$4,_,X1:String ;$_84(_,_:_){}Constructor (){}$__(){Return ;Continue ;Break ;Break ;Continue ;} }Class _{Var $98_1:Boolean ;Val o,$_,_d_p:__g_;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(812,BoolType),None)),AttributeDecl(Static,VarDecl(Id($Lek),StringType)),AttributeDecl(Static,VarDecl(Id($4),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(X1),StringType)),MethodDecl(Id($_84),Static,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($__),Static,[],Block([Return(),Continue,Break,Break,Continue]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($98_1),BoolType)),AttributeDecl(Instance,ConstDecl(Id(o),ClassType(Id(__g_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(__g_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_d_p),ClassType(Id(__g_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 125))

    def test_126(self):
        line = '''Class _{Destructor (){} }Class R:s7{}Class _{$1(_:m8;Z:Float ;_,S:Boolean ;k:Int ;__5__:__L;d,s,_:Array [Float ,02_2];_,_:Array [String ,8]){Continue ;} }Class emF_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(R),Id(s7),[]),ClassDecl(Id(_),[MethodDecl(Id($1),Static,[param(Id(_),ClassType(Id(m8))),param(Id(Z),FloatType),param(Id(_),BoolType),param(Id(S),BoolType),param(Id(k),IntType),param(Id(__5__),ClassType(Id(__L))),param(Id(d),ArrayType(18,FloatType)),param(Id(s),ArrayType(18,FloatType)),param(Id(_),ArrayType(18,FloatType)),param(Id(_),ArrayType(8,StringType)),param(Id(_),ArrayType(8,StringType))],Block([Continue]))]),ClassDecl(Id(emF_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 126))

    def test_127(self):
        line = '''Class E86c_:_i{Constructor (_9:Array [Array [Array [Array [Array [Array [String ,0b1],02],2_2],3],05],03_0]){}Var uj3_8,X5:Array [Int ,0b1_1_110_1_1_0_0];}Class _:_{Val _8_,S_:Array [String ,0126];Val f,_,T:Array [Float ,0b1];}'''
        expect = '''Program([ClassDecl(Id(E86c_),Id(_i),[MethodDecl(Id(Constructor),Instance,[param(Id(_9),ArrayType(24,ArrayType(5,ArrayType(3,ArrayType(22,ArrayType(2,ArrayType(1,StringType)))))))],Block([])),AttributeDecl(Instance,VarDecl(Id(uj3_8),ArrayType(492,IntType))),AttributeDecl(Instance,VarDecl(Id(X5),ArrayType(492,IntType)))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_8_),ArrayType(86,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(S_),ArrayType(86,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(f),ArrayType(1,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(1,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 127))

    def test_128(self):
        line = '''Class _{}Class N_:w{Destructor (){} }Class L{Destructor (){}Var $T,M74_,q,Q9,$r_:Array [Boolean ,3];Var _,__zf,Y:P;$6(_O:Float ){}Constructor (S_:Array [Array [Boolean ,0B1000000],0XF]){}Val _ZY,$__:_5;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(N_),Id(w),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(L),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($T),ArrayType(3,BoolType))),AttributeDecl(Instance,VarDecl(Id(M74_),ArrayType(3,BoolType))),AttributeDecl(Instance,VarDecl(Id(q),ArrayType(3,BoolType))),AttributeDecl(Instance,VarDecl(Id(Q9),ArrayType(3,BoolType))),AttributeDecl(Static,VarDecl(Id($r_),ArrayType(3,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(P)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__zf),ClassType(Id(P)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Y),ClassType(Id(P)),NullLiteral())),MethodDecl(Id($6),Static,[param(Id(_O),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(S_),ArrayType(15,ArrayType(64,BoolType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_ZY),ClassType(Id(_5)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(_5)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 128))

    def test_129(self):
        line = '''Class K2:_t{___4(r_B9:Array [Int ,0B11];_t,__,_7,A__,_o5_3,H_3:___;L___vLNL,_LUt:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B101011],0XE],56],05],0X47],0142],07];_:Float ;_S,V,_H:B;__,h_5,_u,_,d:_;D__,D0:Array [Boolean ,0142];C,g,_6_i_,_:o_){} }'''
        expect = '''Program([ClassDecl(Id(K2),Id(_t),[MethodDecl(Id(___4),Instance,[param(Id(r_B9),ArrayType(3,IntType)),param(Id(_t),ClassType(Id(___))),param(Id(__),ClassType(Id(___))),param(Id(_7),ClassType(Id(___))),param(Id(A__),ClassType(Id(___))),param(Id(_o5_3),ClassType(Id(___))),param(Id(H_3),ClassType(Id(___))),param(Id(L___vLNL),ArrayType(7,ArrayType(98,ArrayType(71,ArrayType(5,ArrayType(56,ArrayType(14,ArrayType(43,BoolType)))))))),param(Id(_LUt),ArrayType(7,ArrayType(98,ArrayType(71,ArrayType(5,ArrayType(56,ArrayType(14,ArrayType(43,BoolType)))))))),param(Id(_),FloatType),param(Id(_S),ClassType(Id(B))),param(Id(V),ClassType(Id(B))),param(Id(_H),ClassType(Id(B))),param(Id(__),ClassType(Id(_))),param(Id(h_5),ClassType(Id(_))),param(Id(_u),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(d),ClassType(Id(_))),param(Id(D__),ArrayType(98,BoolType)),param(Id(D0),ArrayType(98,BoolType)),param(Id(C),ClassType(Id(o_))),param(Id(g),ClassType(Id(o_))),param(Id(_6_i_),ClassType(Id(o_))),param(Id(_),ClassType(Id(o_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 129))

    def test_130(self):
        line = '''Class Y_{Constructor (_:Array [Array [Array [Boolean ,20],0B1_010],066];V,_,_,C,___t:Boolean ;__,D__t:_;__,Ny24,P9,cw7N2:E;_Z,H:_){Break ;}Var vU,___C6_,spt6,$5,__D,$aJ_:_;}'''
        expect = '''Program([ClassDecl(Id(Y_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(54,ArrayType(10,ArrayType(20,BoolType)))),param(Id(V),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(C),BoolType),param(Id(___t),BoolType),param(Id(__),ClassType(Id(_))),param(Id(D__t),ClassType(Id(_))),param(Id(__),ClassType(Id(E))),param(Id(Ny24),ClassType(Id(E))),param(Id(P9),ClassType(Id(E))),param(Id(cw7N2),ClassType(Id(E))),param(Id(_Z),ClassType(Id(_))),param(Id(H),ClassType(Id(_)))],Block([Break])),AttributeDecl(Instance,VarDecl(Id(vU),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(___C6_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(spt6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__D),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($aJ_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 130))

    def test_131(self):
        line = '''Class _8_lw__1{}Class D{Constructor (){}Var $f5,$_1f06__:Array [Float ,0110];}Class _7__{}Class _:pP6{Var $8B:Array [Array [Array [Float ,0110],0B1],0X60_6_FB23C8];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_8_lw__1),[]),ClassDecl(Id(D),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($f5),ArrayType(72,FloatType))),AttributeDecl(Static,VarDecl(Id($_1f06__),ArrayType(72,FloatType)))]),ClassDecl(Id(_7__),[]),ClassDecl(Id(_),Id(pP6),[AttributeDecl(Static,VarDecl(Id($8B),ArrayType(25886925768,ArrayType(1,ArrayType(72,FloatType))))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 131))

    def test_132(self):
        line = '''Class _8:g__O_{C(__:_A;X:_S;l5,_6,_:_){} }Class _:_5{Constructor (xp:Array [Array [Array [Array [Array [Array [String ,0x9],83],0b1_1],026],0b1000100],0B1_10];E5h,__9_,F,a,L_:Array [Array [String ,9],0XD];O:__){} }Class _:w{}'''
        expect = '''Program([ClassDecl(Id(_8),Id(g__O_),[MethodDecl(Id(C),Instance,[param(Id(__),ClassType(Id(_A))),param(Id(X),ClassType(Id(_S))),param(Id(l5),ClassType(Id(_))),param(Id(_6),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(_5),[MethodDecl(Id(Constructor),Instance,[param(Id(xp),ArrayType(6,ArrayType(68,ArrayType(22,ArrayType(3,ArrayType(83,ArrayType(9,StringType))))))),param(Id(E5h),ArrayType(13,ArrayType(9,StringType))),param(Id(__9_),ArrayType(13,ArrayType(9,StringType))),param(Id(F),ArrayType(13,ArrayType(9,StringType))),param(Id(a),ArrayType(13,ArrayType(9,StringType))),param(Id(L_),ArrayType(13,ArrayType(9,StringType))),param(Id(O),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(_),Id(w),[])])'''
        self.assertTrue(TestAST.test(line, expect, 132))

    def test_133(self):
        line = '''Class _{Constructor (H:Float ){} }Class k:M_{}Class __{Val $4,$1,U_H7x:Array [String ,0b1100011];Constructor (ec3_N:Array [Boolean ,0B101];W_9_:_;I:Array [Boolean ,0B10110];_4,_:String ;jL1c,_,_T:Float ;_,c76_3__h9:Array [Array [Array [Array [Boolean ,0B1],0b1_0_0],0B1],0B10110];RH,_:n03_0B;_:___x){Continue ;Continue ;} }Class I{Var $1_7,_:String ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(H),FloatType)],Block([]))]),ClassDecl(Id(k),Id(M_),[]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($4),ArrayType(99,StringType),None)),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(99,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(U_H7x),ArrayType(99,StringType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(ec3_N),ArrayType(5,BoolType)),param(Id(W_9_),ClassType(Id(_))),param(Id(I),ArrayType(22,BoolType)),param(Id(_4),StringType),param(Id(_),StringType),param(Id(jL1c),FloatType),param(Id(_),FloatType),param(Id(_T),FloatType),param(Id(_),ArrayType(22,ArrayType(1,ArrayType(4,ArrayType(1,BoolType))))),param(Id(c76_3__h9),ArrayType(22,ArrayType(1,ArrayType(4,ArrayType(1,BoolType))))),param(Id(RH),ClassType(Id(n03_0B))),param(Id(_),ClassType(Id(n03_0B))),param(Id(_),ClassType(Id(___x)))],Block([Continue,Continue]))]),ClassDecl(Id(I),[AttributeDecl(Static,VarDecl(Id($1_7),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 133))

    def test_134(self):
        line = '''Class r:G_1{_(q5V2,_1_:rnk){}Destructor (){}Destructor (){} }Class Z_{}Class yj:L9{}Class _6_c:a{$rg(m:Array [String ,0x46]){}r(){} }Class _:s9_6_{Val _,$9_4,$1:String ;Constructor (_595_5_8_:Array [Array [Float ,100],0B1];__,__:_;_K82,_0_,_90,_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(r),Id(G_1),[MethodDecl(Id(_),Instance,[param(Id(q5V2),ClassType(Id(rnk))),param(Id(_1_),ClassType(Id(rnk)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Z_),[]),ClassDecl(Id(yj),Id(L9),[]),ClassDecl(Id(_6_c),Id(a),[MethodDecl(Id($rg),Static,[param(Id(m),ArrayType(70,StringType))],Block([])),MethodDecl(Id(r),Instance,[],Block([]))]),ClassDecl(Id(_),Id(s9_6_),[AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($9_4),StringType,None)),AttributeDecl(Static,ConstDecl(Id($1),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_595_5_8_),ArrayType(1,ArrayType(100,FloatType))),param(Id(__),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(_K82),BoolType),param(Id(_0_),BoolType),param(Id(_90),BoolType),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 134))

    def test_135(self):
        line = '''Class _8{Var $_X_V:Array [Array [Array [Int ,0B1000001],066],0B1_1];Var Ux1_,y44:Array [Int ,0x4_7_4];}Class o{Destructor (){Val _,l3,Y_1_8,_:cX;} }Class W:yJ{}Class m__TR_3_7:s{}'''
        expect = '''Program([ClassDecl(Id(_8),[AttributeDecl(Static,VarDecl(Id($_X_V),ArrayType(3,ArrayType(54,ArrayType(65,IntType))))),AttributeDecl(Instance,VarDecl(Id(Ux1_),ArrayType(1140,IntType))),AttributeDecl(Instance,VarDecl(Id(y44),ArrayType(1140,IntType)))]),ClassDecl(Id(o),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ClassType(Id(cX)),NullLiteral()),ConstDecl(Id(l3),ClassType(Id(cX)),NullLiteral()),ConstDecl(Id(Y_1_8),ClassType(Id(cX)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(cX)),NullLiteral())]))]),ClassDecl(Id(W),Id(yJ),[]),ClassDecl(Id(m__TR_3_7),Id(s),[])])'''
        self.assertTrue(TestAST.test(line, expect, 135))

    def test_136(self):
        line = '''Class __1C_u_s{Destructor (){}Destructor (){}_5P(){} }Class n0____{Destructor (){}Constructor (__,n:I7){}Destructor (){}Var $_,E,$_26:Float ;Val _,$8V,$1:g;$Gi__(){} }'''
        expect = '''Program([ClassDecl(Id(__1C_u_s),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_5P),Instance,[],Block([]))]),ClassDecl(Id(n0____),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(I7))),param(Id(n),ClassType(Id(I7)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Instance,VarDecl(Id(E),FloatType)),AttributeDecl(Static,VarDecl(Id($_26),FloatType)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(g)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($8V),ClassType(Id(g)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(g)),NullLiteral())),MethodDecl(Id($Gi__),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 136))

    def test_137(self):
        line = '''Class D{Destructor (){Var __:Array [Array [Float ,56],04_2];I::$_c5_();}Constructor (){} }Class _1_:bh{Constructor (M1:Boolean ){Val HP,A_,_7,_M0f3R:String ;}Var __0l:Array [Array [Array [String ,037],0x2E],56];}'''
        expect = '''Program([ClassDecl(Id(D),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(__),ArrayType(34,ArrayType(56,FloatType))),Call(Id(I),Id($_c5_),[])])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_1_),Id(bh),[MethodDecl(Id(Constructor),Instance,[param(Id(M1),BoolType)],Block([ConstDecl(Id(HP),StringType,None),ConstDecl(Id(A_),StringType,None),ConstDecl(Id(_7),StringType,None),ConstDecl(Id(_M0f3R),StringType,None)])),AttributeDecl(Instance,VarDecl(Id(__0l),ArrayType(56,ArrayType(46,ArrayType(31,StringType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 137))

    def test_138(self):
        line = '''Class __:_2{G3(_9,__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B10],02473],13],06],0B111],0X6],0b10],04],021];_:of;b,s,E:Int ;_:B;D:u_3){}Constructor (){Var __:Array [Array [Float ,021],0b100111];Continue ;} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_2),[MethodDecl(Id(G3),Instance,[param(Id(_9),ArrayType(17,ArrayType(4,ArrayType(2,ArrayType(6,ArrayType(7,ArrayType(6,ArrayType(13,ArrayType(1339,ArrayType(2,IntType)))))))))),param(Id(__),ArrayType(17,ArrayType(4,ArrayType(2,ArrayType(6,ArrayType(7,ArrayType(6,ArrayType(13,ArrayType(1339,ArrayType(2,IntType)))))))))),param(Id(_),ClassType(Id(of))),param(Id(b),IntType),param(Id(s),IntType),param(Id(E),IntType),param(Id(_),ClassType(Id(B))),param(Id(D),ClassType(Id(u_3)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(__),ArrayType(39,ArrayType(17,FloatType))),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 138))

    def test_139(self):
        line = '''Class vj{$_(){Val _4,_,__P,_:Boolean ;Continue ;}Constructor (_,_,_,_u7Q:Array [Array [Array [Array [Array [Array [Int ,0x4C],042],0x4C],9],0b1_0100_1],042];_i,_,_:V_;_,C,_:_m){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(vj),[MethodDecl(Id($_),Static,[],Block([ConstDecl(Id(_4),BoolType,None),ConstDecl(Id(_),BoolType,None),ConstDecl(Id(__P),BoolType,None),ConstDecl(Id(_),BoolType,None),Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(34,ArrayType(41,ArrayType(9,ArrayType(76,ArrayType(34,ArrayType(76,IntType))))))),param(Id(_),ArrayType(34,ArrayType(41,ArrayType(9,ArrayType(76,ArrayType(34,ArrayType(76,IntType))))))),param(Id(_),ArrayType(34,ArrayType(41,ArrayType(9,ArrayType(76,ArrayType(34,ArrayType(76,IntType))))))),param(Id(_u7Q),ArrayType(34,ArrayType(41,ArrayType(9,ArrayType(76,ArrayType(34,ArrayType(76,IntType))))))),param(Id(_i),ClassType(Id(V_))),param(Id(_),ClassType(Id(V_))),param(Id(_),ClassType(Id(V_))),param(Id(_),ClassType(Id(_m))),param(Id(C),ClassType(Id(_m))),param(Id(_),ClassType(Id(_m)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 139))

    def test_140(self):
        line = '''Class __{Var _,$0_:Float ;}Class w8{}Class _:_{}Class _:B{}Class __{_(w_QZ:Int ;x31G:_;_,M:A){} }Class Y:f_{Destructor (){}Constructor (p,v1H:Array [Array [Int ,0x10],07_6]){} }'''
        expect = '''Program([ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Static,VarDecl(Id($0_),FloatType))]),ClassDecl(Id(w8),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(B),[]),ClassDecl(Id(__),[MethodDecl(Id(_),Instance,[param(Id(w_QZ),IntType),param(Id(x31G),ClassType(Id(_))),param(Id(_),ClassType(Id(A))),param(Id(M),ClassType(Id(A)))],Block([]))]),ClassDecl(Id(Y),Id(f_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(p),ArrayType(62,ArrayType(16,IntType))),param(Id(v1H),ArrayType(62,ArrayType(16,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 140))

    def test_141(self):
        line = '''Class O{Var $Bo:Array [Array [Int ,0B1_0_0],0101];}Class B{Destructor (){} }Class _:_{Val $1:Array [Array [Array [Array [Array [Array [Array [Float ,0X53],0B1],0101],33],33],0B1010_1],33];}Class c{}Class O30:pW_{}'''
        expect = '''Program([ClassDecl(Id(O),[AttributeDecl(Static,VarDecl(Id($Bo),ArrayType(65,ArrayType(4,IntType))))]),ClassDecl(Id(B),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($1),ArrayType(33,ArrayType(21,ArrayType(33,ArrayType(33,ArrayType(65,ArrayType(1,ArrayType(83,FloatType))))))),None))]),ClassDecl(Id(c),[]),ClassDecl(Id(O30),Id(pW_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 141))

    def test_142(self):
        line = '''Class tv:E{Val $64:Array [Array [Array [Array [Float ,0x1F_D_4_B_7],07],0B100011],06];Constructor (__,M_,p:Boolean ;__,_,Bb8P,g:Array [Boolean ,50];U:Boolean ;_:Array [Float ,0X52]){} }'''
        expect = '''Program([ClassDecl(Id(tv),Id(E),[AttributeDecl(Static,ConstDecl(Id($64),ArrayType(6,ArrayType(35,ArrayType(7,ArrayType(2086071,FloatType)))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),BoolType),param(Id(M_),BoolType),param(Id(p),BoolType),param(Id(__),ArrayType(50,BoolType)),param(Id(_),ArrayType(50,BoolType)),param(Id(Bb8P),ArrayType(50,BoolType)),param(Id(g),ArrayType(50,BoolType)),param(Id(U),BoolType),param(Id(_),ArrayType(82,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 142))

    def test_143(self):
        line = '''Class _I_:j_{_u(){}Constructor (_m,Ps,_:Boolean ;e_,_,r__:Array [Array [Array [Array [Array [Array [Boolean ,01],0B1_1_1],85],066],10],85]){}Var Cy2,$Ql:Array [Array [Array [Boolean ,066],066],066];Q(){}Val $3:Array [Array [String ,0B1000010],4];}Class _{}'''
        expect = '''Program([ClassDecl(Id(_I_),Id(j_),[MethodDecl(Id(_u),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_m),BoolType),param(Id(Ps),BoolType),param(Id(_),BoolType),param(Id(e_),ArrayType(85,ArrayType(10,ArrayType(54,ArrayType(85,ArrayType(7,ArrayType(1,BoolType))))))),param(Id(_),ArrayType(85,ArrayType(10,ArrayType(54,ArrayType(85,ArrayType(7,ArrayType(1,BoolType))))))),param(Id(r__),ArrayType(85,ArrayType(10,ArrayType(54,ArrayType(85,ArrayType(7,ArrayType(1,BoolType)))))))],Block([])),AttributeDecl(Instance,VarDecl(Id(Cy2),ArrayType(54,ArrayType(54,ArrayType(54,BoolType))))),AttributeDecl(Static,VarDecl(Id($Ql),ArrayType(54,ArrayType(54,ArrayType(54,BoolType))))),MethodDecl(Id(Q),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(4,ArrayType(66,StringType)),None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 143))

    def test_144(self):
        line = '''Class _H:Jj{}Class ___:K0{Val $_w_,_x,LP,$6Z:Array [Array [Boolean ,0b1],0b1000100];Constructor (R174:String ;Z,__,k8__,b:_;_s:Array [Array [Array [Array [Array [Array [Boolean ,18],0X13],0xE],0b1000100],02],4]){ {} }$_(){Continue ;} }Class e6:uTx6VE_{}Class G_B{}Class _:_{}Class _{}Class __e:_8Q_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_H),Id(Jj),[]),ClassDecl(Id(___),Id(K0),[AttributeDecl(Static,ConstDecl(Id($_w_),ArrayType(68,ArrayType(1,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_x),ArrayType(68,ArrayType(1,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(LP),ArrayType(68,ArrayType(1,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($6Z),ArrayType(68,ArrayType(1,BoolType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(R174),StringType),param(Id(Z),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(k8__),ClassType(Id(_))),param(Id(b),ClassType(Id(_))),param(Id(_s),ArrayType(4,ArrayType(2,ArrayType(68,ArrayType(14,ArrayType(19,ArrayType(18,BoolType)))))))],Block([Block([])])),MethodDecl(Id($_),Static,[],Block([Continue]))]),ClassDecl(Id(e6),Id(uTx6VE_),[]),ClassDecl(Id(G_B),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__e),Id(_8Q_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 144))

    def test_145(self):
        line = '''Class S1{}Class _b:Y{}Class K:_{Constructor (q8_7__,im,_2w6_N:Int ){Val TCC8,_:Array [Array [Array [Array [Array [Array [Array [String ,13],0x1C],13],0X31],13],0X31],0B11];} }Class B:_o_{}'''
        expect = '''Program([ClassDecl(Id(S1),[]),ClassDecl(Id(_b),Id(Y),[]),ClassDecl(Id(K),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(q8_7__),IntType),param(Id(im),IntType),param(Id(_2w6_N),IntType)],Block([ConstDecl(Id(TCC8),ArrayType(3,ArrayType(49,ArrayType(13,ArrayType(49,ArrayType(13,ArrayType(28,ArrayType(13,StringType))))))),None),ConstDecl(Id(_),ArrayType(3,ArrayType(49,ArrayType(13,ArrayType(49,ArrayType(13,ArrayType(28,ArrayType(13,StringType))))))),None)]))]),ClassDecl(Id(B),Id(_o_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 145))

    def test_146(self):
        line = '''Class _{Var $76_:m_;Constructor (U:cH7;_4_,_N_:Array [Boolean ,04];_,N5:Array [Boolean ,04_6_4_10];_P:Array [Array [Int ,0X27],0x45_9]){}Constructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($76_),ClassType(Id(m_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(U),ClassType(Id(cH7))),param(Id(_4_),ArrayType(4,BoolType)),param(Id(_N_),ArrayType(4,BoolType)),param(Id(_),ArrayType(19720,BoolType)),param(Id(N5),ArrayType(19720,BoolType)),param(Id(_P),ArrayType(1113,ArrayType(39,IntType)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 146))

    def test_147(self):
        line = '''Class Q:f3{$_(DG_,Lot:Array [Array [Float ,06],0X17]){}Constructor (Q:Array [Array [Array [String ,0x16],0B1],0b11_0];U,x4:_w4;A,_,o,_1,_,_O_e,_,_g,_3,__:Float ){Var _:FP;} }'''
        expect = '''Program([ClassDecl(Id(Q),Id(f3),[MethodDecl(Id($_),Static,[param(Id(DG_),ArrayType(23,ArrayType(6,FloatType))),param(Id(Lot),ArrayType(23,ArrayType(6,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Q),ArrayType(6,ArrayType(1,ArrayType(22,StringType)))),param(Id(U),ClassType(Id(_w4))),param(Id(x4),ClassType(Id(_w4))),param(Id(A),FloatType),param(Id(_),FloatType),param(Id(o),FloatType),param(Id(_1),FloatType),param(Id(_),FloatType),param(Id(_O_e),FloatType),param(Id(_),FloatType),param(Id(_g),FloatType),param(Id(_3),FloatType),param(Id(__),FloatType)],Block([VarDecl(Id(_),ClassType(Id(FP)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 147))

    def test_148(self):
        line = '''Class _6_7{}Class f_{Var $_3,$Jgq:_;}Class a{Constructor (){} }Class N{Var d_:__9;}Class _:_{}Class i__{Destructor (){} }Class p{Val $9,__69:Array [Float ,94];}Class nT:_{}'''
        expect = '''Program([ClassDecl(Id(_6_7),[]),ClassDecl(Id(f_),[AttributeDecl(Static,VarDecl(Id($_3),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Jgq),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(a),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(N),[AttributeDecl(Instance,VarDecl(Id(d_),ClassType(Id(__9)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(i__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(p),[AttributeDecl(Static,ConstDecl(Id($9),ArrayType(94,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__69),ArrayType(94,FloatType),None))]),ClassDecl(Id(nT),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 148))

    def test_149(self):
        line = '''Class E_:i0y_{Destructor (){}Constructor (__:Array [Array [Array [Array [Array [Array [Float ,0b1100100],0B10000],37],0b1_0],0B10000],0B10000];_,mAb_:Array [Float ,06]){}Var _:Array [String ,0b1100100];Var _,$W,$6_:Array [Array [Array [Float ,0X30],011],0x58];}'''
        expect = '''Program([ClassDecl(Id(E_),Id(i0y_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(16,ArrayType(16,ArrayType(2,ArrayType(37,ArrayType(16,ArrayType(100,FloatType))))))),param(Id(_),ArrayType(6,FloatType)),param(Id(mAb_),ArrayType(6,FloatType))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(100,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(88,ArrayType(9,ArrayType(48,FloatType))))),AttributeDecl(Static,VarDecl(Id($W),ArrayType(88,ArrayType(9,ArrayType(48,FloatType))))),AttributeDecl(Static,VarDecl(Id($6_),ArrayType(88,ArrayType(9,ArrayType(48,FloatType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 149))

    def test_150(self):
        line = '''Class c3:VG___5{_90_(Ls,_,_,E_30:S;__:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0122],0XBB],0x15],0122],0x85_1],0122],03_0],0B100110];_:Int ;__H_1w,Q,_,Hx_:Array [Array [Float ,0xE_5],03];T,Z:Float ){} }Class _Z:_{}'''
        expect = '''Program([ClassDecl(Id(c3),Id(VG___5),[MethodDecl(Id(_90_),Instance,[param(Id(Ls),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(E_30),ClassType(Id(S))),param(Id(__),ArrayType(38,ArrayType(24,ArrayType(82,ArrayType(2129,ArrayType(82,ArrayType(21,ArrayType(187,ArrayType(82,FloatType))))))))),param(Id(_),IntType),param(Id(__H_1w),ArrayType(3,ArrayType(229,FloatType))),param(Id(Q),ArrayType(3,ArrayType(229,FloatType))),param(Id(_),ArrayType(3,ArrayType(229,FloatType))),param(Id(Hx_),ArrayType(3,ArrayType(229,FloatType))),param(Id(T),FloatType),param(Id(Z),FloatType)],Block([]))]),ClassDecl(Id(_Z),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 150))

    def test_151(self):
        line = '''Class l:N_5{Constructor (){}Val _lN,$_g:Array [Array [Array [Array [Float ,042],1],17],01];}Class C_{}Class K__:f5G__{}Class B:_{Val Y448:Array [Float ,0b11100];}Class E:I0X{}Class EQ_{}'''
        expect = '''Program([ClassDecl(Id(l),Id(N_5),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_lN),ArrayType(1,ArrayType(17,ArrayType(1,ArrayType(34,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($_g),ArrayType(1,ArrayType(17,ArrayType(1,ArrayType(34,FloatType)))),None))]),ClassDecl(Id(C_),[]),ClassDecl(Id(K__),Id(f5G__),[]),ClassDecl(Id(B),Id(_),[AttributeDecl(Instance,ConstDecl(Id(Y448),ArrayType(28,FloatType),None))]),ClassDecl(Id(E),Id(I0X),[]),ClassDecl(Id(EQ_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 151))

    def test_152(self):
        line = '''Class D{Constructor (____76_:u){Break ;}Var $n7:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b1001001],0xA],0B1],037],02],95],2_3],0B1111],95],037],0X55];}Class V_{}Class _n{_S(lk:Array [String ,06_1];h:Float ;P,K,_,_7r,fj_67,___:z;_w0,_,__8_:Int ){Break ;Return ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(D),[MethodDecl(Id(Constructor),Instance,[param(Id(____76_),ClassType(Id(u)))],Block([Break])),AttributeDecl(Static,VarDecl(Id($n7),ArrayType(85,ArrayType(31,ArrayType(95,ArrayType(15,ArrayType(23,ArrayType(95,ArrayType(2,ArrayType(31,ArrayType(1,ArrayType(10,ArrayType(73,FloatType)))))))))))))]),ClassDecl(Id(V_),[]),ClassDecl(Id(_n),[MethodDecl(Id(_S),Instance,[param(Id(lk),ArrayType(49,StringType)),param(Id(h),FloatType),param(Id(P),ClassType(Id(z))),param(Id(K),ClassType(Id(z))),param(Id(_),ClassType(Id(z))),param(Id(_7r),ClassType(Id(z))),param(Id(fj_67),ClassType(Id(z))),param(Id(___),ClassType(Id(z))),param(Id(_w0),IntType),param(Id(_),IntType),param(Id(__8_),IntType)],Block([Break,Return(),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 152))

    def test_153(self):
        line = '''Class lU3_:v{Val $_6u,$m,_,$_W:Int ;Constructor (){}$T3(_h_c9,j:Array [String ,0XF_2];_,R_W,o:Boolean ){} }Class _t:a3W{}Class _W:_{}Class b:RN{}Class _{}Class _:um{}'''
        expect = '''Program([ClassDecl(Id(lU3_),Id(v),[AttributeDecl(Static,ConstDecl(Id($_6u),IntType,None)),AttributeDecl(Static,ConstDecl(Id($m),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_W),IntType,None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($T3),Static,[param(Id(_h_c9),ArrayType(242,StringType)),param(Id(j),ArrayType(242,StringType)),param(Id(_),BoolType),param(Id(R_W),BoolType),param(Id(o),BoolType)],Block([]))]),ClassDecl(Id(_t),Id(a3W),[]),ClassDecl(Id(_W),Id(_),[]),ClassDecl(Id(b),Id(RN),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(um),[])])'''
        self.assertTrue(TestAST.test(line, expect, 153))

    def test_154(self):
        line = '''Class yH{}Class O{Constructor (i_56_,z:Array [Array [Array [String ,01_63372],021],82];q,_:B){Continue ;}Constructor (U:Array [Array [Int ,0b1],3];_E:Float ;V:Boolean ;O,N:Array [Array [Array [Array [Array [Boolean ,0X1],82],022],0x9F],0b1];h_,_,_:_;_,W:X8_){} }Class __{Constructor (f:_0;i2:Array [Boolean ,0153];_:Array [Array [Boolean ,0b1_0],0x32];_,_:ACR;_f_:O_;G,q,I_:D;m3__1,Xg:_4){} }'''
        expect = '''Program([ClassDecl(Id(yH),[]),ClassDecl(Id(O),[MethodDecl(Id(Constructor),Instance,[param(Id(i_56_),ArrayType(82,ArrayType(17,ArrayType(59130,StringType)))),param(Id(z),ArrayType(82,ArrayType(17,ArrayType(59130,StringType)))),param(Id(q),ClassType(Id(B))),param(Id(_),ClassType(Id(B)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(U),ArrayType(3,ArrayType(1,IntType))),param(Id(_E),FloatType),param(Id(V),BoolType),param(Id(O),ArrayType(1,ArrayType(159,ArrayType(18,ArrayType(82,ArrayType(1,BoolType)))))),param(Id(N),ArrayType(1,ArrayType(159,ArrayType(18,ArrayType(82,ArrayType(1,BoolType)))))),param(Id(h_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(X8_))),param(Id(W),ClassType(Id(X8_)))],Block([]))]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(f),ClassType(Id(_0))),param(Id(i2),ArrayType(107,BoolType)),param(Id(_),ArrayType(50,ArrayType(2,BoolType))),param(Id(_),ClassType(Id(ACR))),param(Id(_),ClassType(Id(ACR))),param(Id(_f_),ClassType(Id(O_))),param(Id(G),ClassType(Id(D))),param(Id(q),ClassType(Id(D))),param(Id(I_),ClassType(Id(D))),param(Id(m3__1),ClassType(Id(_4))),param(Id(Xg),ClassType(Id(_4)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 154))

    def test_155(self):
        line = '''Class _{Constructor (__,_:Float ){ {} }$qF7(a:Array [Array [Float ,2],031];DG:Array [Array [String ,0x4],0B10001];d:Int ;_,zl7:Array [Array [Float ,63],07];I__T,_,_U:G4pV;H3j,_1,_:Array [Float ,0B10001];D,GO__,_4,__:n_2){ {Val _,_1g:Float ;}Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),FloatType),param(Id(_),FloatType)],Block([Block([])])),MethodDecl(Id($qF7),Static,[param(Id(a),ArrayType(25,ArrayType(2,FloatType))),param(Id(DG),ArrayType(17,ArrayType(4,StringType))),param(Id(d),IntType),param(Id(_),ArrayType(7,ArrayType(63,FloatType))),param(Id(zl7),ArrayType(7,ArrayType(63,FloatType))),param(Id(I__T),ClassType(Id(G4pV))),param(Id(_),ClassType(Id(G4pV))),param(Id(_U),ClassType(Id(G4pV))),param(Id(H3j),ArrayType(17,FloatType)),param(Id(_1),ArrayType(17,FloatType)),param(Id(_),ArrayType(17,FloatType)),param(Id(D),ClassType(Id(n_2))),param(Id(GO__),ClassType(Id(n_2))),param(Id(_4),ClassType(Id(n_2))),param(Id(__),ClassType(Id(n_2)))],Block([Block([ConstDecl(Id(_),FloatType,None),ConstDecl(Id(_1g),FloatType,None)]),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 155))

    def test_156(self):
        line = '''Class __:t{Val $_5e_nD,$Z:Array [Array [Array [Array [Int ,0X1],03],03],0x46];}Class _h_9{Constructor (__:Array [String ,0b101110];dt:a){}Var $Z,$U8,$96Z,$_q,Qf,$_:Ib;Destructor (){}Destructor (){} }Class L{$b0(__l_0:f){} }Class x:__{}'''
        expect = '''Program([ClassDecl(Id(__),Id(t),[AttributeDecl(Static,ConstDecl(Id($_5e_nD),ArrayType(70,ArrayType(3,ArrayType(3,ArrayType(1,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($Z),ArrayType(70,ArrayType(3,ArrayType(3,ArrayType(1,IntType)))),None))]),ClassDecl(Id(_h_9),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(46,StringType)),param(Id(dt),ClassType(Id(a)))],Block([])),AttributeDecl(Static,VarDecl(Id($Z),ClassType(Id(Ib)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($U8),ClassType(Id(Ib)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($96Z),ClassType(Id(Ib)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_q),ClassType(Id(Ib)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Qf),ClassType(Id(Ib)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(Ib)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(L),[MethodDecl(Id($b0),Static,[param(Id(__l_0),ClassType(Id(f)))],Block([]))]),ClassDecl(Id(x),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 156))

    def test_157(self):
        line = '''Class F7b:_{}Class _:_5{}Class u{Var U,$Q_t____p6D_,$9_6,_,$5T:String ;Val $V,$G0,$_G7:Int ;Var $f_6Y,$02_46,$O:Array [Array [Array [Int ,0xA],0X8],0B1_0];Val $v,$2:_l;Val J_,$__,__,$0,___:Int ;}Class V3Ad{Val $t,U_,$8:Int ;}Class u__{}Class G:n50{}'''
        expect = '''Program([ClassDecl(Id(F7b),Id(_),[]),ClassDecl(Id(_),Id(_5),[]),ClassDecl(Id(u),[AttributeDecl(Instance,VarDecl(Id(U),StringType)),AttributeDecl(Static,VarDecl(Id($Q_t____p6D_),StringType)),AttributeDecl(Static,VarDecl(Id($9_6),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($5T),StringType)),AttributeDecl(Static,ConstDecl(Id($V),IntType,None)),AttributeDecl(Static,ConstDecl(Id($G0),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_G7),IntType,None)),AttributeDecl(Static,VarDecl(Id($f_6Y),ArrayType(2,ArrayType(8,ArrayType(10,IntType))))),AttributeDecl(Static,VarDecl(Id($02_46),ArrayType(2,ArrayType(8,ArrayType(10,IntType))))),AttributeDecl(Static,VarDecl(Id($O),ArrayType(2,ArrayType(8,ArrayType(10,IntType))))),AttributeDecl(Static,ConstDecl(Id($v),ClassType(Id(_l)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(_l)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(J_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(__),IntType,None)),AttributeDecl(Static,ConstDecl(Id($0),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(___),IntType,None))]),ClassDecl(Id(V3Ad),[AttributeDecl(Static,ConstDecl(Id($t),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(U_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($8),IntType,None))]),ClassDecl(Id(u__),[]),ClassDecl(Id(G),Id(n50),[])])'''
        self.assertTrue(TestAST.test(line, expect, 157))

    def test_158(self):
        line = '''Class V__{l(){} }Class _{Val $d4:Float ;Var $q:_g;Constructor (_N,_2,A:_;_,__:Float ){} }Class u:H{p8__(__:t){}$0_vZ(S,C:Boolean ;V,LR_08_:Float ;_:Array [Float ,0b100111]){}Var $P9_0,x_W0_ZK:Int ;Val $18W0:String ;Var $3:M1;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(V__),[MethodDecl(Id(l),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($d4),FloatType,None)),AttributeDecl(Static,VarDecl(Id($q),ClassType(Id(_g)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_N),ClassType(Id(_))),param(Id(_2),ClassType(Id(_))),param(Id(A),ClassType(Id(_))),param(Id(_),FloatType),param(Id(__),FloatType)],Block([]))]),ClassDecl(Id(u),Id(H),[MethodDecl(Id(p8__),Instance,[param(Id(__),ClassType(Id(t)))],Block([])),MethodDecl(Id($0_vZ),Static,[param(Id(S),BoolType),param(Id(C),BoolType),param(Id(V),FloatType),param(Id(LR_08_),FloatType),param(Id(_),ArrayType(39,FloatType))],Block([])),AttributeDecl(Static,VarDecl(Id($P9_0),IntType)),AttributeDecl(Instance,VarDecl(Id(x_W0_ZK),IntType)),AttributeDecl(Static,ConstDecl(Id($18W0),StringType,None)),AttributeDecl(Static,VarDecl(Id($3),ClassType(Id(M1)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 158))

    def test_159(self):
        line = '''Class o:BD19{Constructor (K_:_;i:k_1;_,Wf:Array [String ,0x38]){}Destructor (){} }Class T4z{Constructor (B2a_p:Int ){}Val $9:Int ;Destructor (){}Val $_1R1,$_:Float ;Constructor (O:n;J_9,x1:Array [Boolean ,0B1001111]){}Constructor (__,_,r_t_d6:e){} }Class h63{Constructor (_,__:Float ;__:Array [Int ,05]){}$j(){ {} }}Class _1_:M0__{}Class F_r{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(o),Id(BD19),[MethodDecl(Id(Constructor),Instance,[param(Id(K_),ClassType(Id(_))),param(Id(i),ClassType(Id(k_1))),param(Id(_),ArrayType(56,StringType)),param(Id(Wf),ArrayType(56,StringType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(T4z),[MethodDecl(Id(Constructor),Instance,[param(Id(B2a_p),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($9),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_1R1),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(O),ClassType(Id(n))),param(Id(J_9),ArrayType(79,BoolType)),param(Id(x1),ArrayType(79,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(e))),param(Id(_),ClassType(Id(e))),param(Id(r_t_d6),ClassType(Id(e)))],Block([]))]),ClassDecl(Id(h63),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(__),FloatType),param(Id(__),ArrayType(5,IntType))],Block([])),MethodDecl(Id($j),Static,[],Block([Block([])]))]),ClassDecl(Id(_1_),Id(M0__),[]),ClassDecl(Id(F_r),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 159))

    def test_160(self):
        line = '''Class _:R{_(){ {} }Constructor (P3:iT;bdx,W:b_){}$_(R_,S:String ;_j:Int ;__8,___,__,__:Float ;J_,_,A16pZ:__){}_(_:_){Continue ;Continue ;}Constructor (_,l:Float ;_,_,q386__2:Float ;p:Int ;___:Array [Array [String ,6],2];__:Float ;C,t:Array [Array [Array [Array [Float ,61],0b1],0XD],046];___hd7:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(R),[MethodDecl(Id(_),Instance,[],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(P3),ClassType(Id(iT))),param(Id(bdx),ClassType(Id(b_))),param(Id(W),ClassType(Id(b_)))],Block([])),MethodDecl(Id($_),Static,[param(Id(R_),StringType),param(Id(S),StringType),param(Id(_j),IntType),param(Id(__8),FloatType),param(Id(___),FloatType),param(Id(__),FloatType),param(Id(__),FloatType),param(Id(J_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(A16pZ),ClassType(Id(__)))],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(_)))],Block([Continue,Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(l),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(q386__2),FloatType),param(Id(p),IntType),param(Id(___),ArrayType(2,ArrayType(6,StringType))),param(Id(__),FloatType),param(Id(C),ArrayType(38,ArrayType(13,ArrayType(1,ArrayType(61,FloatType))))),param(Id(t),ArrayType(38,ArrayType(13,ArrayType(1,ArrayType(61,FloatType))))),param(Id(___hd7),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 160))

    def test_161(self):
        line = '''Class __:G_i{Var _S8:Array [Array [String ,010],010];}Class _{Constructor (){}Constructor (Z,F0_:Float ;_,R3:Boolean ;J_:Array [String ,06];_2:String ;_,_95Z7,__c:Int ;T:Array [Boolean ,91]){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(G_i),[AttributeDecl(Instance,VarDecl(Id(_S8),ArrayType(8,ArrayType(8,StringType))))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Z),FloatType),param(Id(F0_),FloatType),param(Id(_),BoolType),param(Id(R3),BoolType),param(Id(J_),ArrayType(6,StringType)),param(Id(_2),StringType),param(Id(_),IntType),param(Id(_95Z7),IntType),param(Id(__c),IntType),param(Id(T),ArrayType(91,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 161))

    def test_162(self):
        line = '''Class _201:__{Var $o8V6,$__:_;Val aY2,$_:Array [Int ,0X55];Var l2,$u:Array [Float ,2_65_71_0];$6_J(){}Val $9,_x,$__,_v_0:Array [Array [Array [Array [Array [String ,0X55],0b1100001],0b1],0113],036_2];F(_,Y__k,_:Array [Boolean ,065]){Break ;Break ;Return ;} }'''
        expect = '''Program([ClassDecl(Id(_201),Id(__),[AttributeDecl(Static,VarDecl(Id($o8V6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(aY2),ArrayType(85,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(85,IntType),None)),AttributeDecl(Instance,VarDecl(Id(l2),ArrayType(265710,FloatType))),AttributeDecl(Static,VarDecl(Id($u),ArrayType(265710,FloatType))),MethodDecl(Id($6_J),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(242,ArrayType(75,ArrayType(1,ArrayType(97,ArrayType(85,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_x),ArrayType(242,ArrayType(75,ArrayType(1,ArrayType(97,ArrayType(85,StringType))))),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(242,ArrayType(75,ArrayType(1,ArrayType(97,ArrayType(85,StringType))))),None)),AttributeDecl(Instance,ConstDecl(Id(_v_0),ArrayType(242,ArrayType(75,ArrayType(1,ArrayType(97,ArrayType(85,StringType))))),None)),MethodDecl(Id(F),Instance,[param(Id(_),ArrayType(53,BoolType)),param(Id(Y__k),ArrayType(53,BoolType)),param(Id(_),ArrayType(53,BoolType))],Block([Break,Break,Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 162))

    def test_163(self):
        line = '''Class _6_:jU__{}Class _{Val $_:Int ;Constructor (_8_,_:Float ;__QD_:Boolean ;tPb_,_:String ;_:Array [Array [Int ,0X1],31];__,_:Array [Array [Boolean ,0x8],0B1]){}$a(){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_6_),Id(jU__),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_8_),FloatType),param(Id(_),FloatType),param(Id(__QD_),BoolType),param(Id(tPb_),StringType),param(Id(_),StringType),param(Id(_),ArrayType(31,ArrayType(1,IntType))),param(Id(__),ArrayType(1,ArrayType(8,BoolType))),param(Id(_),ArrayType(1,ArrayType(8,BoolType)))],Block([])),MethodDecl(Id($a),Static,[],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 163))

    def test_164(self):
        line = '''Class _q:e7____{Val $_,$_,_0:_;}Class W:s{Constructor (_,_:Array [Boolean ,035];__,m_,xE_x__,_:String ){j_D::$e();Return ;Continue ;{}Continue ;}$fk(Y_O:Float ){} }Class __:r__{}'''
        expect = '''Program([ClassDecl(Id(_q),Id(e7____),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_0),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(W),Id(s),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(29,BoolType)),param(Id(_),ArrayType(29,BoolType)),param(Id(__),StringType),param(Id(m_),StringType),param(Id(xE_x__),StringType),param(Id(_),StringType)],Block([Call(Id(j_D),Id($e),[]),Return(),Continue,Block([]),Continue])),MethodDecl(Id($fk),Static,[param(Id(Y_O),FloatType)],Block([]))]),ClassDecl(Id(__),Id(r__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 164))

    def test_165(self):
        line = '''Class _:K{Destructor (){Break ;Continue ;} }Class _{y2_22u_(g_:_;_t,r,_8:Float ;_,_4__Y:_v;_,_,XyP_,_:Float ;DO_:Array [Array [Array [Boolean ,0X62],0xA],0xA];_,_6o:_91;_h_,d__,I:Array [Array [String ,0104],0b1011000]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(K),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue]))]),ClassDecl(Id(_),[MethodDecl(Id(y2_22u_),Instance,[param(Id(g_),ClassType(Id(_))),param(Id(_t),FloatType),param(Id(r),FloatType),param(Id(_8),FloatType),param(Id(_),ClassType(Id(_v))),param(Id(_4__Y),ClassType(Id(_v))),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(XyP_),FloatType),param(Id(_),FloatType),param(Id(DO_),ArrayType(10,ArrayType(10,ArrayType(98,BoolType)))),param(Id(_),ClassType(Id(_91))),param(Id(_6o),ClassType(Id(_91))),param(Id(_h_),ArrayType(88,ArrayType(68,StringType))),param(Id(d__),ArrayType(88,ArrayType(68,StringType))),param(Id(I),ArrayType(88,ArrayType(68,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 165))

    def test_166(self):
        line = '''Class t{Constructor (z1:Int ;n,B,_:I;_NU_7r_7w:Int ){} }Class _:__{Destructor (){Var s:_;}L(_:Int ;_:Array [Boolean ,5];_:Float ;I,_,_j:Array [Array [Array [Float ,0X48],8_4],01_1]){} }'''
        expect = '''Program([ClassDecl(Id(t),[MethodDecl(Id(Constructor),Instance,[param(Id(z1),IntType),param(Id(n),ClassType(Id(I))),param(Id(B),ClassType(Id(I))),param(Id(_),ClassType(Id(I))),param(Id(_NU_7r_7w),IntType)],Block([]))]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(s),ClassType(Id(_)),NullLiteral())])),MethodDecl(Id(L),Instance,[param(Id(_),IntType),param(Id(_),ArrayType(5,BoolType)),param(Id(_),FloatType),param(Id(I),ArrayType(9,ArrayType(84,ArrayType(72,FloatType)))),param(Id(_),ArrayType(9,ArrayType(84,ArrayType(72,FloatType)))),param(Id(_j),ArrayType(9,ArrayType(84,ArrayType(72,FloatType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 166))

    def test_167(self):
        line = '''Class w{Val $_,D_U_,W_:B;Var $_,__5:Array [Boolean ,02_6334_7];}Class _:__{}Class _:____28{Var $R,$_,Nn:String ;}Class T{Constructor (){Break ;{} }}Class _:__D{Val $_j7,$1,_:Array [Array [Array [Boolean ,16],05],0B11];}'''
        expect = '''Program([ClassDecl(Id(w),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(B)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(D_U_),ClassType(Id(B)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(W_),ClassType(Id(B)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ArrayType(91879,BoolType))),AttributeDecl(Instance,VarDecl(Id(__5),ArrayType(91879,BoolType)))]),ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(_),Id(____28),[AttributeDecl(Static,VarDecl(Id($R),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(Nn),StringType))]),ClassDecl(Id(T),[MethodDecl(Id(Constructor),Instance,[],Block([Break,Block([])]))]),ClassDecl(Id(_),Id(__D),[AttributeDecl(Static,ConstDecl(Id($_j7),ArrayType(3,ArrayType(5,ArrayType(16,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(3,ArrayType(5,ArrayType(16,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,ArrayType(5,ArrayType(16,BoolType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 167))

    def test_168(self):
        line = '''Class _{Var _,$6:Array [Array [Array [Boolean ,3_4],0XB],0b110010];Destructor (){} }Class QC{Constructor (){}Var a,$u5,_92,$0_2,$_:Array [Array [Array [String ,0B1_0],053],0x52];Val $_,$_:Boolean ;}Class e{Val Z2,$56_74,_,$t:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(50,ArrayType(11,ArrayType(34,BoolType))))),AttributeDecl(Static,VarDecl(Id($6),ArrayType(50,ArrayType(11,ArrayType(34,BoolType))))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(QC),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(a),ArrayType(82,ArrayType(43,ArrayType(2,StringType))))),AttributeDecl(Static,VarDecl(Id($u5),ArrayType(82,ArrayType(43,ArrayType(2,StringType))))),AttributeDecl(Instance,VarDecl(Id(_92),ArrayType(82,ArrayType(43,ArrayType(2,StringType))))),AttributeDecl(Static,VarDecl(Id($0_2),ArrayType(82,ArrayType(43,ArrayType(2,StringType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(82,ArrayType(43,ArrayType(2,StringType))))),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None))]),ClassDecl(Id(e),[AttributeDecl(Instance,ConstDecl(Id(Z2),IntType,None)),AttributeDecl(Static,ConstDecl(Id($56_74),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($t),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 168))

    def test_169(self):
        line = '''Class _:K0{Var J,_,_4:Int ;}Class G:g_R{}Class __J:_{u07(_,_4s:Boolean ){}Constructor (d314A:r_5;XD2:Array [Array [Array [String ,74],0x8],74]){}Var ANc,j9:_;Destructor (){} }Class _4cJ:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(K0),[AttributeDecl(Instance,VarDecl(Id(J),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Instance,VarDecl(Id(_4),IntType))]),ClassDecl(Id(G),Id(g_R),[]),ClassDecl(Id(__J),Id(_),[MethodDecl(Id(u07),Instance,[param(Id(_),BoolType),param(Id(_4s),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(d314A),ClassType(Id(r_5))),param(Id(XD2),ArrayType(74,ArrayType(8,ArrayType(74,StringType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(ANc),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(j9),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_4cJ),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 169))

    def test_170(self):
        line = '''Class W:u{Destructor (){}Constructor (_:_4;_:_;_9,T,_93_:Array [Array [Array [Array [Array [Array [String ,0B1],7],16],0142],0x34],4];I,__:Array [Int ,0x9C];r,__9_n:Int ;___O___,_:Int ;_:String ;___6:p;l,J,_:Array [String ,0X41];__:Int ){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(W),Id(u),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_4))),param(Id(_),ClassType(Id(_))),param(Id(_9),ArrayType(4,ArrayType(52,ArrayType(98,ArrayType(16,ArrayType(7,ArrayType(1,StringType))))))),param(Id(T),ArrayType(4,ArrayType(52,ArrayType(98,ArrayType(16,ArrayType(7,ArrayType(1,StringType))))))),param(Id(_93_),ArrayType(4,ArrayType(52,ArrayType(98,ArrayType(16,ArrayType(7,ArrayType(1,StringType))))))),param(Id(I),ArrayType(156,IntType)),param(Id(__),ArrayType(156,IntType)),param(Id(r),IntType),param(Id(__9_n),IntType),param(Id(___O___),IntType),param(Id(_),IntType),param(Id(_),StringType),param(Id(___6),ClassType(Id(p))),param(Id(l),ArrayType(65,StringType)),param(Id(J),ArrayType(65,StringType)),param(Id(_),ArrayType(65,StringType)),param(Id(__),IntType)],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 170))

    def test_171(self):
        line = '''Class r5Y:_6{Constructor (_K,_,_kr00t,u:Boolean ;RI:_;w,Bq,N,_n,Q:Array [Array [Float ,4_6],0b100001];kq_,___:__;_h,h:Array [Array [Array [Array [Int ,465_434],04_7],0x31],04];_,_:qI0_){ {} }}'''
        expect = '''Program([ClassDecl(Id(r5Y),Id(_6),[MethodDecl(Id(Constructor),Instance,[param(Id(_K),BoolType),param(Id(_),BoolType),param(Id(_kr00t),BoolType),param(Id(u),BoolType),param(Id(RI),ClassType(Id(_))),param(Id(w),ArrayType(33,ArrayType(46,FloatType))),param(Id(Bq),ArrayType(33,ArrayType(46,FloatType))),param(Id(N),ArrayType(33,ArrayType(46,FloatType))),param(Id(_n),ArrayType(33,ArrayType(46,FloatType))),param(Id(Q),ArrayType(33,ArrayType(46,FloatType))),param(Id(kq_),ClassType(Id(__))),param(Id(___),ClassType(Id(__))),param(Id(_h),ArrayType(4,ArrayType(49,ArrayType(39,ArrayType(465434,IntType))))),param(Id(h),ArrayType(4,ArrayType(49,ArrayType(39,ArrayType(465434,IntType))))),param(Id(_),ClassType(Id(qI0_))),param(Id(_),ClassType(Id(qI0_)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 171))

    def test_172(self):
        line = '''Class P{_(_:eU74s;_8s_,R,M,X,_:Array [Boolean ,0111];MC:Array [Array [Boolean ,7],0x8];g:Float ;vJu_:Array [Float ,14_2]){}Val $E,$S,Db__,$5H_,_y3_,$J5,$_y,g_1:Float ;}'''
        expect = '''Program([ClassDecl(Id(P),[MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(eU74s))),param(Id(_8s_),ArrayType(73,BoolType)),param(Id(R),ArrayType(73,BoolType)),param(Id(M),ArrayType(73,BoolType)),param(Id(X),ArrayType(73,BoolType)),param(Id(_),ArrayType(73,BoolType)),param(Id(MC),ArrayType(8,ArrayType(7,BoolType))),param(Id(g),FloatType),param(Id(vJu_),ArrayType(142,FloatType))],Block([])),AttributeDecl(Static,ConstDecl(Id($E),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($S),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(Db__),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($5H_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_y3_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($J5),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_y),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(g_1),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 172))

    def test_173(self):
        line = '''Class _0{}Class __:h{Val $_:Array [String ,0B111];}Class _Q_Z{Val $___:Array [Array [Float ,700],07];}Class S:__{}Class _{}Class m1:l{}Class gZ{x(){}Val _,_:String ;Var _:Array [Array [Array [Array [Array [Array [Int ,98],0x30],0X3C],6],0XC_9],034];}Class _1:H{}'''
        expect = '''Program([ClassDecl(Id(_0),[]),ClassDecl(Id(__),Id(h),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(7,StringType),None))]),ClassDecl(Id(_Q_Z),[AttributeDecl(Static,ConstDecl(Id($___),ArrayType(7,ArrayType(700,FloatType)),None))]),ClassDecl(Id(S),Id(__),[]),ClassDecl(Id(_),[]),ClassDecl(Id(m1),Id(l),[]),ClassDecl(Id(gZ),[MethodDecl(Id(x),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(28,ArrayType(201,ArrayType(6,ArrayType(60,ArrayType(48,ArrayType(98,IntType))))))))]),ClassDecl(Id(_1),Id(H),[])])'''
        self.assertTrue(TestAST.test(line, expect, 173))

    def test_174(self):
        line = '''Class At_:E_{Destructor (){}Constructor (_v,_02,E:String ;___,_t:Array [Array [Array [Array [Float ,0xB2],041],56],56];_:Boolean ;Nt9,_,H,_,v2:String ;KW_:_;__:Array [Boolean ,0x2E];X_1,L5E,_6A:Float ){} }'''
        expect = '''Program([ClassDecl(Id(At_),Id(E_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_v),StringType),param(Id(_02),StringType),param(Id(E),StringType),param(Id(___),ArrayType(56,ArrayType(56,ArrayType(33,ArrayType(178,FloatType))))),param(Id(_t),ArrayType(56,ArrayType(56,ArrayType(33,ArrayType(178,FloatType))))),param(Id(_),BoolType),param(Id(Nt9),StringType),param(Id(_),StringType),param(Id(H),StringType),param(Id(_),StringType),param(Id(v2),StringType),param(Id(KW_),ClassType(Id(_))),param(Id(__),ArrayType(46,BoolType)),param(Id(X_1),FloatType),param(Id(L5E),FloatType),param(Id(_6A),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 174))

    def test_175(self):
        line = '''Class f{Constructor (__p,d,_:Array [Boolean ,0b1001101];n,_:Array [Boolean ,0X5F];M___:String ;Z,Ma:Array [Array [Array [Array [String ,073_4],0b1001101],2],0x1B]){} }Class x{Constructor (){} }Class ___96{}'''
        expect = '''Program([ClassDecl(Id(f),[MethodDecl(Id(Constructor),Instance,[param(Id(__p),ArrayType(77,BoolType)),param(Id(d),ArrayType(77,BoolType)),param(Id(_),ArrayType(77,BoolType)),param(Id(n),ArrayType(95,BoolType)),param(Id(_),ArrayType(95,BoolType)),param(Id(M___),StringType),param(Id(Z),ArrayType(27,ArrayType(2,ArrayType(77,ArrayType(476,StringType))))),param(Id(Ma),ArrayType(27,ArrayType(2,ArrayType(77,ArrayType(476,StringType)))))],Block([]))]),ClassDecl(Id(x),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(___96),[])])'''
        self.assertTrue(TestAST.test(line, expect, 175))

    def test_176(self):
        line = '''Class z__:W{Constructor (__,_:Array [Array [Array [Int ,02],22],06_43_5_2];x_L,__,__U:Int ){} }Class _{Destructor (){}_(_z1,FX_:q;_Dc,r,_p:_){} }Class _{}Class _1:E{Var $__8,$0,_,_7_,$_12:__;}'''
        expect = '''Program([ClassDecl(Id(z__),Id(W),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(26858,ArrayType(22,ArrayType(2,IntType)))),param(Id(_),ArrayType(26858,ArrayType(22,ArrayType(2,IntType)))),param(Id(x_L),IntType),param(Id(__),IntType),param(Id(__U),IntType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(_z1),ClassType(Id(q))),param(Id(FX_),ClassType(Id(q))),param(Id(_Dc),ClassType(Id(_))),param(Id(r),ClassType(Id(_))),param(Id(_p),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_1),Id(E),[AttributeDecl(Static,VarDecl(Id($__8),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_7_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_12),ClassType(Id(__)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 176))

    def test_177(self):
        line = '''Class _I{$_(_s_,_:Array [Array [Array [Boolean ,0B1],06],0X4C];w,M,_9:Boolean ;p,_E_,tW,b_Rv:V4u;_,jr8:Array [Array [Array [String ,1],062],0112]){}Var $_g:_;}Class _{}Class B:_{}'''
        expect = '''Program([ClassDecl(Id(_I),[MethodDecl(Id($_),Static,[param(Id(_s_),ArrayType(76,ArrayType(6,ArrayType(1,BoolType)))),param(Id(_),ArrayType(76,ArrayType(6,ArrayType(1,BoolType)))),param(Id(w),BoolType),param(Id(M),BoolType),param(Id(_9),BoolType),param(Id(p),ClassType(Id(V4u))),param(Id(_E_),ClassType(Id(V4u))),param(Id(tW),ClassType(Id(V4u))),param(Id(b_Rv),ClassType(Id(V4u))),param(Id(_),ArrayType(74,ArrayType(50,ArrayType(1,StringType)))),param(Id(jr8),ArrayType(74,ArrayType(50,ArrayType(1,StringType))))],Block([])),AttributeDecl(Static,VarDecl(Id($_g),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),[]),ClassDecl(Id(B),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 177))

    def test_178(self):
        line = '''Class _:U_7{Destructor (){Continue ;}Val F,z,$1,_:_;Constructor (_H:Array [Array [Float ,0xF],0B10111];_,C:q;__8:String ){Val _,IT,_2,g,_H_v,U8:Array [Boolean ,1];Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(U_7),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(F),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(z),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_H),ArrayType(23,ArrayType(15,FloatType))),param(Id(_),ClassType(Id(q))),param(Id(C),ClassType(Id(q))),param(Id(__8),StringType)],Block([ConstDecl(Id(_),ArrayType(1,BoolType),None),ConstDecl(Id(IT),ArrayType(1,BoolType),None),ConstDecl(Id(_2),ArrayType(1,BoolType),None),ConstDecl(Id(g),ArrayType(1,BoolType),None),ConstDecl(Id(_H_v),ArrayType(1,BoolType),None),ConstDecl(Id(U8),ArrayType(1,BoolType),None),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 178))

    def test_179(self):
        line = '''Class _k{}Class _9n__9_F{}Class _{}Class B{}Class Z{Constructor (){ {} }}Class B:_k6h{P5p_a(t:G_U_E;i7C,Y9,_9tTT,_GQ,q,__0__y,_:Int ;Lrm1_x:Array [Array [Float ,60],0b1011];__,J,_:Array [Array [Array [Int ,3],0b11],2];_,_b5lE_,__h80:Array [Array [Float ,3],60];N__:Boolean ;_,__:__Ez){}Destructor (){Continue ;} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_k),[]),ClassDecl(Id(_9n__9_F),[]),ClassDecl(Id(_),[]),ClassDecl(Id(B),[]),ClassDecl(Id(Z),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(B),Id(_k6h),[MethodDecl(Id(P5p_a),Instance,[param(Id(t),ClassType(Id(G_U_E))),param(Id(i7C),IntType),param(Id(Y9),IntType),param(Id(_9tTT),IntType),param(Id(_GQ),IntType),param(Id(q),IntType),param(Id(__0__y),IntType),param(Id(_),IntType),param(Id(Lrm1_x),ArrayType(11,ArrayType(60,FloatType))),param(Id(__),ArrayType(2,ArrayType(3,ArrayType(3,IntType)))),param(Id(J),ArrayType(2,ArrayType(3,ArrayType(3,IntType)))),param(Id(_),ArrayType(2,ArrayType(3,ArrayType(3,IntType)))),param(Id(_),ArrayType(60,ArrayType(3,FloatType))),param(Id(_b5lE_),ArrayType(60,ArrayType(3,FloatType))),param(Id(__h80),ArrayType(60,ArrayType(3,FloatType))),param(Id(N__),BoolType),param(Id(_),ClassType(Id(__Ez))),param(Id(__),ClassType(Id(__Ez)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 179))

    def test_180(self):
        line = '''Class _{}Class __:Q{}Class N3_:q{y(g4:Boolean ;_:Array [Array [Int ,0B111],0123];__:_;p,__OUl,Z__5,_H0,__:ZmE;E:__O2;k_,s:Int ;_,_,_,_:Array [Array [String ,8],7];_,t_47:G_;_,_,dA:P3){}K(){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(__),Id(Q),[]),ClassDecl(Id(N3_),Id(q),[MethodDecl(Id(y),Instance,[param(Id(g4),BoolType),param(Id(_),ArrayType(83,ArrayType(7,IntType))),param(Id(__),ClassType(Id(_))),param(Id(p),ClassType(Id(ZmE))),param(Id(__OUl),ClassType(Id(ZmE))),param(Id(Z__5),ClassType(Id(ZmE))),param(Id(_H0),ClassType(Id(ZmE))),param(Id(__),ClassType(Id(ZmE))),param(Id(E),ClassType(Id(__O2))),param(Id(k_),IntType),param(Id(s),IntType),param(Id(_),ArrayType(7,ArrayType(8,StringType))),param(Id(_),ArrayType(7,ArrayType(8,StringType))),param(Id(_),ArrayType(7,ArrayType(8,StringType))),param(Id(_),ArrayType(7,ArrayType(8,StringType))),param(Id(_),ClassType(Id(G_))),param(Id(t_47),ClassType(Id(G_))),param(Id(_),ClassType(Id(P3))),param(Id(_),ClassType(Id(P3))),param(Id(dA),ClassType(Id(P3)))],Block([])),MethodDecl(Id(K),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 180))

    def test_181(self):
        line = '''Class ___:d7_V{}Class h:P_4{____(l,F,_N,E,_,C_:Array [Array [String ,94],94];vd,_D:Array [Array [String ,0B1000],014];_,_,_:Array [Array [Float ,0xF9],0B1_000];__U____:String ;__,__,__,_:String ){ {}{ {} }}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(___),Id(d7_V),[]),ClassDecl(Id(h),Id(P_4),[MethodDecl(Id(____),Instance,[param(Id(l),ArrayType(94,ArrayType(94,StringType))),param(Id(F),ArrayType(94,ArrayType(94,StringType))),param(Id(_N),ArrayType(94,ArrayType(94,StringType))),param(Id(E),ArrayType(94,ArrayType(94,StringType))),param(Id(_),ArrayType(94,ArrayType(94,StringType))),param(Id(C_),ArrayType(94,ArrayType(94,StringType))),param(Id(vd),ArrayType(12,ArrayType(8,StringType))),param(Id(_D),ArrayType(12,ArrayType(8,StringType))),param(Id(_),ArrayType(8,ArrayType(249,FloatType))),param(Id(_),ArrayType(8,ArrayType(249,FloatType))),param(Id(_),ArrayType(8,ArrayType(249,FloatType))),param(Id(__U____),StringType),param(Id(__),StringType),param(Id(__),StringType),param(Id(__),StringType),param(Id(_),StringType)],Block([Block([]),Block([Block([])])])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 181))

    def test_182(self):
        line = '''Class _:_{Constructor (h:Boolean ;___:Array [Array [Array [Array [Array [Array [Array [String ,6],2],2],8_0_2],0x1],050],2];_,l5v_,j:s_V){}_(){} }Class A2:B{_(){} }Class I5:_{}Class v1{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(h),BoolType),param(Id(___),ArrayType(2,ArrayType(40,ArrayType(1,ArrayType(802,ArrayType(2,ArrayType(2,ArrayType(6,StringType)))))))),param(Id(_),ClassType(Id(s_V))),param(Id(l5v_),ClassType(Id(s_V))),param(Id(j),ClassType(Id(s_V)))],Block([])),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(A2),Id(B),[MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(I5),Id(_),[]),ClassDecl(Id(v1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 182))

    def test_183(self):
        line = '''Class r__{Var S,$1_,$h:_;$A(l,_,_f:Array [String ,042];_,_:Array [Array [Array [String ,0B110011],0x21],3];Ha17:_67;v770j,GhRqYy_:px3;a:Array [Array [String ,9],0b1001010]){}Val $7:Int ;}Class _:__8p__8p{}Class _6:t{}Class _:L6W{}'''
        expect = '''Program([ClassDecl(Id(r__),[AttributeDecl(Instance,VarDecl(Id(S),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($1_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($h),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($A),Static,[param(Id(l),ArrayType(34,StringType)),param(Id(_),ArrayType(34,StringType)),param(Id(_f),ArrayType(34,StringType)),param(Id(_),ArrayType(3,ArrayType(33,ArrayType(51,StringType)))),param(Id(_),ArrayType(3,ArrayType(33,ArrayType(51,StringType)))),param(Id(Ha17),ClassType(Id(_67))),param(Id(v770j),ClassType(Id(px3))),param(Id(GhRqYy_),ClassType(Id(px3))),param(Id(a),ArrayType(74,ArrayType(9,StringType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($7),IntType,None))]),ClassDecl(Id(_),Id(__8p__8p),[]),ClassDecl(Id(_6),Id(t),[]),ClassDecl(Id(_),Id(L6W),[])])'''
        self.assertTrue(TestAST.test(line, expect, 183))

    def test_184(self):
        line = '''Class _w8{}Class _97:Q{$8(__:Boolean ){}Val _J:Array [Float ,0B1];Val $1:Float ;Constructor (a:Boolean ;Z_z:y_;_2,_:Array [Array [Array [Array [Array [Float ,0105],0XF],053],20],0105]){} }'''
        expect = '''Program([ClassDecl(Id(_w8),[]),ClassDecl(Id(_97),Id(Q),[MethodDecl(Id($8),Static,[param(Id(__),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_J),ArrayType(1,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($1),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(a),BoolType),param(Id(Z_z),ClassType(Id(y_))),param(Id(_2),ArrayType(69,ArrayType(20,ArrayType(43,ArrayType(15,ArrayType(69,FloatType)))))),param(Id(_),ArrayType(69,ArrayType(20,ArrayType(43,ArrayType(15,ArrayType(69,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 184))

    def test_185(self):
        line = '''Class _QJ:i3p_{$__(){Break ;} }Class _P{}Class _dz_{Constructor (_,_d,a__p,wbA3v8,_,H7:__S6W;b1:_M;_8:Float ;_:Array [Array [String ,0XAC],05_3]){}Var $8,_:Boolean ;}Class d:_{Var $_,$P,__:_j_7;Constructor (M:Array [Float ,0b1]){}Var _2,s,x5n5,$_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0B1_1_1],0x20],20],0X4C],0B1010100],97],034],0x20],0X4C],03];}Class __9_545_:_27{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_QJ),Id(i3p_),[MethodDecl(Id($__),Static,[],Block([Break]))]),ClassDecl(Id(_P),[]),ClassDecl(Id(_dz_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__S6W))),param(Id(_d),ClassType(Id(__S6W))),param(Id(a__p),ClassType(Id(__S6W))),param(Id(wbA3v8),ClassType(Id(__S6W))),param(Id(_),ClassType(Id(__S6W))),param(Id(H7),ClassType(Id(__S6W))),param(Id(b1),ClassType(Id(_M))),param(Id(_8),FloatType),param(Id(_),ArrayType(43,ArrayType(172,StringType)))],Block([])),AttributeDecl(Static,VarDecl(Id($8),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType))]),ClassDecl(Id(d),Id(_),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_j_7)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($P),ClassType(Id(_j_7)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_j_7)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(M),ArrayType(1,FloatType))],Block([])),AttributeDecl(Instance,VarDecl(Id(_2),ArrayType(3,ArrayType(76,ArrayType(32,ArrayType(28,ArrayType(97,ArrayType(84,ArrayType(76,ArrayType(20,ArrayType(32,ArrayType(7,FloatType)))))))))))),AttributeDecl(Instance,VarDecl(Id(s),ArrayType(3,ArrayType(76,ArrayType(32,ArrayType(28,ArrayType(97,ArrayType(84,ArrayType(76,ArrayType(20,ArrayType(32,ArrayType(7,FloatType)))))))))))),AttributeDecl(Instance,VarDecl(Id(x5n5),ArrayType(3,ArrayType(76,ArrayType(32,ArrayType(28,ArrayType(97,ArrayType(84,ArrayType(76,ArrayType(20,ArrayType(32,ArrayType(7,FloatType)))))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,ArrayType(76,ArrayType(32,ArrayType(28,ArrayType(97,ArrayType(84,ArrayType(76,ArrayType(20,ArrayType(32,ArrayType(7,FloatType))))))))))))]),ClassDecl(Id(__9_545_),Id(_27),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 185))

    def test_186(self):
        line = '''Class _9{Var F__18:Array [Array [Array [Array [Float ,073],82],82],0x6];Destructor (){Break ;Break ;} }Class i_:wx{}Class __:_7{Var $H,$b,I_o6,$T44,__1,$A9_:q_;}Class _:VJ{Destructor (){}_nKk(){}$9(){}Val $9,$b,z,$1_:Array [Array [String ,82],0x6];Val $2_F:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_9),[AttributeDecl(Instance,VarDecl(Id(F__18),ArrayType(6,ArrayType(82,ArrayType(82,ArrayType(59,FloatType)))))),MethodDecl(Id(Destructor),Instance,[],Block([Break,Break]))]),ClassDecl(Id(i_),Id(wx),[]),ClassDecl(Id(__),Id(_7),[AttributeDecl(Static,VarDecl(Id($H),ClassType(Id(q_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($b),ClassType(Id(q_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(I_o6),ClassType(Id(q_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($T44),ClassType(Id(q_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__1),ClassType(Id(q_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($A9_),ClassType(Id(q_)),NullLiteral()))]),ClassDecl(Id(_),Id(VJ),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_nKk),Instance,[],Block([])),MethodDecl(Id($9),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(6,ArrayType(82,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($b),ArrayType(6,ArrayType(82,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(z),ArrayType(6,ArrayType(82,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($1_),ArrayType(6,ArrayType(82,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($2_F),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 186))

    def test_187(self):
        line = '''Class _o:_{}Class H_{_(_,s,Ds,h__x:Array [Array [Int ,05],82];_sE:Array [String ,82];__y,e,___:Array [Array [Array [Array [String ,82],0140],02_1],82]){}Constructor (K8,zO,_,X,kU,b8,m,U_,R,V,R,z:Float ;Y,_:Array [Int ,3_1];G2:Array [Boolean ,0140]){Break ;Return ;} }Class w__F__{Constructor (E3:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_o),Id(_),[]),ClassDecl(Id(H_),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(82,ArrayType(5,IntType))),param(Id(s),ArrayType(82,ArrayType(5,IntType))),param(Id(Ds),ArrayType(82,ArrayType(5,IntType))),param(Id(h__x),ArrayType(82,ArrayType(5,IntType))),param(Id(_sE),ArrayType(82,StringType)),param(Id(__y),ArrayType(82,ArrayType(17,ArrayType(96,ArrayType(82,StringType))))),param(Id(e),ArrayType(82,ArrayType(17,ArrayType(96,ArrayType(82,StringType))))),param(Id(___),ArrayType(82,ArrayType(17,ArrayType(96,ArrayType(82,StringType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(K8),FloatType),param(Id(zO),FloatType),param(Id(_),FloatType),param(Id(X),FloatType),param(Id(kU),FloatType),param(Id(b8),FloatType),param(Id(m),FloatType),param(Id(U_),FloatType),param(Id(R),FloatType),param(Id(V),FloatType),param(Id(R),FloatType),param(Id(z),FloatType),param(Id(Y),ArrayType(31,IntType)),param(Id(_),ArrayType(31,IntType)),param(Id(G2),ArrayType(96,BoolType))],Block([Break,Return()]))]),ClassDecl(Id(w__F__),[MethodDecl(Id(Constructor),Instance,[param(Id(E3),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 187))

    def test_188(self):
        line = '''Class OU{Var $Y_,j9_,_0,Q:_____;Constructor (_:Array [Array [Array [Array [Array [Float ,0X13],0b101011],0X13],48],0B10101]){} }Class _T1{Ak(){}Constructor (_,i,c73G:Array [Boolean ,48]){} }'''
        expect = '''Program([ClassDecl(Id(OU),[AttributeDecl(Static,VarDecl(Id($Y_),ClassType(Id(_____)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(j9_),ClassType(Id(_____)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_0),ClassType(Id(_____)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Q),ClassType(Id(_____)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(21,ArrayType(48,ArrayType(19,ArrayType(43,ArrayType(19,FloatType))))))],Block([]))]),ClassDecl(Id(_T1),[MethodDecl(Id(Ak),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(48,BoolType)),param(Id(i),ArrayType(48,BoolType)),param(Id(c73G),ArrayType(48,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 188))

    def test_189(self):
        line = '''Class _2E:__{}Class _{$_a(___7:String ;X,_:_4U;_:Array [Array [Array [Array [Array [Boolean ,0B1_1],8],0x4E],06],0B1]){} }Class _:W{G(_,sae:Boolean ;_:Array [String ,0X3A]){}Constructor (_N:String ;Rr,js7M__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1],0x9],0X3A],0B1010111],0126],46],0X9CC0],0126],0126],46];NKh5:iG1;Gy2q_V_:Array [Int ,0xA2]){New _().Vl_Y()._R2();} }'''
        expect = '''Program([ClassDecl(Id(_2E),Id(__),[]),ClassDecl(Id(_),[MethodDecl(Id($_a),Static,[param(Id(___7),StringType),param(Id(X),ClassType(Id(_4U))),param(Id(_),ClassType(Id(_4U))),param(Id(_),ArrayType(1,ArrayType(6,ArrayType(78,ArrayType(8,ArrayType(3,BoolType))))))],Block([]))]),ClassDecl(Id(_),Id(W),[MethodDecl(Id(G),Instance,[param(Id(_),BoolType),param(Id(sae),BoolType),param(Id(_),ArrayType(58,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_N),StringType),param(Id(Rr),ArrayType(46,ArrayType(86,ArrayType(86,ArrayType(40128,ArrayType(46,ArrayType(86,ArrayType(87,ArrayType(58,ArrayType(9,ArrayType(1,BoolType))))))))))),param(Id(js7M__),ArrayType(46,ArrayType(86,ArrayType(86,ArrayType(40128,ArrayType(46,ArrayType(86,ArrayType(87,ArrayType(58,ArrayType(9,ArrayType(1,BoolType))))))))))),param(Id(NKh5),ClassType(Id(iG1))),param(Id(Gy2q_V_),ArrayType(162,IntType))],Block([Call(CallExpr(NewExpr(Id(_),[]),Id(Vl_Y),[]),Id(_R2),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 189))

    def test_190(self):
        line = '''Class q{}Class _{}Class E{}Class __:In 3_f7{Val $x:Array [Array [Array [String ,0B1],0x5],0b1_1];Val $2_2_:_2hg;Val $26_0:Array [Array [Array [String ,021],021],0x1B];}Class __:c_{}'''
        expect = '''Program([ClassDecl(Id(q),[]),ClassDecl(Id(_),[]),ClassDecl(Id(E),[]),ClassDecl(Id(__),Id(_f7),[]),ClassDecl(Id(__),Id(c_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 190))

    def test_191(self):
        line = '''Class mo{}Class __ZM_{Destructor (){Continue ;} }Class _{P(_:Array [Array [Float ,58],0xB_3]){Break ;}Var uQ_2:Float ;Constructor (_,__6D:_;_:Int ){Break ;Return ;}Var j,_,$3,P_,$sC1__p8_Z:String ;Constructor (_,Z:_;U,_:Boolean ;Z__:Array [Boolean ,072_4_4_3];_,R894n_8,x2_,P__:_9k7;LJK:Boolean ){Self .c.V();Return ;}Var $_0:Int ;}'''
        expect = '''Program([ClassDecl(Id(mo),[]),ClassDecl(Id(__ZM_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(_),[MethodDecl(Id(P),Instance,[param(Id(_),ArrayType(179,ArrayType(58,FloatType)))],Block([Break])),AttributeDecl(Instance,VarDecl(Id(uQ_2),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(__6D),ClassType(Id(_))),param(Id(_),IntType)],Block([Break,Return()])),AttributeDecl(Instance,VarDecl(Id(j),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($3),StringType)),AttributeDecl(Instance,VarDecl(Id(P_),StringType)),AttributeDecl(Static,VarDecl(Id($sC1__p8_Z),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(Z),ClassType(Id(_))),param(Id(U),BoolType),param(Id(_),BoolType),param(Id(Z__),ArrayType(29987,BoolType)),param(Id(_),ClassType(Id(_9k7))),param(Id(R894n_8),ClassType(Id(_9k7))),param(Id(x2_),ClassType(Id(_9k7))),param(Id(P__),ClassType(Id(_9k7))),param(Id(LJK),BoolType)],Block([Call(FieldAccess(Self(),Id(c)),Id(V),[]),Return()])),AttributeDecl(Static,VarDecl(Id($_0),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 191))

    def test_192(self):
        line = '''Class Y{Constructor (___4:Array [Array [Int ,8],0X16];G_13_:yw;w,kI_,t,u30,_o:Array [Array [Array [String ,01_20],8],0b1];M,Q:Array [Array [Int ,05],4]){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(Y),[MethodDecl(Id(Constructor),Instance,[param(Id(___4),ArrayType(22,ArrayType(8,IntType))),param(Id(G_13_),ClassType(Id(yw))),param(Id(w),ArrayType(1,ArrayType(8,ArrayType(80,StringType)))),param(Id(kI_),ArrayType(1,ArrayType(8,ArrayType(80,StringType)))),param(Id(t),ArrayType(1,ArrayType(8,ArrayType(80,StringType)))),param(Id(u30),ArrayType(1,ArrayType(8,ArrayType(80,StringType)))),param(Id(_o),ArrayType(1,ArrayType(8,ArrayType(80,StringType)))),param(Id(M),ArrayType(4,ArrayType(5,IntType))),param(Id(Q),ArrayType(4,ArrayType(5,IntType)))],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 192))

    def test_193(self):
        line = '''Class _:o_{}Class _p:_{Var _7:Array [Int ,066];Constructor (Y:Array [Boolean ,01];u_62:String ;_6:Array [Float ,06];Oy5,w:Boolean ;Yh,A,_Q_3,_,bv:Array [String ,4]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(o_),[]),ClassDecl(Id(_p),Id(_),[AttributeDecl(Instance,VarDecl(Id(_7),ArrayType(54,IntType))),MethodDecl(Id(Constructor),Instance,[param(Id(Y),ArrayType(1,BoolType)),param(Id(u_62),StringType),param(Id(_6),ArrayType(6,FloatType)),param(Id(Oy5),BoolType),param(Id(w),BoolType),param(Id(Yh),ArrayType(4,StringType)),param(Id(A),ArrayType(4,StringType)),param(Id(_Q_3),ArrayType(4,StringType)),param(Id(_),ArrayType(4,StringType)),param(Id(bv),ArrayType(4,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 193))

    def test_194(self):
        line = '''Class S:_{}Class _:I{Val s290_:Array [Array [Float ,0B1],69];}Class _V{}Class _6{}Class U_{$X_4(){}Constructor (J8_,_,i_H,_:v;x_8vO,_,J4_,zG,_1,_,_:f2){} }Class H4{}Class l{}'''
        expect = '''Program([ClassDecl(Id(S),Id(_),[]),ClassDecl(Id(_),Id(I),[AttributeDecl(Instance,ConstDecl(Id(s290_),ArrayType(69,ArrayType(1,FloatType)),None))]),ClassDecl(Id(_V),[]),ClassDecl(Id(_6),[]),ClassDecl(Id(U_),[MethodDecl(Id($X_4),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(J8_),ClassType(Id(v))),param(Id(_),ClassType(Id(v))),param(Id(i_H),ClassType(Id(v))),param(Id(_),ClassType(Id(v))),param(Id(x_8vO),ClassType(Id(f2))),param(Id(_),ClassType(Id(f2))),param(Id(J4_),ClassType(Id(f2))),param(Id(zG),ClassType(Id(f2))),param(Id(_1),ClassType(Id(f2))),param(Id(_),ClassType(Id(f2))),param(Id(_),ClassType(Id(f2)))],Block([]))]),ClassDecl(Id(H4),[]),ClassDecl(Id(l),[])])'''
        self.assertTrue(TestAST.test(line, expect, 194))

    def test_195(self):
        line = '''Class v{}Class i_:_97_{}Class _F:__x{}Class O6_DR{Constructor (_18_U,t:Array [Array [Int ,4_5_69],0b10];_:Array [Array [Array [String ,0B111010],0xC],0B10_0_0];q,U8:Array [Float ,025_26];s:Array [Float ,26]){} }Class _:R{Var $L:_;}Class _:l{}Class n:_{}'''
        expect = '''Program([ClassDecl(Id(v),[]),ClassDecl(Id(i_),Id(_97_),[]),ClassDecl(Id(_F),Id(__x),[]),ClassDecl(Id(O6_DR),[MethodDecl(Id(Constructor),Instance,[param(Id(_18_U),ArrayType(2,ArrayType(4569,IntType))),param(Id(t),ArrayType(2,ArrayType(4569,IntType))),param(Id(_),ArrayType(8,ArrayType(12,ArrayType(58,StringType)))),param(Id(q),ArrayType(1366,FloatType)),param(Id(U8),ArrayType(1366,FloatType)),param(Id(s),ArrayType(26,FloatType))],Block([]))]),ClassDecl(Id(_),Id(R),[AttributeDecl(Static,VarDecl(Id($L),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(l),[]),ClassDecl(Id(n),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 195))

    def test_196(self):
        line = '''Class _:_3{$M(g:Array [Array [Array [Array [Float ,6],0X6],0XE],50]){} }Class s:__3{Constructor (_:_7;CzX:Int ;___:Array [Float ,0X3]){}Destructor (){} }Class G1{$T(_3:Array [Int ,3]){Return ;}Destructor (){} }Class h:aW{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_3),[MethodDecl(Id($M),Static,[param(Id(g),ArrayType(50,ArrayType(14,ArrayType(6,ArrayType(6,FloatType)))))],Block([]))]),ClassDecl(Id(s),Id(__3),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_7))),param(Id(CzX),IntType),param(Id(___),ArrayType(3,FloatType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(G1),[MethodDecl(Id($T),Static,[param(Id(_3),ArrayType(3,IntType))],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(h),Id(aW),[])])'''
        self.assertTrue(TestAST.test(line, expect, 196))

    def test_197(self):
        line = '''Class __:_{Constructor (__:Array [Array [String ,0x30],0B10]){} }Class _1:J2{Val $667:Array [Array [Array [Array [Array [Array [String ,0X8_9],0b110],04_4_2_3],0x5_1F_6],016],4];Val _,$__3s__,$3,_:String ;}Class y{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(2,ArrayType(48,StringType)))],Block([]))]),ClassDecl(Id(_1),Id(J2),[AttributeDecl(Static,ConstDecl(Id($667),ArrayType(4,ArrayType(14,ArrayType(20982,ArrayType(2323,ArrayType(6,ArrayType(137,StringType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($__3s__),StringType,None)),AttributeDecl(Static,ConstDecl(Id($3),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None))]),ClassDecl(Id(y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 197))

    def test_198(self):
        line = '''Class z0N:_{}Class N:___{Val t1:Int ;}Class _:s{}Class _{Constructor (_23x,h:Array [Array [Float ,0137],77];_:m1;C,_,_,_:q__Y){}Constructor (){}$HE(__,_8_N:a;K,U:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(z0N),Id(_),[]),ClassDecl(Id(N),Id(___),[AttributeDecl(Instance,ConstDecl(Id(t1),IntType,None))]),ClassDecl(Id(_),Id(s),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_23x),ArrayType(77,ArrayType(95,FloatType))),param(Id(h),ArrayType(77,ArrayType(95,FloatType))),param(Id(_),ClassType(Id(m1))),param(Id(C),ClassType(Id(q__Y))),param(Id(_),ClassType(Id(q__Y))),param(Id(_),ClassType(Id(q__Y))),param(Id(_),ClassType(Id(q__Y)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($HE),Static,[param(Id(__),ClassType(Id(a))),param(Id(_8_N),ClassType(Id(a))),param(Id(K),BoolType),param(Id(U),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 198))

    def test_199(self):
        line = '''Class V{Constructor (_fJ30,o,O,__:Array [Float ,0x36]){} }Class _{Constructor (D:Array [Array [String ,0B1],2];_i,_,h:Array [Array [Boolean ,0B101010],0B1_0]){}Val $z:Float ;}Class _w:__T1{}'''
        expect = '''Program([ClassDecl(Id(V),[MethodDecl(Id(Constructor),Instance,[param(Id(_fJ30),ArrayType(54,FloatType)),param(Id(o),ArrayType(54,FloatType)),param(Id(O),ArrayType(54,FloatType)),param(Id(__),ArrayType(54,FloatType))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(D),ArrayType(2,ArrayType(1,StringType))),param(Id(_i),ArrayType(2,ArrayType(42,BoolType))),param(Id(_),ArrayType(2,ArrayType(42,BoolType))),param(Id(h),ArrayType(2,ArrayType(42,BoolType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($z),FloatType,None))]),ClassDecl(Id(_w),Id(__T1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 199))

    def test_200(self):
        line = '''Class _{Destructor (){ {} }_(LY,C:String ){} }Class dB:U{}Class R_81_:_0_{}Class Zt:b{Val r5_,$6,$_9Y4,$_,cwP:String ;Val SY:Array [Array [Array [Array [Int ,077],0x40],0X9],22];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(_),Instance,[param(Id(LY),StringType),param(Id(C),StringType)],Block([]))]),ClassDecl(Id(dB),Id(U),[]),ClassDecl(Id(R_81_),Id(_0_),[]),ClassDecl(Id(Zt),Id(b),[AttributeDecl(Instance,ConstDecl(Id(r5_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($6),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_9Y4),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(cwP),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(SY),ArrayType(22,ArrayType(9,ArrayType(64,ArrayType(63,IntType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 200))

    def test_201(self):
        line = '''Class P:WH{Var _X4_:Array [Array [Array [Boolean ,02_2_3_4],024],0B1001110];}Class D:D{Val Q:Float ;Var _:n;Val F7_B__:String ;Val I,__,$_,_1,_i4:Array [Array [Int ,0b1001_1_111_00],024];}Class D_2:d{}'''
        expect = '''Program([ClassDecl(Id(P),Id(WH),[AttributeDecl(Instance,VarDecl(Id(_X4_),ArrayType(78,ArrayType(20,ArrayType(1180,BoolType)))))]),ClassDecl(Id(D),Id(D),[AttributeDecl(Instance,ConstDecl(Id(Q),FloatType,None)),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(n)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(F7_B__),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(I),ArrayType(20,ArrayType(636,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(20,ArrayType(636,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(20,ArrayType(636,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_1),ArrayType(20,ArrayType(636,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_i4),ArrayType(20,ArrayType(636,IntType)),None))]),ClassDecl(Id(D_2),Id(d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 201))

    def test_202(self):
        line = '''Class O{Constructor (_,V:Array [Array [Array [Array [Array [Int ,045],07],0626_10_4_23],01],0XD];_4e:Array [Array [Array [Array [Array [Array [Array [Int ,18],0B11],0x1_A],0b101101],045],0B1],12_6_8];B_,_P:_;_0,t,a1:Array [Array [Float ,045],0x5F]){u::$_._();}Var _:Float ;H(_:Boolean ;_:String ){}W(){Return ;} }Class _{}'''
        expect = '''Program([ClassDecl(Id(O),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(13,ArrayType(1,ArrayType(13308179,ArrayType(7,ArrayType(37,IntType)))))),param(Id(V),ArrayType(13,ArrayType(1,ArrayType(13308179,ArrayType(7,ArrayType(37,IntType)))))),param(Id(_4e),ArrayType(1268,ArrayType(1,ArrayType(37,ArrayType(45,ArrayType(26,ArrayType(3,ArrayType(18,IntType)))))))),param(Id(B_),ClassType(Id(_))),param(Id(_P),ClassType(Id(_))),param(Id(_0),ArrayType(95,ArrayType(37,FloatType))),param(Id(t),ArrayType(95,ArrayType(37,FloatType))),param(Id(a1),ArrayType(95,ArrayType(37,FloatType)))],Block([Call(FieldAccess(Id(u),Id($_)),Id(_),[])])),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),MethodDecl(Id(H),Instance,[param(Id(_),BoolType),param(Id(_),StringType)],Block([])),MethodDecl(Id(W),Instance,[],Block([Return()]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 202))

    def test_203(self):
        line = '''Class T:T{}Class ___9:a{}Class N{}Class _:q{Constructor (_,_16,_,_X_A21jN67,u:_;h1_,_:ngo_){}Constructor (C:Boolean ){} }Class w_{}Class M6{Constructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(T),Id(T),[]),ClassDecl(Id(___9),Id(a),[]),ClassDecl(Id(N),[]),ClassDecl(Id(_),Id(q),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_16),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_X_A21jN67),ClassType(Id(_))),param(Id(u),ClassType(Id(_))),param(Id(h1_),ClassType(Id(ngo_))),param(Id(_),ClassType(Id(ngo_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(C),BoolType)],Block([]))]),ClassDecl(Id(w_),[]),ClassDecl(Id(M6),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 203))

    def test_204(self):
        line = '''Class F:_Kd{}Class _{}Class aO65_{Val _:Int ;Constructor (pt:_;W:Float ;t_6:Array [Array [Array [Array [Array [Array [Boolean ,0x23],10],0b1],0B10000],51],0X4A]){}Val $j5,$z:__83;}'''
        expect = '''Program([ClassDecl(Id(F),Id(_Kd),[]),ClassDecl(Id(_),[]),ClassDecl(Id(aO65_),[AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(pt),ClassType(Id(_))),param(Id(W),FloatType),param(Id(t_6),ArrayType(74,ArrayType(51,ArrayType(16,ArrayType(1,ArrayType(10,ArrayType(35,BoolType)))))))],Block([])),AttributeDecl(Static,ConstDecl(Id($j5),ClassType(Id(__83)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($z),ClassType(Id(__83)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 204))

    def test_205(self):
        line = '''Class _:_{Constructor (t,_,G,__3_8Q,j,LY,___,_X3_:Float ;_:Boolean ;Nz5,s8Nx_N,m___Y,X:Array [String ,032];X,_:i;z,Q:Array [Array [Int ,0X21],0b1];_6:Boolean ;_:Array [Boolean ,18]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(t),FloatType),param(Id(_),FloatType),param(Id(G),FloatType),param(Id(__3_8Q),FloatType),param(Id(j),FloatType),param(Id(LY),FloatType),param(Id(___),FloatType),param(Id(_X3_),FloatType),param(Id(_),BoolType),param(Id(Nz5),ArrayType(26,StringType)),param(Id(s8Nx_N),ArrayType(26,StringType)),param(Id(m___Y),ArrayType(26,StringType)),param(Id(X),ArrayType(26,StringType)),param(Id(X),ClassType(Id(i))),param(Id(_),ClassType(Id(i))),param(Id(z),ArrayType(1,ArrayType(33,IntType))),param(Id(Q),ArrayType(1,ArrayType(33,IntType))),param(Id(_6),BoolType),param(Id(_),ArrayType(18,BoolType))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 205))

    def test_206(self):
        line = '''Class _4{Destructor (){} }Class t:P{}Class v{Val _5:Array [String ,0XF];}Class C3___6{}Class _{$__(z:Array [Array [Array [Array [Float ,0B11011],75],0121],0b1001101];_f:Array [String ,15];_F3,X:Array [Boolean ,0XF0];x_,_:String ){}$e(_:Float ;d:Boolean ){} }Class _{$2j(){}$_(){} }'''
        expect = '''Program([ClassDecl(Id(_4),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(t),Id(P),[]),ClassDecl(Id(v),[AttributeDecl(Instance,ConstDecl(Id(_5),ArrayType(15,StringType),None))]),ClassDecl(Id(C3___6),[]),ClassDecl(Id(_),[MethodDecl(Id($__),Static,[param(Id(z),ArrayType(77,ArrayType(81,ArrayType(75,ArrayType(27,FloatType))))),param(Id(_f),ArrayType(15,StringType)),param(Id(_F3),ArrayType(240,BoolType)),param(Id(X),ArrayType(240,BoolType)),param(Id(x_),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id($e),Static,[param(Id(_),FloatType),param(Id(d),BoolType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($2j),Static,[],Block([])),MethodDecl(Id($_),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 206))

    def test_207(self):
        line = '''Class i:_9{Val $47:String ;}Class _{Constructor (u:Array [Boolean ,0b1010001];_,__7:_o;_:Array [Array [Array [Array [Float ,0B10],53],85],07];_,_,JY_7,_,Mz,_,d3lV:_){ {} }}'''
        expect = '''Program([ClassDecl(Id(i),Id(_9),[AttributeDecl(Static,ConstDecl(Id($47),StringType,None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(u),ArrayType(81,BoolType)),param(Id(_),ClassType(Id(_o))),param(Id(__7),ClassType(Id(_o))),param(Id(_),ArrayType(7,ArrayType(85,ArrayType(53,ArrayType(2,FloatType))))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(JY_7),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(Mz),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(d3lV),ClassType(Id(_)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 207))

    def test_208(self):
        line = '''Class _:l_{Val $i,$21,$V_:Boolean ;Constructor (_X:Array [Array [Array [Array [Array [Float ,0B1011],07],0B1],0XF],0XB]){Continue ;Continue ;}$n8(){}$N(R19_,_5:Array [Int ,71_8_1];_,Jz_7_,_:Boolean ;_:Array [Boolean ,0b1_1];i_4:_;Kt,p:Float ;_:Array [Int ,0B1]){ {}Break ;Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(l_),[AttributeDecl(Static,ConstDecl(Id($i),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($21),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($V_),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_X),ArrayType(11,ArrayType(15,ArrayType(1,ArrayType(7,ArrayType(11,FloatType))))))],Block([Continue,Continue])),MethodDecl(Id($n8),Static,[],Block([])),MethodDecl(Id($N),Static,[param(Id(R19_),ArrayType(7181,IntType)),param(Id(_5),ArrayType(7181,IntType)),param(Id(_),BoolType),param(Id(Jz_7_),BoolType),param(Id(_),BoolType),param(Id(_),ArrayType(3,BoolType)),param(Id(i_4),ClassType(Id(_))),param(Id(Kt),FloatType),param(Id(p),FloatType),param(Id(_),ArrayType(1,IntType))],Block([Block([]),Break,Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 208))

    def test_209(self):
        line = '''Class _n{}Class _f:LU_{Constructor (){}GZw(___K__,Z,__3,_:Array [String ,0xD];_f,__T:Int ;A:Array [Array [String ,0B1_1],2];GZ,_s:Array [Array [Boolean ,07_1_2_67],0b111001]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_n),[]),ClassDecl(Id(_f),Id(LU_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(GZw),Instance,[param(Id(___K__),ArrayType(13,StringType)),param(Id(Z),ArrayType(13,StringType)),param(Id(__3),ArrayType(13,StringType)),param(Id(_),ArrayType(13,StringType)),param(Id(_f),IntType),param(Id(__T),IntType),param(Id(A),ArrayType(2,ArrayType(3,StringType))),param(Id(GZ),ArrayType(57,ArrayType(29367,BoolType))),param(Id(_s),ArrayType(57,ArrayType(29367,BoolType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 209))

    def test_210(self):
        line = '''Class _:UiRc{}Class h:_{Constructor (){}Val _y_:String ;Val Q:__;Constructor (){} }Class Gh_:_l53Dw{}Class T:H{Destructor (){}E(_:_L;_D2,_:__;__z9:_;K6,wQ__,M:Float ){} }Class _ky:__{Constructor (_,_O_,_:oN){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(UiRc),[]),ClassDecl(Id(h),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_y_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(Q),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Gh_),Id(_l53Dw),[]),ClassDecl(Id(T),Id(H),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(E),Instance,[param(Id(_),ClassType(Id(_L))),param(Id(_D2),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(__z9),ClassType(Id(_))),param(Id(K6),FloatType),param(Id(wQ__),FloatType),param(Id(M),FloatType)],Block([]))]),ClassDecl(Id(_ky),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(oN))),param(Id(_O_),ClassType(Id(oN))),param(Id(_),ClassType(Id(oN)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 210))

    def test_211(self):
        line = '''Class _{_53(J_:SG;_,z,__e5,qJ,_,v_,_:Array [Array [Array [Int ,0X1F],0127],0b101101]){} }Class _:_b{Destructor (){}Val $L:Array [Array [Array [Array [Array [Array [Float ,0B111011],0B1],0b1_0],05],0127],0B111011];Destructor (){}Val j,$T:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_53),Instance,[param(Id(J_),ClassType(Id(SG))),param(Id(_),ArrayType(45,ArrayType(87,ArrayType(31,IntType)))),param(Id(z),ArrayType(45,ArrayType(87,ArrayType(31,IntType)))),param(Id(__e5),ArrayType(45,ArrayType(87,ArrayType(31,IntType)))),param(Id(qJ),ArrayType(45,ArrayType(87,ArrayType(31,IntType)))),param(Id(_),ArrayType(45,ArrayType(87,ArrayType(31,IntType)))),param(Id(v_),ArrayType(45,ArrayType(87,ArrayType(31,IntType)))),param(Id(_),ArrayType(45,ArrayType(87,ArrayType(31,IntType))))],Block([]))]),ClassDecl(Id(_),Id(_b),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($L),ArrayType(59,ArrayType(87,ArrayType(5,ArrayType(2,ArrayType(1,ArrayType(59,FloatType)))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(j),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($T),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 211))

    def test_212(self):
        line = '''Class _:He{Val ____:Array [Array [Array [String ,0b1001010],022],97];mp(jTB,_,____,A_,i5,___S:String ;m:V_Lx;____,_H,o,_D8:Int ){} }Class _X2_8{}Class N1M_{Val $9,$8,t71_:String ;}Class _:U{}Class Cl:____{Val $8,P:Array [Boolean ,97];Destructor (){}Destructor (){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(He),[AttributeDecl(Instance,ConstDecl(Id(____),ArrayType(97,ArrayType(18,ArrayType(74,StringType))),None)),MethodDecl(Id(mp),Instance,[param(Id(jTB),StringType),param(Id(_),StringType),param(Id(____),StringType),param(Id(A_),StringType),param(Id(i5),StringType),param(Id(___S),StringType),param(Id(m),ClassType(Id(V_Lx))),param(Id(____),IntType),param(Id(_H),IntType),param(Id(o),IntType),param(Id(_D8),IntType)],Block([]))]),ClassDecl(Id(_X2_8),[]),ClassDecl(Id(N1M_),[AttributeDecl(Static,ConstDecl(Id($9),StringType,None)),AttributeDecl(Static,ConstDecl(Id($8),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(t71_),StringType,None))]),ClassDecl(Id(_),Id(U),[]),ClassDecl(Id(Cl),Id(____),[AttributeDecl(Static,ConstDecl(Id($8),ArrayType(97,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(P),ArrayType(97,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 212))

    def test_213(self):
        line = '''Class _82:h{}Class _4O21{Var $PS_5_m8,Zc_:Array [String ,7];$U(_E:Int ;_,___,_,R_:Int ;_,_,f,O__:_){} }Class _{}Class _:A2{}Class fd:X{Destructor (){Break ;Return ;} }Class uk:x{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_82),Id(h),[]),ClassDecl(Id(_4O21),[AttributeDecl(Static,VarDecl(Id($PS_5_m8),ArrayType(7,StringType))),AttributeDecl(Instance,VarDecl(Id(Zc_),ArrayType(7,StringType))),MethodDecl(Id($U),Static,[param(Id(_E),IntType),param(Id(_),IntType),param(Id(___),IntType),param(Id(_),IntType),param(Id(R_),IntType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(f),ClassType(Id(_))),param(Id(O__),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(A2),[]),ClassDecl(Id(fd),Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Return()]))]),ClassDecl(Id(uk),Id(x),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 213))

    def test_214(self):
        line = '''Class YnU:__{Val _c:Um_;}Class _{Var _6,$_,F,Z,$7_5,_3,$7:Int ;Var b,$Ut:Array [Array [Float ,013],01];}Class r{Val yb_pC_g:Float ;Constructor (_p4,Ol,_wA_k:r){Break ;} }Class __{}Class _6:_{}Class _{Val __:Array [Boolean ,0xF];}Class _M:n_{}Class a56{}Class _qE___{Constructor (_,_,g2,Q_,J,t9,SB:Float ){ {} }}Class t_X__y{Constructor (){Var _,jN_,ax,_:Array [Array [Int ,0B1],07126];} }Class _84_7_7___98:IX_J0{}'''
        expect = '''Program([ClassDecl(Id(YnU),Id(__),[AttributeDecl(Instance,ConstDecl(Id(_c),ClassType(Id(Um_)),NullLiteral()))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_6),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Instance,VarDecl(Id(F),IntType)),AttributeDecl(Instance,VarDecl(Id(Z),IntType)),AttributeDecl(Static,VarDecl(Id($7_5),IntType)),AttributeDecl(Instance,VarDecl(Id(_3),IntType)),AttributeDecl(Static,VarDecl(Id($7),IntType)),AttributeDecl(Instance,VarDecl(Id(b),ArrayType(1,ArrayType(11,FloatType)))),AttributeDecl(Static,VarDecl(Id($Ut),ArrayType(1,ArrayType(11,FloatType))))]),ClassDecl(Id(r),[AttributeDecl(Instance,ConstDecl(Id(yb_pC_g),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_p4),ClassType(Id(r))),param(Id(Ol),ClassType(Id(r))),param(Id(_wA_k),ClassType(Id(r)))],Block([Break]))]),ClassDecl(Id(__),[]),ClassDecl(Id(_6),Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(15,BoolType),None))]),ClassDecl(Id(_M),Id(n_),[]),ClassDecl(Id(a56),[]),ClassDecl(Id(_qE___),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_),FloatType),param(Id(g2),FloatType),param(Id(Q_),FloatType),param(Id(J),FloatType),param(Id(t9),FloatType),param(Id(SB),FloatType)],Block([Block([])]))]),ClassDecl(Id(t_X__y),[MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(_),ArrayType(3670,ArrayType(1,IntType))),VarDecl(Id(jN_),ArrayType(3670,ArrayType(1,IntType))),VarDecl(Id(ax),ArrayType(3670,ArrayType(1,IntType))),VarDecl(Id(_),ArrayType(3670,ArrayType(1,IntType)))]))]),ClassDecl(Id(_84_7_7___98),Id(IX_J0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 214))

    def test_215(self):
        line = '''Class _u5_Ct_C:_68_8HT2{Val $_,I:Boolean ;}Class P_:LdY{Constructor (_,aT:Array [Float ,0X1_1_0_3]){ {G::$4_1();}Val In m:Array [Array [Float ,0b111111],99];}Val $_:Int ;Constructor (u1,B:U_;b,_:_){} }Class _5:C{}'''
        expect = '''Program([ClassDecl(Id(_u5_Ct_C),Id(_68_8HT2),[AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(I),BoolType,None))]),ClassDecl(Id(P_),Id(LdY),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(4355,FloatType)),param(Id(aT),ArrayType(4355,FloatType))],Block([Block([Call(Id(G),Id($4_1),[])]),ConstDecl(Id(m),ArrayType(99,ArrayType(63,FloatType)),None)])),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(u1),ClassType(Id(U_))),param(Id(B),ClassType(Id(U_))),param(Id(b),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_5),Id(C),[])])'''
        self.assertTrue(TestAST.test(line, expect, 215))

    def test_216(self):
        line = '''Class __{}Class T_2{Var __:Array [Array [Array [Float ,0x4E],19],042];Destructor (){}Val _:String ;}Class c_{}Class q:E{Constructor (G,k2:Boolean ;z_8:Array [Array [String ,0X7],0x1_D]){} }'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(T_2),[AttributeDecl(Instance,VarDecl(Id(__),ArrayType(34,ArrayType(19,ArrayType(78,FloatType))))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None))]),ClassDecl(Id(c_),[]),ClassDecl(Id(q),Id(E),[MethodDecl(Id(Constructor),Instance,[param(Id(G),BoolType),param(Id(k2),BoolType),param(Id(z_8),ArrayType(29,ArrayType(7,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 216))

    def test_217(self):
        line = '''Class _:p{$0(Y_:p;_:_;_5,u,__:Int ;C,P:Int ;_:w;_4,_M_75:Array [Int ,0X1D];x:Float ;G_:Array [Array [Int ,2],9];za:Array [Array [Array [Float ,0X7],2],0x7]){}Val $h,__:String ;Var g:Array [Float ,02];Constructor (___,X,_W:String ;es1,_8_,_:Array [Array [Array [Array [Boolean ,0612],2],0b1],0B110111];_,_x,B4,_xV0:T;__,_:Float ;T_v_1:Array [Int ,021];_4:Array [Array [String ,0xA],0xC];xf,__nG_,F0G,_189,_,S:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(p),[MethodDecl(Id($0),Static,[param(Id(Y_),ClassType(Id(p))),param(Id(_),ClassType(Id(_))),param(Id(_5),IntType),param(Id(u),IntType),param(Id(__),IntType),param(Id(C),IntType),param(Id(P),IntType),param(Id(_),ClassType(Id(w))),param(Id(_4),ArrayType(29,IntType)),param(Id(_M_75),ArrayType(29,IntType)),param(Id(x),FloatType),param(Id(G_),ArrayType(9,ArrayType(2,IntType))),param(Id(za),ArrayType(7,ArrayType(2,ArrayType(7,FloatType))))],Block([])),AttributeDecl(Static,ConstDecl(Id($h),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(__),StringType,None)),AttributeDecl(Instance,VarDecl(Id(g),ArrayType(2,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(___),StringType),param(Id(X),StringType),param(Id(_W),StringType),param(Id(es1),ArrayType(55,ArrayType(1,ArrayType(2,ArrayType(394,BoolType))))),param(Id(_8_),ArrayType(55,ArrayType(1,ArrayType(2,ArrayType(394,BoolType))))),param(Id(_),ArrayType(55,ArrayType(1,ArrayType(2,ArrayType(394,BoolType))))),param(Id(_),ClassType(Id(T))),param(Id(_x),ClassType(Id(T))),param(Id(B4),ClassType(Id(T))),param(Id(_xV0),ClassType(Id(T))),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(T_v_1),ArrayType(17,IntType)),param(Id(_4),ArrayType(12,ArrayType(10,StringType))),param(Id(xf),StringType),param(Id(__nG_),StringType),param(Id(F0G),StringType),param(Id(_189),StringType),param(Id(_),StringType),param(Id(S),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 217))

    def test_218(self):
        line = '''Class P{}Class wF696_9:E5{Val $w,So,$6d__,$_,_q4,__:String ;Val lZ,r,_,$8F,_c:_8F;}Class __4{}Class _:_b{Var $Op_,_:Array [Float ,0b10101];}Class ___{Constructor (_9_:_){} }'''
        expect = '''Program([ClassDecl(Id(P),[]),ClassDecl(Id(wF696_9),Id(E5),[AttributeDecl(Static,ConstDecl(Id($w),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(So),StringType,None)),AttributeDecl(Static,ConstDecl(Id($6d__),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_q4),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(__),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(lZ),ClassType(Id(_8F)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(r),ClassType(Id(_8F)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_8F)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($8F),ClassType(Id(_8F)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_c),ClassType(Id(_8F)),NullLiteral()))]),ClassDecl(Id(__4),[]),ClassDecl(Id(_),Id(_b),[AttributeDecl(Static,VarDecl(Id($Op_),ArrayType(21,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(21,FloatType)))]),ClassDecl(Id(___),[MethodDecl(Id(Constructor),Instance,[param(Id(_9_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 218))

    def test_219(self):
        line = '''Class u{__(__:_z7_;a,u,_8_,_9:q_9M9_){} }Class _:_8E___{}Class q{}Class y{Constructor (_:String ;z91:Array [Array [Float ,0B11],33]){}Destructor (){Return ;Continue ;}Destructor (){} }Class _P:_{}'''
        expect = '''Program([ClassDecl(Id(u),[MethodDecl(Id(__),Instance,[param(Id(__),ClassType(Id(_z7_))),param(Id(a),ClassType(Id(q_9M9_))),param(Id(u),ClassType(Id(q_9M9_))),param(Id(_8_),ClassType(Id(q_9M9_))),param(Id(_9),ClassType(Id(q_9M9_)))],Block([]))]),ClassDecl(Id(_),Id(_8E___),[]),ClassDecl(Id(q),[]),ClassDecl(Id(y),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(z91),ArrayType(33,ArrayType(3,FloatType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return(),Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_P),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 219))

    def test_220(self):
        line = '''Class _8{Val $9,$2c__,__:_R;f_5(B,w:String ;_5___:_;L5_,_7:_;RN:V;_:Array [Array [Array [Float ,0b1011],064],0B1_0];_9,_,EZ,_,_:Boolean ){ {}Return ;}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_8),[AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(_R)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($2c__),ClassType(Id(_R)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_R)),NullLiteral())),MethodDecl(Id(f_5),Instance,[param(Id(B),StringType),param(Id(w),StringType),param(Id(_5___),ClassType(Id(_))),param(Id(L5_),ClassType(Id(_))),param(Id(_7),ClassType(Id(_))),param(Id(RN),ClassType(Id(V))),param(Id(_),ArrayType(2,ArrayType(52,ArrayType(11,FloatType)))),param(Id(_9),BoolType),param(Id(_),BoolType),param(Id(EZ),BoolType),param(Id(_),BoolType),param(Id(_),BoolType)],Block([Block([]),Return()])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 220))

    def test_221(self):
        line = '''Class t:_{$_a(vl5z:Int ;_:Array [String ,0x18];_64,y01X,_C____,_jHz2,_7:Boolean ;_C:Array [Array [Array [Int ,024_56],077],0b101101]){}Var $__,$_:U_;Val $h9S,$5_:_4;Val n,xk:Int ;}Class O{}'''
        expect = '''Program([ClassDecl(Id(t),Id(_),[MethodDecl(Id($_a),Static,[param(Id(vl5z),IntType),param(Id(_),ArrayType(24,StringType)),param(Id(_64),BoolType),param(Id(y01X),BoolType),param(Id(_C____),BoolType),param(Id(_jHz2),BoolType),param(Id(_7),BoolType),param(Id(_C),ArrayType(45,ArrayType(63,ArrayType(1326,IntType))))],Block([])),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(U_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(U_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($h9S),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($5_),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(n),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(xk),IntType,None))]),ClassDecl(Id(O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 221))

    def test_222(self):
        line = '''Class _:_{_Z(){Break ;}Var $gR4_4:Array [Array [String ,0B1],07_2_7_3_7];$_83(U,_:K;X:_N_;rHi3_:Array [Float ,0x6];_6:vj;I_9:t){}Destructor (){}Var $cp0Z,_:JV;$__(){}Destructor (){}Var $_b3c,$_,W:_6;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(_Z),Instance,[],Block([Break])),AttributeDecl(Static,VarDecl(Id($gR4_4),ArrayType(30175,ArrayType(1,StringType)))),MethodDecl(Id($_83),Static,[param(Id(U),ClassType(Id(K))),param(Id(_),ClassType(Id(K))),param(Id(X),ClassType(Id(_N_))),param(Id(rHi3_),ArrayType(6,FloatType)),param(Id(_6),ClassType(Id(vj))),param(Id(I_9),ClassType(Id(t)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($cp0Z),ClassType(Id(JV)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(JV)),NullLiteral())),MethodDecl(Id($__),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_b3c),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(W),ClassType(Id(_6)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 222))

    def test_223(self):
        line = '''Class _7{}Class _1{$9(u:Boolean ;xjn_,J:String ;_:Array [Array [Array [Boolean ,2],0513],42];_:Array [String ,4_2];_,__:String ;m7J0,__:w;I,E:J_k__;_,_,__9,_,F:Array [Boolean ,9_7_09]){} }'''
        expect = '''Program([ClassDecl(Id(_7),[]),ClassDecl(Id(_1),[MethodDecl(Id($9),Static,[param(Id(u),BoolType),param(Id(xjn_),StringType),param(Id(J),StringType),param(Id(_),ArrayType(42,ArrayType(331,ArrayType(2,BoolType)))),param(Id(_),ArrayType(42,StringType)),param(Id(_),StringType),param(Id(__),StringType),param(Id(m7J0),ClassType(Id(w))),param(Id(__),ClassType(Id(w))),param(Id(I),ClassType(Id(J_k__))),param(Id(E),ClassType(Id(J_k__))),param(Id(_),ArrayType(9709,BoolType)),param(Id(_),ArrayType(9709,BoolType)),param(Id(__9),ArrayType(9709,BoolType)),param(Id(_),ArrayType(9709,BoolType)),param(Id(F),ArrayType(9709,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 223))

    def test_224(self):
        line = '''Class o:_3_{Constructor (o:String ){} }Class L:_k{Var p,$7:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0x6],0X1B],014_043],06],0b10],0x5A],07_50],0b1010001];Val _6:String ;}Class r8{}'''
        expect = '''Program([ClassDecl(Id(o),Id(_3_),[MethodDecl(Id(Constructor),Instance,[param(Id(o),StringType)],Block([]))]),ClassDecl(Id(L),Id(_k),[AttributeDecl(Instance,VarDecl(Id(p),ArrayType(81,ArrayType(488,ArrayType(90,ArrayType(2,ArrayType(6,ArrayType(6179,ArrayType(27,ArrayType(6,IntType)))))))))),AttributeDecl(Static,VarDecl(Id($7),ArrayType(81,ArrayType(488,ArrayType(90,ArrayType(2,ArrayType(6,ArrayType(6179,ArrayType(27,ArrayType(6,IntType)))))))))),AttributeDecl(Instance,ConstDecl(Id(_6),StringType,None))]),ClassDecl(Id(r8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 224))

    def test_225(self):
        line = '''Class _4{Var $05,$_a,$_HS,$__M:Array [Array [Float ,0X2F],8_9];}Class B_8W:Q{}Class _{Val D,$__8:Int ;Val $5__,W,$_e__:String ;Constructor (_2,A,_:Array [Array [String ,34],0x12];oH,v:_U_;_,_,_:Array [Array [Float ,7],012_40_1_6]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_4),[AttributeDecl(Static,VarDecl(Id($05),ArrayType(89,ArrayType(47,FloatType)))),AttributeDecl(Static,VarDecl(Id($_a),ArrayType(89,ArrayType(47,FloatType)))),AttributeDecl(Static,VarDecl(Id($_HS),ArrayType(89,ArrayType(47,FloatType)))),AttributeDecl(Static,VarDecl(Id($__M),ArrayType(89,ArrayType(47,FloatType))))]),ClassDecl(Id(B_8W),Id(Q),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(D),IntType,None)),AttributeDecl(Static,ConstDecl(Id($__8),IntType,None)),AttributeDecl(Static,ConstDecl(Id($5__),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(W),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_e__),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_2),ArrayType(18,ArrayType(34,StringType))),param(Id(A),ArrayType(18,ArrayType(34,StringType))),param(Id(_),ArrayType(18,ArrayType(34,StringType))),param(Id(oH),ClassType(Id(_U_))),param(Id(v),ClassType(Id(_U_))),param(Id(_),ArrayType(43022,ArrayType(7,FloatType))),param(Id(_),ArrayType(43022,ArrayType(7,FloatType))),param(Id(_),ArrayType(43022,ArrayType(7,FloatType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 225))

    def test_226(self):
        line = '''Class __P{Val ___:_8_;}Class ___{Val $14:Array [Array [Array [Array [Int ,0X40],6],0b1],0b1_001];}Class Vt{Val $__,_6,$_80qC,$X:Array [Array [Array [Boolean ,0x4],2_3_2_4],0107];}Class v08f0T7:_{}Class _:__{}'''
        expect = '''Program([ClassDecl(Id(__P),[AttributeDecl(Instance,ConstDecl(Id(___),ClassType(Id(_8_)),NullLiteral()))]),ClassDecl(Id(___),[AttributeDecl(Static,ConstDecl(Id($14),ArrayType(9,ArrayType(1,ArrayType(6,ArrayType(64,IntType)))),None))]),ClassDecl(Id(Vt),[AttributeDecl(Static,ConstDecl(Id($__),ArrayType(71,ArrayType(2324,ArrayType(4,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_6),ArrayType(71,ArrayType(2324,ArrayType(4,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_80qC),ArrayType(71,ArrayType(2324,ArrayType(4,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($X),ArrayType(71,ArrayType(2324,ArrayType(4,BoolType))),None))]),ClassDecl(Id(v08f0T7),Id(_),[]),ClassDecl(Id(_),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 226))

    def test_227(self):
        line = '''Class i_y:_{Destructor (){}Var $_K,_4,$1,z:Array [Array [Array [Array [Array [Array [Array [String ,40],9],94],04],0X40],94],0x7];}Class SM:T{Destructor (){} }Class _6{}Class b:b{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(i_y),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_K),ArrayType(7,ArrayType(94,ArrayType(64,ArrayType(4,ArrayType(94,ArrayType(9,ArrayType(40,StringType))))))))),AttributeDecl(Instance,VarDecl(Id(_4),ArrayType(7,ArrayType(94,ArrayType(64,ArrayType(4,ArrayType(94,ArrayType(9,ArrayType(40,StringType))))))))),AttributeDecl(Static,VarDecl(Id($1),ArrayType(7,ArrayType(94,ArrayType(64,ArrayType(4,ArrayType(94,ArrayType(9,ArrayType(40,StringType))))))))),AttributeDecl(Instance,VarDecl(Id(z),ArrayType(7,ArrayType(94,ArrayType(64,ArrayType(4,ArrayType(94,ArrayType(9,ArrayType(40,StringType)))))))))]),ClassDecl(Id(SM),Id(T),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_6),[]),ClassDecl(Id(b),Id(b),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 227))

    def test_228(self):
        line = '''Class T{Constructor (_w__L,_,A:A283_){Break ;}Destructor (){}Constructor (u:Array [Array [Array [String ,94],0b111101],0B1];C9___:Array [Array [Array [Float ,0X9],045],8_2_6_62_5_5_3_5_5_34];_2,_:Boolean ;e_I:_Bz_){} }'''
        expect = '''Program([ClassDecl(Id(T),[MethodDecl(Id(Constructor),Instance,[param(Id(_w__L),ClassType(Id(A283_))),param(Id(_),ClassType(Id(A283_))),param(Id(A),ClassType(Id(A283_)))],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(u),ArrayType(1,ArrayType(61,ArrayType(94,StringType)))),param(Id(C9___),ArrayType(826625535534,ArrayType(37,ArrayType(9,FloatType)))),param(Id(_2),BoolType),param(Id(_),BoolType),param(Id(e_I),ClassType(Id(_Bz_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 228))

    def test_229(self):
        line = '''Class _x:H{Destructor (){}Constructor (_oD:Array [Array [Array [Boolean ,0x7],0X49],0b1_1];Y:d;S36t9_g_:M2___;_,__,_1:jO_q314;_:Array [String ,0B1_1_11];u15:Float ){} }Class x6:V{}'''
        expect = '''Program([ClassDecl(Id(_x),Id(H),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_oD),ArrayType(3,ArrayType(73,ArrayType(7,BoolType)))),param(Id(Y),ClassType(Id(d))),param(Id(S36t9_g_),ClassType(Id(M2___))),param(Id(_),ClassType(Id(jO_q314))),param(Id(__),ClassType(Id(jO_q314))),param(Id(_1),ClassType(Id(jO_q314))),param(Id(_),ArrayType(15,StringType)),param(Id(u15),FloatType)],Block([]))]),ClassDecl(Id(x6),Id(V),[])])'''
        self.assertTrue(TestAST.test(line, expect, 229))

    def test_230(self):
        line = '''Class _9:_{$18Kc(){}Var _wZQ6:Array [Boolean ,07];Val $_,WDf9_,$4:Array [Array [Array [Array [Array [Array [Boolean ,0x16],0102],0XAB1_C0],0B101],0B1],0xD];}Class _{$63(_:Array [Array [Float ,03],0102]){}W(n,_y:String ;_,I,f:Array [Array [Int ,48],0X4];N:u;_S,____Fh,__98_:Array [Array [Float ,0B1_0],06];v:Float ;_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_9),Id(_),[MethodDecl(Id($18Kc),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_wZQ6),ArrayType(7,BoolType))),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(13,ArrayType(1,ArrayType(5,ArrayType(700864,ArrayType(66,ArrayType(22,BoolType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(WDf9_),ArrayType(13,ArrayType(1,ArrayType(5,ArrayType(700864,ArrayType(66,ArrayType(22,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(13,ArrayType(1,ArrayType(5,ArrayType(700864,ArrayType(66,ArrayType(22,BoolType)))))),None))]),ClassDecl(Id(_),[MethodDecl(Id($63),Static,[param(Id(_),ArrayType(66,ArrayType(3,FloatType)))],Block([])),MethodDecl(Id(W),Instance,[param(Id(n),StringType),param(Id(_y),StringType),param(Id(_),ArrayType(4,ArrayType(48,IntType))),param(Id(I),ArrayType(4,ArrayType(48,IntType))),param(Id(f),ArrayType(4,ArrayType(48,IntType))),param(Id(N),ClassType(Id(u))),param(Id(_S),ArrayType(6,ArrayType(2,FloatType))),param(Id(____Fh),ArrayType(6,ArrayType(2,FloatType))),param(Id(__98_),ArrayType(6,ArrayType(2,FloatType))),param(Id(v),FloatType),param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 230))

    def test_231(self):
        line = '''Class E_V:_o_7t{$5(u__,T:Array [Array [Boolean ,8],7];_:___;R:Boolean ){} }Class _{}Class K_:_{Constructor (__o__,__:Array [Array [Array [Array [Array [Array [String ,021],0b1010000],82],10_3_6],4_8],0x25];__80:Array [Array [Array [Array [Array [String ,7],021],021],0X17],01];p,_8,uO,_,w3,R4L,A_R,y,__:ds;_,t_:Int ;_,y,_,_:_){Continue ;}Constructor (KQ_,a,_,_,_:s;E,X_:Array [Boolean ,0B101000]){} }Class _:_1_F{}'''
        expect = '''Program([ClassDecl(Id(E_V),Id(_o_7t),[MethodDecl(Id($5),Static,[param(Id(u__),ArrayType(7,ArrayType(8,BoolType))),param(Id(T),ArrayType(7,ArrayType(8,BoolType))),param(Id(_),ClassType(Id(___))),param(Id(R),BoolType)],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(K_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__o__),ArrayType(37,ArrayType(48,ArrayType(1036,ArrayType(82,ArrayType(80,ArrayType(17,StringType))))))),param(Id(__),ArrayType(37,ArrayType(48,ArrayType(1036,ArrayType(82,ArrayType(80,ArrayType(17,StringType))))))),param(Id(__80),ArrayType(1,ArrayType(23,ArrayType(17,ArrayType(17,ArrayType(7,StringType)))))),param(Id(p),ClassType(Id(ds))),param(Id(_8),ClassType(Id(ds))),param(Id(uO),ClassType(Id(ds))),param(Id(_),ClassType(Id(ds))),param(Id(w3),ClassType(Id(ds))),param(Id(R4L),ClassType(Id(ds))),param(Id(A_R),ClassType(Id(ds))),param(Id(y),ClassType(Id(ds))),param(Id(__),ClassType(Id(ds))),param(Id(_),IntType),param(Id(t_),IntType),param(Id(_),ClassType(Id(_))),param(Id(y),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(KQ_),ClassType(Id(s))),param(Id(a),ClassType(Id(s))),param(Id(_),ClassType(Id(s))),param(Id(_),ClassType(Id(s))),param(Id(_),ClassType(Id(s))),param(Id(E),ArrayType(40,BoolType)),param(Id(X_),ArrayType(40,BoolType))],Block([]))]),ClassDecl(Id(_),Id(_1_F),[])])'''
        self.assertTrue(TestAST.test(line, expect, 231))

    def test_232(self):
        line = '''Class P:L{}Class A{Constructor (_3_,O408x,g0_:Array [Array [Array [Int ,2],0b1_10],0107];_:Array [Array [Float ,0b1000100],0X5A];_1,qD,_:_;q:Float ;_6,_6791:Array [Array [String ,0b1],0X6_E_0_9];o,_:Array [Int ,0x5C]){}Destructor (){} }Class H_{jvS_(H,v,RsDd7__,Y__:String ;_,_,Dw_M,__:Array [Float ,0b1000100];x:Array [Array [Float ,0X5A],0XC577C_8D]){} }'''
        expect = '''Program([ClassDecl(Id(P),Id(L),[]),ClassDecl(Id(A),[MethodDecl(Id(Constructor),Instance,[param(Id(_3_),ArrayType(71,ArrayType(6,ArrayType(2,IntType)))),param(Id(O408x),ArrayType(71,ArrayType(6,ArrayType(2,IntType)))),param(Id(g0_),ArrayType(71,ArrayType(6,ArrayType(2,IntType)))),param(Id(_),ArrayType(90,ArrayType(68,FloatType))),param(Id(_1),ClassType(Id(_))),param(Id(qD),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(q),FloatType),param(Id(_6),ArrayType(28169,ArrayType(1,StringType))),param(Id(_6791),ArrayType(28169,ArrayType(1,StringType))),param(Id(o),ArrayType(92,IntType)),param(Id(_),ArrayType(92,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(H_),[MethodDecl(Id(jvS_),Instance,[param(Id(H),StringType),param(Id(v),StringType),param(Id(RsDd7__),StringType),param(Id(Y__),StringType),param(Id(_),ArrayType(68,FloatType)),param(Id(_),ArrayType(68,FloatType)),param(Id(Dw_M),ArrayType(68,FloatType)),param(Id(__),ArrayType(68,FloatType)),param(Id(x),ArrayType(207060109,ArrayType(90,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 232))

    def test_233(self):
        line = '''Class _G{$Sc8(_5,_L,l,_:Array [String ,0x46];Q_w_9_67C,_LS,_0FyD__,_:Array [String ,0X21];bz_9,_e8__,I4S:Float ;_:Boolean ;_:Array [Array [Float ,0X5],0B110011];_o_:Array [Array [Array [Array [Array [Array [Int ,55],55],0X21],0x46],0X21],031]){}$_M(N_8SU:g;_:AH2_){}Destructor (){}Val _:d;}'''
        expect = '''Program([ClassDecl(Id(_G),[MethodDecl(Id($Sc8),Static,[param(Id(_5),ArrayType(70,StringType)),param(Id(_L),ArrayType(70,StringType)),param(Id(l),ArrayType(70,StringType)),param(Id(_),ArrayType(70,StringType)),param(Id(Q_w_9_67C),ArrayType(33,StringType)),param(Id(_LS),ArrayType(33,StringType)),param(Id(_0FyD__),ArrayType(33,StringType)),param(Id(_),ArrayType(33,StringType)),param(Id(bz_9),FloatType),param(Id(_e8__),FloatType),param(Id(I4S),FloatType),param(Id(_),BoolType),param(Id(_),ArrayType(51,ArrayType(5,FloatType))),param(Id(_o_),ArrayType(25,ArrayType(33,ArrayType(70,ArrayType(33,ArrayType(55,ArrayType(55,IntType)))))))],Block([])),MethodDecl(Id($_M),Static,[param(Id(N_8SU),ClassType(Id(g))),param(Id(_),ClassType(Id(AH2_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(d)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 233))

    def test_234(self):
        line = '''Class _U:_0y{}Class ARu:_Tb_f7_6{Var $N:s_8;}Class _5k{}Class x_{__qg(_,o:__;S2:Array [Boolean ,0x1_6]){}Constructor (_1F3:String ){} }Class eA2:_G488G{}Class __2{Z(){Val ___:gj_;}Var B:c_;}'''
        expect = '''Program([ClassDecl(Id(_U),Id(_0y),[]),ClassDecl(Id(ARu),Id(_Tb_f7_6),[AttributeDecl(Static,VarDecl(Id($N),ClassType(Id(s_8)),NullLiteral()))]),ClassDecl(Id(_5k),[]),ClassDecl(Id(x_),[MethodDecl(Id(__qg),Instance,[param(Id(_),ClassType(Id(__))),param(Id(o),ClassType(Id(__))),param(Id(S2),ArrayType(22,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_1F3),StringType)],Block([]))]),ClassDecl(Id(eA2),Id(_G488G),[]),ClassDecl(Id(__2),[MethodDecl(Id(Z),Instance,[],Block([ConstDecl(Id(___),ClassType(Id(gj_)),NullLiteral())])),AttributeDecl(Instance,VarDecl(Id(B),ClassType(Id(c_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 234))

    def test_235(self):
        line = '''Class u{Constructor (_,Yk:_o_UN){}$_(){Val __:Array [Int ,0B1];}Destructor (){ {Break ;} }}Class k:m{Var $rI_:Array [Array [Array [Array [Boolean ,0X44],78],3],9];Var $E:E;}Class kr:_1{}'''
        expect = '''Program([ClassDecl(Id(u),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_o_UN))),param(Id(Yk),ClassType(Id(_o_UN)))],Block([])),MethodDecl(Id($_),Static,[],Block([ConstDecl(Id(__),ArrayType(1,IntType),None)])),MethodDecl(Id(Destructor),Instance,[],Block([Block([Break])]))]),ClassDecl(Id(k),Id(m),[AttributeDecl(Static,VarDecl(Id($rI_),ArrayType(9,ArrayType(3,ArrayType(78,ArrayType(68,BoolType)))))),AttributeDecl(Static,VarDecl(Id($E),ClassType(Id(E)),NullLiteral()))]),ClassDecl(Id(kr),Id(_1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 235))

    def test_236(self):
        line = '''Class _:b_{Destructor (){} }Class Iu{Destructor (){}Var $40_,$_w,$__:Array [Array [Array [Boolean ,3],0b1_10],0XA5];$2_56(k___,O,ZK:Boolean ;_T_Gj_,k5:_2){} }Class __5{}'''
        expect = '''Program([ClassDecl(Id(_),Id(b_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Iu),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($40_),ArrayType(165,ArrayType(6,ArrayType(3,BoolType))))),AttributeDecl(Static,VarDecl(Id($_w),ArrayType(165,ArrayType(6,ArrayType(3,BoolType))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(165,ArrayType(6,ArrayType(3,BoolType))))),MethodDecl(Id($2_56),Static,[param(Id(k___),BoolType),param(Id(O),BoolType),param(Id(ZK),BoolType),param(Id(_T_Gj_),ClassType(Id(_2))),param(Id(k5),ClassType(Id(_2)))],Block([]))]),ClassDecl(Id(__5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 236))

    def test_237(self):
        line = '''Class A:_{Constructor (b6AG:_){ {}Return ;}Var $a:Array [Array [Array [Float ,0X8E_F_F2_3_3_CB],0xC_D],0B10_0];Val $_,$22_,$47P:String ;Constructor (){} }Class _Z{Val $6_,$n,E48C,$9S:c_Fa;}Class t{}'''
        expect = '''Program([ClassDecl(Id(A),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(b6AG),ClassType(Id(_)))],Block([Block([]),Return()])),AttributeDecl(Static,VarDecl(Id($a),ArrayType(4,ArrayType(205,ArrayType(38385365963,FloatType))))),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($22_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($47P),StringType,None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_Z),[AttributeDecl(Static,ConstDecl(Id($6_),ClassType(Id(c_Fa)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($n),ClassType(Id(c_Fa)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(E48C),ClassType(Id(c_Fa)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9S),ClassType(Id(c_Fa)),NullLiteral()))]),ClassDecl(Id(t),[])])'''
        self.assertTrue(TestAST.test(line, expect, 237))

    def test_238(self):
        line = '''Class M{}Class _{$u(Z_:Boolean ;_,_8c__s,__to,_,_lq7,B2b6C:Array [Array [Array [Array [Array [Int ,0B1100100],461],077],0X4D],9];g:Tp){}Var qt,R,$_c__:Array [Float ,0XF];}Class __7{}'''
        expect = '''Program([ClassDecl(Id(M),[]),ClassDecl(Id(_),[MethodDecl(Id($u),Static,[param(Id(Z_),BoolType),param(Id(_),ArrayType(9,ArrayType(77,ArrayType(63,ArrayType(461,ArrayType(100,IntType)))))),param(Id(_8c__s),ArrayType(9,ArrayType(77,ArrayType(63,ArrayType(461,ArrayType(100,IntType)))))),param(Id(__to),ArrayType(9,ArrayType(77,ArrayType(63,ArrayType(461,ArrayType(100,IntType)))))),param(Id(_),ArrayType(9,ArrayType(77,ArrayType(63,ArrayType(461,ArrayType(100,IntType)))))),param(Id(_lq7),ArrayType(9,ArrayType(77,ArrayType(63,ArrayType(461,ArrayType(100,IntType)))))),param(Id(B2b6C),ArrayType(9,ArrayType(77,ArrayType(63,ArrayType(461,ArrayType(100,IntType)))))),param(Id(g),ClassType(Id(Tp)))],Block([])),AttributeDecl(Instance,VarDecl(Id(qt),ArrayType(15,FloatType))),AttributeDecl(Instance,VarDecl(Id(R),ArrayType(15,FloatType))),AttributeDecl(Static,VarDecl(Id($_c__),ArrayType(15,FloatType)))]),ClassDecl(Id(__7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 238))

    def test_239(self):
        line = '''Class LO_w_:zp{}Class DAA:_{Constructor (_:Array [String ,0X2B];j,O,_N_29_:h_;F,N:Array [Array [Array [Array [Int ,0B1010001],31],01_5],31];_,q,mP_,_B,Nw,P:Array [Array [Float ,0B1010001],49];o,fg,I,_:Float ){}Val $_:Float ;}'''
        expect = '''Program([ClassDecl(Id(LO_w_),Id(zp),[]),ClassDecl(Id(DAA),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(43,StringType)),param(Id(j),ClassType(Id(h_))),param(Id(O),ClassType(Id(h_))),param(Id(_N_29_),ClassType(Id(h_))),param(Id(F),ArrayType(31,ArrayType(13,ArrayType(31,ArrayType(81,IntType))))),param(Id(N),ArrayType(31,ArrayType(13,ArrayType(31,ArrayType(81,IntType))))),param(Id(_),ArrayType(49,ArrayType(81,FloatType))),param(Id(q),ArrayType(49,ArrayType(81,FloatType))),param(Id(mP_),ArrayType(49,ArrayType(81,FloatType))),param(Id(_B),ArrayType(49,ArrayType(81,FloatType))),param(Id(Nw),ArrayType(49,ArrayType(81,FloatType))),param(Id(P),ArrayType(49,ArrayType(81,FloatType))),param(Id(o),FloatType),param(Id(fg),FloatType),param(Id(I),FloatType),param(Id(_),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 239))

    def test_240(self):
        line = '''Class y{$599(_,_:Boolean ;n:_9l9k;_,___:Array [Array [Int ,0xD],0X5];g,_,_YMr:Array [Array [Array [Boolean ,0xC],0B10_10],0B1];___,c,__:Int ;_5Y:String ){}$_(m_4,_:Array [String ,0b101]){} }'''
        expect = '''Program([ClassDecl(Id(y),[MethodDecl(Id($599),Static,[param(Id(_),BoolType),param(Id(_),BoolType),param(Id(n),ClassType(Id(_9l9k))),param(Id(_),ArrayType(5,ArrayType(13,IntType))),param(Id(___),ArrayType(5,ArrayType(13,IntType))),param(Id(g),ArrayType(1,ArrayType(10,ArrayType(12,BoolType)))),param(Id(_),ArrayType(1,ArrayType(10,ArrayType(12,BoolType)))),param(Id(_YMr),ArrayType(1,ArrayType(10,ArrayType(12,BoolType)))),param(Id(___),IntType),param(Id(c),IntType),param(Id(__),IntType),param(Id(_5Y),StringType)],Block([])),MethodDecl(Id($_),Static,[param(Id(m_4),ArrayType(5,StringType)),param(Id(_),ArrayType(5,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 240))

    def test_241(self):
        line = '''Class _x{Var _:String ;Constructor (E:Boolean ;Z9_D2,a_,_J_42J:Array [Array [Array [Boolean ,0x16],071],0X4];__:Array [Boolean ,51];n:Int ;_N:_D;___,I,__,_Va396:Array [String ,0x24]){} }Class _gX:GNs{}'''
        expect = '''Program([ClassDecl(Id(_x),[AttributeDecl(Instance,VarDecl(Id(_),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(E),BoolType),param(Id(Z9_D2),ArrayType(4,ArrayType(57,ArrayType(22,BoolType)))),param(Id(a_),ArrayType(4,ArrayType(57,ArrayType(22,BoolType)))),param(Id(_J_42J),ArrayType(4,ArrayType(57,ArrayType(22,BoolType)))),param(Id(__),ArrayType(51,BoolType)),param(Id(n),IntType),param(Id(_N),ClassType(Id(_D))),param(Id(___),ArrayType(36,StringType)),param(Id(I),ArrayType(36,StringType)),param(Id(__),ArrayType(36,StringType)),param(Id(_Va396),ArrayType(36,StringType))],Block([]))]),ClassDecl(Id(_gX),Id(GNs),[])])'''
        self.assertTrue(TestAST.test(line, expect, 241))

    def test_242(self):
        line = '''Class u:_{}Class v9_:a{}Class C{_(_531,_,z,_:Boolean ){}Constructor (__:Boolean ;_5_:Array [Array [Boolean ,0B1],0B10];v_5,i,_4:Array [Array [String ,0x1],0B1]){} }'''
        expect = '''Program([ClassDecl(Id(u),Id(_),[]),ClassDecl(Id(v9_),Id(a),[]),ClassDecl(Id(C),[MethodDecl(Id(_),Instance,[param(Id(_531),BoolType),param(Id(_),BoolType),param(Id(z),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),BoolType),param(Id(_5_),ArrayType(2,ArrayType(1,BoolType))),param(Id(v_5),ArrayType(1,ArrayType(1,StringType))),param(Id(i),ArrayType(1,ArrayType(1,StringType))),param(Id(_4),ArrayType(1,ArrayType(1,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 242))

    def test_243(self):
        line = '''Class GU:__{}Class Q_:k{}Class Q:_{Constructor (_,d,_,_I,_5,Z,_X:Array [Boolean ,075]){} }Class O{}Class X:_{t_(D,k:Array [Int ,59_38]){Continue ;}_(){}Val _0,_6O,_9__J8UK:Array [Boolean ,1_45];Var g:Float ;Constructor (){Break ;} }Class P8{}Class u:O{}'''
        expect = '''Program([ClassDecl(Id(GU),Id(__),[]),ClassDecl(Id(Q_),Id(k),[]),ClassDecl(Id(Q),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(61,BoolType)),param(Id(d),ArrayType(61,BoolType)),param(Id(_),ArrayType(61,BoolType)),param(Id(_I),ArrayType(61,BoolType)),param(Id(_5),ArrayType(61,BoolType)),param(Id(Z),ArrayType(61,BoolType)),param(Id(_X),ArrayType(61,BoolType))],Block([]))]),ClassDecl(Id(O),[]),ClassDecl(Id(X),Id(_),[MethodDecl(Id(t_),Instance,[param(Id(D),ArrayType(5938,IntType)),param(Id(k),ArrayType(5938,IntType))],Block([Continue])),MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_0),ArrayType(145,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_6O),ArrayType(145,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_9__J8UK),ArrayType(145,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(g),FloatType)),MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(P8),[]),ClassDecl(Id(u),Id(O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 243))

    def test_244(self):
        line = '''Class _di4{}Class _0__7{Y(_:Int ;R_3_L3:Int ;y7_0:Eo;D:Boolean ;_:Array [Array [Boolean ,0x8],23];_:Array [Int ,0B111001];__34_G,I,_,_W_,_9:Int ;o,_1:Int ;K:Array [Array [String ,0B111001],0B111001]){} }'''
        expect = '''Program([ClassDecl(Id(_di4),[]),ClassDecl(Id(_0__7),[MethodDecl(Id(Y),Instance,[param(Id(_),IntType),param(Id(R_3_L3),IntType),param(Id(y7_0),ClassType(Id(Eo))),param(Id(D),BoolType),param(Id(_),ArrayType(23,ArrayType(8,BoolType))),param(Id(_),ArrayType(57,IntType)),param(Id(__34_G),IntType),param(Id(I),IntType),param(Id(_),IntType),param(Id(_W_),IntType),param(Id(_9),IntType),param(Id(o),IntType),param(Id(_1),IntType),param(Id(K),ArrayType(57,ArrayType(57,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 244))

    def test_245(self):
        line = '''Class ___:_{$3(_,t,w4D,M7,__4_:Array [Boolean ,0103];S:Float ;_,_R:Array [Array [Array [Float ,0103],0x1A],0x6];D:g;_,_d7,__3,V_,__,_0,_f_,_2_6o,_3_:Boolean ;___:String ){} }'''
        expect = '''Program([ClassDecl(Id(___),Id(_),[MethodDecl(Id($3),Static,[param(Id(_),ArrayType(67,BoolType)),param(Id(t),ArrayType(67,BoolType)),param(Id(w4D),ArrayType(67,BoolType)),param(Id(M7),ArrayType(67,BoolType)),param(Id(__4_),ArrayType(67,BoolType)),param(Id(S),FloatType),param(Id(_),ArrayType(6,ArrayType(26,ArrayType(67,FloatType)))),param(Id(_R),ArrayType(6,ArrayType(26,ArrayType(67,FloatType)))),param(Id(D),ClassType(Id(g))),param(Id(_),BoolType),param(Id(_d7),BoolType),param(Id(__3),BoolType),param(Id(V_),BoolType),param(Id(__),BoolType),param(Id(_0),BoolType),param(Id(_f_),BoolType),param(Id(_2_6o),BoolType),param(Id(_3_),BoolType),param(Id(___),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 245))

    def test_246(self):
        line = '''Class __:Q_s{Var CqD,L:fq9;Constructor (__,__,_,g:Array [Array [Array [Array [Array [Array [Boolean ,8_0],0b1],0x10],0b1100010],0131],58];Zj,_:Yl__sf){} }Class W_S7U:V{Val _:Array [Array [Array [Int ,0XB1],58],0b1];}'''
        expect = '''Program([ClassDecl(Id(__),Id(Q_s),[AttributeDecl(Instance,VarDecl(Id(CqD),ClassType(Id(fq9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(L),ClassType(Id(fq9)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(58,ArrayType(89,ArrayType(98,ArrayType(16,ArrayType(1,ArrayType(80,BoolType))))))),param(Id(__),ArrayType(58,ArrayType(89,ArrayType(98,ArrayType(16,ArrayType(1,ArrayType(80,BoolType))))))),param(Id(_),ArrayType(58,ArrayType(89,ArrayType(98,ArrayType(16,ArrayType(1,ArrayType(80,BoolType))))))),param(Id(g),ArrayType(58,ArrayType(89,ArrayType(98,ArrayType(16,ArrayType(1,ArrayType(80,BoolType))))))),param(Id(Zj),ClassType(Id(Yl__sf))),param(Id(_),ClassType(Id(Yl__sf)))],Block([]))]),ClassDecl(Id(W_S7U),Id(V),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(58,ArrayType(177,IntType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 246))

    def test_247(self):
        line = '''Class __6{}Class _{m(d,K,_,_,J_:Array [Int ,0xA];q,EP:A;NqN:Boolean ;_,j_40,__,_3:Boolean ;n9yr:String ;Rr:Array [Array [Array [Array [Float ,061],0X24],1],0B111111];y9:f;e:n){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__6),[]),ClassDecl(Id(_),[MethodDecl(Id(m),Instance,[param(Id(d),ArrayType(10,IntType)),param(Id(K),ArrayType(10,IntType)),param(Id(_),ArrayType(10,IntType)),param(Id(_),ArrayType(10,IntType)),param(Id(J_),ArrayType(10,IntType)),param(Id(q),ClassType(Id(A))),param(Id(EP),ClassType(Id(A))),param(Id(NqN),BoolType),param(Id(_),BoolType),param(Id(j_40),BoolType),param(Id(__),BoolType),param(Id(_3),BoolType),param(Id(n9yr),StringType),param(Id(Rr),ArrayType(63,ArrayType(1,ArrayType(36,ArrayType(49,FloatType))))),param(Id(y9),ClassType(Id(f))),param(Id(e),ClassType(Id(n)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 247))

    def test_248(self):
        line = '''Class i:I{Var _1,$s:Array [Array [String ,03],0XB_85_7];Constructor (Y4,j9,K___,q_:Array [Float ,0B111101];_,_:String ;m,D:Array [String ,0xB]){}Constructor (__,X,_,_,_6,Kj,H:KI__){} }Class Z_E{}'''
        expect = '''Program([ClassDecl(Id(i),Id(I),[AttributeDecl(Instance,VarDecl(Id(_1),ArrayType(47191,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($s),ArrayType(47191,ArrayType(3,StringType)))),MethodDecl(Id(Constructor),Instance,[param(Id(Y4),ArrayType(61,FloatType)),param(Id(j9),ArrayType(61,FloatType)),param(Id(K___),ArrayType(61,FloatType)),param(Id(q_),ArrayType(61,FloatType)),param(Id(_),StringType),param(Id(_),StringType),param(Id(m),ArrayType(11,StringType)),param(Id(D),ArrayType(11,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(KI__))),param(Id(X),ClassType(Id(KI__))),param(Id(_),ClassType(Id(KI__))),param(Id(_),ClassType(Id(KI__))),param(Id(_6),ClassType(Id(KI__))),param(Id(Kj),ClassType(Id(KI__))),param(Id(H),ClassType(Id(KI__)))],Block([]))]),ClassDecl(Id(Z_E),[])])'''
        self.assertTrue(TestAST.test(line, expect, 248))

    def test_249(self):
        line = '''Class DU___{Destructor (){}Var _,$_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,030],96],0B111110],0b10],030],0b110],96],0b10011],85_4],5],0b1_1];}'''
        expect = '''Program([ClassDecl(Id(DU___),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(5,ArrayType(854,ArrayType(19,ArrayType(96,ArrayType(6,ArrayType(24,ArrayType(2,ArrayType(62,ArrayType(96,ArrayType(24,FloatType))))))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,ArrayType(5,ArrayType(854,ArrayType(19,ArrayType(96,ArrayType(6,ArrayType(24,ArrayType(2,ArrayType(62,ArrayType(96,ArrayType(24,FloatType)))))))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 249))

    def test_250(self):
        line = '''Class c_{Var $s0J,V6,$9,q,$_:Array [Array [Boolean ,6],0b1000000];Constructor (){Break ;Continue ;}Var Z:T_6;}Class _3n{Val Wue__:I_;Val _:Array [Array [Array [Int ,6],0b1],0b1];}'''
        expect = '''Program([ClassDecl(Id(c_),[AttributeDecl(Static,VarDecl(Id($s0J),ArrayType(64,ArrayType(6,BoolType)))),AttributeDecl(Instance,VarDecl(Id(V6),ArrayType(64,ArrayType(6,BoolType)))),AttributeDecl(Static,VarDecl(Id($9),ArrayType(64,ArrayType(6,BoolType)))),AttributeDecl(Instance,VarDecl(Id(q),ArrayType(64,ArrayType(6,BoolType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(64,ArrayType(6,BoolType)))),MethodDecl(Id(Constructor),Instance,[],Block([Break,Continue])),AttributeDecl(Instance,VarDecl(Id(Z),ClassType(Id(T_6)),NullLiteral()))]),ClassDecl(Id(_3n),[AttributeDecl(Instance,ConstDecl(Id(Wue__),ClassType(Id(I_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(1,ArrayType(6,IntType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 250))

    def test_251(self):
        line = '''Class _:_{}Class MN{}Class U0{}Class _:_b1{Constructor (__718:Array [Array [Array [Float ,0x5],0B10],0X7];__,F__gW9__:Array [Array [Float ,0X35],02]){}$L(){} }Class O_:f{}Class _:__47{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(MN),[]),ClassDecl(Id(U0),[]),ClassDecl(Id(_),Id(_b1),[MethodDecl(Id(Constructor),Instance,[param(Id(__718),ArrayType(7,ArrayType(2,ArrayType(5,FloatType)))),param(Id(__),ArrayType(2,ArrayType(53,FloatType))),param(Id(F__gW9__),ArrayType(2,ArrayType(53,FloatType)))],Block([])),MethodDecl(Id($L),Static,[],Block([]))]),ClassDecl(Id(O_),Id(f),[]),ClassDecl(Id(_),Id(__47),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 251))

    def test_252(self):
        line = '''Class z:U{}Class H3:n___{Constructor (I,___V,_,_,__0,Tk_5,k3,_l:Array [Array [Float ,0b10_1],075];I,_,_:Array [Boolean ,0b1]){Continue ;} }Class P_{_(_:Int ){q::$O();}P(_c6V8DxQy7i_:Array [Float ,1_3_80];__,O,W:_;_87:String ){} }'''
        expect = '''Program([ClassDecl(Id(z),Id(U),[]),ClassDecl(Id(H3),Id(n___),[MethodDecl(Id(Constructor),Instance,[param(Id(I),ArrayType(61,ArrayType(5,FloatType))),param(Id(___V),ArrayType(61,ArrayType(5,FloatType))),param(Id(_),ArrayType(61,ArrayType(5,FloatType))),param(Id(_),ArrayType(61,ArrayType(5,FloatType))),param(Id(__0),ArrayType(61,ArrayType(5,FloatType))),param(Id(Tk_5),ArrayType(61,ArrayType(5,FloatType))),param(Id(k3),ArrayType(61,ArrayType(5,FloatType))),param(Id(_l),ArrayType(61,ArrayType(5,FloatType))),param(Id(I),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType))],Block([Continue]))]),ClassDecl(Id(P_),[MethodDecl(Id(_),Instance,[param(Id(_),IntType)],Block([Call(Id(q),Id($O),[])])),MethodDecl(Id(P),Instance,[param(Id(_c6V8DxQy7i_),ArrayType(1380,FloatType)),param(Id(__),ClassType(Id(_))),param(Id(O),ClassType(Id(_))),param(Id(W),ClassType(Id(_))),param(Id(_87),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 252))

    def test_253(self):
        line = '''Class z{Var _,$6U,$_7,$R,Y__:Array [Array [Array [Int ,0X8_7],0B1_0_111_0_0_1_0_00],7];_(__g_:Array [String ,57]){Val c:Array [String ,030];}Var I8_:String ;Var n,$_5tE,$_,_70:Array [Int ,0xD8_7_8];Constructor (){}Destructor (){Var b:Boolean ;} }Class s:__8{}'''
        expect = '''Program([ClassDecl(Id(z),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(7,ArrayType(1480,ArrayType(135,IntType))))),AttributeDecl(Static,VarDecl(Id($6U),ArrayType(7,ArrayType(1480,ArrayType(135,IntType))))),AttributeDecl(Static,VarDecl(Id($_7),ArrayType(7,ArrayType(1480,ArrayType(135,IntType))))),AttributeDecl(Static,VarDecl(Id($R),ArrayType(7,ArrayType(1480,ArrayType(135,IntType))))),AttributeDecl(Instance,VarDecl(Id(Y__),ArrayType(7,ArrayType(1480,ArrayType(135,IntType))))),MethodDecl(Id(_),Instance,[param(Id(__g_),ArrayType(57,StringType))],Block([ConstDecl(Id(c),ArrayType(24,StringType),None)])),AttributeDecl(Instance,VarDecl(Id(I8_),StringType)),AttributeDecl(Instance,VarDecl(Id(n),ArrayType(55416,IntType))),AttributeDecl(Static,VarDecl(Id($_5tE),ArrayType(55416,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(55416,IntType))),AttributeDecl(Instance,VarDecl(Id(_70),ArrayType(55416,IntType))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(b),BoolType)]))]),ClassDecl(Id(s),Id(__8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 253))

    def test_254(self):
        line = '''Class a:_{}Class __{}Class rg{$4(S,__2,E9,wG,_u9,adY:Int ;G4,_A:_;_,J_pz63:_5;______D,_,___,_:Array [Int ,0xD_0_818F8]){}Constructor (_:Int ;Q:Boolean ;DS,c__W,w:d;_:String ;sd:_;rk3:N;_,___:B_){}$Cd(){__::$_();Break ;} }'''
        expect = '''Program([ClassDecl(Id(a),Id(_),[]),ClassDecl(Id(__),[]),ClassDecl(Id(rg),[MethodDecl(Id($4),Static,[param(Id(S),IntType),param(Id(__2),IntType),param(Id(E9),IntType),param(Id(wG),IntType),param(Id(_u9),IntType),param(Id(adY),IntType),param(Id(G4),ClassType(Id(_))),param(Id(_A),ClassType(Id(_))),param(Id(_),ClassType(Id(_5))),param(Id(J_pz63),ClassType(Id(_5))),param(Id(______D),ArrayType(218634488,IntType)),param(Id(_),ArrayType(218634488,IntType)),param(Id(___),ArrayType(218634488,IntType)),param(Id(_),ArrayType(218634488,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(Q),BoolType),param(Id(DS),ClassType(Id(d))),param(Id(c__W),ClassType(Id(d))),param(Id(w),ClassType(Id(d))),param(Id(_),StringType),param(Id(sd),ClassType(Id(_))),param(Id(rk3),ClassType(Id(N))),param(Id(_),ClassType(Id(B_))),param(Id(___),ClassType(Id(B_)))],Block([])),MethodDecl(Id($Cd),Static,[],Block([Call(Id(__),Id($_),[]),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 254))

    def test_255(self):
        line = '''Class __1_{Val _806,$T,_6,W,$o3,_,$_,_9,vp,$y:Boolean ;Var $757t_W7:Array [Array [Array [Boolean ,0xD2_4],0b1001100],0B101111];Var __D,_1,tm,_R:M;}Class Y:_5_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__1_),[AttributeDecl(Instance,ConstDecl(Id(_806),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($T),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_6),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(W),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($o3),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_9),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(vp),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($y),BoolType,None)),AttributeDecl(Static,VarDecl(Id($757t_W7),ArrayType(47,ArrayType(76,ArrayType(3364,BoolType))))),AttributeDecl(Instance,VarDecl(Id(__D),ClassType(Id(M)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_1),ClassType(Id(M)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(tm),ClassType(Id(M)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_R),ClassType(Id(M)),NullLiteral()))]),ClassDecl(Id(Y),Id(_5_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 255))

    def test_256(self):
        line = '''Class __{Destructor (){}Var $3__,$43,_v:Float ;Destructor (){Val Y:_;}Destructor (){ {}Return ;Continue ;Break ;Break ;}Val _f,x,_,_4:Array [Float ,0b110011];He5(_g0,_6,r,r:Int ;_R_,U_1,E,R:__;_,_7,_ES:Float ;_9:t_g){}Var A:_9K;}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($3__),FloatType)),AttributeDecl(Static,VarDecl(Id($43),FloatType)),AttributeDecl(Instance,VarDecl(Id(_v),FloatType)),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(Y),ClassType(Id(_)),NullLiteral())])),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Return(),Continue,Break,Break])),AttributeDecl(Instance,ConstDecl(Id(_f),ArrayType(51,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(x),ArrayType(51,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(51,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_4),ArrayType(51,FloatType),None)),MethodDecl(Id(He5),Instance,[param(Id(_g0),IntType),param(Id(_6),IntType),param(Id(r),IntType),param(Id(r),IntType),param(Id(_R_),ClassType(Id(__))),param(Id(U_1),ClassType(Id(__))),param(Id(E),ClassType(Id(__))),param(Id(R),ClassType(Id(__))),param(Id(_),FloatType),param(Id(_7),FloatType),param(Id(_ES),FloatType),param(Id(_9),ClassType(Id(t_g)))],Block([])),AttributeDecl(Instance,VarDecl(Id(A),ClassType(Id(_9K)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 256))

    def test_257(self):
        line = '''Class _:j{$wp_h_(_0:_7_;o:Int ;C_,_:Array [String ,045];__:Array [Boolean ,045]){Continue ;} }Class s{Var v,Qg,$_R,_:Array [String ,023];}Class _:__1{Val $_,$07:Array [Int ,0x35];}'''
        expect = '''Program([ClassDecl(Id(_),Id(j),[MethodDecl(Id($wp_h_),Static,[param(Id(_0),ClassType(Id(_7_))),param(Id(o),IntType),param(Id(C_),ArrayType(37,StringType)),param(Id(_),ArrayType(37,StringType)),param(Id(__),ArrayType(37,BoolType))],Block([Continue]))]),ClassDecl(Id(s),[AttributeDecl(Instance,VarDecl(Id(v),ArrayType(19,StringType))),AttributeDecl(Instance,VarDecl(Id(Qg),ArrayType(19,StringType))),AttributeDecl(Static,VarDecl(Id($_R),ArrayType(19,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(19,StringType)))]),ClassDecl(Id(_),Id(__1),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(53,IntType),None)),AttributeDecl(Static,ConstDecl(Id($07),ArrayType(53,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 257))

    def test_258(self):
        line = '''Class r{}Class V:_{Val $3:Array [Array [Array [Array [Float ,23],0b110001],75_4],07_645_0];Constructor (_1,_4,_,_,G,eXR:GV__;__Vj,_M,_:Array [Array [Array [Int ,0141],23],0xC_F0]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(r),[]),ClassDecl(Id(V),Id(_),[AttributeDecl(Static,ConstDecl(Id($3),ArrayType(32040,ArrayType(754,ArrayType(49,ArrayType(23,FloatType)))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_1),ClassType(Id(GV__))),param(Id(_4),ClassType(Id(GV__))),param(Id(_),ClassType(Id(GV__))),param(Id(_),ClassType(Id(GV__))),param(Id(G),ClassType(Id(GV__))),param(Id(eXR),ClassType(Id(GV__))),param(Id(__Vj),ArrayType(3312,ArrayType(23,ArrayType(97,IntType)))),param(Id(_M),ArrayType(3312,ArrayType(23,ArrayType(97,IntType)))),param(Id(_),ArrayType(3312,ArrayType(23,ArrayType(97,IntType))))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 258))

    def test_259(self):
        line = '''Class _{Val w,J_,S7j6,$0_:Array [Int ,0X6];}Class a_:g{__(Y,T3_:Array [Array [Array [Array [Boolean ,5_8_7],0X6],6],0b100100];_4I0,_N:Float ){} }Class _0:W__{}Class _r{}Class F5{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(w),ArrayType(6,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(J_),ArrayType(6,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(S7j6),ArrayType(6,IntType),None)),AttributeDecl(Static,ConstDecl(Id($0_),ArrayType(6,IntType),None))]),ClassDecl(Id(a_),Id(g),[MethodDecl(Id(__),Instance,[param(Id(Y),ArrayType(36,ArrayType(6,ArrayType(6,ArrayType(587,BoolType))))),param(Id(T3_),ArrayType(36,ArrayType(6,ArrayType(6,ArrayType(587,BoolType))))),param(Id(_4I0),FloatType),param(Id(_N),FloatType)],Block([]))]),ClassDecl(Id(_0),Id(W__),[]),ClassDecl(Id(_r),[]),ClassDecl(Id(F5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 259))

    def test_260(self):
        line = '''Class __{}Class a:Q_{_(_:Array [Array [Array [Array [Array [Array [Float ,025],04_7],76],0b1],025],76];n__QyME7s_0:String ;N,_:Array [Array [Array [Array [Boolean ,0X63],0B1_0_1],76],02];_:_;_:Array [Float ,0B101101]){} }Class _1{Constructor (_6:Boolean ;VxH1L3:K){} }'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(a),Id(Q_),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(76,ArrayType(21,ArrayType(1,ArrayType(76,ArrayType(39,ArrayType(21,FloatType))))))),param(Id(n__QyME7s_0),StringType),param(Id(N),ArrayType(2,ArrayType(76,ArrayType(5,ArrayType(99,BoolType))))),param(Id(_),ArrayType(2,ArrayType(76,ArrayType(5,ArrayType(99,BoolType))))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(45,FloatType))],Block([]))]),ClassDecl(Id(_1),[MethodDecl(Id(Constructor),Instance,[param(Id(_6),BoolType),param(Id(VxH1L3),ClassType(Id(K)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 260))

    def test_261(self):
        line = '''Class _{}Class _:O{Constructor (_,__,_:m;_2,_:Array [Array [String ,0b11],87];_F00_4__:_;_,_:Int ){}Var $_w:Float ;$5(r_:Array [Array [Float ,6],2];_,_V6e6:Boolean ;h:Array [String ,0X52]){}$6(_u,_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(O),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(m))),param(Id(__),ClassType(Id(m))),param(Id(_),ClassType(Id(m))),param(Id(_2),ArrayType(87,ArrayType(3,StringType))),param(Id(_),ArrayType(87,ArrayType(3,StringType))),param(Id(_F00_4__),ClassType(Id(_))),param(Id(_),IntType),param(Id(_),IntType)],Block([])),AttributeDecl(Static,VarDecl(Id($_w),FloatType)),MethodDecl(Id($5),Static,[param(Id(r_),ArrayType(2,ArrayType(6,FloatType))),param(Id(_),BoolType),param(Id(_V6e6),BoolType),param(Id(h),ArrayType(82,StringType))],Block([])),MethodDecl(Id($6),Static,[param(Id(_u),FloatType),param(Id(_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 261))

    def test_262(self):
        line = '''Class _8_6{}Class _{Destructor (){} }Class _7:g3WO_{}Class v1:Y{Destructor (){}Var H_R,_D,$83,$2,_:Array [String ,3];}Class Ad:__{$5Yvi(_:Array [Array [Boolean ,0103],3]){} }Class U2{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_8_6),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_7),Id(g3WO_),[]),ClassDecl(Id(v1),Id(Y),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(H_R),ArrayType(3,StringType))),AttributeDecl(Instance,VarDecl(Id(_D),ArrayType(3,StringType))),AttributeDecl(Static,VarDecl(Id($83),ArrayType(3,StringType))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(3,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,StringType)))]),ClassDecl(Id(Ad),Id(__),[MethodDecl(Id($5Yvi),Static,[param(Id(_),ArrayType(3,ArrayType(67,BoolType)))],Block([]))]),ClassDecl(Id(U2),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 262))

    def test_263(self):
        line = '''Class _{Val $G,_,n_,$8:_;Var $1:Array [String ,0XA];Var AYs4,$_:Int ;Destructor (){} }Class _9Q:foP__{Val $o_nU_,_:Array [Boolean ,0X8];}Class v{Val _:h2_;}Class m_7{Val $9,_:Array [String ,0X8];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($G),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(n_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($8),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($1),ArrayType(10,StringType))),AttributeDecl(Instance,VarDecl(Id(AYs4),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_9Q),Id(foP__),[AttributeDecl(Static,ConstDecl(Id($o_nU_),ArrayType(8,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(8,BoolType),None))]),ClassDecl(Id(v),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(h2_)),NullLiteral()))]),ClassDecl(Id(m_7),[AttributeDecl(Static,ConstDecl(Id($9),ArrayType(8,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(8,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 263))

    def test_264(self):
        line = '''Class _{}Class NX9{Var B,$3,dd:Array [Array [Array [Array [Int ,4],07],0b1],0b1];Val _,$_,$__3Mc__:Float ;Constructor (){} }Class _fh{}Class _7:n1{}Class _{Val _:Int ;}Class _:k{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(NX9),[AttributeDecl(Instance,VarDecl(Id(B),ArrayType(1,ArrayType(1,ArrayType(7,ArrayType(4,IntType)))))),AttributeDecl(Static,VarDecl(Id($3),ArrayType(1,ArrayType(1,ArrayType(7,ArrayType(4,IntType)))))),AttributeDecl(Instance,VarDecl(Id(dd),ArrayType(1,ArrayType(1,ArrayType(7,ArrayType(4,IntType)))))),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($__3Mc__),FloatType,None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_fh),[]),ClassDecl(Id(_7),Id(n1),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),IntType,None))]),ClassDecl(Id(_),Id(k),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 264))

    def test_265(self):
        line = '''Class LX{$_(_,l,_o4,c8:Float ){Break ;{} }}Class _3_g98_{Var $_,F6:Boolean ;Constructor (_Z_,q03:_;b_:_x8;_68,_,_,O5:Array [Array [Array [Int ,80],050],0X3F];_8,r,t,_l,_1,r_l2_:Float ;_:Int ){}Var _,Ce3z,H_,_,$1:n;Val h0:Array [Int ,050];}'''
        expect = '''Program([ClassDecl(Id(LX),[MethodDecl(Id($_),Static,[param(Id(_),FloatType),param(Id(l),FloatType),param(Id(_o4),FloatType),param(Id(c8),FloatType)],Block([Break,Block([])]))]),ClassDecl(Id(_3_g98_),[AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(F6),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(_Z_),ClassType(Id(_))),param(Id(q03),ClassType(Id(_))),param(Id(b_),ClassType(Id(_x8))),param(Id(_68),ArrayType(63,ArrayType(40,ArrayType(80,IntType)))),param(Id(_),ArrayType(63,ArrayType(40,ArrayType(80,IntType)))),param(Id(_),ArrayType(63,ArrayType(40,ArrayType(80,IntType)))),param(Id(O5),ArrayType(63,ArrayType(40,ArrayType(80,IntType)))),param(Id(_8),FloatType),param(Id(r),FloatType),param(Id(t),FloatType),param(Id(_l),FloatType),param(Id(_1),FloatType),param(Id(r_l2_),FloatType),param(Id(_),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(n)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Ce3z),ClassType(Id(n)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(H_),ClassType(Id(n)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(n)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(n)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(h0),ArrayType(40,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 265))

    def test_266(self):
        line = '''Class _{Var _:Boolean ;Constructor (){}Var D,$_,$P__:Q;$_(__:i){}Destructor (){}Destructor (){}Val $c6____t:Boolean ;Constructor (__:Array [Array [Array [Array [Float ,0B100110],0B100110],5],0B1_1_1]){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(D),ClassType(Id(Q)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(Q)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($P__),ClassType(Id(Q)),NullLiteral())),MethodDecl(Id($_),Static,[param(Id(__),ClassType(Id(i)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($c6____t),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(7,ArrayType(5,ArrayType(38,ArrayType(38,FloatType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 266))

    def test_267(self):
        line = '''Class A:_{}Class __:_{}Class _H9:_{}Class _4:_{}Class _:_{}Class n:_{}Class _{Destructor (){}Val _b,_,$02,$I_X,z,$_3GU_zS_l8:Array [Boolean ,0X48];$_H_(){}_2(){} }Class a{}'''
        expect = '''Program([ClassDecl(Id(A),Id(_),[]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_H9),Id(_),[]),ClassDecl(Id(_4),Id(_),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(n),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_b),ArrayType(72,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(72,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($02),ArrayType(72,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($I_X),ArrayType(72,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(z),ArrayType(72,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_3GU_zS_l8),ArrayType(72,BoolType),None)),MethodDecl(Id($_H_),Static,[],Block([])),MethodDecl(Id(_2),Instance,[],Block([]))]),ClassDecl(Id(a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 267))

    def test_268(self):
        line = '''Class _{X_C(_1,_7:Array [Array [Int ,0B1],0XE];_Hw_:Array [Boolean ,0X33];Y,__eI,_,v,Z_,d:Array [Array [Array [Array [Array [Int ,0x9],0B1000],0x77_AF],0422_61_74],0xE];_:_P_4089){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(X_C),Instance,[param(Id(_1),ArrayType(14,ArrayType(1,IntType))),param(Id(_7),ArrayType(14,ArrayType(1,IntType))),param(Id(_Hw_),ArrayType(51,BoolType)),param(Id(Y),ArrayType(14,ArrayType(1125500,ArrayType(30639,ArrayType(8,ArrayType(9,IntType)))))),param(Id(__eI),ArrayType(14,ArrayType(1125500,ArrayType(30639,ArrayType(8,ArrayType(9,IntType)))))),param(Id(_),ArrayType(14,ArrayType(1125500,ArrayType(30639,ArrayType(8,ArrayType(9,IntType)))))),param(Id(v),ArrayType(14,ArrayType(1125500,ArrayType(30639,ArrayType(8,ArrayType(9,IntType)))))),param(Id(Z_),ArrayType(14,ArrayType(1125500,ArrayType(30639,ArrayType(8,ArrayType(9,IntType)))))),param(Id(d),ArrayType(14,ArrayType(1125500,ArrayType(30639,ArrayType(8,ArrayType(9,IntType)))))),param(Id(_),ClassType(Id(_P_4089)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 268))

    def test_269(self):
        line = '''Class _:_l_{Destructor (){}Var _:Int ;Destructor (){}A_l(te:_;_6:Array [Array [Array [Array [Array [Int ,24],5],65],0B1],0B101010];c_3s,_,_:_;m,_u5e:Array [Boolean ,0B101010]){} }Class _:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_l_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(A_l),Instance,[param(Id(te),ClassType(Id(_))),param(Id(_6),ArrayType(42,ArrayType(1,ArrayType(65,ArrayType(5,ArrayType(24,IntType)))))),param(Id(c_3s),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(m),ArrayType(42,BoolType)),param(Id(_u5e),ArrayType(42,BoolType))],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 269))

    def test_270(self):
        line = '''Class hZ{Val s,Eq:_;Var F:__o;$I(){}Destructor (){Return ;} }Class zW:_H39_{Destructor (){}Constructor (){} }Class _:f{Var $_:Array [Array [Int ,0X9],16];Constructor (_40:_;C:l5;_J,_:Float ){}Var __,$X:Boolean ;W8(_____,U,_4:Array [String ,16]){} }'''
        expect = '''Program([ClassDecl(Id(hZ),[AttributeDecl(Instance,ConstDecl(Id(s),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Eq),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(F),ClassType(Id(__o)),NullLiteral())),MethodDecl(Id($I),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(zW),Id(_H39_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(f),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(16,ArrayType(9,IntType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_40),ClassType(Id(_))),param(Id(C),ClassType(Id(l5))),param(Id(_J),FloatType),param(Id(_),FloatType)],Block([])),AttributeDecl(Instance,VarDecl(Id(__),BoolType)),AttributeDecl(Static,VarDecl(Id($X),BoolType)),MethodDecl(Id(W8),Instance,[param(Id(_____),ArrayType(16,StringType)),param(Id(U),ArrayType(16,StringType)),param(Id(_4),ArrayType(16,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 270))

    def test_271(self):
        line = '''Class f15d:p_{Constructor (_1_:String ;_,M,cv,D,g1_m__9,_,e_,I,_7:_;_,_:S_gC;__10,_,h,x:I;v:Array [Int ,4];r:Int ){} }Class M{Var $c4,h29,Q,$9:Array [Array [String ,4],38];Constructor (){}Var X_,$0:_;}Class _z{}Class E:_{Constructor (){} }Class C:W5{}'''
        expect = '''Program([ClassDecl(Id(f15d),Id(p_),[MethodDecl(Id(Constructor),Instance,[param(Id(_1_),StringType),param(Id(_),ClassType(Id(_))),param(Id(M),ClassType(Id(_))),param(Id(cv),ClassType(Id(_))),param(Id(D),ClassType(Id(_))),param(Id(g1_m__9),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(e_),ClassType(Id(_))),param(Id(I),ClassType(Id(_))),param(Id(_7),ClassType(Id(_))),param(Id(_),ClassType(Id(S_gC))),param(Id(_),ClassType(Id(S_gC))),param(Id(__10),ClassType(Id(I))),param(Id(_),ClassType(Id(I))),param(Id(h),ClassType(Id(I))),param(Id(x),ClassType(Id(I))),param(Id(v),ArrayType(4,IntType)),param(Id(r),IntType)],Block([]))]),ClassDecl(Id(M),[AttributeDecl(Static,VarDecl(Id($c4),ArrayType(38,ArrayType(4,StringType)))),AttributeDecl(Instance,VarDecl(Id(h29),ArrayType(38,ArrayType(4,StringType)))),AttributeDecl(Instance,VarDecl(Id(Q),ArrayType(38,ArrayType(4,StringType)))),AttributeDecl(Static,VarDecl(Id($9),ArrayType(38,ArrayType(4,StringType)))),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(X_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_z),[]),ClassDecl(Id(E),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(C),Id(W5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 271))

    def test_272(self):
        line = '''Class _:Eb2_{Val _:x;}Class B{}Class __{Constructor (){ {} }}Class _:_7{Constructor (__01_:String ;_:Float ;_w_,j6S7:Array [Array [Array [Array [Array [Array [Float ,014_76_4_620],0b1010011],0XC_7_F_E],3],0121],0B101011]){} }Class mc8:w9Q_{Destructor (){}Destructor (){} }Class fJ_8s:_{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(Eb2_),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(x)),NullLiteral()))]),ClassDecl(Id(B),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_),Id(_7),[MethodDecl(Id(Constructor),Instance,[param(Id(__01_),StringType),param(Id(_),FloatType),param(Id(_w_),ArrayType(43,ArrayType(81,ArrayType(3,ArrayType(51198,ArrayType(83,ArrayType(3402128,FloatType))))))),param(Id(j6S7),ArrayType(43,ArrayType(81,ArrayType(3,ArrayType(51198,ArrayType(83,ArrayType(3402128,FloatType)))))))],Block([]))]),ClassDecl(Id(mc8),Id(w9Q_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(fJ_8s),Id(_),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 272))

    def test_273(self):
        line = '''Class _2{Val $9:_;Destructor (){Continue ;}Val B:Float =-v9_::$__._P.P()._4()._l_()<q_.F.K._Q()+Self ;$D___(g:N;Z,a0:p){}$40_(){}Val S4:e;Val M_jR6_:Float ;}Class _o:C{Var S,__:Float ;}'''
        expect = '''Program([ClassDecl(Id(_2),[AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(tL_),FloatType,BinaryOp(<,UnaryOp(-,CallExpr(CallExpr(CallExpr(FieldAccess(FieldAccess(Id(v9_),Id($__)),Id(_P)),Id(P),[]),Id(_4),[]),Id(_l_),[])),BinaryOp(+,CallExpr(FieldAccess(FieldAccess(Id(q_),Id(F)),Id(K)),Id(_Q),[]),Self())))),MethodDecl(Id($D___),Static,[param(Id(g),ClassType(Id(N))),param(Id(Z),ClassType(Id(p))),param(Id(a0),ClassType(Id(p)))],Block([])),MethodDecl(Id($40_),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(S4),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(M_jR6_),FloatType,None))]),ClassDecl(Id(_o),Id(C),[AttributeDecl(Instance,VarDecl(Id(S),FloatType)),AttributeDecl(Instance,VarDecl(Id(__),FloatType))])])'''
        #self.assertTrue(TestAST.test(line, expect, 273))

    def test_274(self):
        line = '''Class Y:C5{_(_:Array [Int ,06];_88,R__Idd6_:_;G,OR:__){} }Class N{Val $__,_:Array [Int ,0b10_1];Val L,$9_3,_64:S_;}Class _9:_2{}Class _:_{Var b8f,$B,$__:wC;Destructor (){ {}p::$7_();Var MY,__c_:Boolean ;} }Class _r3{Destructor (){} }Class _i:X{}'''
        expect = '''Program([ClassDecl(Id(Y),Id(C5),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(6,IntType)),param(Id(_88),ClassType(Id(_))),param(Id(R__Idd6_),ClassType(Id(_))),param(Id(G),ClassType(Id(__))),param(Id(OR),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(N),[AttributeDecl(Static,ConstDecl(Id($__),ArrayType(5,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(5,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(L),ClassType(Id(S_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9_3),ClassType(Id(S_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_64),ClassType(Id(S_)),NullLiteral()))]),ClassDecl(Id(_9),Id(_2),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(b8f),ClassType(Id(wC)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($B),ClassType(Id(wC)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(wC)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Call(Id(p),Id($7_),[]),VarDecl(Id(MY),BoolType),VarDecl(Id(__c_),BoolType)]))]),ClassDecl(Id(_r3),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_i),Id(X),[])])'''
        self.assertTrue(TestAST.test(line, expect, 274))

    def test_275(self):
        line = '''Class ja86_D{Destructor (){}Destructor (){Return ;}Constructor (UWg,x,aG1L3l_0,K:Int ;D:Int ;PT8,_8:Array [Int ,0b1111_00_0111_0]){} }Class __9___{}Class _A:S_3q{}'''
        expect = '''Program([ClassDecl(Id(ja86_D),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(UWg),IntType),param(Id(x),IntType),param(Id(aG1L3l_0),IntType),param(Id(K),IntType),param(Id(D),IntType),param(Id(PT8),ArrayType(1934,IntType)),param(Id(_8),ArrayType(1934,IntType))],Block([]))]),ClassDecl(Id(__9___),[]),ClassDecl(Id(_A),Id(S_3q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 275))

    def test_276(self):
        line = '''Class _D{}Class y:w__fq{$G__8(_:Array [String ,05_4_6_4_11];_,_,__ZS_:Array [Int ,0b11_1]){}S(_e,_,m_:Array [Array [Array [Float ,0B1001],0101],0b1];o_:rF_;_,c,e:D1d){} }'''
        expect = '''Program([ClassDecl(Id(_D),[]),ClassDecl(Id(y),Id(w__fq),[MethodDecl(Id($G__8),Static,[param(Id(_),ArrayType(183561,StringType)),param(Id(_),ArrayType(7,IntType)),param(Id(_),ArrayType(7,IntType)),param(Id(__ZS_),ArrayType(7,IntType))],Block([])),MethodDecl(Id(S),Instance,[param(Id(_e),ArrayType(1,ArrayType(65,ArrayType(9,FloatType)))),param(Id(_),ArrayType(1,ArrayType(65,ArrayType(9,FloatType)))),param(Id(m_),ArrayType(1,ArrayType(65,ArrayType(9,FloatType)))),param(Id(o_),ClassType(Id(rF_))),param(Id(_),ClassType(Id(D1d))),param(Id(c),ClassType(Id(D1d))),param(Id(e),ClassType(Id(D1d)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 276))

    def test_277(self):
        line = '''Class K_{$_(A,__:Array [Array [Array [Array [Int ,07],0xAB_2],07],74];__8:Array [Array [Array [Float ,05_7_0],0424],74];r,_,V0_,_w,_:Boolean ){} }Class _{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(K_),[MethodDecl(Id($_),Static,[param(Id(A),ArrayType(74,ArrayType(7,ArrayType(2738,ArrayType(7,IntType))))),param(Id(__),ArrayType(74,ArrayType(7,ArrayType(2738,ArrayType(7,IntType))))),param(Id(__8),ArrayType(74,ArrayType(276,ArrayType(376,FloatType)))),param(Id(r),BoolType),param(Id(_),BoolType),param(Id(V0_),BoolType),param(Id(_w),BoolType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 277))

    def test_278(self):
        line = '''Class T_:U3__1{}Class Xk9oPG{Var $7:Array [Int ,0b10111];}Class _4F7wD:t{Val _,ba2,d90r,__:_;}Class _{F(t_:f){Return ;} }Class J{}Class _9{Constructor (w_:__){} }Class X:Pr__{}'''
        expect = '''Program([ClassDecl(Id(T_),Id(U3__1),[]),ClassDecl(Id(Xk9oPG),[AttributeDecl(Static,VarDecl(Id($7),ArrayType(23,IntType)))]),ClassDecl(Id(_4F7wD),Id(t),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(ba2),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(d90r),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),[MethodDecl(Id(F),Instance,[param(Id(t_),ClassType(Id(f)))],Block([Return()]))]),ClassDecl(Id(J),[]),ClassDecl(Id(_9),[MethodDecl(Id(Constructor),Instance,[param(Id(w_),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(X),Id(Pr__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 278))

    def test_279(self):
        line = '''Class __9r:__8925{Var _:Boolean ;}Class hK_:BC{$_m9(){}Constructor (I:Array [Array [String ,7_5_9],4];_,E,c:Boolean ){}Val _:Array [Array [Float ,0b1],0124];}Class p{}Class n{}'''
        expect = '''Program([ClassDecl(Id(__9r),Id(__8925),[AttributeDecl(Instance,VarDecl(Id(_),BoolType))]),ClassDecl(Id(hK_),Id(BC),[MethodDecl(Id($_m9),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(I),ArrayType(4,ArrayType(759,StringType))),param(Id(_),BoolType),param(Id(E),BoolType),param(Id(c),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(84,ArrayType(1,FloatType)),None))]),ClassDecl(Id(p),[]),ClassDecl(Id(n),[])])'''
        self.assertTrue(TestAST.test(line, expect, 279))

    def test_280(self):
        line = '''Class b__{_(y:Boolean ){}Constructor (_,_g,_,r:Array [Array [Array [Array [Boolean ,07],0X19],02_2],0142]){Break ;}Var _,_:Boolean ;}Class ___{}Class Z_{Constructor (){Return ;{} }}Class o_:Nj{}'''
        expect = '''Program([ClassDecl(Id(b__),[MethodDecl(Id(_),Instance,[param(Id(y),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(98,ArrayType(18,ArrayType(25,ArrayType(7,BoolType))))),param(Id(_g),ArrayType(98,ArrayType(18,ArrayType(25,ArrayType(7,BoolType))))),param(Id(_),ArrayType(98,ArrayType(18,ArrayType(25,ArrayType(7,BoolType))))),param(Id(r),ArrayType(98,ArrayType(18,ArrayType(25,ArrayType(7,BoolType)))))],Block([Break])),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType))]),ClassDecl(Id(___),[]),ClassDecl(Id(Z_),[MethodDecl(Id(Constructor),Instance,[],Block([Return(),Block([])]))]),ClassDecl(Id(o_),Id(Nj),[])])'''
        self.assertTrue(TestAST.test(line, expect, 280))

    def test_281(self):
        line = '''Class K_9_M:_{Val l:Array [Array [Float ,0b1001010],0X17];Val $0_,D,_,$33:Array [Array [Array [String ,32],0x5],02];Destructor (){} }Class b9{Constructor (_,_:_;Hh9_,_:String ;_,q:_q;_,X,_:_){} }'''
        expect = '''Program([ClassDecl(Id(K_9_M),Id(_),[AttributeDecl(Instance,ConstDecl(Id(l),ArrayType(23,ArrayType(74,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($0_),ArrayType(2,ArrayType(5,ArrayType(32,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(D),ArrayType(2,ArrayType(5,ArrayType(32,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(5,ArrayType(32,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($33),ArrayType(2,ArrayType(5,ArrayType(32,StringType))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(b9),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(Hh9_),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(_q))),param(Id(q),ClassType(Id(_q))),param(Id(_),ClassType(Id(_))),param(Id(X),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 281))

    def test_282(self):
        line = '''Class l2:_1_3L8_{_26(_:Array [Array [String ,71],0x20];b,_L7_7l_:J4;_,s,X_,g9_,G3U1:_;_:String ;_,_4_,_:Array [Array [Array [String ,0b1001100],43],0x2C];M,l,_:S8;Q__,_,M:Y6_;O,j,U_F,B:Int ;_:Float ;h86_:Int ){Return ;} }Class X{}Class __1{}Class _N_Zd{Constructor (_,o:V;_,__:String ){}$8(){} }'''
        expect = '''Program([ClassDecl(Id(l2),Id(_1_3L8_),[MethodDecl(Id(_26),Instance,[param(Id(_),ArrayType(32,ArrayType(71,StringType))),param(Id(b),ClassType(Id(J4))),param(Id(_L7_7l_),ClassType(Id(J4))),param(Id(_),ClassType(Id(_))),param(Id(s),ClassType(Id(_))),param(Id(X_),ClassType(Id(_))),param(Id(g9_),ClassType(Id(_))),param(Id(G3U1),ClassType(Id(_))),param(Id(_),StringType),param(Id(_),ArrayType(44,ArrayType(43,ArrayType(76,StringType)))),param(Id(_4_),ArrayType(44,ArrayType(43,ArrayType(76,StringType)))),param(Id(_),ArrayType(44,ArrayType(43,ArrayType(76,StringType)))),param(Id(M),ClassType(Id(S8))),param(Id(l),ClassType(Id(S8))),param(Id(_),ClassType(Id(S8))),param(Id(Q__),ClassType(Id(Y6_))),param(Id(_),ClassType(Id(Y6_))),param(Id(M),ClassType(Id(Y6_))),param(Id(O),IntType),param(Id(j),IntType),param(Id(U_F),IntType),param(Id(B),IntType),param(Id(_),FloatType),param(Id(h86_),IntType)],Block([Return()]))]),ClassDecl(Id(X),[]),ClassDecl(Id(__1),[]),ClassDecl(Id(_N_Zd),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(V))),param(Id(o),ClassType(Id(V))),param(Id(_),StringType),param(Id(__),StringType)],Block([])),MethodDecl(Id($8),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 282))

    def test_283(self):
        line = '''Class U4z:vGY{Constructor (h_oD:Boolean ;P9,__6,__,_,y_600:Array [Array [Array [String ,0132],17],5_4_50];_4,_:Float ;N9,d:Boolean ;ld,_H,R:__){}Constructor (){New _()._9.P();} }'''
        expect = '''Program([ClassDecl(Id(U4z),Id(vGY),[MethodDecl(Id(Constructor),Instance,[param(Id(h_oD),BoolType),param(Id(P9),ArrayType(5450,ArrayType(17,ArrayType(90,StringType)))),param(Id(__6),ArrayType(5450,ArrayType(17,ArrayType(90,StringType)))),param(Id(__),ArrayType(5450,ArrayType(17,ArrayType(90,StringType)))),param(Id(_),ArrayType(5450,ArrayType(17,ArrayType(90,StringType)))),param(Id(y_600),ArrayType(5450,ArrayType(17,ArrayType(90,StringType)))),param(Id(_4),FloatType),param(Id(_),FloatType),param(Id(N9),BoolType),param(Id(d),BoolType),param(Id(ld),ClassType(Id(__))),param(Id(_H),ClassType(Id(__))),param(Id(R),ClassType(Id(__)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Call(FieldAccess(NewExpr(Id(_),[]),Id(_9)),Id(P),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 283))

    def test_284(self):
        line = '''Class _j11{}Class b:_{}Class y2{Constructor (){} }Class _s{Constructor (){} }Class u:_{}Class Sv{Var _,$2,_5:Int ;Constructor (t,_,K,_,_5:Array [Float ,28];_6_,x_n:Int ;_:Boolean ){} }Class _{$C(I,z,ui_,Tx,O:Array [String ,014]){}M(_,_J__U,F_8,_,c,_52L,_qhU:Boolean ;C,H,D,_:Array [Array [Int ,07],0b1001101];c20,S,M:Float ;_:_;__,_:C_4){}Var _1_K:_5;}'''
        expect = '''Program([ClassDecl(Id(_j11),[]),ClassDecl(Id(b),Id(_),[]),ClassDecl(Id(y2),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_s),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(u),Id(_),[]),ClassDecl(Id(Sv),[AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($2),IntType)),AttributeDecl(Instance,VarDecl(Id(_5),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(t),ArrayType(28,FloatType)),param(Id(_),ArrayType(28,FloatType)),param(Id(K),ArrayType(28,FloatType)),param(Id(_),ArrayType(28,FloatType)),param(Id(_5),ArrayType(28,FloatType)),param(Id(_6_),IntType),param(Id(x_n),IntType),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($C),Static,[param(Id(I),ArrayType(12,StringType)),param(Id(z),ArrayType(12,StringType)),param(Id(ui_),ArrayType(12,StringType)),param(Id(Tx),ArrayType(12,StringType)),param(Id(O),ArrayType(12,StringType))],Block([])),MethodDecl(Id(M),Instance,[param(Id(_),BoolType),param(Id(_J__U),BoolType),param(Id(F_8),BoolType),param(Id(_),BoolType),param(Id(c),BoolType),param(Id(_52L),BoolType),param(Id(_qhU),BoolType),param(Id(C),ArrayType(77,ArrayType(7,IntType))),param(Id(H),ArrayType(77,ArrayType(7,IntType))),param(Id(D),ArrayType(77,ArrayType(7,IntType))),param(Id(_),ArrayType(77,ArrayType(7,IntType))),param(Id(c20),FloatType),param(Id(S),FloatType),param(Id(M),FloatType),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(C_4))),param(Id(_),ClassType(Id(C_4)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_1_K),ClassType(Id(_5)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 284))

    def test_285(self):
        line = '''Class _{Val M_17l_,$24:Array [String ,0b10100];Constructor (_:Array [Array [Array [Array [Float ,3],03],053],2];__z_2:String ){Break ;}Val $88:Array [String ,0X18];Val $3:Array [String ,0x19D_C_7];Val $0,$_j2:String ;Val $k:Array [Int ,9];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(M_17l_),ArrayType(20,StringType),None)),AttributeDecl(Static,ConstDecl(Id($24),ArrayType(20,StringType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(2,ArrayType(43,ArrayType(3,ArrayType(3,FloatType))))),param(Id(__z_2),StringType)],Block([Break])),AttributeDecl(Static,ConstDecl(Id($88),ArrayType(24,StringType),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(105927,StringType),None)),AttributeDecl(Static,ConstDecl(Id($0),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_j2),StringType,None)),AttributeDecl(Static,ConstDecl(Id($k),ArrayType(9,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 285))

    def test_286(self):
        line = '''Class _:H{}Class x{}Class _V:_C_{Destructor (){Return ;}Constructor (){}Destructor (){}Val $_:Array [Float ,0B11];Val $g1:Array [Array [Array [Array [Int ,01],06_0_4_1],0X4],01];}Class _a___T_8:_h9{}Class s5{}'''
        expect = '''Program([ClassDecl(Id(_),Id(H),[]),ClassDecl(Id(x),[]),ClassDecl(Id(_V),Id(_C_),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(3,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($g1),ArrayType(1,ArrayType(4,ArrayType(3105,ArrayType(1,IntType)))),None))]),ClassDecl(Id(_a___T_8),Id(_h9),[]),ClassDecl(Id(s5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 286))

    def test_287(self):
        line = '''Class _{Constructor (t,_:Array [String ,0xD];G:Array [Array [Array [Array [Float ,0B1_111],0b101001],0b1],38]){Return ;}Val $Y_s:Int ;$5(_79:Array [Array [Array [String ,04],0133],0133]){Continue ;}Constructor (y:s4;A:Float ;W,j_,_7:Float ;_:_){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(t),ArrayType(13,StringType)),param(Id(_),ArrayType(13,StringType)),param(Id(G),ArrayType(38,ArrayType(1,ArrayType(41,ArrayType(15,FloatType)))))],Block([Return()])),AttributeDecl(Static,ConstDecl(Id($Y_s),IntType,None)),MethodDecl(Id($5),Static,[param(Id(_79),ArrayType(91,ArrayType(91,ArrayType(4,StringType))))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(y),ClassType(Id(s4))),param(Id(A),FloatType),param(Id(W),FloatType),param(Id(j_),FloatType),param(Id(_7),FloatType),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 287))

    def test_288(self):
        line = '''Class _:_{$__(__:Array [Array [Array [Array [Int ,0B1],9],0120],40_67]){}$_7Q(e,_N75F,_,k:G;K,_2,v3,X:Array [Float ,0x1A];__9ru:Array [Array [String ,04],0120]){}_x2(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id($__),Static,[param(Id(__),ArrayType(4067,ArrayType(80,ArrayType(9,ArrayType(1,IntType)))))],Block([])),MethodDecl(Id($_7Q),Static,[param(Id(e),ClassType(Id(G))),param(Id(_N75F),ClassType(Id(G))),param(Id(_),ClassType(Id(G))),param(Id(k),ClassType(Id(G))),param(Id(K),ArrayType(26,FloatType)),param(Id(_2),ArrayType(26,FloatType)),param(Id(v3),ArrayType(26,FloatType)),param(Id(X),ArrayType(26,FloatType)),param(Id(__9ru),ArrayType(80,ArrayType(4,StringType)))],Block([])),MethodDecl(Id(_x2),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 288))

    def test_289(self):
        line = '''Class _t_:T_q{Constructor (K,Hlt3:Array [Array [String ,0x4_81],10]){_K::$_();}Val $W:Array [Array [Array [Array [Array [Boolean ,0120],027_6],02_7_5_72_5],0120],0b1_11_1];}'''
        expect = '''Program([ClassDecl(Id(_t_),Id(T_q),[MethodDecl(Id(Constructor),Instance,[param(Id(K),ArrayType(10,ArrayType(1153,StringType))),param(Id(Hlt3),ArrayType(10,ArrayType(1153,StringType)))],Block([Call(Id(_K),Id($_),[])])),AttributeDecl(Static,ConstDecl(Id($W),ArrayType(15,ArrayType(80,ArrayType(97237,ArrayType(190,ArrayType(80,BoolType))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 289))

    def test_290(self):
        line = '''Class d__:_{Var $_1:Array [Array [Array [Array [Boolean ,53_5_90],0x1B],0135],023];Var $C:Array [Array [Array [Array [Array [Array [Array [String ,0X7_B],0B100111],07],0b1010],96],0B1_10],04];}Class _:Fh{}'''
        expect = '''Program([ClassDecl(Id(d__),Id(_),[AttributeDecl(Static,VarDecl(Id($_1),ArrayType(19,ArrayType(93,ArrayType(27,ArrayType(53590,BoolType)))))),AttributeDecl(Static,VarDecl(Id($C),ArrayType(4,ArrayType(6,ArrayType(96,ArrayType(10,ArrayType(7,ArrayType(39,ArrayType(123,StringType)))))))))]),ClassDecl(Id(_),Id(Fh),[])])'''
        self.assertTrue(TestAST.test(line, expect, 290))

    def test_291(self):
        line = '''Class _:G926{}Class _{w(_e,_IYO2,gKA,_5,q3,_,_,V30C257:R__l;wi_:Array [String ,0B1];n:Boolean ){Return ;}Val __,$_:Int ;r4(w8H,K,l:Boolean ;k3,_OT_,Q,p,Z:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(G926),[]),ClassDecl(Id(_),[MethodDecl(Id(w),Instance,[param(Id(_e),ClassType(Id(R__l))),param(Id(_IYO2),ClassType(Id(R__l))),param(Id(gKA),ClassType(Id(R__l))),param(Id(_5),ClassType(Id(R__l))),param(Id(q3),ClassType(Id(R__l))),param(Id(_),ClassType(Id(R__l))),param(Id(_),ClassType(Id(R__l))),param(Id(V30C257),ClassType(Id(R__l))),param(Id(wi_),ArrayType(1,StringType)),param(Id(n),BoolType)],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(__),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),MethodDecl(Id(r4),Instance,[param(Id(w8H),BoolType),param(Id(K),BoolType),param(Id(l),BoolType),param(Id(k3),IntType),param(Id(_OT_),IntType),param(Id(Q),IntType),param(Id(p),IntType),param(Id(Z),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 291))

    def test_292(self):
        line = '''Class _5:_{}Class L0__:e{}Class __{}Class _{Val $_6:Array [Int ,24];}Class q:_{IN(wba:_5j_;R_:__;_:_){} }Class _3_jQZ:_{}Class _I{Var F,s4_:Int ;Val $_E9,_c:c;}Class D{}'''
        expect = '''Program([ClassDecl(Id(_5),Id(_),[]),ClassDecl(Id(L0__),Id(e),[]),ClassDecl(Id(__),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_6),ArrayType(24,IntType),None))]),ClassDecl(Id(q),Id(_),[MethodDecl(Id(IN),Instance,[param(Id(wba),ClassType(Id(_5j_))),param(Id(R_),ClassType(Id(__))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_3_jQZ),Id(_),[]),ClassDecl(Id(_I),[AttributeDecl(Instance,VarDecl(Id(F),IntType)),AttributeDecl(Instance,VarDecl(Id(s4_),IntType)),AttributeDecl(Static,ConstDecl(Id($_E9),ClassType(Id(c)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_c),ClassType(Id(c)),NullLiteral()))]),ClassDecl(Id(D),[])])'''
        self.assertTrue(TestAST.test(line, expect, 292))

    def test_293(self):
        line = '''Class _4{Val $_,$_6___:String ;G_9(){}Var $T_:Array [Array [Array [Array [Boolean ,0b1010],67],01],0x3E];Val b:Array [Array [Array [Array [Float ,0xA],46_1],0b1_0],89_39_1];}'''
        expect = '''Program([ClassDecl(Id(_4),[AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_6___),StringType,None)),MethodDecl(Id(G_9),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($T_),ArrayType(62,ArrayType(1,ArrayType(67,ArrayType(10,BoolType)))))),AttributeDecl(Instance,ConstDecl(Id(b),ArrayType(89391,ArrayType(2,ArrayType(461,ArrayType(10,FloatType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 293))

    def test_294(self):
        line = '''Class n{Constructor (_,K:Array [Int ,0xA2];n,_:mx;__WP_a,_:Float ;jb_:Array [Array [Int ,017],0x5]){ {} }Var G06,$g,$30_:Array [Array [Int ,0B1],0x4F_1_DCD_B];}Class Vxd:U{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(n),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(162,IntType)),param(Id(K),ArrayType(162,IntType)),param(Id(n),ClassType(Id(mx))),param(Id(_),ClassType(Id(mx))),param(Id(__WP_a),FloatType),param(Id(_),FloatType),param(Id(jb_),ArrayType(5,ArrayType(15,IntType)))],Block([Block([])])),AttributeDecl(Instance,VarDecl(Id(G06),ArrayType(82959579,ArrayType(1,IntType)))),AttributeDecl(Static,VarDecl(Id($g),ArrayType(82959579,ArrayType(1,IntType)))),AttributeDecl(Static,VarDecl(Id($30_),ArrayType(82959579,ArrayType(1,IntType))))]),ClassDecl(Id(Vxd),Id(U),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 294))

    def test_295(self):
        line = '''Class _:_{}Class __:D{Val CZk:_;Constructor (_,g:Array [Array [Array [Array [Array [Float ,0b1001000],0B11],06_565],077],23]){} }Class _:_7h6{f(M:Float ;_,e7:String ){} }Class _:_B{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(__),Id(D),[AttributeDecl(Instance,ConstDecl(Id(CZk),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(23,ArrayType(63,ArrayType(3445,ArrayType(3,ArrayType(72,FloatType)))))),param(Id(g),ArrayType(23,ArrayType(63,ArrayType(3445,ArrayType(3,ArrayType(72,FloatType))))))],Block([]))]),ClassDecl(Id(_),Id(_7h6),[MethodDecl(Id(f),Instance,[param(Id(M),FloatType),param(Id(_),StringType),param(Id(e7),StringType)],Block([]))]),ClassDecl(Id(_),Id(_B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 295))

    def test_296(self):
        line = '''Class _1:O{Val $_,T,$__HbW8:_;$0(f,_63:Float ;GP,__nW5__s,_W74OM:Boolean ;_e5,_,_sl:__;Ex_,P_:Array [String ,4_5_6_9]){}Constructor (_b9:Array [Array [Array [Float ,0b1010000],0B1],06];_p:Array [Float ,06]){}_(_,__,J23:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_1),Id(O),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(T),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__HbW8),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($0),Static,[param(Id(f),FloatType),param(Id(_63),FloatType),param(Id(GP),BoolType),param(Id(__nW5__s),BoolType),param(Id(_W74OM),BoolType),param(Id(_e5),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(_sl),ClassType(Id(__))),param(Id(Ex_),ArrayType(4569,StringType)),param(Id(P_),ArrayType(4569,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_b9),ArrayType(6,ArrayType(1,ArrayType(80,FloatType)))),param(Id(_p),ArrayType(6,FloatType))],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),BoolType),param(Id(__),BoolType),param(Id(J23),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 296))

    def test_297(self):
        line = '''Class KQ{}Class q9No___3s_:B{Constructor (){} }Class a:w6{}Class _:k{Constructor (){Val QG,_:S4;}Var $9649,b_,$G:Array [Array [Array [Array [String ,14],034],14],0B1];}Class _{}'''
        expect = '''Program([ClassDecl(Id(KQ),[]),ClassDecl(Id(q9No___3s_),Id(B),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(a),Id(w6),[]),ClassDecl(Id(_),Id(k),[MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(QG),ClassType(Id(S4)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(S4)),NullLiteral())])),AttributeDecl(Static,VarDecl(Id($9649),ArrayType(1,ArrayType(14,ArrayType(28,ArrayType(14,StringType)))))),AttributeDecl(Instance,VarDecl(Id(b_),ArrayType(1,ArrayType(14,ArrayType(28,ArrayType(14,StringType)))))),AttributeDecl(Static,VarDecl(Id($G),ArrayType(1,ArrayType(14,ArrayType(28,ArrayType(14,StringType))))))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 297))

    def test_298(self):
        line = '''Class aW4{}Class _p:r{Destructor (){}Val xm_7:J8_;Destructor (){}Destructor (){Continue ;}Constructor (_1,_,_,_,_9a,X:_d_;_:Array [String ,0x59]){} }Class _:_v1{Var Sh:U_4;}'''
        expect = '''Program([ClassDecl(Id(aW4),[]),ClassDecl(Id(_p),Id(r),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(xm_7),ClassType(Id(J8_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_1),ClassType(Id(_d_))),param(Id(_),ClassType(Id(_d_))),param(Id(_),ClassType(Id(_d_))),param(Id(_),ClassType(Id(_d_))),param(Id(_9a),ClassType(Id(_d_))),param(Id(X),ClassType(Id(_d_))),param(Id(_),ArrayType(89,StringType))],Block([]))]),ClassDecl(Id(_),Id(_v1),[AttributeDecl(Instance,VarDecl(Id(Sh),ClassType(Id(U_4)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 298))

    def test_299(self):
        line = '''Class Q079_:ND0{}Class _:_{Val h,YI_:Int ;}Class g4{Destructor (){Return ;}Var $38:E;Destructor (){} }Class _:X{Var $2_0,$_:Y;}Class _{Var p_,_,$l9:Array [Int ,82];$wC(){}Constructor (){} }Class _:K8{}'''
        expect = '''Program([ClassDecl(Id(Q079_),Id(ND0),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(h),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(YI_),IntType,None))]),ClassDecl(Id(g4),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),AttributeDecl(Static,VarDecl(Id($38),ClassType(Id(E)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(X),[AttributeDecl(Static,VarDecl(Id($2_0),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(Y)),NullLiteral()))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(p_),ArrayType(82,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(82,IntType))),AttributeDecl(Static,VarDecl(Id($l9),ArrayType(82,IntType))),MethodDecl(Id($wC),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(K8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 299))

    def test_300(self):
        line = '''Class o{Constructor (h,_41_567:Array [Array [Boolean ,0x7],3_5];_:_;p_,_,_,__4Y_z,p,B9_5:Boolean ;V0:__;c,_,Q_,_,__8,Cn5_,ku_8:Int ){} }Class _m{Var $g:Array [Float ,0x53];}'''
        expect = '''Program([ClassDecl(Id(o),[MethodDecl(Id(Constructor),Instance,[param(Id(h),ArrayType(35,ArrayType(7,BoolType))),param(Id(_41_567),ArrayType(35,ArrayType(7,BoolType))),param(Id(_),ClassType(Id(_))),param(Id(p_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(__4Y_z),BoolType),param(Id(p),BoolType),param(Id(B9_5),BoolType),param(Id(V0),ClassType(Id(__))),param(Id(c),IntType),param(Id(_),IntType),param(Id(Q_),IntType),param(Id(_),IntType),param(Id(__8),IntType),param(Id(Cn5_),IntType),param(Id(ku_8),IntType)],Block([]))]),ClassDecl(Id(_m),[AttributeDecl(Static,VarDecl(Id($g),ArrayType(83,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 300))

    def test_301(self):
        line = '''Class _{Val $0__:O;H_(_,_:Array [Boolean ,041];_8U3,T,X:Array [Array [Array [Array [Array [Array [Array [Int ,53],03_7],0B1],2],0x43],0x8_A5C],0XA]){} }Class A____m{}Class g_{_(i,Tt,B_,c,__23Z:Array [Array [Array [Int ,7],0b11_11],3_1];_:Array [Boolean ,02]){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($0__),ClassType(Id(O)),NullLiteral())),MethodDecl(Id(H_),Instance,[param(Id(_),ArrayType(33,BoolType)),param(Id(_),ArrayType(33,BoolType)),param(Id(_8U3),ArrayType(10,ArrayType(35420,ArrayType(67,ArrayType(2,ArrayType(1,ArrayType(31,ArrayType(53,IntType)))))))),param(Id(T),ArrayType(10,ArrayType(35420,ArrayType(67,ArrayType(2,ArrayType(1,ArrayType(31,ArrayType(53,IntType)))))))),param(Id(X),ArrayType(10,ArrayType(35420,ArrayType(67,ArrayType(2,ArrayType(1,ArrayType(31,ArrayType(53,IntType))))))))],Block([]))]),ClassDecl(Id(A____m),[]),ClassDecl(Id(g_),[MethodDecl(Id(_),Instance,[param(Id(i),ArrayType(31,ArrayType(15,ArrayType(7,IntType)))),param(Id(Tt),ArrayType(31,ArrayType(15,ArrayType(7,IntType)))),param(Id(B_),ArrayType(31,ArrayType(15,ArrayType(7,IntType)))),param(Id(c),ArrayType(31,ArrayType(15,ArrayType(7,IntType)))),param(Id(__23Z),ArrayType(31,ArrayType(15,ArrayType(7,IntType)))),param(Id(_),ArrayType(2,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 301))

    def test_302(self):
        line = '''Class _:NF5{Val _,__:String ;}Class Pp{Destructor (){Continue ;}Constructor (f:Array [Array [Array [Float ,0x19],39],60];_h,_:R;_,_o,h,l__,M__:Boolean ;r,_,___h_U_7,K:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(NF5),[AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(__),StringType,None))]),ClassDecl(Id(Pp),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(f),ArrayType(60,ArrayType(39,ArrayType(25,FloatType)))),param(Id(_h),ClassType(Id(R))),param(Id(_),ClassType(Id(R))),param(Id(_),BoolType),param(Id(_o),BoolType),param(Id(h),BoolType),param(Id(l__),BoolType),param(Id(M__),BoolType),param(Id(r),StringType),param(Id(_),StringType),param(Id(___h_U_7),StringType),param(Id(K),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 302))

    def test_303(self):
        line = '''Class _A6:_{Val __,_7:Int ;Val P_,l:Array [Float ,0x18];Val _:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1_0],0X6_8B_15],0b10011],49],033_6],55],0x18],49],0x2];}'''
        expect = '''Program([ClassDecl(Id(_A6),Id(_),[AttributeDecl(Instance,ConstDecl(Id(__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_7),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(P_),ArrayType(24,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(l),ArrayType(24,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(49,ArrayType(24,ArrayType(55,ArrayType(222,ArrayType(49,ArrayType(19,ArrayType(428821,ArrayType(2,BoolType))))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 303))

    def test_304(self):
        line = '''Class g7_4474{Constructor (X,_,V,__Z9,_6_P,_,_1W6,c,_y,_,c,b6,_9q9:Array [Boolean ,0X7];_7_:Array [Int ,0111];_,_:_6;_,BS_:String ){}$_(_,z_3_a:_;_:Array [Float ,6_2]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(g7_4474),[MethodDecl(Id(Constructor),Instance,[param(Id(X),ArrayType(7,BoolType)),param(Id(_),ArrayType(7,BoolType)),param(Id(V),ArrayType(7,BoolType)),param(Id(__Z9),ArrayType(7,BoolType)),param(Id(_6_P),ArrayType(7,BoolType)),param(Id(_),ArrayType(7,BoolType)),param(Id(_1W6),ArrayType(7,BoolType)),param(Id(c),ArrayType(7,BoolType)),param(Id(_y),ArrayType(7,BoolType)),param(Id(_),ArrayType(7,BoolType)),param(Id(c),ArrayType(7,BoolType)),param(Id(b6),ArrayType(7,BoolType)),param(Id(_9q9),ArrayType(7,BoolType)),param(Id(_7_),ArrayType(73,IntType)),param(Id(_),ClassType(Id(_6))),param(Id(_),ClassType(Id(_6))),param(Id(_),StringType),param(Id(BS_),StringType)],Block([])),MethodDecl(Id($_),Static,[param(Id(_),ClassType(Id(_))),param(Id(z_3_a),ClassType(Id(_))),param(Id(_),ArrayType(62,FloatType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 304))

    def test_305(self):
        line = '''Class _:_4{Constructor (_:Int ;_,_:_;d:Array [Array [Int ,0b1_01_1],0X5];V,w0U,_T:Int ;I_e6,FdM:_;h:Boolean ;EL:Float ;__0:Array [Int ,05]){} }Class r7{}Class ___{_944(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_4),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(d),ArrayType(5,ArrayType(11,IntType))),param(Id(V),IntType),param(Id(w0U),IntType),param(Id(_T),IntType),param(Id(I_e6),ClassType(Id(_))),param(Id(FdM),ClassType(Id(_))),param(Id(h),BoolType),param(Id(EL),FloatType),param(Id(__0),ArrayType(5,IntType))],Block([]))]),ClassDecl(Id(r7),[]),ClassDecl(Id(___),[MethodDecl(Id(_944),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 305))

    def test_306(self):
        line = '''Class __u{$_TQ(_4:Array [Array [Float ,0B1],02];_y,_:Array [Array [Array [Boolean ,0X2],0x4F],0X2]){}Constructor (){} }Class _{}Class n4s2:X{_5(){}Val _9A,$jRs_h,$10,$_:Array [Boolean ,94];}'''
        expect = '''Program([ClassDecl(Id(__u),[MethodDecl(Id($_TQ),Static,[param(Id(_4),ArrayType(2,ArrayType(1,FloatType))),param(Id(_y),ArrayType(2,ArrayType(79,ArrayType(2,BoolType)))),param(Id(_),ArrayType(2,ArrayType(79,ArrayType(2,BoolType))))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(n4s2),Id(X),[MethodDecl(Id(_5),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_9A),ArrayType(94,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($jRs_h),ArrayType(94,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($10),ArrayType(94,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(94,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 306))

    def test_307(self):
        line = '''Class _{}Class _mA39:w82_E{Var R1m_8:Float ;Destructor (){} }Class _{Destructor (){}__(){}_(){}Destructor (){}Constructor (_,q6_,_,__7,_f,_:Int ;n_9,__:T_P){}Destructor (){}_(eG_,R8a__,l,z0,__1:_;P_A:mc5;R,w_,_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_mA39),Id(w82_E),[AttributeDecl(Instance,VarDecl(Id(R1m_8),FloatType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(__),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(q6_),IntType),param(Id(_),IntType),param(Id(__7),IntType),param(Id(_f),IntType),param(Id(_),IntType),param(Id(n_9),ClassType(Id(T_P))),param(Id(__),ClassType(Id(T_P)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(eG_),ClassType(Id(_))),param(Id(R8a__),ClassType(Id(_))),param(Id(l),ClassType(Id(_))),param(Id(z0),ClassType(Id(_))),param(Id(__1),ClassType(Id(_))),param(Id(P_A),ClassType(Id(mc5))),param(Id(R),IntType),param(Id(w_),IntType),param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 307))

    def test_308(self):
        line = '''Class _:mP{}Class _{Var $9__,_:Array [Boolean ,0b1_11_0];}Class d:_{Destructor (){ {} }$_zr(_,W,w7_,Xw,V6_:Array [String ,07]){} }Class G{T6(U2_,_,dt,_,v__X8:Boolean ){}_9(_:Array [Int ,1_5_38_7_83_4];j0,__y,ri,l,J:Y__){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(mP),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($9__),ArrayType(14,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(14,BoolType)))]),ClassDecl(Id(d),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id($_zr),Static,[param(Id(_),ArrayType(7,StringType)),param(Id(W),ArrayType(7,StringType)),param(Id(w7_),ArrayType(7,StringType)),param(Id(Xw),ArrayType(7,StringType)),param(Id(V6_),ArrayType(7,StringType))],Block([]))]),ClassDecl(Id(G),[MethodDecl(Id(T6),Instance,[param(Id(U2_),BoolType),param(Id(_),BoolType),param(Id(dt),BoolType),param(Id(_),BoolType),param(Id(v__X8),BoolType)],Block([])),MethodDecl(Id(_9),Instance,[param(Id(_),ArrayType(15387834,IntType)),param(Id(j0),ClassType(Id(Y__))),param(Id(__y),ClassType(Id(Y__))),param(Id(ri),ClassType(Id(Y__))),param(Id(l),ClassType(Id(Y__))),param(Id(J),ClassType(Id(Y__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 308))

    def test_309(self):
        line = '''Class _53{}Class _9:z{Constructor (v_0___,_2_7e,U8T:Boolean ;_:Array [Array [Array [Array [Array [Array [String ,0X60],04],0B11010],0XD],051],0B1];Y,_q,m0_z,_a:A9_){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_53),[]),ClassDecl(Id(_9),Id(z),[MethodDecl(Id(Constructor),Instance,[param(Id(v_0___),BoolType),param(Id(_2_7e),BoolType),param(Id(U8T),BoolType),param(Id(_),ArrayType(1,ArrayType(41,ArrayType(13,ArrayType(26,ArrayType(4,ArrayType(96,StringType))))))),param(Id(Y),ClassType(Id(A9_))),param(Id(_q),ClassType(Id(A9_))),param(Id(m0_z),ClassType(Id(A9_))),param(Id(_a),ClassType(Id(A9_)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 309))

    def test_310(self):
        line = '''Class u{Var $08:Int ;l_(q:_;i,X:Int ;_,q8b_:Array [String ,0x25];X,U__,J2_:String ;p,__2X888,_,Q,__2:r_8_;_H,_,_c,r:_){}Var $_,_:Array [Array [Array [Array [Array [Boolean ,0b1_1],0x5],0B1_01_0],0x25],97];}'''
        expect = '''Program([ClassDecl(Id(u),[AttributeDecl(Static,VarDecl(Id($08),IntType)),MethodDecl(Id(l_),Instance,[param(Id(q),ClassType(Id(_))),param(Id(i),IntType),param(Id(X),IntType),param(Id(_),ArrayType(37,StringType)),param(Id(q8b_),ArrayType(37,StringType)),param(Id(X),StringType),param(Id(U__),StringType),param(Id(J2_),StringType),param(Id(p),ClassType(Id(r_8_))),param(Id(__2X888),ClassType(Id(r_8_))),param(Id(_),ClassType(Id(r_8_))),param(Id(Q),ClassType(Id(r_8_))),param(Id(__2),ClassType(Id(r_8_))),param(Id(_H),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_c),ClassType(Id(_))),param(Id(r),ClassType(Id(_)))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(97,ArrayType(37,ArrayType(10,ArrayType(5,ArrayType(3,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(97,ArrayType(37,ArrayType(10,ArrayType(5,ArrayType(3,BoolType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 310))

    def test_311(self):
        line = '''Class q{}Class _:v{Destructor (){} }Class V:w7{Destructor (){Val L:Array [Array [Array [String ,48],0131],0b1_0_0111];} }Class U1_{}Class _{Val _J,$2:Float ;}Class w:_{f(Vy:Boolean ;Z_:Array [Array [Array [String ,3_1],0123],04];_x,_,__87,_:Array [Int ,0x2];__2,_54:Array [String ,0B110];__jo,_:Float ){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(q),[]),ClassDecl(Id(_),Id(v),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(V),Id(w7),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(L),ArrayType(39,ArrayType(89,ArrayType(48,StringType))),None)]))]),ClassDecl(Id(U1_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_J),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($2),FloatType,None))]),ClassDecl(Id(w),Id(_),[MethodDecl(Id(f),Instance,[param(Id(Vy),BoolType),param(Id(Z_),ArrayType(4,ArrayType(83,ArrayType(31,StringType)))),param(Id(_x),ArrayType(2,IntType)),param(Id(_),ArrayType(2,IntType)),param(Id(__87),ArrayType(2,IntType)),param(Id(_),ArrayType(2,IntType)),param(Id(__2),ArrayType(6,StringType)),param(Id(_54),ArrayType(6,StringType)),param(Id(__jo),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 311))

    def test_312(self):
        line = '''Class _8_{_9(m51a,X4,_9Z,T:Int ){}Constructor (){}Constructor (){}Val $3,W,$_8_,__:Q;Constructor (_g:Array [Float ,4_7];KG:String ;__2:Boolean ;T:Array [Array [Array [Array [Array [Int ,02],0b1],07],03_0],0b1000001];_,_,m,O,Q,J:f;uZ,_:Int ;_,t:z__;r_,a:Boolean ;Sx__:Boolean ){} }Class K4:_7{}'''
        expect = '''Program([ClassDecl(Id(_8_),[MethodDecl(Id(_9),Instance,[param(Id(m51a),IntType),param(Id(X4),IntType),param(Id(_9Z),IntType),param(Id(T),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($3),ClassType(Id(Q)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(W),ClassType(Id(Q)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_8_),ClassType(Id(Q)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(Q)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_g),ArrayType(47,FloatType)),param(Id(KG),StringType),param(Id(__2),BoolType),param(Id(T),ArrayType(65,ArrayType(24,ArrayType(7,ArrayType(1,ArrayType(2,IntType)))))),param(Id(_),ClassType(Id(f))),param(Id(_),ClassType(Id(f))),param(Id(m),ClassType(Id(f))),param(Id(O),ClassType(Id(f))),param(Id(Q),ClassType(Id(f))),param(Id(J),ClassType(Id(f))),param(Id(uZ),IntType),param(Id(_),IntType),param(Id(_),ClassType(Id(z__))),param(Id(t),ClassType(Id(z__))),param(Id(r_),BoolType),param(Id(a),BoolType),param(Id(Sx__),BoolType)],Block([]))]),ClassDecl(Id(K4),Id(_7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 312))

    def test_313(self):
        line = '''Class _h:_1_{}Class _dPXc_3_8___:uh{T3T(){}Constructor (O339:Array [Int ,0X5C]){}u(){}Var $RZ,$_,i,$_5:Array [Int ,13];Constructor (){} }Class RU:_0_{Constructor (P__Q:String ;_,E6:Float ;D:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_h),Id(_1_),[]),ClassDecl(Id(_dPXc_3_8___),Id(uh),[MethodDecl(Id(T3T),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(O339),ArrayType(92,IntType))],Block([])),MethodDecl(Id(u),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($RZ),ArrayType(13,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(13,IntType))),AttributeDecl(Instance,VarDecl(Id(i),ArrayType(13,IntType))),AttributeDecl(Static,VarDecl(Id($_5),ArrayType(13,IntType))),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(RU),Id(_0_),[MethodDecl(Id(Constructor),Instance,[param(Id(P__Q),StringType),param(Id(_),FloatType),param(Id(E6),FloatType),param(Id(D),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 313))

    def test_314(self):
        line = '''Class y_{$7I(){}_(be,K_,_S,G8:Float ;_:String ;_,w758,_8,__9:__;B_:__n){} }Class G{Destructor (){Break ;} }Class __{Val $6_,_:b;}Class _4{Destructor (){}m(){ {} }m(){}$9(g9_,I_,v:Int ){} }'''
        expect = '''Program([ClassDecl(Id(y_),[MethodDecl(Id($7I),Static,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(be),FloatType),param(Id(K_),FloatType),param(Id(_S),FloatType),param(Id(G8),FloatType),param(Id(_),StringType),param(Id(_),ClassType(Id(__))),param(Id(w758),ClassType(Id(__))),param(Id(_8),ClassType(Id(__))),param(Id(__9),ClassType(Id(__))),param(Id(B_),ClassType(Id(__n)))],Block([]))]),ClassDecl(Id(G),[MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($6_),ClassType(Id(b)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(b)),NullLiteral()))]),ClassDecl(Id(_4),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(m),Instance,[],Block([Block([])])),MethodDecl(Id(m),Instance,[],Block([])),MethodDecl(Id($9),Static,[param(Id(g9_),IntType),param(Id(I_),IntType),param(Id(v),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 314))

    def test_315(self):
        line = '''Class P_:_0{}Class h:_F{Destructor (){} }Class _{}Class _8__{_(){}Val _:Array [Array [Array [Array [Array [Int ,8],8],02],9],0b1];Constructor (_:w__q6____){}Val $N_,$_,$H,$8:Float ;}'''
        expect = '''Program([ClassDecl(Id(P_),Id(_0),[]),ClassDecl(Id(h),Id(_F),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_8__),[MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(9,ArrayType(2,ArrayType(8,ArrayType(8,IntType))))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(w__q6____)))],Block([])),AttributeDecl(Static,ConstDecl(Id($N_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($H),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($8),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 315))

    def test_316(self):
        line = '''Class Xq_:u__9{Constructor (_4_I8,J:String ;r4F8:Array [Array [Array [Array [Float ,5_2],0XB],0344_4],0B111_0_11];z,_:K;N:Array [Array [Boolean ,0B110110],0B110110];_F4:Int ;t,U,_Ks:Array [Array [Int ,38],0b10010];G,fa_:Array [Array [Array [Boolean ,0X6],0B11],0b1_0];_,_,O9_:Array [Array [Int ,0B1],78_4];G_:T6_){} }Class _:p{}Class G{}Class S0_{}'''
        expect = '''Program([ClassDecl(Id(Xq_),Id(u__9),[MethodDecl(Id(Constructor),Instance,[param(Id(_4_I8),StringType),param(Id(J),StringType),param(Id(r4F8),ArrayType(59,ArrayType(1828,ArrayType(11,ArrayType(52,FloatType))))),param(Id(z),ClassType(Id(K))),param(Id(_),ClassType(Id(K))),param(Id(N),ArrayType(54,ArrayType(54,BoolType))),param(Id(_F4),IntType),param(Id(t),ArrayType(18,ArrayType(38,IntType))),param(Id(U),ArrayType(18,ArrayType(38,IntType))),param(Id(_Ks),ArrayType(18,ArrayType(38,IntType))),param(Id(G),ArrayType(2,ArrayType(3,ArrayType(6,BoolType)))),param(Id(fa_),ArrayType(2,ArrayType(3,ArrayType(6,BoolType)))),param(Id(_),ArrayType(784,ArrayType(1,IntType))),param(Id(_),ArrayType(784,ArrayType(1,IntType))),param(Id(O9_),ArrayType(784,ArrayType(1,IntType))),param(Id(G_),ClassType(Id(T6_)))],Block([]))]),ClassDecl(Id(_),Id(p),[]),ClassDecl(Id(G),[]),ClassDecl(Id(S0_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 316))

    def test_317(self):
        line = '''Class _:b14{$__Q_(X,w:Array [Float ,024]){}Var p:Int ;}Class _:yT{}Class _0_I__n_Gm_:n{}Class L_:_6_{}Class _{Constructor (f:Boolean ;__:K;_D,x,e_,qd_R3:Boolean ;n:_){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(b14),[MethodDecl(Id($__Q_),Static,[param(Id(X),ArrayType(20,FloatType)),param(Id(w),ArrayType(20,FloatType))],Block([])),AttributeDecl(Instance,VarDecl(Id(p),IntType))]),ClassDecl(Id(_),Id(yT),[]),ClassDecl(Id(_0_I__n_Gm_),Id(n),[]),ClassDecl(Id(L_),Id(_6_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(f),BoolType),param(Id(__),ClassType(Id(K))),param(Id(_D),BoolType),param(Id(x),BoolType),param(Id(e_),BoolType),param(Id(qd_R3),BoolType),param(Id(n),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 317))

    def test_318(self):
        line = '''Class Ak{}Class b:_{}Class q{Val o_:Array [Array [Array [Array [Float ,0b1_0],0X4],0b110010],39];$w_(_,_,_,X_:_;_0G6:Boolean ;Z:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B110_0],0B1_1],0XF],39],0x2D9B],0XA],0X5C];Jz,Z,_:d){} }'''
        expect = '''Program([ClassDecl(Id(Ak),[]),ClassDecl(Id(b),Id(_),[]),ClassDecl(Id(q),[AttributeDecl(Instance,ConstDecl(Id(o_),ArrayType(39,ArrayType(50,ArrayType(4,ArrayType(2,FloatType)))),None)),MethodDecl(Id($w_),Static,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(X_),ClassType(Id(_))),param(Id(_0G6),BoolType),param(Id(Z),ArrayType(92,ArrayType(10,ArrayType(11675,ArrayType(39,ArrayType(15,ArrayType(3,ArrayType(12,BoolType)))))))),param(Id(Jz),ClassType(Id(d))),param(Id(Z),ClassType(Id(d))),param(Id(_),ClassType(Id(d)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 318))

    def test_319(self):
        line = '''Class _1:k{Constructor (){}Var $6_6__,b:J;$6(){}Constructor (_68,_3,eCk:Array [Array [Array [Array [Boolean ,03],0B101111],0x35],0xE5];_:Array [String ,063];_,__,J,_:Int ;M:String ;_,__h:_){}Constructor (){}Destructor (){ {} }}Class _{Var $gV,$4,_,_2w,$s,$3l,L,$He_,$_7M:_4_80T8;Var q5_2:W;Var $0_:_7;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_1),Id(k),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($6_6__),ClassType(Id(J)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(b),ClassType(Id(J)),NullLiteral())),MethodDecl(Id($6),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_68),ArrayType(229,ArrayType(53,ArrayType(47,ArrayType(3,BoolType))))),param(Id(_3),ArrayType(229,ArrayType(53,ArrayType(47,ArrayType(3,BoolType))))),param(Id(eCk),ArrayType(229,ArrayType(53,ArrayType(47,ArrayType(3,BoolType))))),param(Id(_),ArrayType(51,StringType)),param(Id(_),IntType),param(Id(__),IntType),param(Id(J),IntType),param(Id(_),IntType),param(Id(M),StringType),param(Id(_),ClassType(Id(_))),param(Id(__h),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($gV),ClassType(Id(_4_80T8)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(_4_80T8)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_4_80T8)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_2w),ClassType(Id(_4_80T8)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($s),ClassType(Id(_4_80T8)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($3l),ClassType(Id(_4_80T8)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(L),ClassType(Id(_4_80T8)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($He_),ClassType(Id(_4_80T8)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_7M),ClassType(Id(_4_80T8)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(q5_2),ClassType(Id(W)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0_),ClassType(Id(_7)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 319))

    def test_320(self):
        line = '''Class f:m{Constructor (_:Float ;T_i5:_KB_;_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,03_52],0B1],0x4A],36],36],06],0b10011],0106],9];K,P9:Array [Array [Float ,2],0B1]){ {Continue ;} }_2(){} }'''
        expect = '''Program([ClassDecl(Id(f),Id(m),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(T_i5),ClassType(Id(_KB_))),param(Id(_),ArrayType(9,ArrayType(70,ArrayType(19,ArrayType(6,ArrayType(36,ArrayType(36,ArrayType(74,ArrayType(1,ArrayType(234,FloatType)))))))))),param(Id(K),ArrayType(1,ArrayType(2,FloatType))),param(Id(P9),ArrayType(1,ArrayType(2,FloatType)))],Block([Block([Continue])])),MethodDecl(Id(_2),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 320))

    def test_321(self):
        line = '''Class B{Var _:Float ;}Class _:_i{Destructor (){} }Class e_5{}Class mL0:U{Constructor (){} }Class _0_{Constructor (){}Destructor (){}_(){Continue ;{}Return ;} }Class A{}'''
        expect = '''Program([ClassDecl(Id(B),[AttributeDecl(Instance,VarDecl(Id(_),FloatType))]),ClassDecl(Id(_),Id(_i),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(e_5),[]),ClassDecl(Id(mL0),Id(U),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_0_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([Continue,Block([]),Return()]))]),ClassDecl(Id(A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 321))

    def test_322(self):
        line = '''Class o0:_{}Class __4:_{Var $095_:Array [Array [Int ,5],05];Constructor (__DT:_;_:String ){} }Class _{Constructor (_:_;_P,a66:_;t,J_:t;e_____6:_9;d:String ;___y:Int ;R,_N:Float ){} }Class _0h_:S{}Class _J:f{}'''
        expect = '''Program([ClassDecl(Id(o0),Id(_),[]),ClassDecl(Id(__4),Id(_),[AttributeDecl(Static,VarDecl(Id($095_),ArrayType(5,ArrayType(5,IntType)))),MethodDecl(Id(Constructor),Instance,[param(Id(__DT),ClassType(Id(_))),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_P),ClassType(Id(_))),param(Id(a66),ClassType(Id(_))),param(Id(t),ClassType(Id(t))),param(Id(J_),ClassType(Id(t))),param(Id(e_____6),ClassType(Id(_9))),param(Id(d),StringType),param(Id(___y),IntType),param(Id(R),FloatType),param(Id(_N),FloatType)],Block([]))]),ClassDecl(Id(_0h_),Id(S),[]),ClassDecl(Id(_J),Id(f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 322))

    def test_323(self):
        line = '''Class m_N:L_{}Class __{Destructor (){} }Class _j:_{Constructor (){}Var $_:Array [Array [Array [Array [String ,48],0x3],0X2D],87637];}Class _B:V{Constructor (E:p;_Vuj_:Float ;P:S9_;F___,_,__,_,_7:Array [Int ,6_6_273_6_8];J,_:Boolean ;_:_;c,_,_R,I:T_;G_X:Boolean ){l::$KL_3().d4().i._6oy();} }'''
        expect = '''Program([ClassDecl(Id(m_N),Id(L_),[]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_j),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(87637,ArrayType(45,ArrayType(3,ArrayType(48,StringType))))))]),ClassDecl(Id(_B),Id(V),[MethodDecl(Id(Constructor),Instance,[param(Id(E),ClassType(Id(p))),param(Id(_Vuj_),FloatType),param(Id(P),ClassType(Id(S9_))),param(Id(F___),ArrayType(6627368,IntType)),param(Id(_),ArrayType(6627368,IntType)),param(Id(__),ArrayType(6627368,IntType)),param(Id(_),ArrayType(6627368,IntType)),param(Id(_7),ArrayType(6627368,IntType)),param(Id(J),BoolType),param(Id(_),BoolType),param(Id(_),ClassType(Id(_))),param(Id(c),ClassType(Id(T_))),param(Id(_),ClassType(Id(T_))),param(Id(_R),ClassType(Id(T_))),param(Id(I),ClassType(Id(T_))),param(Id(G_X),BoolType)],Block([Call(FieldAccess(CallExpr(CallExpr(Id(l),Id($KL_3),[]),Id(d4),[]),Id(i)),Id(_6oy),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 323))

    def test_324(self):
        line = '''Class rj{Constructor (__,_,iN__Z4:M_;Qn2,I,g:Array [String ,0X5F];____,_:JFk_;x54V:Array [Int ,0B1];j_:Array [String ,01];A:X;v:Int ;_,OK,oN,_:_2V_;__,L3_3,_,DQ_,_F:twxW){ {} }Destructor (){ {} }}Class D_h{Destructor (){}Var u83:Array [Array [Float ,52_12],05];}Class _:_7{K5_(){} }'''
        expect = '''Program([ClassDecl(Id(rj),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(M_))),param(Id(_),ClassType(Id(M_))),param(Id(iN__Z4),ClassType(Id(M_))),param(Id(Qn2),ArrayType(95,StringType)),param(Id(I),ArrayType(95,StringType)),param(Id(g),ArrayType(95,StringType)),param(Id(____),ClassType(Id(JFk_))),param(Id(_),ClassType(Id(JFk_))),param(Id(x54V),ArrayType(1,IntType)),param(Id(j_),ArrayType(1,StringType)),param(Id(A),ClassType(Id(X))),param(Id(v),IntType),param(Id(_),ClassType(Id(_2V_))),param(Id(OK),ClassType(Id(_2V_))),param(Id(oN),ClassType(Id(_2V_))),param(Id(_),ClassType(Id(_2V_))),param(Id(__),ClassType(Id(twxW))),param(Id(L3_3),ClassType(Id(twxW))),param(Id(_),ClassType(Id(twxW))),param(Id(DQ_),ClassType(Id(twxW))),param(Id(_F),ClassType(Id(twxW)))],Block([Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(D_h),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(u83),ArrayType(5,ArrayType(5212,FloatType))))]),ClassDecl(Id(_),Id(_7),[MethodDecl(Id(K5_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 324))

    def test_325(self):
        line = '''Class r{Val V,$2_0,_,n:String ;$w_(_,_e,A,G,_FfY,N,S466y,vp_,__:Array [Float ,0x60];_,V0:Int ;B,e3,_:Array [Boolean ,0104]){} }Class _:Q{}Class _:h{$S(k:Array [Array [Array [Array [Boolean ,0104],0b1],22],22]){} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(r),[AttributeDecl(Instance,ConstDecl(Id(V),StringType,None)),AttributeDecl(Static,ConstDecl(Id($2_0),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(n),StringType,None)),MethodDecl(Id($w_),Static,[param(Id(_),ArrayType(96,FloatType)),param(Id(_e),ArrayType(96,FloatType)),param(Id(A),ArrayType(96,FloatType)),param(Id(G),ArrayType(96,FloatType)),param(Id(_FfY),ArrayType(96,FloatType)),param(Id(N),ArrayType(96,FloatType)),param(Id(S466y),ArrayType(96,FloatType)),param(Id(vp_),ArrayType(96,FloatType)),param(Id(__),ArrayType(96,FloatType)),param(Id(_),IntType),param(Id(V0),IntType),param(Id(B),ArrayType(68,BoolType)),param(Id(e3),ArrayType(68,BoolType)),param(Id(_),ArrayType(68,BoolType))],Block([]))]),ClassDecl(Id(_),Id(Q),[]),ClassDecl(Id(_),Id(h),[MethodDecl(Id($S),Static,[param(Id(k),ArrayType(22,ArrayType(22,ArrayType(1,ArrayType(68,BoolType)))))],Block([]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 325))

    def test_326(self):
        line = '''Class _Y:Z{Constructor (__,Aa:Array [Array [Array [Boolean ,01],0b1],51];C,_z_V5,_:Array [Boolean ,026]){Var C5:Float ;Val _:Float ;}Val $_2,dX,$52,$r,_,M82H9,$C,$__,$1:Int ;}Class y_:j3_{}'''
        expect = '''Program([ClassDecl(Id(_Y),Id(Z),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(51,ArrayType(1,ArrayType(1,BoolType)))),param(Id(Aa),ArrayType(51,ArrayType(1,ArrayType(1,BoolType)))),param(Id(C),ArrayType(22,BoolType)),param(Id(_z_V5),ArrayType(22,BoolType)),param(Id(_),ArrayType(22,BoolType))],Block([VarDecl(Id(C5),FloatType),ConstDecl(Id(_),FloatType,None)])),AttributeDecl(Static,ConstDecl(Id($_2),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(dX),IntType,None)),AttributeDecl(Static,ConstDecl(Id($52),IntType,None)),AttributeDecl(Static,ConstDecl(Id($r),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(M82H9),IntType,None)),AttributeDecl(Static,ConstDecl(Id($C),IntType,None)),AttributeDecl(Static,ConstDecl(Id($__),IntType,None)),AttributeDecl(Static,ConstDecl(Id($1),IntType,None))]),ClassDecl(Id(y_),Id(j3_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 326))

    def test_327(self):
        line = '''Class U7{Var $_:Int ;}Class H_{Var Q00,$69_:Array [Boolean ,0B111010];$4(){}Var _:Float ;}Class _:__{Var $K_:String ;Constructor (_:Int ;r___:Int ){}Constructor (_:Array [Array [String ,28],0x6]){}Destructor (){} }Class a3{}'''
        expect = '''Program([ClassDecl(Id(U7),[AttributeDecl(Static,VarDecl(Id($_),IntType))]),ClassDecl(Id(H_),[AttributeDecl(Instance,VarDecl(Id(Q00),ArrayType(58,BoolType))),AttributeDecl(Static,VarDecl(Id($69_),ArrayType(58,BoolType))),MethodDecl(Id($4),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),FloatType))]),ClassDecl(Id(_),Id(__),[AttributeDecl(Static,VarDecl(Id($K_),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(r___),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(6,ArrayType(28,StringType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(a3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 327))

    def test_328(self):
        line = '''Class U_q{Var $_,$7k4:_07Q__;Constructor (____76:Array [Array [Float ,036],0b10110];_Fp9,t:Array [Array [Array [Boolean ,0b10110],036],0x18];x,T,_2l,t_,U,_5___,eE,_,oE,_:Boolean ){}Val I,W_:Int ;}Class _{Constructor (O:Array [Array [Float ,11],0b1_1];_99:_2_){} }'''
        expect = '''Program([ClassDecl(Id(U_q),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_07Q__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($7k4),ClassType(Id(_07Q__)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(____76),ArrayType(22,ArrayType(30,FloatType))),param(Id(_Fp9),ArrayType(24,ArrayType(30,ArrayType(22,BoolType)))),param(Id(t),ArrayType(24,ArrayType(30,ArrayType(22,BoolType)))),param(Id(x),BoolType),param(Id(T),BoolType),param(Id(_2l),BoolType),param(Id(t_),BoolType),param(Id(U),BoolType),param(Id(_5___),BoolType),param(Id(eE),BoolType),param(Id(_),BoolType),param(Id(oE),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(I),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(W_),IntType,None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(O),ArrayType(3,ArrayType(11,FloatType))),param(Id(_99),ClassType(Id(_2_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 328))

    def test_329(self):
        line = '''Class u{Val $x2_9,$aXg:Float ;Constructor (_,_O3V:Array [Array [Array [Float ,0X73],0x4C],0b1];_:Array [Array [String ,074],074];_,_,N:___;N,_,_,_,U:Array [Boolean ,6510];_:Array [String ,01];I,_,S,xN:Boolean ;d,__,_4X_:_s){} }'''
        expect = '''Program([ClassDecl(Id(u),[AttributeDecl(Static,ConstDecl(Id($x2_9),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($aXg),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(76,ArrayType(115,FloatType)))),param(Id(_O3V),ArrayType(1,ArrayType(76,ArrayType(115,FloatType)))),param(Id(_),ArrayType(60,ArrayType(60,StringType))),param(Id(_),ClassType(Id(___))),param(Id(_),ClassType(Id(___))),param(Id(N),ClassType(Id(___))),param(Id(N),ArrayType(6510,BoolType)),param(Id(_),ArrayType(6510,BoolType)),param(Id(_),ArrayType(6510,BoolType)),param(Id(_),ArrayType(6510,BoolType)),param(Id(U),ArrayType(6510,BoolType)),param(Id(_),ArrayType(1,StringType)),param(Id(I),BoolType),param(Id(_),BoolType),param(Id(S),BoolType),param(Id(xN),BoolType),param(Id(d),ClassType(Id(_s))),param(Id(__),ClassType(Id(_s))),param(Id(_4X_),ClassType(Id(_s)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 329))

    def test_330(self):
        line = '''Class M:__{}Class __0{_h(_:Array [Array [Array [Float ,50],0X4],81];_,l_a:Array [Boolean ,0B1];_:Array [Boolean ,07];__:Array [Boolean ,1_5]){Break ;} }Class _s:L{}Class Mp5{Var _:Float ;}'''
        expect = '''Program([ClassDecl(Id(M),Id(__),[]),ClassDecl(Id(__0),[MethodDecl(Id(_h),Instance,[param(Id(_),ArrayType(81,ArrayType(4,ArrayType(50,FloatType)))),param(Id(_),ArrayType(1,BoolType)),param(Id(l_a),ArrayType(1,BoolType)),param(Id(_),ArrayType(7,BoolType)),param(Id(__),ArrayType(15,BoolType))],Block([Break]))]),ClassDecl(Id(_s),Id(L),[]),ClassDecl(Id(Mp5),[AttributeDecl(Instance,VarDecl(Id(_),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 330))

    def test_331(self):
        line = '''Class _ut:_{}Class g17{}Class ___{Constructor (_:Array [Array [Boolean ,021],0B1001010]){Var _32,_2,_,I,M,Q__,P_,_r__H_:Array [Boolean ,0b1];}Destructor (){}Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_ut),Id(_),[]),ClassDecl(Id(g17),[]),ClassDecl(Id(___),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(74,ArrayType(17,BoolType)))],Block([VarDecl(Id(_32),ArrayType(1,BoolType)),VarDecl(Id(_2),ArrayType(1,BoolType)),VarDecl(Id(_),ArrayType(1,BoolType)),VarDecl(Id(I),ArrayType(1,BoolType)),VarDecl(Id(M),ArrayType(1,BoolType)),VarDecl(Id(Q__),ArrayType(1,BoolType)),VarDecl(Id(P_),ArrayType(1,BoolType)),VarDecl(Id(_r__H_),ArrayType(1,BoolType))])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 331))

    def test_332(self):
        line = '''Class _:_2{}Class c{$lXjT_(w,_:Float ;Y,aX48,__:XT;_:Array [Array [Array [Array [Boolean ,3_9_75],0x44],06_61],04_4];L,C,_o:_5z;_,__9,PL,AX:E;_F3:Array [Int ,01]){Break ;} }Class M5z_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_2),[]),ClassDecl(Id(c),[MethodDecl(Id($lXjT_),Static,[param(Id(w),FloatType),param(Id(_),FloatType),param(Id(Y),ClassType(Id(XT))),param(Id(aX48),ClassType(Id(XT))),param(Id(__),ClassType(Id(XT))),param(Id(_),ArrayType(36,ArrayType(433,ArrayType(68,ArrayType(3975,BoolType))))),param(Id(L),ClassType(Id(_5z))),param(Id(C),ClassType(Id(_5z))),param(Id(_o),ClassType(Id(_5z))),param(Id(_),ClassType(Id(E))),param(Id(__9),ClassType(Id(E))),param(Id(PL),ClassType(Id(E))),param(Id(AX),ClassType(Id(E))),param(Id(_F3),ArrayType(1,IntType))],Block([Break]))]),ClassDecl(Id(M5z_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 332))

    def test_333(self):
        line = '''Class __{}Class I:ZO_P{}Class __{}Class N_:h{$_(__3A1B,z7,aH_,_739,u:Boolean ;n,D,C9,y_:q_;__:Boolean ;Dp:Array [Boolean ,0x24];_U1,_,r9,_:Array [Float ,4_8];a,J,_jI_:Array [Array [Array [Array [Int ,07],0B1000110],05],4];_cf_9_:Array [Array [Boolean ,29],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(I),Id(ZO_P),[]),ClassDecl(Id(__),[]),ClassDecl(Id(N_),Id(h),[MethodDecl(Id($_),Static,[param(Id(__3A1B),BoolType),param(Id(z7),BoolType),param(Id(aH_),BoolType),param(Id(_739),BoolType),param(Id(u),BoolType),param(Id(n),ClassType(Id(q_))),param(Id(D),ClassType(Id(q_))),param(Id(C9),ClassType(Id(q_))),param(Id(y_),ClassType(Id(q_))),param(Id(__),BoolType),param(Id(Dp),ArrayType(36,BoolType)),param(Id(_U1),ArrayType(48,FloatType)),param(Id(_),ArrayType(48,FloatType)),param(Id(r9),ArrayType(48,FloatType)),param(Id(_),ArrayType(48,FloatType)),param(Id(a),ArrayType(4,ArrayType(5,ArrayType(70,ArrayType(7,IntType))))),param(Id(J),ArrayType(4,ArrayType(5,ArrayType(70,ArrayType(7,IntType))))),param(Id(_jI_),ArrayType(4,ArrayType(5,ArrayType(70,ArrayType(7,IntType))))),param(Id(_cf_9_),ArrayType(1,ArrayType(29,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 333))

    def test_334(self):
        line = '''Class _3:_{_(_8PKx:String ;_:Array [Array [Float ,0b10],0121];__,_0:Float ;_,__,_1_,v:Boolean ;Zw7,_,X:S;b2,Y:Array [Array [String ,0x2B],0X57];_,_,q9:Array [Array [Array [Float ,04],0X57],0B1];P:Int ;z,___:s){}Var $f:P;}Class __h:B__k{}'''
        expect = '''Program([ClassDecl(Id(_3),Id(_),[MethodDecl(Id(_),Instance,[param(Id(_8PKx),StringType),param(Id(_),ArrayType(81,ArrayType(2,FloatType))),param(Id(__),FloatType),param(Id(_0),FloatType),param(Id(_),BoolType),param(Id(__),BoolType),param(Id(_1_),BoolType),param(Id(v),BoolType),param(Id(Zw7),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(X),ClassType(Id(S))),param(Id(b2),ArrayType(87,ArrayType(43,StringType))),param(Id(Y),ArrayType(87,ArrayType(43,StringType))),param(Id(_),ArrayType(1,ArrayType(87,ArrayType(4,FloatType)))),param(Id(_),ArrayType(1,ArrayType(87,ArrayType(4,FloatType)))),param(Id(q9),ArrayType(1,ArrayType(87,ArrayType(4,FloatType)))),param(Id(P),IntType),param(Id(z),ClassType(Id(s))),param(Id(___),ClassType(Id(s)))],Block([])),AttributeDecl(Static,VarDecl(Id($f),ClassType(Id(P)),NullLiteral()))]),ClassDecl(Id(__h),Id(B__k),[])])'''
        self.assertTrue(TestAST.test(line, expect, 334))

    def test_335(self):
        line = '''Class L:n{Var __C,$t__,$R_:Array [Array [Array [Array [Array [Array [Boolean ,0x16],17],043],043],07],0b1_1];Destructor (){} }Class Qw{Constructor (y,f_:B;R:Array [Boolean ,0x7];_,Z:d){Break ;{} }}Class _:__4{$1(_:Array [Boolean ,0b1];_,F9:Array [Float ,021_460]){} }Class _6{Val $B_0_bQ1__:Array [Float ,0b1100011];}'''
        expect = '''Program([ClassDecl(Id(L),Id(n),[AttributeDecl(Instance,VarDecl(Id(__C),ArrayType(3,ArrayType(7,ArrayType(35,ArrayType(35,ArrayType(17,ArrayType(22,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($t__),ArrayType(3,ArrayType(7,ArrayType(35,ArrayType(35,ArrayType(17,ArrayType(22,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($R_),ArrayType(3,ArrayType(7,ArrayType(35,ArrayType(35,ArrayType(17,ArrayType(22,BoolType)))))))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Qw),[MethodDecl(Id(Constructor),Instance,[param(Id(y),ClassType(Id(B))),param(Id(f_),ClassType(Id(B))),param(Id(R),ArrayType(7,BoolType)),param(Id(_),ClassType(Id(d))),param(Id(Z),ClassType(Id(d)))],Block([Break,Block([])]))]),ClassDecl(Id(_),Id(__4),[MethodDecl(Id($1),Static,[param(Id(_),ArrayType(1,BoolType)),param(Id(_),ArrayType(9008,FloatType)),param(Id(F9),ArrayType(9008,FloatType))],Block([]))]),ClassDecl(Id(_6),[AttributeDecl(Static,ConstDecl(Id($B_0_bQ1__),ArrayType(99,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 335))

    def test_336(self):
        line = '''Class ___:_{}Class C:Qd{Constructor (y:v6;_,__:String ;f_,_,n:Array [Array [Boolean ,0B1],2];B:_;_,p__:Int ;_4c,A_,IAw:Int ;g,a:_){Continue ;} }Class G5{}Class Y4R_:_132E8{}Class r:__{}'''
        expect = '''Program([ClassDecl(Id(___),Id(_),[]),ClassDecl(Id(C),Id(Qd),[MethodDecl(Id(Constructor),Instance,[param(Id(y),ClassType(Id(v6))),param(Id(_),StringType),param(Id(__),StringType),param(Id(f_),ArrayType(2,ArrayType(1,BoolType))),param(Id(_),ArrayType(2,ArrayType(1,BoolType))),param(Id(n),ArrayType(2,ArrayType(1,BoolType))),param(Id(B),ClassType(Id(_))),param(Id(_),IntType),param(Id(p__),IntType),param(Id(_4c),IntType),param(Id(A_),IntType),param(Id(IAw),IntType),param(Id(g),ClassType(Id(_))),param(Id(a),ClassType(Id(_)))],Block([Continue]))]),ClassDecl(Id(G5),[]),ClassDecl(Id(Y4R_),Id(_132E8),[]),ClassDecl(Id(r),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 336))

    def test_337(self):
        line = '''Class ak{Destructor (){}Constructor (){}Val $_6x2:Array [Int ,0B1_1];$_(_Fr:Array [Array [Array [Array [Float ,0xC],90],0131],0B1011010];__,_:Array [Array [Array [String ,0XC],0B1],0x4D]){} }'''
        expect = '''Program([ClassDecl(Id(ak),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_6x2),ArrayType(3,IntType),None)),MethodDecl(Id($_),Static,[param(Id(_Fr),ArrayType(90,ArrayType(89,ArrayType(90,ArrayType(12,FloatType))))),param(Id(__),ArrayType(77,ArrayType(1,ArrayType(12,StringType)))),param(Id(_),ArrayType(77,ArrayType(1,ArrayType(12,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 337))

    def test_338(self):
        line = '''Class QL:L_{Var $k:Array [Array [Boolean ,0x9_E64],0b1]=--D_tB::$_5()._0_()._;Val $_:_0;Constructor (w,_,_3dk_O,zY,_:Float ;_:String ){}Constructor (__,k6:Float ;o_:__){} }'''
        expect = '''Program([ClassDecl(Id(QL),Id(L_),[AttributeDecl(Static,VarDecl(Id($_6_),ArrayType(1,ArrayType(40548,BoolType)),UnaryOp(-,UnaryOp(-,FieldAccess(CallExpr(CallExpr(Id(D_tB),Id($_5),[]),Id(_0_),[]),Id(_)))))),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_0)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(w),FloatType),param(Id(_),FloatType),param(Id(_3dk_O),FloatType),param(Id(zY),FloatType),param(Id(_),FloatType),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),FloatType),param(Id(k6),FloatType),param(Id(o_),ClassType(Id(__)))],Block([]))])])'''
        #self.assertTrue(TestAST.test(line, expect, 338))

    def test_339(self):
        line = '''Class _:_{Var __:I;$n(){} }Class _C_8Gy:nm{}Class k_{$m3(s:_;_:Array [Int ,0b101100];kX3__,Z:_2_;_,x,k2,_,__Y,_,_L:Int ){}Destructor (){Continue ;Return ;}Val I_:Array [Array [Array [Float ,0613_6],21],0b101100];Constructor (E_t,Y,e:_A23v7;M,_,__,l,_g:Array [Boolean ,0b101100]){Continue ;Continue ;} }Class l:_7{}Class __1:M{Var $_:Array [Array [Array [Boolean ,21],1_8],0b11_00];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(I)),NullLiteral())),MethodDecl(Id($n),Static,[],Block([]))]),ClassDecl(Id(_C_8Gy),Id(nm),[]),ClassDecl(Id(k_),[MethodDecl(Id($m3),Static,[param(Id(s),ClassType(Id(_))),param(Id(_),ArrayType(44,IntType)),param(Id(kX3__),ClassType(Id(_2_))),param(Id(Z),ClassType(Id(_2_))),param(Id(_),IntType),param(Id(x),IntType),param(Id(k2),IntType),param(Id(_),IntType),param(Id(__Y),IntType),param(Id(_),IntType),param(Id(_L),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Return()])),AttributeDecl(Instance,ConstDecl(Id(I_),ArrayType(44,ArrayType(21,ArrayType(3166,FloatType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(E_t),ClassType(Id(_A23v7))),param(Id(Y),ClassType(Id(_A23v7))),param(Id(e),ClassType(Id(_A23v7))),param(Id(M),ArrayType(44,BoolType)),param(Id(_),ArrayType(44,BoolType)),param(Id(__),ArrayType(44,BoolType)),param(Id(l),ArrayType(44,BoolType)),param(Id(_g),ArrayType(44,BoolType))],Block([Continue,Continue]))]),ClassDecl(Id(l),Id(_7),[]),ClassDecl(Id(__1),Id(M),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(12,ArrayType(18,ArrayType(21,BoolType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 339))

    def test_340(self):
        line = '''Class D5_{}Class g{Constructor (I,_:Float ;b:Array [Float ,0b1];G_5_:Array [Array [Array [Int ,15],047],0x11];_:Array [Array [Int ,0b1_1],0623];ZIq_a,_m,x:Array [String ,05];_:Array [Array [Array [String ,15],0B1_0],15]){} }'''
        expect = '''Program([ClassDecl(Id(D5_),[]),ClassDecl(Id(g),[MethodDecl(Id(Constructor),Instance,[param(Id(I),FloatType),param(Id(_),FloatType),param(Id(b),ArrayType(1,FloatType)),param(Id(G_5_),ArrayType(17,ArrayType(39,ArrayType(15,IntType)))),param(Id(_),ArrayType(403,ArrayType(3,IntType))),param(Id(ZIq_a),ArrayType(5,StringType)),param(Id(_m),ArrayType(5,StringType)),param(Id(x),ArrayType(5,StringType)),param(Id(_),ArrayType(15,ArrayType(2,ArrayType(15,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 340))

    def test_341(self):
        line = '''Class R{Var _:Int ;$v(_0,Rb02_W0a_,o,__:Array [Int ,0b1011010];_,cO5_,x:Array [Array [Array [Array [Array [Boolean ,72],0x5A],0B1],047],0X6]){Break ;New N()._3()._.__();Continue ;Continue ;}Destructor (){Return ;} }Class t_u7j5U:__{Val $z1__:L_;}'''
        expect = '''Program([ClassDecl(Id(R),[AttributeDecl(Instance,VarDecl(Id(_),IntType)),MethodDecl(Id($v),Static,[param(Id(_0),ArrayType(90,IntType)),param(Id(Rb02_W0a_),ArrayType(90,IntType)),param(Id(o),ArrayType(90,IntType)),param(Id(__),ArrayType(90,IntType)),param(Id(_),ArrayType(6,ArrayType(39,ArrayType(1,ArrayType(90,ArrayType(72,BoolType)))))),param(Id(cO5_),ArrayType(6,ArrayType(39,ArrayType(1,ArrayType(90,ArrayType(72,BoolType)))))),param(Id(x),ArrayType(6,ArrayType(39,ArrayType(1,ArrayType(90,ArrayType(72,BoolType))))))],Block([Break,Call(FieldAccess(CallExpr(NewExpr(Id(N),[]),Id(_3),[]),Id(_)),Id(__),[]),Continue,Continue])),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(t_u7j5U),Id(__),[AttributeDecl(Static,ConstDecl(Id($z1__),ClassType(Id(L_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 341))

    def test_342(self):
        line = '''Class ox:_{}Class _:A_{Destructor (){} }Class V_{_(v,T4:String ;f,Z7,__uI:Array [Boolean ,22];U,Z_:Float ){}Val $9:Array [Array [Array [Array [Float ,0x21],47],4_14],0B110111];}'''
        expect = '''Program([ClassDecl(Id(ox),Id(_),[]),ClassDecl(Id(_),Id(A_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(V_),[MethodDecl(Id(_),Instance,[param(Id(v),StringType),param(Id(T4),StringType),param(Id(f),ArrayType(22,BoolType)),param(Id(Z7),ArrayType(22,BoolType)),param(Id(__uI),ArrayType(22,BoolType)),param(Id(U),FloatType),param(Id(Z_),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(55,ArrayType(414,ArrayType(47,ArrayType(33,FloatType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 342))

    def test_343(self):
        line = '''Class A:_{Var _,J__PJj,__:Boolean ;}Class Iif:q5_{}Class x_:Y9S5_6w{$n(){}Var $_J:_;Constructor (__:Boolean ;G,gp:Array [String ,0B100];_,_,G:Array [Boolean ,5_7]){}Destructor (){}Destructor (){} }Class _g:_17{Constructor (){}Val P:e;}'''
        expect = '''Program([ClassDecl(Id(A),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(J__PJj),BoolType)),AttributeDecl(Instance,VarDecl(Id(__),BoolType))]),ClassDecl(Id(Iif),Id(q5_),[]),ClassDecl(Id(x_),Id(Y9S5_6w),[MethodDecl(Id($n),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($_J),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(__),BoolType),param(Id(G),ArrayType(4,StringType)),param(Id(gp),ArrayType(4,StringType)),param(Id(_),ArrayType(57,BoolType)),param(Id(_),ArrayType(57,BoolType)),param(Id(G),ArrayType(57,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_g),Id(_17),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(P),ClassType(Id(e)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 343))

    def test_344(self):
        line = '''Class _v{Var $f:Float ;Var x:Array [String ,3_19_7_35];Constructor (){}Constructor (F_:Boolean ){}_Mce(_q4,C,pf_24:Array [Int ,0x41];tZ,L41V,_w,__9,_9,_,g_,_:Int ){Break ;Var _1C_,L:Array [String ,3];} }'''
        expect = '''Program([ClassDecl(Id(_v),[AttributeDecl(Static,VarDecl(Id($f),FloatType)),AttributeDecl(Instance,VarDecl(Id(x),ArrayType(319735,StringType))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(F_),BoolType)],Block([])),MethodDecl(Id(_Mce),Instance,[param(Id(_q4),ArrayType(65,IntType)),param(Id(C),ArrayType(65,IntType)),param(Id(pf_24),ArrayType(65,IntType)),param(Id(tZ),IntType),param(Id(L41V),IntType),param(Id(_w),IntType),param(Id(__9),IntType),param(Id(_9),IntType),param(Id(_),IntType),param(Id(g_),IntType),param(Id(_),IntType)],Block([Break,VarDecl(Id(_1C_),ArrayType(3,StringType)),VarDecl(Id(L),ArrayType(3,StringType))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 344))

    def test_345(self):
        line = '''Class d{Constructor (){P_::$__();Return ;}Constructor (b:Array [Array [Array [Array [String ,033],25],0xF],033];_,_,h,H_:Array [Int ,03_32_33]){} }Class _:NZ__{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(d),[MethodDecl(Id(Constructor),Instance,[],Block([Call(Id(P_),Id($__),[]),Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(b),ArrayType(27,ArrayType(15,ArrayType(25,ArrayType(27,StringType))))),param(Id(_),ArrayType(13979,IntType)),param(Id(_),ArrayType(13979,IntType)),param(Id(h),ArrayType(13979,IntType)),param(Id(H_),ArrayType(13979,IntType))],Block([]))]),ClassDecl(Id(_),Id(NZ__),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 345))

    def test_346(self):
        line = '''Class _09__y{Constructor (J,ay8,X,Kq_,_,_:Array [Int ,0X49];hm:Array [Array [Int ,0X9_78_5_3],03];_y:s__){}Val _:_;Val $__q:Array [Array [Array [Boolean ,0b1_1],074],074];Val $_,$Q,_I,$CX:x4;}Class OS_{}'''
        expect = '''Program([ClassDecl(Id(_09__y),[MethodDecl(Id(Constructor),Instance,[param(Id(J),ArrayType(73,IntType)),param(Id(ay8),ArrayType(73,IntType)),param(Id(X),ArrayType(73,IntType)),param(Id(Kq_),ArrayType(73,IntType)),param(Id(_),ArrayType(73,IntType)),param(Id(_),ArrayType(73,IntType)),param(Id(hm),ArrayType(3,ArrayType(620627,IntType))),param(Id(_y),ClassType(Id(s__)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__q),ArrayType(60,ArrayType(60,ArrayType(3,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(x4)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($Q),ClassType(Id(x4)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_I),ClassType(Id(x4)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($CX),ClassType(Id(x4)),NullLiteral()))]),ClassDecl(Id(OS_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 346))

    def test_347(self):
        line = '''Class p_:__{Constructor (__,P:Array [Array [Array [String ,05],0xC],02];__,_:Array [Array [Array [String ,025],0X58],0XD];__0,_jRW_,_0b1,__:Array [String ,59];_J4:Array [Array [Array [String ,1],025],0X58]){}Val d_:_i;}'''
        expect = '''Program([ClassDecl(Id(p_),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(2,ArrayType(12,ArrayType(5,StringType)))),param(Id(P),ArrayType(2,ArrayType(12,ArrayType(5,StringType)))),param(Id(__),ArrayType(13,ArrayType(88,ArrayType(21,StringType)))),param(Id(_),ArrayType(13,ArrayType(88,ArrayType(21,StringType)))),param(Id(__0),ArrayType(59,StringType)),param(Id(_jRW_),ArrayType(59,StringType)),param(Id(_0b1),ArrayType(59,StringType)),param(Id(__),ArrayType(59,StringType)),param(Id(_J4),ArrayType(88,ArrayType(21,ArrayType(1,StringType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(d_),ClassType(Id(_i)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 347))

    def test_348(self):
        line = '''Class _:_{Constructor (_:Array [Array [Int ,0X3F],54];JV,D,A:_;__,U__:Array [Float ,0XB];_D:_;__3:Array [Array [Array [Float ,5],0XF7_3],0B11]){}Val $65:_;Val _,V_h76:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(54,ArrayType(63,IntType))),param(Id(JV),ClassType(Id(_))),param(Id(D),ClassType(Id(_))),param(Id(A),ClassType(Id(_))),param(Id(__),ArrayType(11,FloatType)),param(Id(U__),ArrayType(11,FloatType)),param(Id(_D),ClassType(Id(_))),param(Id(__3),ArrayType(3,ArrayType(3955,ArrayType(5,FloatType))))],Block([])),AttributeDecl(Static,ConstDecl(Id($65),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(V_h76),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 348))

    def test_349(self):
        line = '''Class p{Constructor (_1Y:Array [Array [Array [Array [Array [Array [Array [Array [String ,0B1],077],68],077],1],0B11],0x45],0x45];X__,_:String ;H,xH,__K:Array [Float ,0x45]){}Val _1:Float ;}'''
        expect = '''Program([ClassDecl(Id(p),[MethodDecl(Id(Constructor),Instance,[param(Id(_1Y),ArrayType(69,ArrayType(69,ArrayType(3,ArrayType(1,ArrayType(63,ArrayType(68,ArrayType(63,ArrayType(1,StringType))))))))),param(Id(X__),StringType),param(Id(_),StringType),param(Id(H),ArrayType(69,FloatType)),param(Id(xH),ArrayType(69,FloatType)),param(Id(__K),ArrayType(69,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_1),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 349))

    def test_350(self):
        line = '''Class _:_9{Val $_9,$_G,$J_,_V2e,U7_xQ_1,_e35:O;Var $_,$q,b:Array [Array [Float ,0136],0X2_B_E7_5_A];Val __49c_8,$6:Array [Float ,5];Var l,Q__:Array [Array [Float ,0x31],0b11];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_9),[AttributeDecl(Static,ConstDecl(Id($_9),ClassType(Id(O)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_G),ClassType(Id(O)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($J_),ClassType(Id(O)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_V2e),ClassType(Id(O)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(U7_xQ_1),ClassType(Id(O)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_e35),ClassType(Id(O)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ArrayType(2877274,ArrayType(94,FloatType)))),AttributeDecl(Static,VarDecl(Id($q),ArrayType(2877274,ArrayType(94,FloatType)))),AttributeDecl(Instance,VarDecl(Id(b),ArrayType(2877274,ArrayType(94,FloatType)))),AttributeDecl(Instance,ConstDecl(Id(__49c_8),ArrayType(5,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($6),ArrayType(5,FloatType),None)),AttributeDecl(Instance,VarDecl(Id(l),ArrayType(3,ArrayType(49,FloatType)))),AttributeDecl(Instance,VarDecl(Id(Q__),ArrayType(3,ArrayType(49,FloatType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 350))

    def test_351(self):
        line = '''Class m:P_G{Destructor (){}Constructor (_,o:Array [Array [Array [Array [Array [String ,01],31],01],0x4C],0xC_6EA];__:Int ;__Y__,W2,_:String ;_88,_:Array [Array [Float ,053],05_3_5];N4:_){Continue ;Continue ;} }Class _0223:kv{Var Y,$221J_:Float ;}'''
        expect = '''Program([ClassDecl(Id(m),Id(P_G),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(50922,ArrayType(76,ArrayType(1,ArrayType(31,ArrayType(1,StringType)))))),param(Id(o),ArrayType(50922,ArrayType(76,ArrayType(1,ArrayType(31,ArrayType(1,StringType)))))),param(Id(__),IntType),param(Id(__Y__),StringType),param(Id(W2),StringType),param(Id(_),StringType),param(Id(_88),ArrayType(349,ArrayType(43,FloatType))),param(Id(_),ArrayType(349,ArrayType(43,FloatType))),param(Id(N4),ClassType(Id(_)))],Block([Continue,Continue]))]),ClassDecl(Id(_0223),Id(kv),[AttributeDecl(Instance,VarDecl(Id(Y),FloatType)),AttributeDecl(Static,VarDecl(Id($221J_),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 351))

    def test_352(self):
        line = '''Class _{$5__6e(ek:Array [Array [Array [Array [Array [Array [Boolean ,0121],0b11110],01],04],0x44],0b10];__6,q5f__5:Boolean ;_O,_,_P,Pf6:Array [Array [String ,0X50],1]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($5__6e),Static,[param(Id(ek),ArrayType(2,ArrayType(68,ArrayType(4,ArrayType(1,ArrayType(30,ArrayType(81,BoolType))))))),param(Id(__6),BoolType),param(Id(q5f__5),BoolType),param(Id(_O),ArrayType(1,ArrayType(80,StringType))),param(Id(_),ArrayType(1,ArrayType(80,StringType))),param(Id(_P),ArrayType(1,ArrayType(80,StringType))),param(Id(Pf6),ArrayType(1,ArrayType(80,StringType)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 352))

    def test_353(self):
        line = '''Class _:v{}Class s__CT:ZRP86{Var B_,_:Float ;$_(_,_,_,t:Boolean ;_:Array [Array [Float ,18],2_732_0];f2__:h;_,e,_0____:Array [Float ,6];S:Array [Array [Array [Boolean ,18],071],071];_,U95_:Array [Int ,18];n,_,_,_2_:Float ;__o:Jm8){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(v),[]),ClassDecl(Id(s__CT),Id(ZRP86),[AttributeDecl(Instance,VarDecl(Id(B_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),MethodDecl(Id($_),Static,[param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(t),BoolType),param(Id(_),ArrayType(27320,ArrayType(18,FloatType))),param(Id(f2__),ClassType(Id(h))),param(Id(_),ArrayType(6,FloatType)),param(Id(e),ArrayType(6,FloatType)),param(Id(_0____),ArrayType(6,FloatType)),param(Id(S),ArrayType(57,ArrayType(57,ArrayType(18,BoolType)))),param(Id(_),ArrayType(18,IntType)),param(Id(U95_),ArrayType(18,IntType)),param(Id(n),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_2_),FloatType),param(Id(__o),ClassType(Id(Jm8)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 353))

    def test_354(self):
        line = '''Class g0{Constructor (e,HN,E:String ){}Val $NU76,$Vj__,_14Y:Int ;Constructor (J0:Array [Array [Float ,0B1_110],062];__,_,b,C3_,_:Int ){Y_::$_();Continue ;Continue ;}_M(at,_k,__:Array [Array [Array [String ,0b1100100],64],04_54_76];_Z,N6X02:_8__){} }'''
        expect = '''Program([ClassDecl(Id(g0),[MethodDecl(Id(Constructor),Instance,[param(Id(e),StringType),param(Id(HN),StringType),param(Id(E),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($NU76),IntType,None)),AttributeDecl(Static,ConstDecl(Id($Vj__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_14Y),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(J0),ArrayType(50,ArrayType(14,FloatType))),param(Id(__),IntType),param(Id(_),IntType),param(Id(b),IntType),param(Id(C3_),IntType),param(Id(_),IntType)],Block([Call(Id(Y_),Id($_),[]),Continue,Continue])),MethodDecl(Id(_M),Instance,[param(Id(at),ArrayType(19262,ArrayType(64,ArrayType(100,StringType)))),param(Id(_k),ArrayType(19262,ArrayType(64,ArrayType(100,StringType)))),param(Id(__),ArrayType(19262,ArrayType(64,ArrayType(100,StringType)))),param(Id(_Z),ClassType(Id(_8__))),param(Id(N6X02),ClassType(Id(_8__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 354))

    def test_355(self):
        line = '''Class _1:_{}Class _1880:_vDt{}Class X_{Var $__,$0_,_v,_,_4,_,______,x,_:Array [Array [Array [Array [Array [Boolean ,0b1],7],02],625],01];}Class _4{}Class _:_4{Constructor (y__2:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_1),Id(_),[]),ClassDecl(Id(_1880),Id(_vDt),[]),ClassDecl(Id(X_),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(1,ArrayType(625,ArrayType(2,ArrayType(7,ArrayType(1,BoolType))))))),AttributeDecl(Static,VarDecl(Id($0_),ArrayType(1,ArrayType(625,ArrayType(2,ArrayType(7,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(_v),ArrayType(1,ArrayType(625,ArrayType(2,ArrayType(7,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(625,ArrayType(2,ArrayType(7,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(_4),ArrayType(1,ArrayType(625,ArrayType(2,ArrayType(7,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(625,ArrayType(2,ArrayType(7,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(______),ArrayType(1,ArrayType(625,ArrayType(2,ArrayType(7,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(x),ArrayType(1,ArrayType(625,ArrayType(2,ArrayType(7,ArrayType(1,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(625,ArrayType(2,ArrayType(7,ArrayType(1,BoolType)))))))]),ClassDecl(Id(_4),[]),ClassDecl(Id(_),Id(_4),[MethodDecl(Id(Constructor),Instance,[param(Id(y__2),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 355))

    def test_356(self):
        line = '''Class __:_{Val l_I,_,$M,_,_S:Array [Boolean ,34];Constructor (){} }Class i_8{}Class _4K_{Constructor (q:Array [Array [Array [Array [String ,0B1000010],0b1],0XB_7D],71];_H6:_;V8__,_:Array [Int ,0124];JB,_:y_;s_,__,p:Int ;_d:Array [Int ,71];_8_,_l:v){} }Class x{Val $Z,$2:Array [Array [Array [Array [Boolean ,71],0B1000010],0b10_0_10],0X3];}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(l_I),ArrayType(34,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(34,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($M),ArrayType(34,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(34,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_S),ArrayType(34,BoolType),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(i_8),[]),ClassDecl(Id(_4K_),[MethodDecl(Id(Constructor),Instance,[param(Id(q),ArrayType(71,ArrayType(2941,ArrayType(1,ArrayType(66,StringType))))),param(Id(_H6),ClassType(Id(_))),param(Id(V8__),ArrayType(84,IntType)),param(Id(_),ArrayType(84,IntType)),param(Id(JB),ClassType(Id(y_))),param(Id(_),ClassType(Id(y_))),param(Id(s_),IntType),param(Id(__),IntType),param(Id(p),IntType),param(Id(_d),ArrayType(71,IntType)),param(Id(_8_),ClassType(Id(v))),param(Id(_l),ClassType(Id(v)))],Block([]))]),ClassDecl(Id(x),[AttributeDecl(Static,ConstDecl(Id($Z),ArrayType(3,ArrayType(18,ArrayType(66,ArrayType(71,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(3,ArrayType(18,ArrayType(66,ArrayType(71,BoolType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 356))

    def test_357(self):
        line = '''Class _:Y{_(jj7,_S,l:E;_d,x:Boolean ){Var E:Array [Boolean ,0251];}Destructor (){}Var $z____:Y_;}Class _6E{}Class h{Constructor (_:_s;_X:_){} }Class s:_{Val ic4_:L;}'''
        expect = '''Program([ClassDecl(Id(_),Id(Y),[MethodDecl(Id(_),Instance,[param(Id(jj7),ClassType(Id(E))),param(Id(_S),ClassType(Id(E))),param(Id(l),ClassType(Id(E))),param(Id(_d),BoolType),param(Id(x),BoolType)],Block([VarDecl(Id(E),ArrayType(169,BoolType))])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($z____),ClassType(Id(Y_)),NullLiteral()))]),ClassDecl(Id(_6E),[]),ClassDecl(Id(h),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_s))),param(Id(_X),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(s),Id(_),[AttributeDecl(Instance,ConstDecl(Id(ic4_),ClassType(Id(L)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 357))

    def test_358(self):
        line = '''Class _3_:_{Constructor (b:Array [Float ,0B1];_,Ld:X_;F4:Array [Boolean ,59];_25AE_:V;_:__){}$s(_,_,_:String ;_:Array [String ,0x63]){}Val _,D:__k;Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_3_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(b),ArrayType(1,FloatType)),param(Id(_),ClassType(Id(X_))),param(Id(Ld),ClassType(Id(X_))),param(Id(F4),ArrayType(59,BoolType)),param(Id(_25AE_),ClassType(Id(V))),param(Id(_),ClassType(Id(__)))],Block([])),MethodDecl(Id($s),Static,[param(Id(_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),ArrayType(99,StringType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__k)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(D),ClassType(Id(__k)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 358))

    def test_359(self):
        line = '''Class _{Destructor (){}Destructor (){ {} }}Class l:_u{}Class _j_{Constructor (){Break ;}Constructor (_:Array [Array [Array [Array [Array [Float ,8],56],0b11],56],0X4];_:_){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(l),Id(_u),[]),ClassDecl(Id(_j_),[MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(4,ArrayType(56,ArrayType(3,ArrayType(56,ArrayType(8,FloatType)))))),param(Id(_),ClassType(Id(_)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 359))

    def test_360(self):
        line = '''Class EbXrL:N{}Class _{Constructor (){} }Class b:_{}Class p{Var $x_,D:Array [Array [Boolean ,0XCC],0B110];Constructor (_5_p_,K_,_q:Int ){}Constructor (__,rS:Array [Float ,0x38]){} }'''
        expect = '''Program([ClassDecl(Id(EbXrL),Id(N),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(b),Id(_),[]),ClassDecl(Id(p),[AttributeDecl(Static,VarDecl(Id($x_),ArrayType(6,ArrayType(204,BoolType)))),AttributeDecl(Instance,VarDecl(Id(D),ArrayType(6,ArrayType(204,BoolType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_5_p_),IntType),param(Id(K_),IntType),param(Id(_q),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(56,FloatType)),param(Id(rS),ArrayType(56,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 360))

    def test_361(self):
        line = '''Class _3:_{}Class _{Constructor (W,_b_6:Boolean ;_,_9,E3h,_D_,_,__:Array [String ,11];__,_:Array [Float ,0XC_A];Z_0:_){} }Class ___:_44{}Class _87{_(_a:Array [Array [Array [Float ,02],0X32_CA],0X21]){}V(){}Val $Fe_H:__;Val _:Array [Float ,0115];}'''
        expect = '''Program([ClassDecl(Id(_3),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(W),BoolType),param(Id(_b_6),BoolType),param(Id(_),ArrayType(11,StringType)),param(Id(_9),ArrayType(11,StringType)),param(Id(E3h),ArrayType(11,StringType)),param(Id(_D_),ArrayType(11,StringType)),param(Id(_),ArrayType(11,StringType)),param(Id(__),ArrayType(11,StringType)),param(Id(__),ArrayType(202,FloatType)),param(Id(_),ArrayType(202,FloatType)),param(Id(Z_0),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(___),Id(_44),[]),ClassDecl(Id(_87),[MethodDecl(Id(_),Instance,[param(Id(_a),ArrayType(33,ArrayType(13002,ArrayType(2,FloatType))))],Block([])),MethodDecl(Id(V),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($Fe_H),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(77,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 361))

    def test_362(self):
        line = '''Class L_1{$S_(){Continue ;} }Class U:___{Constructor (N_:__8_;Ug,z:Array [Array [Float ,88],88];nl:Array [String ,0B1]){}$0(){}Val __0:Int ;Val _:Array [Boolean ,0x35];Var F:Array [Boolean ,5];}'''
        expect = '''Program([ClassDecl(Id(L_1),[MethodDecl(Id($S_),Static,[],Block([Continue]))]),ClassDecl(Id(U),Id(___),[MethodDecl(Id(Constructor),Instance,[param(Id(N_),ClassType(Id(__8_))),param(Id(Ug),ArrayType(88,ArrayType(88,FloatType))),param(Id(z),ArrayType(88,ArrayType(88,FloatType))),param(Id(nl),ArrayType(1,StringType))],Block([])),MethodDecl(Id($0),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(__0),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(53,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(F),ArrayType(5,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 362))

    def test_363(self):
        line = '''Class _10{__u(_,_:Array [String ,3]){}_(_:Boolean ;_3,U,_,_,D5_i,_,_:Array [Array [Array [String ,015],0b11],0B1_01];_8:Int ){Var jT:Int ;} }Class Jv_{}Class C{Var $M_,j_,$p,v:U;}Class D{Val $_G,$_:B;}Class _:J{Var $D,$6JQ_:Array [String ,0X54];}'''
        expect = '''Program([ClassDecl(Id(_10),[MethodDecl(Id(__u),Instance,[param(Id(_),ArrayType(3,StringType)),param(Id(_),ArrayType(3,StringType))],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),BoolType),param(Id(_3),ArrayType(5,ArrayType(3,ArrayType(13,StringType)))),param(Id(U),ArrayType(5,ArrayType(3,ArrayType(13,StringType)))),param(Id(_),ArrayType(5,ArrayType(3,ArrayType(13,StringType)))),param(Id(_),ArrayType(5,ArrayType(3,ArrayType(13,StringType)))),param(Id(D5_i),ArrayType(5,ArrayType(3,ArrayType(13,StringType)))),param(Id(_),ArrayType(5,ArrayType(3,ArrayType(13,StringType)))),param(Id(_),ArrayType(5,ArrayType(3,ArrayType(13,StringType)))),param(Id(_8),IntType)],Block([VarDecl(Id(jT),IntType)]))]),ClassDecl(Id(Jv_),[]),ClassDecl(Id(C),[AttributeDecl(Static,VarDecl(Id($M_),ClassType(Id(U)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(j_),ClassType(Id(U)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($p),ClassType(Id(U)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(v),ClassType(Id(U)),NullLiteral()))]),ClassDecl(Id(D),[AttributeDecl(Static,ConstDecl(Id($_G),ClassType(Id(B)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(B)),NullLiteral()))]),ClassDecl(Id(_),Id(J),[AttributeDecl(Static,VarDecl(Id($D),ArrayType(84,StringType))),AttributeDecl(Static,VarDecl(Id($6JQ_),ArrayType(84,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 363))

    def test_364(self):
        line = '''Class _{Constructor (NL0_,Q06:Float ;_,v,_,G:Array [Array [Array [Array [Array [Array [Array [Boolean ,0xA],0132],54],2],0132],57],0B10_111];_,_X:Float ){}Destructor (){} }Class Sc{}Class F:__{Val $5_q_w,_,$_,$tv,_8m:Array [Float ,54];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(NL0_),FloatType),param(Id(Q06),FloatType),param(Id(_),ArrayType(23,ArrayType(57,ArrayType(90,ArrayType(2,ArrayType(54,ArrayType(90,ArrayType(10,BoolType)))))))),param(Id(v),ArrayType(23,ArrayType(57,ArrayType(90,ArrayType(2,ArrayType(54,ArrayType(90,ArrayType(10,BoolType)))))))),param(Id(_),ArrayType(23,ArrayType(57,ArrayType(90,ArrayType(2,ArrayType(54,ArrayType(90,ArrayType(10,BoolType)))))))),param(Id(G),ArrayType(23,ArrayType(57,ArrayType(90,ArrayType(2,ArrayType(54,ArrayType(90,ArrayType(10,BoolType)))))))),param(Id(_),FloatType),param(Id(_X),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Sc),[]),ClassDecl(Id(F),Id(__),[AttributeDecl(Static,ConstDecl(Id($5_q_w),ArrayType(54,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(54,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(54,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($tv),ArrayType(54,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_8m),ArrayType(54,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 364))

    def test_365(self):
        line = '''Class _F:R{}Class h__:c1{}Class j8:_{Destructor (){} }Class cy6_1:E_u_{}Class cu{Val $_,$0:Array [Array [Array [Boolean ,36],0B1],0B1];}Class C{Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_F),Id(R),[]),ClassDecl(Id(h__),Id(c1),[]),ClassDecl(Id(j8),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(cy6_1),Id(E_u_),[]),ClassDecl(Id(cu),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(1,ArrayType(1,ArrayType(36,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(1,ArrayType(1,ArrayType(36,BoolType))),None))]),ClassDecl(Id(C),[MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 365))

    def test_366(self):
        line = '''Class _:h7x5{}Class _p{Constructor (w,b__,_5,_IN_:Array [Float ,05];__J_:Array [Array [Int ,0X43],065];_30,X_z:Array [Array [Int ,66],0b1001];_,K:_;u:Array [Float ,0B1100010]){Return ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(h7x5),[]),ClassDecl(Id(_p),[MethodDecl(Id(Constructor),Instance,[param(Id(w),ArrayType(5,FloatType)),param(Id(b__),ArrayType(5,FloatType)),param(Id(_5),ArrayType(5,FloatType)),param(Id(_IN_),ArrayType(5,FloatType)),param(Id(__J_),ArrayType(53,ArrayType(67,IntType))),param(Id(_30),ArrayType(9,ArrayType(66,IntType))),param(Id(X_z),ArrayType(9,ArrayType(66,IntType))),param(Id(_),ClassType(Id(_))),param(Id(K),ClassType(Id(_))),param(Id(u),ArrayType(98,FloatType))],Block([Return(),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 366))

    def test_367(self):
        line = '''Class g{Destructor (){Break ;Break ;Var _7:o;}Val $7u3:String ;}Class _{}Class I:_{Val $X:String ;Constructor (){}Constructor (X:Array [Array [Array [Float ,02],037],0B1000101]){} }Class _{Var _,$7_:c;Val $9,$m,A,_09AB:o_2M_1;}Class _{}'''
        expect = '''Program([ClassDecl(Id(g),[MethodDecl(Id(Destructor),Instance,[],Block([Break,Break,VarDecl(Id(_7),ClassType(Id(o)),NullLiteral())])),AttributeDecl(Static,ConstDecl(Id($7u3),StringType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(I),Id(_),[AttributeDecl(Static,ConstDecl(Id($X),StringType,None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(X),ArrayType(69,ArrayType(31,ArrayType(2,FloatType))))],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(c)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($7_),ClassType(Id(c)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(o_2M_1)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($m),ClassType(Id(o_2M_1)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(A),ClassType(Id(o_2M_1)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_09AB),ClassType(Id(o_2M_1)),NullLiteral()))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 367))

    def test_368(self):
        line = '''Class P{Constructor (s__4:I7_51_;___,H2:Array [Array [Array [Array [Boolean ,80],0b1_100_11],0b1],1];u:D;E_:Array [Boolean ,0120]){ {Continue ;Continue ;Return ;} }Destructor (){ {} }Destructor (){Break ;} }Class c:_4{}'''
        expect = '''Program([ClassDecl(Id(P),[MethodDecl(Id(Constructor),Instance,[param(Id(s__4),ClassType(Id(I7_51_))),param(Id(___),ArrayType(1,ArrayType(1,ArrayType(51,ArrayType(80,BoolType))))),param(Id(H2),ArrayType(1,ArrayType(1,ArrayType(51,ArrayType(80,BoolType))))),param(Id(u),ClassType(Id(D))),param(Id(E_),ArrayType(80,BoolType))],Block([Block([Continue,Continue,Return()])])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(c),Id(_4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 368))

    def test_369(self):
        line = '''Class _:_{$l(_,o2,_:_;z:Array [Array [Array [Array [Boolean ,13],13],0x63],0X5B];_:_;__,_,__,_,_,_R_,L7:Array [Float ,031]){ {} }}Class _D{$5(){}Var $_,_90,_,$9,_:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id($l),Static,[param(Id(_),ClassType(Id(_))),param(Id(o2),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(z),ArrayType(91,ArrayType(99,ArrayType(13,ArrayType(13,BoolType))))),param(Id(_),ClassType(Id(_))),param(Id(__),ArrayType(25,FloatType)),param(Id(_),ArrayType(25,FloatType)),param(Id(__),ArrayType(25,FloatType)),param(Id(_),ArrayType(25,FloatType)),param(Id(_),ArrayType(25,FloatType)),param(Id(_R_),ArrayType(25,FloatType)),param(Id(L7),ArrayType(25,FloatType))],Block([Block([])]))]),ClassDecl(Id(_D),[MethodDecl(Id($5),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(_90),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($9),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 369))

    def test_370(self):
        line = '''Class z{_(__,i2:Array [String ,071];_:Array [Array [Array [Int ,0x21],5],0b1_10_1];O3,_RK,Jb,p_j_32,i,q5,_96,p,R_WZ127:Array [Boolean ,071];z_8,O:Float ;_,J_:Array [String ,0B1];I,_,_3:Array [Float ,0X3];_,__:F;___s_61J:Int ){}Destructor (){Break ;}Destructor (){}Constructor (_k:__9;k,He,_56,_3,m:_){} }Class R{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(z),[MethodDecl(Id(_),Instance,[param(Id(__),ArrayType(57,StringType)),param(Id(i2),ArrayType(57,StringType)),param(Id(_),ArrayType(13,ArrayType(5,ArrayType(33,IntType)))),param(Id(O3),ArrayType(57,BoolType)),param(Id(_RK),ArrayType(57,BoolType)),param(Id(Jb),ArrayType(57,BoolType)),param(Id(p_j_32),ArrayType(57,BoolType)),param(Id(i),ArrayType(57,BoolType)),param(Id(q5),ArrayType(57,BoolType)),param(Id(_96),ArrayType(57,BoolType)),param(Id(p),ArrayType(57,BoolType)),param(Id(R_WZ127),ArrayType(57,BoolType)),param(Id(z_8),FloatType),param(Id(O),FloatType),param(Id(_),ArrayType(1,StringType)),param(Id(J_),ArrayType(1,StringType)),param(Id(I),ArrayType(3,FloatType)),param(Id(_),ArrayType(3,FloatType)),param(Id(_3),ArrayType(3,FloatType)),param(Id(_),ClassType(Id(F))),param(Id(__),ClassType(Id(F))),param(Id(___s_61J),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_k),ClassType(Id(__9))),param(Id(k),ClassType(Id(_))),param(Id(He),ClassType(Id(_))),param(Id(_56),ClassType(Id(_))),param(Id(_3),ClassType(Id(_))),param(Id(m),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(R),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 370))

    def test_371(self):
        line = '''Class Z:QnO{Val S1_bx89o:C=-aX_3::$H&&!-_::$2_;}Class X{Var o8:Array [Float ,0b100110];_6WBq(){}Var $H0_,$3:Array [String ,04];}Class E{Var n:Array [Float ,0X19];$0_(p:Array [Float ,023_6]){} }'''
        expect = '''Program([ClassDecl(Id(Z),Id(QnO),[AttributeDecl(Instance,ConstDecl(Id(B),ClassType(Id(C)),BinaryOp(&&,UnaryOp(-,FieldAccess(Id(aX_3),Id($H))),UnaryOp(!,UnaryOp(-,FieldAccess(Id(_),Id($2_)))))))]),ClassDecl(Id(X),[AttributeDecl(Instance,VarDecl(Id(o8),ArrayType(38,FloatType))),MethodDecl(Id(_6WBq),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($H0_),ArrayType(4,StringType))),AttributeDecl(Static,VarDecl(Id($3),ArrayType(4,StringType)))]),ClassDecl(Id(E),[AttributeDecl(Instance,VarDecl(Id(n),ArrayType(25,FloatType))),MethodDecl(Id($0_),Static,[param(Id(p),ArrayType(158,FloatType))],Block([]))])])'''
        #self.assertTrue(TestAST.test(line, expect, 371))

    def test_372(self):
        line = '''Class f{}Class u3:_{$_2(m:v){}$lGcX(){}Destructor (){} }Class g{}Class B_:j_{Var $G:Boolean ;}Class _{}Class __l{_t_y(O:Array [Array [Array [String ,0B11_01],0x2F],63]){} }'''
        expect = '''Program([ClassDecl(Id(f),[]),ClassDecl(Id(u3),Id(_),[MethodDecl(Id($_2),Static,[param(Id(m),ClassType(Id(v)))],Block([])),MethodDecl(Id($lGcX),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(g),[]),ClassDecl(Id(B_),Id(j_),[AttributeDecl(Static,VarDecl(Id($G),BoolType))]),ClassDecl(Id(_),[]),ClassDecl(Id(__l),[MethodDecl(Id(_t_y),Instance,[param(Id(O),ArrayType(63,ArrayType(47,ArrayType(13,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 372))

    def test_373(self):
        line = '''Class _:_{}Class D:_{Constructor (u:Array [Boolean ,92]){}Constructor (wU7Yj:Array [Array [Array [Array [Int ,0x4],4],0XC_DE_C],92]){}Var $_:Array [Array [Array [Int ,0XA],1],0B10011];}Class _:___{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(D),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(u),ArrayType(92,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(wU7Yj),ArrayType(92,ArrayType(52716,ArrayType(4,ArrayType(4,IntType)))))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(19,ArrayType(1,ArrayType(10,IntType)))))]),ClassDecl(Id(_),Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 373))

    def test_374(self):
        line = '''Class E:E{}Class U{Var QX:W;Var S:String ;}Class _:_y_{Constructor (m:Boolean ;qg,__1,__1,H:String ;__:_P){} }Class _ym{}Class w:H{}Class T{Destructor (){} }Class _V_5_2{}'''
        expect = '''Program([ClassDecl(Id(E),Id(E),[]),ClassDecl(Id(U),[AttributeDecl(Instance,VarDecl(Id(QX),ClassType(Id(W)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(S),StringType))]),ClassDecl(Id(_),Id(_y_),[MethodDecl(Id(Constructor),Instance,[param(Id(m),BoolType),param(Id(qg),StringType),param(Id(__1),StringType),param(Id(__1),StringType),param(Id(H),StringType),param(Id(__),ClassType(Id(_P)))],Block([]))]),ClassDecl(Id(_ym),[]),ClassDecl(Id(w),Id(H),[]),ClassDecl(Id(T),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_V_5_2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 374))

    def test_375(self):
        line = '''Class _:_{}Class _{_(){ {}Break ;Val M,H5,_hv,___,__:Y;}Var $70,q,$L_,$5:Boolean ;Destructor (){} }Class _3{Constructor (M,_,G:Array [Boolean ,0x4A];_,_i:W;I,a:_){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[],Block([Block([]),Break,ConstDecl(Id(M),ClassType(Id(Y)),NullLiteral()),ConstDecl(Id(H5),ClassType(Id(Y)),NullLiteral()),ConstDecl(Id(_hv),ClassType(Id(Y)),NullLiteral()),ConstDecl(Id(___),ClassType(Id(Y)),NullLiteral()),ConstDecl(Id(__),ClassType(Id(Y)),NullLiteral())])),AttributeDecl(Static,VarDecl(Id($70),BoolType)),AttributeDecl(Instance,VarDecl(Id(q),BoolType)),AttributeDecl(Static,VarDecl(Id($L_),BoolType)),AttributeDecl(Static,VarDecl(Id($5),BoolType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_3),[MethodDecl(Id(Constructor),Instance,[param(Id(M),ArrayType(74,BoolType)),param(Id(_),ArrayType(74,BoolType)),param(Id(G),ArrayType(74,BoolType)),param(Id(_),ClassType(Id(W))),param(Id(_i),ClassType(Id(W))),param(Id(I),ClassType(Id(_))),param(Id(a),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 375))

    def test_376(self):
        line = '''Class _o7__{BT(_,Z,r,u0,X:Array [Int ,06];_z,F,JR:Array [Array [Array [Array [String ,047],0XA],0b1],0X6_C];_:Array [Array [String ,0XD],0B11_1];_D,K9:_H){} }Class _n:e{}'''
        expect = '''Program([ClassDecl(Id(_o7__),[MethodDecl(Id(BT),Instance,[param(Id(_),ArrayType(6,IntType)),param(Id(Z),ArrayType(6,IntType)),param(Id(r),ArrayType(6,IntType)),param(Id(u0),ArrayType(6,IntType)),param(Id(X),ArrayType(6,IntType)),param(Id(_z),ArrayType(108,ArrayType(1,ArrayType(10,ArrayType(39,StringType))))),param(Id(F),ArrayType(108,ArrayType(1,ArrayType(10,ArrayType(39,StringType))))),param(Id(JR),ArrayType(108,ArrayType(1,ArrayType(10,ArrayType(39,StringType))))),param(Id(_),ArrayType(7,ArrayType(13,StringType))),param(Id(_D),ClassType(Id(_H))),param(Id(K9),ClassType(Id(_H)))],Block([]))]),ClassDecl(Id(_n),Id(e),[])])'''
        self.assertTrue(TestAST.test(line, expect, 376))

    def test_377(self):
        line = '''Class E_:l5{$M_(N:Array [Array [Float ,0B1100],0b101000];__:Array [Array [Array [Int ,0675],07],5];A5K:Int ;l,i:Float ;_:Array [Float ,0134]){}Constructor (VQ,_h,_01X,q,J_:Array [Boolean ,0B1100]){} }'''
        expect = '''Program([ClassDecl(Id(E_),Id(l5),[MethodDecl(Id($M_),Static,[param(Id(N),ArrayType(40,ArrayType(12,FloatType))),param(Id(__),ArrayType(5,ArrayType(7,ArrayType(445,IntType)))),param(Id(A5K),IntType),param(Id(l),FloatType),param(Id(i),FloatType),param(Id(_),ArrayType(92,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(VQ),ArrayType(12,BoolType)),param(Id(_h),ArrayType(12,BoolType)),param(Id(_01X),ArrayType(12,BoolType)),param(Id(q),ArrayType(12,BoolType)),param(Id(J_),ArrayType(12,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 377))

    def test_378(self):
        line = '''Class _:CU{Val _6_d_e:Int ;Destructor (){w::$6__()._3_L_3w_94G()._();}Constructor (_:r_){} }Class t9B:q{}Class _06{}Class B_:_w___{}Class _K:b_{Constructor (c6,_:t9){}Var $u4_3mw:n_;$x_(_6,_,_:_;_,_9v:Array [Boolean ,0x7_5];_,i,Ax859,J,__,_,e:Array [Array [Boolean ,0b1],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(CU),[AttributeDecl(Instance,ConstDecl(Id(_6_d_e),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Call(CallExpr(CallExpr(Id(w),Id($6__),[]),Id(_3_L_3w_94G),[]),Id(_),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(r_)))],Block([]))]),ClassDecl(Id(t9B),Id(q),[]),ClassDecl(Id(_06),[]),ClassDecl(Id(B_),Id(_w___),[]),ClassDecl(Id(_K),Id(b_),[MethodDecl(Id(Constructor),Instance,[param(Id(c6),ClassType(Id(t9))),param(Id(_),ClassType(Id(t9)))],Block([])),AttributeDecl(Static,VarDecl(Id($u4_3mw),ClassType(Id(n_)),NullLiteral())),MethodDecl(Id($x_),Static,[param(Id(_6),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(117,BoolType)),param(Id(_9v),ArrayType(117,BoolType)),param(Id(_),ArrayType(1,ArrayType(1,BoolType))),param(Id(i),ArrayType(1,ArrayType(1,BoolType))),param(Id(Ax859),ArrayType(1,ArrayType(1,BoolType))),param(Id(J),ArrayType(1,ArrayType(1,BoolType))),param(Id(__),ArrayType(1,ArrayType(1,BoolType))),param(Id(_),ArrayType(1,ArrayType(1,BoolType))),param(Id(e),ArrayType(1,ArrayType(1,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 378))

    def test_379(self):
        line = '''Class _{Constructor (L_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,060],060],0B1],2],0x4],2],1],0b1010101],0b1],0x1];_,y_q402,w:Boolean ){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(L_),ArrayType(1,ArrayType(1,ArrayType(85,ArrayType(1,ArrayType(2,ArrayType(4,ArrayType(2,ArrayType(1,ArrayType(48,ArrayType(48,BoolType))))))))))),param(Id(_),BoolType),param(Id(y_q402),BoolType),param(Id(w),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 379))

    def test_380(self):
        line = '''Class e:_{}Class t_7_:y{Constructor (){}Val $9,K,_,W__l6p:Array [Array [Array [Float ,01_0_10],0X2A],0B1100];Constructor (qwZ,t:Nf3;___,_,_:Array [Float ,0B1100];n4,Y,Fj_6,_3,N_U0_,_:Array [Float ,67]){} }'''
        expect = '''Program([ClassDecl(Id(e),Id(_),[]),ClassDecl(Id(t_7_),Id(y),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(12,ArrayType(42,ArrayType(520,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(K),ArrayType(12,ArrayType(42,ArrayType(520,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(12,ArrayType(42,ArrayType(520,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(W__l6p),ArrayType(12,ArrayType(42,ArrayType(520,FloatType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(qwZ),ClassType(Id(Nf3))),param(Id(t),ClassType(Id(Nf3))),param(Id(___),ArrayType(12,FloatType)),param(Id(_),ArrayType(12,FloatType)),param(Id(_),ArrayType(12,FloatType)),param(Id(n4),ArrayType(67,FloatType)),param(Id(Y),ArrayType(67,FloatType)),param(Id(Fj_6),ArrayType(67,FloatType)),param(Id(_3),ArrayType(67,FloatType)),param(Id(N_U0_),ArrayType(67,FloatType)),param(Id(_),ArrayType(67,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 380))

    def test_381(self):
        line = '''Class _:S{Val $9:j;}Class _2:___E{}Class N__K{Val LOe,i:Array [Float ,0XC];Constructor (){Val _:_g;}Var $_,O,w_5x,_z:K;Var $w,z_4,$_8_,$__,W_,p,__:Array [Array [Array [Float ,03],0B1],903];}'''
        expect = '''Program([ClassDecl(Id(_),Id(S),[AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(j)),NullLiteral()))]),ClassDecl(Id(_2),Id(___E),[]),ClassDecl(Id(N__K),[AttributeDecl(Instance,ConstDecl(Id(LOe),ArrayType(12,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(i),ArrayType(12,FloatType),None)),MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(_),ClassType(Id(_g)),NullLiteral())])),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(K)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(O),ClassType(Id(K)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(w_5x),ClassType(Id(K)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_z),ClassType(Id(K)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($w),ArrayType(903,ArrayType(1,ArrayType(3,FloatType))))),AttributeDecl(Instance,VarDecl(Id(z_4),ArrayType(903,ArrayType(1,ArrayType(3,FloatType))))),AttributeDecl(Static,VarDecl(Id($_8_),ArrayType(903,ArrayType(1,ArrayType(3,FloatType))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(903,ArrayType(1,ArrayType(3,FloatType))))),AttributeDecl(Instance,VarDecl(Id(W_),ArrayType(903,ArrayType(1,ArrayType(3,FloatType))))),AttributeDecl(Instance,VarDecl(Id(p),ArrayType(903,ArrayType(1,ArrayType(3,FloatType))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(903,ArrayType(1,ArrayType(3,FloatType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 381))

    def test_382(self):
        line = '''Class __{}Class _:_{$2___(){}Val $_,N,Z_,_:Boolean ;GK(_,K_7_5,f:Array [Array [Int ,0B11_1_0_0_0],0b1011100];i2,__0:_){}Destructor (){}$X0__(sQ:H){Break ;} }Class _l:_{}Class x:X5{}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id($2___),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(N),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(Z_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(GK),Instance,[param(Id(_),ArrayType(92,ArrayType(56,IntType))),param(Id(K_7_5),ArrayType(92,ArrayType(56,IntType))),param(Id(f),ArrayType(92,ArrayType(56,IntType))),param(Id(i2),ClassType(Id(_))),param(Id(__0),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($X0__),Static,[param(Id(sQ),ClassType(Id(H)))],Block([Break]))]),ClassDecl(Id(_l),Id(_),[]),ClassDecl(Id(x),Id(X5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 382))

    def test_383(self):
        line = '''Class X{}Class F:__Ac5{Var $8U:String ;Constructor (_,__:Boolean ;H,c4_:Array [Int ,0134]){} }Class _{$4(V,z_:_4X;y,K,y,s:Float ;_,_,_,Y:Float ){Val n:Array [Int ,0b11011];} }Class _{}'''
        expect = '''Program([ClassDecl(Id(X),[]),ClassDecl(Id(F),Id(__Ac5),[AttributeDecl(Static,VarDecl(Id($8U),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(__),BoolType),param(Id(H),ArrayType(92,IntType)),param(Id(c4_),ArrayType(92,IntType))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($4),Static,[param(Id(V),ClassType(Id(_4X))),param(Id(z_),ClassType(Id(_4X))),param(Id(y),FloatType),param(Id(K),FloatType),param(Id(y),FloatType),param(Id(s),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(Y),FloatType)],Block([ConstDecl(Id(n),ArrayType(27,IntType),None)]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 383))

    def test_384(self):
        line = '''Class _{}Class l8{}Class C:_{Constructor (_:B_7_F;W,C_M,K_:Qg;fb1:Array [Array [Int ,0X15],0b1];__,_74_3,d,Ak_1:Array [Int ,0x7];_u,_1_4,R,o7,t:Boolean ){Var L:__;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(l8),[]),ClassDecl(Id(C),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(B_7_F))),param(Id(W),ClassType(Id(Qg))),param(Id(C_M),ClassType(Id(Qg))),param(Id(K_),ClassType(Id(Qg))),param(Id(fb1),ArrayType(1,ArrayType(21,IntType))),param(Id(__),ArrayType(7,IntType)),param(Id(_74_3),ArrayType(7,IntType)),param(Id(d),ArrayType(7,IntType)),param(Id(Ak_1),ArrayType(7,IntType)),param(Id(_u),BoolType),param(Id(_1_4),BoolType),param(Id(R),BoolType),param(Id(o7),BoolType),param(Id(t),BoolType)],Block([VarDecl(Id(L),ClassType(Id(__)),NullLiteral()),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 384))

    def test_385(self):
        line = '''Class _{}Class mx5{Var _,u:__;Destructor (){} }Class u:fU{}Class x_{Constructor (O_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,2_46_37_19_8],97],97],013],0X18],0X3_9],060],0X80E],0B1001101],04],0X3],060],0x1B]){ {Break ;} }Val $_:Array [Array [Boolean ,0X2_9],060];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(mx5),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(u),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(u),Id(fU),[]),ClassDecl(Id(x_),[MethodDecl(Id(Constructor),Instance,[param(Id(O_),ArrayType(27,ArrayType(48,ArrayType(3,ArrayType(4,ArrayType(77,ArrayType(2062,ArrayType(48,ArrayType(57,ArrayType(24,ArrayType(11,ArrayType(97,ArrayType(97,ArrayType(24637198,StringType))))))))))))))],Block([Block([Break])])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(48,ArrayType(41,BoolType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 385))

    def test_386(self):
        line = '''Class i:q_{}Class T{Destructor (){}$_s0q(A,_:_;CPB:String ;_5,DW,b:Array [String ,0B1010100];s1,M2,B7,y7:Array [Int ,0xD3_8_935];_QJnb,_t:Array [String ,0317_4];Z_:_){} }'''
        expect = '''Program([ClassDecl(Id(i),Id(q_),[]),ClassDecl(Id(T),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_s0q),Static,[param(Id(A),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(CPB),StringType),param(Id(_5),ArrayType(84,StringType)),param(Id(DW),ArrayType(84,StringType)),param(Id(b),ArrayType(84,StringType)),param(Id(s1),ArrayType(13863221,IntType)),param(Id(M2),ArrayType(13863221,IntType)),param(Id(B7),ArrayType(13863221,IntType)),param(Id(y7),ArrayType(13863221,IntType)),param(Id(_QJnb),ArrayType(1660,StringType)),param(Id(_t),ArrayType(1660,StringType)),param(Id(Z_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 386))

    def test_387(self):
        line = '''Class _:Z7{}Class _:___c{}Class _{Val _,aO8_:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1010110],0B1010110],0b111100],19],149_63_6_9],0X17],0XF9C_0_85_5_9],0X17];Val $85:U_;Val $_:Array [Boolean ,0x3C];}'''
        expect = '''Program([ClassDecl(Id(_),Id(Z7),[]),ClassDecl(Id(_),Id(___c),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(23,ArrayType(4190143833,ArrayType(23,ArrayType(1496369,ArrayType(19,ArrayType(60,ArrayType(86,ArrayType(86,BoolType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(aO8_),ArrayType(23,ArrayType(4190143833,ArrayType(23,ArrayType(1496369,ArrayType(19,ArrayType(60,ArrayType(86,ArrayType(86,BoolType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($85),ClassType(Id(U_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(60,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 387))

    def test_388(self):
        line = '''Class _:_{Var $52:Array [Boolean ,01];Destructor (){Continue ;Break ;}_(Bw,_S6,yM_,qU:Array [Int ,0b1000101];__:_C;D:q){}Var I:__;}Class _8Q{Constructor (_s:Y;_,PG:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($52),ArrayType(1,BoolType))),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Break])),MethodDecl(Id(_),Instance,[param(Id(Bw),ArrayType(69,IntType)),param(Id(_S6),ArrayType(69,IntType)),param(Id(yM_),ArrayType(69,IntType)),param(Id(qU),ArrayType(69,IntType)),param(Id(__),ClassType(Id(_C))),param(Id(D),ClassType(Id(q)))],Block([])),AttributeDecl(Instance,VarDecl(Id(I),ClassType(Id(__)),NullLiteral()))]),ClassDecl(Id(_8Q),[MethodDecl(Id(Constructor),Instance,[param(Id(_s),ClassType(Id(Y))),param(Id(_),BoolType),param(Id(PG),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 388))

    def test_389(self):
        line = '''Class fK13_:_{Constructor (_,X,_j_5p,_,z_M_,__5L,___I,_c:Array [String ,0B1_1]){} }Class __:_{Constructor (){ {Continue ;Continue ;Break ;} }}Class u:___W{Destructor (){ {} }}Class R:__4_{}Class I{}'''
        expect = '''Program([ClassDecl(Id(fK13_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3,StringType)),param(Id(X),ArrayType(3,StringType)),param(Id(_j_5p),ArrayType(3,StringType)),param(Id(_),ArrayType(3,StringType)),param(Id(z_M_),ArrayType(3,StringType)),param(Id(__5L),ArrayType(3,StringType)),param(Id(___I),ArrayType(3,StringType)),param(Id(_c),ArrayType(3,StringType))],Block([]))]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Block([Continue,Continue,Break])]))]),ClassDecl(Id(u),Id(___W),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(R),Id(__4_),[]),ClassDecl(Id(I),[])])'''
        self.assertTrue(TestAST.test(line, expect, 389))

    def test_390(self):
        line = '''Class _:U{_w_(){} }Class _4:__z{Constructor (_:XL;S:Boolean ;N6:H;I:Array [Int ,0X55];_5,Y85c:String ;VR:Array [Array [Boolean ,8],80];_,x,P,J_918s6E:_){}Var _:String ;}Class b3{}'''
        expect = '''Program([ClassDecl(Id(_),Id(U),[MethodDecl(Id(_w_),Instance,[],Block([]))]),ClassDecl(Id(_4),Id(__z),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(XL))),param(Id(S),BoolType),param(Id(N6),ClassType(Id(H))),param(Id(I),ArrayType(85,IntType)),param(Id(_5),StringType),param(Id(Y85c),StringType),param(Id(VR),ArrayType(80,ArrayType(8,BoolType))),param(Id(_),ClassType(Id(_))),param(Id(x),ClassType(Id(_))),param(Id(P),ClassType(Id(_))),param(Id(J_918s6E),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),StringType))]),ClassDecl(Id(b3),[])])'''
        self.assertTrue(TestAST.test(line, expect, 390))

    def test_391(self):
        line = '''Class i_{}Class k0:_p{Constructor (){Break ;}Destructor (){} }Class _{}Class u_:_{Var $_,r72:Array [Array [Array [Array [Array [Array [Array [Boolean ,98],28_0693948_8],0XEE_F],0x9],0b1],8],010];$C(k,__:String ;H:_;C_o2_,_:Array [Boolean ,0b1011000]){} }'''
        expect = '''Program([ClassDecl(Id(i_),[]),ClassDecl(Id(k0),Id(_p),[MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(u_),Id(_),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(8,ArrayType(8,ArrayType(1,ArrayType(9,ArrayType(3823,ArrayType(2806939488,ArrayType(98,BoolType))))))))),AttributeDecl(Instance,VarDecl(Id(r72),ArrayType(8,ArrayType(8,ArrayType(1,ArrayType(9,ArrayType(3823,ArrayType(2806939488,ArrayType(98,BoolType))))))))),MethodDecl(Id($C),Static,[param(Id(k),StringType),param(Id(__),StringType),param(Id(H),ClassType(Id(_))),param(Id(C_o2_),ArrayType(88,BoolType)),param(Id(_),ArrayType(88,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 391))

    def test_392(self):
        line = '''Class EMh{Val $_b:Array [Float ,052];Val $_6:Array [Array [Array [Int ,0XA],0B1],0XF7];}Class S:I{}Class H_8:f{Var __:Array [Boolean ,02];Destructor (){} }Class pr_B:WR2_v{}'''
        expect = '''Program([ClassDecl(Id(EMh),[AttributeDecl(Static,ConstDecl(Id($_b),ArrayType(42,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_6),ArrayType(247,ArrayType(1,ArrayType(10,IntType))),None))]),ClassDecl(Id(S),Id(I),[]),ClassDecl(Id(H_8),Id(f),[AttributeDecl(Instance,VarDecl(Id(__),ArrayType(2,BoolType))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(pr_B),Id(WR2_v),[])])'''
        self.assertTrue(TestAST.test(line, expect, 392))

    def test_393(self):
        line = '''Class _n_R_70p_7:_x{}Class o1:__y{Val _:Array [Array [Array [Array [Array [Array [String ,0B110001],0X46],0B1_1_1],5_2],0xF],5];Constructor (f,_0nf,n,n:A77;_7:Array [Boolean ,032];k:t9){}Val $_2Y:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,42],4],05],0b101100],04126],0B1],07],9],0b1_01],0xA4],0x7_8],5];}'''
        expect = '''Program([ClassDecl(Id(_n_R_70p_7),Id(_x),[]),ClassDecl(Id(o1),Id(__y),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(5,ArrayType(15,ArrayType(52,ArrayType(7,ArrayType(70,ArrayType(49,StringType)))))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(f),ClassType(Id(A77))),param(Id(_0nf),ClassType(Id(A77))),param(Id(n),ClassType(Id(A77))),param(Id(n),ClassType(Id(A77))),param(Id(_7),ArrayType(26,BoolType)),param(Id(k),ClassType(Id(t9)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_2Y),ArrayType(5,ArrayType(120,ArrayType(164,ArrayType(5,ArrayType(9,ArrayType(7,ArrayType(1,ArrayType(2134,ArrayType(44,ArrayType(5,ArrayType(4,ArrayType(42,IntType)))))))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 393))

    def test_394(self):
        line = '''Class _:Z_w{Var $__,___7,$09,_:Ol;Constructor (LC,D:String ;q,_,_1_6,_,__,_4:Array [Array [Array [Boolean ,022],05_5_3_5],0x8];_d:Boolean ){}Destructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(Z_w),[AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(Ol)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(___7),ClassType(Id(Ol)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($09),ClassType(Id(Ol)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(Ol)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(LC),StringType),param(Id(D),StringType),param(Id(q),ArrayType(8,ArrayType(2909,ArrayType(18,BoolType)))),param(Id(_),ArrayType(8,ArrayType(2909,ArrayType(18,BoolType)))),param(Id(_1_6),ArrayType(8,ArrayType(2909,ArrayType(18,BoolType)))),param(Id(_),ArrayType(8,ArrayType(2909,ArrayType(18,BoolType)))),param(Id(__),ArrayType(8,ArrayType(2909,ArrayType(18,BoolType)))),param(Id(_4),ArrayType(8,ArrayType(2909,ArrayType(18,BoolType)))),param(Id(_d),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 394))

    def test_395(self):
        line = '''Class Q:Oo{Val $____:vi;}Class __:_8{Constructor (_,ca0,__9:_;_G1,P_,_w:_;_3,eUx,Ean:Array [Array [Array [Int ,87],8963],0B1011101]){} }Class n5:K{}Class L:_27_{}Class k:_9r9{}'''
        expect = '''Program([ClassDecl(Id(Q),Id(Oo),[AttributeDecl(Static,ConstDecl(Id($____),ClassType(Id(vi)),NullLiteral()))]),ClassDecl(Id(__),Id(_8),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(ca0),ClassType(Id(_))),param(Id(__9),ClassType(Id(_))),param(Id(_G1),ClassType(Id(_))),param(Id(P_),ClassType(Id(_))),param(Id(_w),ClassType(Id(_))),param(Id(_3),ArrayType(93,ArrayType(8963,ArrayType(87,IntType)))),param(Id(eUx),ArrayType(93,ArrayType(8963,ArrayType(87,IntType)))),param(Id(Ean),ArrayType(93,ArrayType(8963,ArrayType(87,IntType))))],Block([]))]),ClassDecl(Id(n5),Id(K),[]),ClassDecl(Id(L),Id(_27_),[]),ClassDecl(Id(k),Id(_9r9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 395))

    def test_396(self):
        line = '''Class _P:_{Val $1,$0T64__:_6;Constructor (_:Array [Array [Array [Array [String ,0X60],4],0b1001101],0X60]){}Var $P___:Array [Array [String ,072],04_1];Val $4,_,$Zq,e:Aw;Constructor (_,LED:_qm5;X:u2_){} }'''
        expect = '''Program([ClassDecl(Id(_P),Id(_),[AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($0T64__),ClassType(Id(_6)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(96,ArrayType(77,ArrayType(4,ArrayType(96,StringType)))))],Block([])),AttributeDecl(Static,VarDecl(Id($P___),ArrayType(33,ArrayType(58,StringType)))),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(Aw)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(Aw)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($Zq),ClassType(Id(Aw)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(e),ClassType(Id(Aw)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_qm5))),param(Id(LED),ClassType(Id(_qm5))),param(Id(X),ClassType(Id(u2_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 396))

    def test_397(self):
        line = '''Class b5_{Var $Qr,$_,_6,g_,$q_V:Array [String ,0127];t_bL(){} }Class Y:b_41{Destructor (){} }Class b:hg_{Var $_,$7J:HZ;Constructor (I:Array [Array [Array [String ,0xC],0127],0x4E]){} }Class u:n{Constructor (){}Var $b_0B:e;}'''
        expect = '''Program([ClassDecl(Id(b5_),[AttributeDecl(Static,VarDecl(Id($Qr),ArrayType(87,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(87,StringType))),AttributeDecl(Instance,VarDecl(Id(_6),ArrayType(87,StringType))),AttributeDecl(Instance,VarDecl(Id(g_),ArrayType(87,StringType))),AttributeDecl(Static,VarDecl(Id($q_V),ArrayType(87,StringType))),MethodDecl(Id(t_bL),Instance,[],Block([]))]),ClassDecl(Id(Y),Id(b_41),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(b),Id(hg_),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(HZ)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($7J),ClassType(Id(HZ)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(I),ArrayType(78,ArrayType(87,ArrayType(12,StringType))))],Block([]))]),ClassDecl(Id(u),Id(n),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($b_0B),ClassType(Id(e)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 397))

    def test_398(self):
        line = '''Class _:__{Destructor (){}Constructor (G:_r_){}Constructor (d:Array [Array [Array [Array [Array [Int ,01],01],02],0b1010010],06];Q015_bC:Array [Array [Array [Array [Int ,05],0xC],05_0],0b1010010]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(G),ClassType(Id(_r_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(d),ArrayType(6,ArrayType(82,ArrayType(2,ArrayType(1,ArrayType(1,IntType)))))),param(Id(Q015_bC),ArrayType(82,ArrayType(40,ArrayType(12,ArrayType(5,IntType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 398))

    def test_399(self):
        line = '''Class _{Destructor (){}Var _P_,I0704__1:_C;_F(k,G,_,S:String ;_,_,Zz,FO___:Array [Array [Boolean ,02],0b1]){}Var $V,o:Boolean ;Var $_,$9_ltq,$N,Ka_40,_:Boolean ;}Class __:_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_P_),ClassType(Id(_C)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(I0704__1),ClassType(Id(_C)),NullLiteral())),MethodDecl(Id(_F),Instance,[param(Id(k),StringType),param(Id(G),StringType),param(Id(_),StringType),param(Id(S),StringType),param(Id(_),ArrayType(1,ArrayType(2,BoolType))),param(Id(_),ArrayType(1,ArrayType(2,BoolType))),param(Id(Zz),ArrayType(1,ArrayType(2,BoolType))),param(Id(FO___),ArrayType(1,ArrayType(2,BoolType)))],Block([])),AttributeDecl(Static,VarDecl(Id($V),BoolType)),AttributeDecl(Instance,VarDecl(Id(o),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Static,VarDecl(Id($9_ltq),BoolType)),AttributeDecl(Static,VarDecl(Id($N),BoolType)),AttributeDecl(Instance,VarDecl(Id(Ka_40),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType))]),ClassDecl(Id(__),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 399))

    def test_400(self):
        line = '''Class e_{}Class _4_7_{}Class L_{}Class B:w_{}Class E:_{}Class _{}Class w{}Class Z{Constructor (n,F:S;_,_:Array [Array [Array [Array [Array [Int ,0B1],062],0B1],0B100110],0x2];J7,_,_0r10,_:String ){} }'''
        expect = '''Program([ClassDecl(Id(e_),[]),ClassDecl(Id(_4_7_),[]),ClassDecl(Id(L_),[]),ClassDecl(Id(B),Id(w_),[]),ClassDecl(Id(E),Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(w),[]),ClassDecl(Id(Z),[MethodDecl(Id(Constructor),Instance,[param(Id(n),ClassType(Id(S))),param(Id(F),ClassType(Id(S))),param(Id(_),ArrayType(2,ArrayType(38,ArrayType(1,ArrayType(50,ArrayType(1,IntType)))))),param(Id(_),ArrayType(2,ArrayType(38,ArrayType(1,ArrayType(50,ArrayType(1,IntType)))))),param(Id(J7),StringType),param(Id(_),StringType),param(Id(_0r10),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 400))

    def test_401(self):
        line = '''Class v:u__Q__3_{}Class Q:Q3___{Var g:_tt;Var _:Q;Var KV:Array [Array [Float ,07],1];Constructor (d,O_l:Array [Array [Int ,1],0103]){}Val $F,$__:x;Constructor (__3:Float ){} }'''
        expect = '''Program([ClassDecl(Id(v),Id(u__Q__3_),[]),ClassDecl(Id(Q),Id(Q3___),[AttributeDecl(Instance,VarDecl(Id(g),ClassType(Id(_tt)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(Q)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(KV),ArrayType(1,ArrayType(7,FloatType)))),MethodDecl(Id(Constructor),Instance,[param(Id(d),ArrayType(67,ArrayType(1,IntType))),param(Id(O_l),ArrayType(67,ArrayType(1,IntType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($F),ClassType(Id(x)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(x)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(__3),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 401))

    def test_402(self):
        line = '''Class j:xN_26{Destructor (){}$__(L_:_V4;__Bk8_n0_:N4;__92_,_4:String ;_,B6:Array [Array [Array [Array [Array [Float ,04],067],83],0X1],0B1];_5_:W_2S3){} }Class __4{}'''
        expect = '''Program([ClassDecl(Id(j),Id(xN_26),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($__),Static,[param(Id(L_),ClassType(Id(_V4))),param(Id(__Bk8_n0_),ClassType(Id(N4))),param(Id(__92_),StringType),param(Id(_4),StringType),param(Id(_),ArrayType(1,ArrayType(1,ArrayType(83,ArrayType(55,ArrayType(4,FloatType)))))),param(Id(B6),ArrayType(1,ArrayType(1,ArrayType(83,ArrayType(55,ArrayType(4,FloatType)))))),param(Id(_5_),ClassType(Id(W_2S3)))],Block([]))]),ClassDecl(Id(__4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 402))

    def test_403(self):
        line = '''Class _{}Class V4:D{Val Q:Array [Array [Array [Array [Array [String ,0b1],0b11],0X2B],80],0142];Var $_:Array [Array [Array [Array [Boolean ,0b100100],0142],0X2B],88];Destructor (){} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(V4),Id(D),[AttributeDecl(Instance,ConstDecl(Id(Q),ArrayType(98,ArrayType(80,ArrayType(43,ArrayType(3,ArrayType(1,StringType))))),None)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(88,ArrayType(43,ArrayType(98,ArrayType(36,BoolType)))))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 403))

    def test_404(self):
        line = '''Class IB9:rJ{Constructor (L,_:String ;y_,Z:Array [Boolean ,34];_4,A:Array [Array [Int ,34],91];vm_i7,W6:Array [Array [Float ,0B1_0],0xA]){} }Class _42:H{Var tWZ6:Float ;Val $7:m6_0;}Class _{}Class _e2:_{}'''
        expect = '''Program([ClassDecl(Id(IB9),Id(rJ),[MethodDecl(Id(Constructor),Instance,[param(Id(L),StringType),param(Id(_),StringType),param(Id(y_),ArrayType(34,BoolType)),param(Id(Z),ArrayType(34,BoolType)),param(Id(_4),ArrayType(91,ArrayType(34,IntType))),param(Id(A),ArrayType(91,ArrayType(34,IntType))),param(Id(vm_i7),ArrayType(10,ArrayType(2,FloatType))),param(Id(W6),ArrayType(10,ArrayType(2,FloatType)))],Block([]))]),ClassDecl(Id(_42),Id(H),[AttributeDecl(Instance,VarDecl(Id(tWZ6),FloatType)),AttributeDecl(Static,ConstDecl(Id($7),ClassType(Id(m6_0)),NullLiteral()))]),ClassDecl(Id(_),[]),ClassDecl(Id(_e2),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 404))

    def test_405(self):
        line = '''Class __{}Class R{Val _,Y_,$LS,$2_,_,$__,Y9c,$_3w,_3_1_,C_,$i,$f5,_:Array [Int ,072_04_2];}Class o:__{$r(l1,__:Int ;R4,__,_2:Float ;ki0:Array [Int ,0120]){_4Od::$_();}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(R),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(29730,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(Y_),ArrayType(29730,IntType),None)),AttributeDecl(Static,ConstDecl(Id($LS),ArrayType(29730,IntType),None)),AttributeDecl(Static,ConstDecl(Id($2_),ArrayType(29730,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(29730,IntType),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(29730,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(Y9c),ArrayType(29730,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_3w),ArrayType(29730,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_3_1_),ArrayType(29730,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(C_),ArrayType(29730,IntType),None)),AttributeDecl(Static,ConstDecl(Id($i),ArrayType(29730,IntType),None)),AttributeDecl(Static,ConstDecl(Id($f5),ArrayType(29730,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(29730,IntType),None))]),ClassDecl(Id(o),Id(__),[MethodDecl(Id($r),Static,[param(Id(l1),IntType),param(Id(__),IntType),param(Id(R4),FloatType),param(Id(__),FloatType),param(Id(_2),FloatType),param(Id(ki0),ArrayType(80,IntType))],Block([Call(Id(_4Od),Id($_),[])])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 405))

    def test_406(self):
        line = '''Class _RX{Constructor (d,_2_,_:_8_4_;H,__:Int ;E_,B:Array [Int ,0X38];b:Array [String ,0104];s:Int ;l__,n,__:Array [Boolean ,0xA_1_0]){k_::$_();}$_m(){ {}Break ;}Destructor (){Break ;} }Class __7{}'''
        expect = '''Program([ClassDecl(Id(_RX),[MethodDecl(Id(Constructor),Instance,[param(Id(d),ClassType(Id(_8_4_))),param(Id(_2_),ClassType(Id(_8_4_))),param(Id(_),ClassType(Id(_8_4_))),param(Id(H),IntType),param(Id(__),IntType),param(Id(E_),ArrayType(56,IntType)),param(Id(B),ArrayType(56,IntType)),param(Id(b),ArrayType(68,StringType)),param(Id(s),IntType),param(Id(l__),ArrayType(2576,BoolType)),param(Id(n),ArrayType(2576,BoolType)),param(Id(__),ArrayType(2576,BoolType))],Block([Call(Id(k_),Id($_),[])])),MethodDecl(Id($_m),Static,[],Block([Block([]),Break])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(__7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 406))

    def test_407(self):
        line = '''Class S{Constructor (){ {s::$q__._();} }Constructor (){Break ;}Constructor (){} }Class R8:_1{Val $_:Float ;Var p_,$p:Array [Array [Array [Array [String ,0B1],0x41],0X47],0X4];}Class N:d{}'''
        expect = '''Program([ClassDecl(Id(S),[MethodDecl(Id(Constructor),Instance,[],Block([Block([Call(FieldAccess(Id(s),Id($q__)),Id(_),[])])])),MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(R8),Id(_1),[AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,VarDecl(Id(p_),ArrayType(4,ArrayType(71,ArrayType(65,ArrayType(1,StringType)))))),AttributeDecl(Static,VarDecl(Id($p),ArrayType(4,ArrayType(71,ArrayType(65,ArrayType(1,StringType))))))]),ClassDecl(Id(N),Id(d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 407))

    def test_408(self):
        line = '''Class l:b5_0_{Constructor (J_:Float ;__:Array [Array [Array [String ,0XD_3],054],0B1_001_1_0_0];_xp_:String ;iZ:g33){} }Class __{}Class k__{$_J50wW7__(U,_,_:Float ){} }Class jM{}Class E{}'''
        expect = '''Program([ClassDecl(Id(l),Id(b5_0_),[MethodDecl(Id(Constructor),Instance,[param(Id(J_),FloatType),param(Id(__),ArrayType(76,ArrayType(44,ArrayType(211,StringType)))),param(Id(_xp_),StringType),param(Id(iZ),ClassType(Id(g33)))],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(k__),[MethodDecl(Id($_J50wW7__),Static,[param(Id(U),FloatType),param(Id(_),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(jM),[]),ClassDecl(Id(E),[])])'''
        self.assertTrue(TestAST.test(line, expect, 408))

    def test_409(self):
        line = '''Class __jS_:_{}Class _A{Var q,V:Boolean ;}Class _T_3D4:Y_{}Class _L_q_{}Class d_571:t{SI_(_,_C:e;_6:Int ;_d,_,_:Array [Array [Boolean ,0b1_0],046];_3,e6,Y:Float ){} }Class y:_65{Val $H:Array [Array [Array [String ,0B1001010],0X82_5],0b111111];}'''
        expect = '''Program([ClassDecl(Id(__jS_),Id(_),[]),ClassDecl(Id(_A),[AttributeDecl(Instance,VarDecl(Id(q),BoolType)),AttributeDecl(Instance,VarDecl(Id(V),BoolType))]),ClassDecl(Id(_T_3D4),Id(Y_),[]),ClassDecl(Id(_L_q_),[]),ClassDecl(Id(d_571),Id(t),[MethodDecl(Id(SI_),Instance,[param(Id(_),ClassType(Id(e))),param(Id(_C),ClassType(Id(e))),param(Id(_6),IntType),param(Id(_d),ArrayType(38,ArrayType(2,BoolType))),param(Id(_),ArrayType(38,ArrayType(2,BoolType))),param(Id(_),ArrayType(38,ArrayType(2,BoolType))),param(Id(_3),FloatType),param(Id(e6),FloatType),param(Id(Y),FloatType)],Block([]))]),ClassDecl(Id(y),Id(_65),[AttributeDecl(Static,ConstDecl(Id($H),ArrayType(63,ArrayType(2085,ArrayType(74,StringType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 409))

    def test_410(self):
        line = '''Class __:T_{Var $4:String ;Val $W:_y__;k(_00,_095:Array [Boolean ,0B1001110];___0_:Int ){}Destructor (){Continue ;} }Class _w{}Class hi{}Class _{Constructor (){}Val $0k7,K0u:_4;}'''
        expect = '''Program([ClassDecl(Id(__),Id(T_),[AttributeDecl(Static,VarDecl(Id($4),StringType)),AttributeDecl(Static,ConstDecl(Id($W),ClassType(Id(_y__)),NullLiteral())),MethodDecl(Id(k),Instance,[param(Id(_00),ArrayType(78,BoolType)),param(Id(_095),ArrayType(78,BoolType)),param(Id(___0_),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(_w),[]),ClassDecl(Id(hi),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($0k7),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(K0u),ClassType(Id(_4)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 410))

    def test_411(self):
        line = '''Class a:GQ{$_7(s:Float ;G_14gSl,__:String ){} }Class __:P{Destructor (){Return ;Return ;}Constructor (){}Destructor (){} }Class b_{Var O,_:_;Val K_:Array [Float ,02];}Class r{}'''
        expect = '''Program([ClassDecl(Id(a),Id(GQ),[MethodDecl(Id($_7),Static,[param(Id(s),FloatType),param(Id(G_14gSl),StringType),param(Id(__),StringType)],Block([]))]),ClassDecl(Id(__),Id(P),[MethodDecl(Id(Destructor),Instance,[],Block([Return(),Return()])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(b_),[AttributeDecl(Instance,VarDecl(Id(O),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(K_),ArrayType(2,FloatType),None))]),ClassDecl(Id(r),[])])'''
        self.assertTrue(TestAST.test(line, expect, 411))

    def test_412(self):
        line = '''Class _{}Class R:_5_L{$_(){}R(__y_,k,B2,_,g:Array [Boolean ,0X62];l,_:String ){Return ;}$__(_,qU_:String ;w_51_0:Int ){Continue ;}Var $8:Array [Int ,90];Constructor (I:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(R),Id(_5_L),[MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(R),Instance,[param(Id(__y_),ArrayType(98,BoolType)),param(Id(k),ArrayType(98,BoolType)),param(Id(B2),ArrayType(98,BoolType)),param(Id(_),ArrayType(98,BoolType)),param(Id(g),ArrayType(98,BoolType)),param(Id(l),StringType),param(Id(_),StringType)],Block([Return()])),MethodDecl(Id($__),Static,[param(Id(_),StringType),param(Id(qU_),StringType),param(Id(w_51_0),IntType)],Block([Continue])),AttributeDecl(Static,VarDecl(Id($8),ArrayType(90,IntType))),MethodDecl(Id(Constructor),Instance,[param(Id(I),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 412))

    def test_413(self):
        line = '''Class G{Var $pST:Float ;Var _,_:i;___p_3_(h,_:_s;_0:_y0;E45_,_:Array [Array [Array [Array [Array [Float ,01],0b10],021],032],0b1];U,__qo__:Int ;G,R:_2;q:Array [Array [Boolean ,06],0X7]){} }Class S_R:_G_{}'''
        expect = '''Program([ClassDecl(Id(G),[AttributeDecl(Static,VarDecl(Id($pST),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(i)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(i)),NullLiteral())),MethodDecl(Id(___p_3_),Instance,[param(Id(h),ClassType(Id(_s))),param(Id(_),ClassType(Id(_s))),param(Id(_0),ClassType(Id(_y0))),param(Id(E45_),ArrayType(1,ArrayType(26,ArrayType(17,ArrayType(2,ArrayType(1,FloatType)))))),param(Id(_),ArrayType(1,ArrayType(26,ArrayType(17,ArrayType(2,ArrayType(1,FloatType)))))),param(Id(U),IntType),param(Id(__qo__),IntType),param(Id(G),ClassType(Id(_2))),param(Id(R),ClassType(Id(_2))),param(Id(q),ArrayType(7,ArrayType(6,BoolType)))],Block([]))]),ClassDecl(Id(S_R),Id(_G_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 413))

    def test_414(self):
        line = '''Class S{Constructor (_9o:t;O3,_:Float ;_v6_9_n:hms){}Var F,$_:DS;Val l:Int ;Var $_,_,_,$Q3,$_T,$4W:Array [Array [Int ,4_37],0xB];Var _:Array [Boolean ,02];}Class _O:_{}'''
        expect = '''Program([ClassDecl(Id(S),[MethodDecl(Id(Constructor),Instance,[param(Id(_9o),ClassType(Id(t))),param(Id(O3),FloatType),param(Id(_),FloatType),param(Id(_v6_9_n),ClassType(Id(hms)))],Block([])),AttributeDecl(Instance,VarDecl(Id(F),ClassType(Id(DS)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(DS)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(l),IntType,None)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(11,ArrayType(437,IntType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(11,ArrayType(437,IntType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(11,ArrayType(437,IntType)))),AttributeDecl(Static,VarDecl(Id($Q3),ArrayType(11,ArrayType(437,IntType)))),AttributeDecl(Static,VarDecl(Id($_T),ArrayType(11,ArrayType(437,IntType)))),AttributeDecl(Static,VarDecl(Id($4W),ArrayType(11,ArrayType(437,IntType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2,BoolType)))]),ClassDecl(Id(_O),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 414))

    def test_415(self):
        line = '''Class _3:_8{}Class _{$__(o:__f;ToSz,M,G:String ){}Constructor (Vv_,ws_1,l_,_,Aw,_f26a9:Boolean ){}Var _5_,$4__38,_:Array [Array [Array [Array [Int ,0b10],52],0b10],0B1_1];Constructor (__,_Cy_,zL5_,_20:Array [String ,0B1011100];k:Array [Boolean ,0B110];I5,_9,L3_11q045r7,a_,__I3,t:Array [String ,06_7]){} }'''
        expect = '''Program([ClassDecl(Id(_3),Id(_8),[]),ClassDecl(Id(_),[MethodDecl(Id($__),Static,[param(Id(o),ClassType(Id(__f))),param(Id(ToSz),StringType),param(Id(M),StringType),param(Id(G),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Vv_),BoolType),param(Id(ws_1),BoolType),param(Id(l_),BoolType),param(Id(_),BoolType),param(Id(Aw),BoolType),param(Id(_f26a9),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_5_),ArrayType(3,ArrayType(2,ArrayType(52,ArrayType(2,IntType)))))),AttributeDecl(Static,VarDecl(Id($4__38),ArrayType(3,ArrayType(2,ArrayType(52,ArrayType(2,IntType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(2,ArrayType(52,ArrayType(2,IntType)))))),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(92,StringType)),param(Id(_Cy_),ArrayType(92,StringType)),param(Id(zL5_),ArrayType(92,StringType)),param(Id(_20),ArrayType(92,StringType)),param(Id(k),ArrayType(6,BoolType)),param(Id(I5),ArrayType(55,StringType)),param(Id(_9),ArrayType(55,StringType)),param(Id(L3_11q045r7),ArrayType(55,StringType)),param(Id(a_),ArrayType(55,StringType)),param(Id(__I3),ArrayType(55,StringType)),param(Id(t),ArrayType(55,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 415))

    def test_416(self):
        line = '''Class M__{Var $__:Array [Array [Array [Array [Int ,51],076],0B101101],07];Var r_3_:Array [Array [Array [Array [Array [String ,0x6],0XA],51],0b1001010],51];}Class _31_:H{}Class _:_{}Class _:X{}Class _:x{}Class O:_X{}'''
        expect = '''Program([ClassDecl(Id(M__),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(7,ArrayType(45,ArrayType(62,ArrayType(51,IntType)))))),AttributeDecl(Instance,VarDecl(Id(r_3_),ArrayType(51,ArrayType(74,ArrayType(51,ArrayType(10,ArrayType(6,StringType)))))))]),ClassDecl(Id(_31_),Id(H),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(X),[]),ClassDecl(Id(_),Id(x),[]),ClassDecl(Id(O),Id(_X),[])])'''
        self.assertTrue(TestAST.test(line, expect, 416))

    def test_417(self):
        line = '''Class t:S8kV{}Class _R_x{}Class _:G{$20_(){}$f__m(){} }Class y_:_U_{Constructor (__,bt:Array [Boolean ,27];_,_,_,_:Int ;_:_;i_,_,D_9_7:Array [Float ,0b1000]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(t),Id(S8kV),[]),ClassDecl(Id(_R_x),[]),ClassDecl(Id(_),Id(G),[MethodDecl(Id($20_),Static,[],Block([])),MethodDecl(Id($f__m),Static,[],Block([]))]),ClassDecl(Id(y_),Id(_U_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(27,BoolType)),param(Id(bt),ArrayType(27,BoolType)),param(Id(_),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_),ClassType(Id(_))),param(Id(i_),ArrayType(8,FloatType)),param(Id(_),ArrayType(8,FloatType)),param(Id(D_9_7),ArrayType(8,FloatType))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 417))

    def test_418(self):
        line = '''Class N{Var p2,_x_,$DO_04K3,Y,$I3:Boolean ;$__0_7(t,g,X:String ;G_E:Array [String ,0b1001010];OJ2,u_,_:Array [Array [Array [Array [Int ,0x33],7],0B1],6_4]){} }Class _1C:d{}'''
        expect = '''Program([ClassDecl(Id(N),[AttributeDecl(Instance,VarDecl(Id(p2),BoolType)),AttributeDecl(Instance,VarDecl(Id(_x_),BoolType)),AttributeDecl(Static,VarDecl(Id($DO_04K3),BoolType)),AttributeDecl(Instance,VarDecl(Id(Y),BoolType)),AttributeDecl(Static,VarDecl(Id($I3),BoolType)),MethodDecl(Id($__0_7),Static,[param(Id(t),StringType),param(Id(g),StringType),param(Id(X),StringType),param(Id(G_E),ArrayType(74,StringType)),param(Id(OJ2),ArrayType(64,ArrayType(1,ArrayType(7,ArrayType(51,IntType))))),param(Id(u_),ArrayType(64,ArrayType(1,ArrayType(7,ArrayType(51,IntType))))),param(Id(_),ArrayType(64,ArrayType(1,ArrayType(7,ArrayType(51,IntType)))))],Block([]))]),ClassDecl(Id(_1C),Id(d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 418))

    def test_419(self):
        line = '''Class W:_{Destructor (){}Constructor (){}Var aK,$M,$k0,g,$DF:Array [Int ,07];}Class k:qP{}Class J0z:_{Var b,$F,_,M,m:LR0;Val $D_Ih_:String ;}Class k9m{Destructor (){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(W),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(aK),ArrayType(7,IntType))),AttributeDecl(Static,VarDecl(Id($M),ArrayType(7,IntType))),AttributeDecl(Static,VarDecl(Id($k0),ArrayType(7,IntType))),AttributeDecl(Instance,VarDecl(Id(g),ArrayType(7,IntType))),AttributeDecl(Static,VarDecl(Id($DF),ArrayType(7,IntType)))]),ClassDecl(Id(k),Id(qP),[]),ClassDecl(Id(J0z),Id(_),[AttributeDecl(Instance,VarDecl(Id(b),ClassType(Id(LR0)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($F),ClassType(Id(LR0)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(LR0)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(M),ClassType(Id(LR0)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(m),ClassType(Id(LR0)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($D_Ih_),StringType,None))]),ClassDecl(Id(k9m),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 419))

    def test_420(self):
        line = '''Class _{}Class s{Constructor (Q_,_,_,_,__:Array [Array [Float ,0x5_F1],28];_5_,R:Array [Array [Boolean ,020],0B1_0_1];P,_,dh1KNp:Array [Int ,0b111000]){Break ;Continue ;} }Class __:I33q__{Destructor (){}Var _:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(s),[MethodDecl(Id(Constructor),Instance,[param(Id(Q_),ArrayType(28,ArrayType(1521,FloatType))),param(Id(_),ArrayType(28,ArrayType(1521,FloatType))),param(Id(_),ArrayType(28,ArrayType(1521,FloatType))),param(Id(_),ArrayType(28,ArrayType(1521,FloatType))),param(Id(__),ArrayType(28,ArrayType(1521,FloatType))),param(Id(_5_),ArrayType(5,ArrayType(16,BoolType))),param(Id(R),ArrayType(5,ArrayType(16,BoolType))),param(Id(P),ArrayType(56,IntType)),param(Id(_),ArrayType(56,IntType)),param(Id(dh1KNp),ArrayType(56,IntType))],Block([Break,Continue]))]),ClassDecl(Id(__),Id(I33q__),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 420))

    def test_421(self):
        line = '''Class _{Constructor (_,xr4tD,_,Z,qj,sN:Array [Float ,0X9E_623_E];y:Array [Array [Float ,0133],0B11]){_::$_();Continue ;Val S:Array [Array [Boolean ,0133],0X16];}Destructor (){} }Class _:___2{}Class B_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(10379838,FloatType)),param(Id(xr4tD),ArrayType(10379838,FloatType)),param(Id(_),ArrayType(10379838,FloatType)),param(Id(Z),ArrayType(10379838,FloatType)),param(Id(qj),ArrayType(10379838,FloatType)),param(Id(sN),ArrayType(10379838,FloatType)),param(Id(y),ArrayType(3,ArrayType(91,FloatType)))],Block([Call(Id(_),Id($_),[]),Continue,ConstDecl(Id(S),ArrayType(22,ArrayType(91,BoolType)),None)])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(___2),[]),ClassDecl(Id(B_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 421))

    def test_422(self):
        line = '''Class __:_{Val _,$_X,R4,$__:Array [Boolean ,0B1];}Class _{Constructor (__I:_O0;z2,j,_593,_4,F:Array [String ,0B1]){}Var uZ__:Array [Array [Boolean ,39],0B111111];Constructor (SE__:Boolean ;lzw,E_t5:Int ;d4__W,u:Boolean ;_:Int ;_V,xEH:_E){}Val _5:Array [Array [Array [Boolean ,0x3E],02],0B1];}Class _43{Constructor (){} }Class m__MN7:_0z7_{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_X),ArrayType(1,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(R4),ArrayType(1,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(1,BoolType),None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__I),ClassType(Id(_O0))),param(Id(z2),ArrayType(1,StringType)),param(Id(j),ArrayType(1,StringType)),param(Id(_593),ArrayType(1,StringType)),param(Id(_4),ArrayType(1,StringType)),param(Id(F),ArrayType(1,StringType))],Block([])),AttributeDecl(Instance,VarDecl(Id(uZ__),ArrayType(63,ArrayType(39,BoolType)))),MethodDecl(Id(Constructor),Instance,[param(Id(SE__),BoolType),param(Id(lzw),IntType),param(Id(E_t5),IntType),param(Id(d4__W),BoolType),param(Id(u),BoolType),param(Id(_),IntType),param(Id(_V),ClassType(Id(_E))),param(Id(xEH),ClassType(Id(_E)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_5),ArrayType(1,ArrayType(2,ArrayType(62,BoolType))),None))]),ClassDecl(Id(_43),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(m__MN7),Id(_0z7_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 422))

    def test_423(self):
        line = '''Class __4{}Class _7{Constructor (_:Array [Array [Array [Array [Array [Array [Float ,01_275],0142],0X41],59],0x3B],07_6_2_6_2]){Var _:Array [Array [Array [Float ,0x3B],0b1001011],59];}Var $_:Array [Array [Array [String ,5],7],0B1001000];}'''
        expect = '''Program([ClassDecl(Id(__4),[]),ClassDecl(Id(_7),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(31922,ArrayType(59,ArrayType(59,ArrayType(65,ArrayType(98,ArrayType(701,FloatType)))))))],Block([VarDecl(Id(_),ArrayType(59,ArrayType(75,ArrayType(59,FloatType))))])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(72,ArrayType(7,ArrayType(5,StringType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 423))

    def test_424(self):
        line = '''Class U{Var _a,L:_;$051(_:Array [Array [Array [Array [String ,1],0B1011001],0B1011001],0B1];_,_,_,qe,_:String ){}$I(R8_2:Array [Int ,0133];Z:Boolean ){}Var $5,_i,kZLd9,$GwC:Array [Boolean ,0133];}Class K:_{Constructor (){Val x1,_B,H:k2;} }Class _:Sy{Constructor (_:Array [Float ,0X64];_:String ){}Destructor (){}Val $T1,$3_:Jw___;}Class R:_518_7{}'''
        expect = '''Program([ClassDecl(Id(U),[AttributeDecl(Instance,VarDecl(Id(_a),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(L),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($051),Static,[param(Id(_),ArrayType(1,ArrayType(89,ArrayType(89,ArrayType(1,StringType))))),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(qe),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id($I),Static,[param(Id(R8_2),ArrayType(91,IntType)),param(Id(Z),BoolType)],Block([])),AttributeDecl(Static,VarDecl(Id($5),ArrayType(91,BoolType))),AttributeDecl(Instance,VarDecl(Id(_i),ArrayType(91,BoolType))),AttributeDecl(Instance,VarDecl(Id(kZLd9),ArrayType(91,BoolType))),AttributeDecl(Static,VarDecl(Id($GwC),ArrayType(91,BoolType)))]),ClassDecl(Id(K),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(x1),ClassType(Id(k2)),NullLiteral()),ConstDecl(Id(_B),ClassType(Id(k2)),NullLiteral()),ConstDecl(Id(H),ClassType(Id(k2)),NullLiteral())]))]),ClassDecl(Id(_),Id(Sy),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(100,FloatType)),param(Id(_),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($T1),ClassType(Id(Jw___)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($3_),ClassType(Id(Jw___)),NullLiteral()))]),ClassDecl(Id(R),Id(_518_7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 424))

    def test_425(self):
        line = '''Class _:_p{a8_(){Break ;}Destructor (){ {} }u(_,__9,P:Boolean ;_7_,K:Float ){}Constructor (F_,_,_,p,_,_H6_B:Array [Array [Array [Array [Int ,0X50],0b101011],027],17];w:Array [Array [Array [Array [String ,32],0B1111],0x51],0B1111]){} }Class q{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_p),[MethodDecl(Id(a8_),Instance,[],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(u),Instance,[param(Id(_),BoolType),param(Id(__9),BoolType),param(Id(P),BoolType),param(Id(_7_),FloatType),param(Id(K),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(F_),ArrayType(17,ArrayType(23,ArrayType(43,ArrayType(80,IntType))))),param(Id(_),ArrayType(17,ArrayType(23,ArrayType(43,ArrayType(80,IntType))))),param(Id(_),ArrayType(17,ArrayType(23,ArrayType(43,ArrayType(80,IntType))))),param(Id(p),ArrayType(17,ArrayType(23,ArrayType(43,ArrayType(80,IntType))))),param(Id(_),ArrayType(17,ArrayType(23,ArrayType(43,ArrayType(80,IntType))))),param(Id(_H6_B),ArrayType(17,ArrayType(23,ArrayType(43,ArrayType(80,IntType))))),param(Id(w),ArrayType(15,ArrayType(81,ArrayType(15,ArrayType(32,StringType)))))],Block([]))]),ClassDecl(Id(q),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 425))

    def test_426(self):
        line = '''Class t{Constructor (aI_:Array [Array [Array [Float ,07],05],2_8];H2,_,d:Array [Boolean ,0b1000111];_:Array [Float ,024];__,v__U,_,__,_7,s:Array [Array [Array [Int ,0XDF],0b10],0XBA]){} }'''
        expect = '''Program([ClassDecl(Id(t),[MethodDecl(Id(Constructor),Instance,[param(Id(aI_),ArrayType(28,ArrayType(5,ArrayType(7,FloatType)))),param(Id(H2),ArrayType(71,BoolType)),param(Id(_),ArrayType(71,BoolType)),param(Id(d),ArrayType(71,BoolType)),param(Id(_),ArrayType(20,FloatType)),param(Id(__),ArrayType(186,ArrayType(2,ArrayType(223,IntType)))),param(Id(v__U),ArrayType(186,ArrayType(2,ArrayType(223,IntType)))),param(Id(_),ArrayType(186,ArrayType(2,ArrayType(223,IntType)))),param(Id(__),ArrayType(186,ArrayType(2,ArrayType(223,IntType)))),param(Id(_7),ArrayType(186,ArrayType(2,ArrayType(223,IntType)))),param(Id(s),ArrayType(186,ArrayType(2,ArrayType(223,IntType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 426))

    def test_427(self):
        line = '''Class k6{Var Xj,S:Array [Array [Array [Array [Array [Array [Array [String ,3_48],0x46],015],0x46],7],0B1010100],0B1010100];Constructor (r:Array [Array [Array [String ,043],06],0x46]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(k6),[AttributeDecl(Instance,VarDecl(Id(Xj),ArrayType(84,ArrayType(84,ArrayType(7,ArrayType(70,ArrayType(13,ArrayType(70,ArrayType(348,StringType))))))))),AttributeDecl(Instance,VarDecl(Id(S),ArrayType(84,ArrayType(84,ArrayType(7,ArrayType(70,ArrayType(13,ArrayType(70,ArrayType(348,StringType))))))))),MethodDecl(Id(Constructor),Instance,[param(Id(r),ArrayType(70,ArrayType(6,ArrayType(35,StringType))))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 427))

    def test_428(self):
        line = '''Class P{}Class __72_jh_:_U{}Class _:_{Destructor (){ {}Break ;}Val _i7g,T4___:Array [Array [Array [Array [Boolean ,0B1_01],0b1000010],9_1_2],06];_(_,_,l___,__7,_:Float ;E__O_,c:Array [Int ,0b1_0]){}$Xm_y(PO8,_r__:Ym;sv,D7,_9:Boolean ){}n_m(_5__1:String ;_i_A,_,_,F,z:String ){} }'''
        expect = '''Program([ClassDecl(Id(P),[]),ClassDecl(Id(__72_jh_),Id(_U),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Break])),AttributeDecl(Instance,ConstDecl(Id(_i7g),ArrayType(6,ArrayType(912,ArrayType(66,ArrayType(5,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(T4___),ArrayType(6,ArrayType(912,ArrayType(66,ArrayType(5,BoolType)))),None)),MethodDecl(Id(_),Instance,[param(Id(_),FloatType),param(Id(_),FloatType),param(Id(l___),FloatType),param(Id(__7),FloatType),param(Id(_),FloatType),param(Id(E__O_),ArrayType(2,IntType)),param(Id(c),ArrayType(2,IntType))],Block([])),MethodDecl(Id($Xm_y),Static,[param(Id(PO8),ClassType(Id(Ym))),param(Id(_r__),ClassType(Id(Ym))),param(Id(sv),BoolType),param(Id(D7),BoolType),param(Id(_9),BoolType)],Block([])),MethodDecl(Id(n_m),Instance,[param(Id(_5__1),StringType),param(Id(_i_A),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(F),StringType),param(Id(z),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 428))

    def test_429(self):
        line = '''Class l__{}Class _8_:B8{}Class _:__{}Class k:q{$h_(f,R:x){}Constructor (g4Y1:Array [Array [Boolean ,8_7],31];_,w9_4P:Array [Float ,0b10011]){}Val k_:qG;}Class _{}Class _{Var $_1_,$_h_:l9;}'''
        expect = '''Program([ClassDecl(Id(l__),[]),ClassDecl(Id(_8_),Id(B8),[]),ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(k),Id(q),[MethodDecl(Id($h_),Static,[param(Id(f),ClassType(Id(x))),param(Id(R),ClassType(Id(x)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(g4Y1),ArrayType(31,ArrayType(87,BoolType))),param(Id(_),ArrayType(19,FloatType)),param(Id(w9_4P),ArrayType(19,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(k_),ClassType(Id(qG)),NullLiteral()))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($_1_),ClassType(Id(l9)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_h_),ClassType(Id(l9)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 429))

    def test_430(self):
        line = '''Class __:__tk{}Class _:E_{}Class J:__56{Constructor (_Z,_,h__,Q:String ;__,_:String ;_5:_;_M,_,B,jt_,_,rwp5__,L:Float ;_,h5_,c,_4_:Array [Array [String ,0100],012]){} }Class o_{}Class _2a:d{Val sf:Array [Boolean ,0B1010101];Destructor (){Break ;}Var KZ:Array [Array [Array [Array [String ,0x36],0x6_F_7],92],53];$_(_:String ){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(__tk),[]),ClassDecl(Id(_),Id(E_),[]),ClassDecl(Id(J),Id(__56),[MethodDecl(Id(Constructor),Instance,[param(Id(_Z),StringType),param(Id(_),StringType),param(Id(h__),StringType),param(Id(Q),StringType),param(Id(__),StringType),param(Id(_),StringType),param(Id(_5),ClassType(Id(_))),param(Id(_M),FloatType),param(Id(_),FloatType),param(Id(B),FloatType),param(Id(jt_),FloatType),param(Id(_),FloatType),param(Id(rwp5__),FloatType),param(Id(L),FloatType),param(Id(_),ArrayType(10,ArrayType(64,StringType))),param(Id(h5_),ArrayType(10,ArrayType(64,StringType))),param(Id(c),ArrayType(10,ArrayType(64,StringType))),param(Id(_4_),ArrayType(10,ArrayType(64,StringType)))],Block([]))]),ClassDecl(Id(o_),[]),ClassDecl(Id(_2a),Id(d),[AttributeDecl(Instance,ConstDecl(Id(sf),ArrayType(85,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Instance,VarDecl(Id(KZ),ArrayType(53,ArrayType(92,ArrayType(1783,ArrayType(54,StringType)))))),MethodDecl(Id($_),Static,[param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 430))

    def test_431(self):
        line = '''Class _:_7_{Constructor (_0_l:Array [Int ,0X8];_,P,_u:Float ;X,TH,U797_,_,_,__:Array [Array [String ,072],072];__:f){Return -_::$8o().yuu.B*!!----_2::$pq.g()/!!_::$Q.M;} }Class _:_6{}Class t5:_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_7_),[MethodDecl(Id(Constructor),Instance,[param(Id(_0_l),ArrayType(8,IntType)),param(Id(_),FloatType),param(Id(P),FloatType),param(Id(_u),FloatType),param(Id(X),ArrayType(58,ArrayType(58,StringType))),param(Id(TH),ArrayType(58,ArrayType(58,StringType))),param(Id(U797_),ArrayType(58,ArrayType(58,StringType))),param(Id(_),ArrayType(58,ArrayType(58,StringType))),param(Id(_),ArrayType(58,ArrayType(58,StringType))),param(Id(__),ArrayType(58,ArrayType(58,StringType))),param(Id(__),ClassType(Id(f)))],Block([Return(BinaryOp(/,BinaryOp(*,UnaryOp(-,FieldAccess(FieldAccess(CallExpr(Id(_),Id($8o),[]),Id(yuu)),Id(B))),UnaryOp(!,UnaryOp(!,UnaryOp(-,UnaryOp(-,UnaryOp(-,UnaryOp(-,CallExpr(FieldAccess(Id(_2),Id($pq)),Id(g),[])))))))),UnaryOp(!,UnaryOp(!,FieldAccess(FieldAccess(Id(_),Id($Q)),Id(M))))))]))]),ClassDecl(Id(_),Id(_6),[]),ClassDecl(Id(t5),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 431))

    def test_432(self):
        line = '''Class _:_{Destructor (){Break ;}Constructor (){} }Class e0:F{Constructor (_t:Boolean ){}_(){} }Class A{Var $_x3,$_,E:Boolean ;}Class b:_{}Class __1_{}Class q9{Constructor (hc_:Array [String ,0112]){} }Class _{}Class _{}Class ____{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(e0),Id(F),[MethodDecl(Id(Constructor),Instance,[param(Id(_t),BoolType)],Block([])),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(A),[AttributeDecl(Static,VarDecl(Id($_x3),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(E),BoolType))]),ClassDecl(Id(b),Id(_),[]),ClassDecl(Id(__1_),[]),ClassDecl(Id(q9),[MethodDecl(Id(Constructor),Instance,[param(Id(hc_),ArrayType(74,StringType))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(____),[])])'''
        self.assertTrue(TestAST.test(line, expect, 432))

    def test_433(self):
        line = '''Class _Z{}Class _K:_{Val $_,_:Boolean ;}Class _0{}Class _x{Var $1,$_:Array [Array [Int ,0120],0120];Val $Sb:Array [Array [Array [Array [Array [Array [Array [Array [Float ,06_7],0X33],0x30],0X33],0120],0x30],0B1001110],4];}'''
        expect = '''Program([ClassDecl(Id(_Z),[]),ClassDecl(Id(_K),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))]),ClassDecl(Id(_0),[]),ClassDecl(Id(_x),[AttributeDecl(Static,VarDecl(Id($1),ArrayType(80,ArrayType(80,IntType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(80,ArrayType(80,IntType)))),AttributeDecl(Static,ConstDecl(Id($Sb),ArrayType(4,ArrayType(78,ArrayType(48,ArrayType(80,ArrayType(51,ArrayType(48,ArrayType(51,ArrayType(55,FloatType)))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 433))

    def test_434(self):
        line = '''Class Wy:__i_{}Class _o7_:_{}Class V_:__1{}Class _{Constructor (__,_2:Array [Boolean ,04]){Var _7N_,_,Mo_:R;}Destructor (){}p0(Y0:Array [Float ,0X28];_F9:Array [Array [Array [Array [Boolean ,0X8_F],0X7_0],0X28],02]){} }Class _:r{}'''
        expect = '''Program([ClassDecl(Id(Wy),Id(__i_),[]),ClassDecl(Id(_o7_),Id(_),[]),ClassDecl(Id(V_),Id(__1),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(4,BoolType)),param(Id(_2),ArrayType(4,BoolType))],Block([VarDecl(Id(_7N_),ClassType(Id(R)),NullLiteral()),VarDecl(Id(_),ClassType(Id(R)),NullLiteral()),VarDecl(Id(Mo_),ClassType(Id(R)),NullLiteral())])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(p0),Instance,[param(Id(Y0),ArrayType(40,FloatType)),param(Id(_F9),ArrayType(2,ArrayType(40,ArrayType(112,ArrayType(143,BoolType)))))],Block([]))]),ClassDecl(Id(_),Id(r),[])])'''
        self.assertTrue(TestAST.test(line, expect, 434))

    def test_435(self):
        line = '''Class __{$06(_B:String ;S14I_:_){Continue ;Break ;{Return ;} }}Class _0:_V_{Val V:Array [Float ,0X64];}Class N{Val $G,$_T_,_,$WV,$V__,__:String ;}Class l:_{Val $X,$A:C;}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id($06),Static,[param(Id(_B),StringType),param(Id(S14I_),ClassType(Id(_)))],Block([Continue,Break,Block([Return()])]))]),ClassDecl(Id(_0),Id(_V_),[AttributeDecl(Instance,ConstDecl(Id(V),ArrayType(100,FloatType),None))]),ClassDecl(Id(N),[AttributeDecl(Static,ConstDecl(Id($G),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_T_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($WV),StringType,None)),AttributeDecl(Static,ConstDecl(Id($V__),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(__),StringType,None))]),ClassDecl(Id(l),Id(_),[AttributeDecl(Static,ConstDecl(Id($X),ClassType(Id(C)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($A),ClassType(Id(C)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 435))

    def test_436(self):
        line = '''Class _{}Class g{wm1(_94,q4,K,_0:Boolean ;_,_,YC2,Z,_,_f,_,_,G,_,_y,b,h,W_9:Array [Float ,0b1];C:Array [Boolean ,0B1];s:Array [Int ,0b1_0];_:Float ){} }Class _{Val _,$_3:Array [String ,0b1];Var _202:v;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(g),[MethodDecl(Id(wm1),Instance,[param(Id(_94),BoolType),param(Id(q4),BoolType),param(Id(K),BoolType),param(Id(_0),BoolType),param(Id(_),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(YC2),ArrayType(1,FloatType)),param(Id(Z),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(_f),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(G),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(_y),ArrayType(1,FloatType)),param(Id(b),ArrayType(1,FloatType)),param(Id(h),ArrayType(1,FloatType)),param(Id(W_9),ArrayType(1,FloatType)),param(Id(C),ArrayType(1,BoolType)),param(Id(s),ArrayType(2,IntType)),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,StringType),None)),AttributeDecl(Static,ConstDecl(Id($_3),ArrayType(1,StringType),None)),AttributeDecl(Instance,VarDecl(Id(_202),ClassType(Id(v)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 436))

    def test_437(self):
        line = '''Class y2:E{$__(_:_;__:Float ;_,_r:Array [Array [Array [String ,07_5],33],0B101010]){}Var $t:Array [Array [Array [Array [Array [Float ,015],0X45],1_49_4],0b1],015];}Class _KVy:A1{}'''
        expect = '''Program([ClassDecl(Id(y2),Id(E),[MethodDecl(Id($__),Static,[param(Id(_),ClassType(Id(_))),param(Id(__),FloatType),param(Id(_),ArrayType(42,ArrayType(33,ArrayType(61,StringType)))),param(Id(_r),ArrayType(42,ArrayType(33,ArrayType(61,StringType))))],Block([])),AttributeDecl(Static,VarDecl(Id($t),ArrayType(13,ArrayType(1,ArrayType(1494,ArrayType(69,ArrayType(13,FloatType)))))))]),ClassDecl(Id(_KVy),Id(A1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 437))

    def test_438(self):
        line = '''Class P{Val $__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0b1],0X6],7_282],14],0X3D],037],0b11_10],0B1101],0B1],0x5E],0b1],07127];}'''
        expect = '''Program([ClassDecl(Id(P),[AttributeDecl(Static,ConstDecl(Id($__),ArrayType(3671,ArrayType(1,ArrayType(94,ArrayType(1,ArrayType(13,ArrayType(14,ArrayType(31,ArrayType(61,ArrayType(14,ArrayType(7282,ArrayType(6,ArrayType(1,IntType)))))))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 438))

    def test_439(self):
        line = '''Class _:j{Destructor (){Continue ;}Destructor (){Continue ;}Val _dt:Jk;}Class P_:k1C{t9(){}Constructor (_,_:Array [Array [String ,0xD],01_2_1]){Continue ;}Var $c:___sU;W_(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(j),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(_dt),ClassType(Id(Jk)),NullLiteral()))]),ClassDecl(Id(P_),Id(k1C),[MethodDecl(Id(t9),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(81,ArrayType(13,StringType))),param(Id(_),ArrayType(81,ArrayType(13,StringType)))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($c),ClassType(Id(___sU)),NullLiteral())),MethodDecl(Id(W_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 439))

    def test_440(self):
        line = '''Class k:u_p{Constructor (U,_:v;_0,_Q:Array [Array [Array [Int ,0b1000101],0x49],0x49];_7,_B_73:Array [Float ,77];I,_2,l0:Array [Int ,0x5_8E];J_:Boolean ;_:__;_w,_,_Y,_v,J:Int ;_,i___0_,Z4:Array [Int ,0X10]){}Destructor (){}Destructor (){} }Class M{}'''
        expect = '''Program([ClassDecl(Id(k),Id(u_p),[MethodDecl(Id(Constructor),Instance,[param(Id(U),ClassType(Id(v))),param(Id(_),ClassType(Id(v))),param(Id(_0),ArrayType(73,ArrayType(73,ArrayType(69,IntType)))),param(Id(_Q),ArrayType(73,ArrayType(73,ArrayType(69,IntType)))),param(Id(_7),ArrayType(77,FloatType)),param(Id(_B_73),ArrayType(77,FloatType)),param(Id(I),ArrayType(1422,IntType)),param(Id(_2),ArrayType(1422,IntType)),param(Id(l0),ArrayType(1422,IntType)),param(Id(J_),BoolType),param(Id(_),ClassType(Id(__))),param(Id(_w),IntType),param(Id(_),IntType),param(Id(_Y),IntType),param(Id(_v),IntType),param(Id(J),IntType),param(Id(_),ArrayType(16,IntType)),param(Id(i___0_),ArrayType(16,IntType)),param(Id(Z4),ArrayType(16,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(M),[])])'''
        self.assertTrue(TestAST.test(line, expect, 440))

    def test_441(self):
        line = '''Class __:e{Constructor (__:Array [Int ,0b1];B_i:Array [Boolean ,055];PC26_:Q2;P_t,A:Array [Boolean ,0117]){}Var $1:X;__5m_m(){}Var J,_5u:_;Val $0_:Array [Boolean ,0117];g_(){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(e),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(1,IntType)),param(Id(B_i),ArrayType(45,BoolType)),param(Id(PC26_),ClassType(Id(Q2))),param(Id(P_t),ArrayType(79,BoolType)),param(Id(A),ArrayType(79,BoolType))],Block([])),AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(X)),NullLiteral())),MethodDecl(Id(__5m_m),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(J),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_5u),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($0_),ArrayType(79,BoolType),None)),MethodDecl(Id(g_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 441))

    def test_442(self):
        line = '''Class _6_{}Class p:I98{Constructor (p_,qm:Float ;c,M,R,_4,O,_,Z_:Array [Array [Float ,0xA],0x48];_6,__,r:Array [Float ,04_1];__0_4o5,Hw_4,_:Boolean ;_46Q_:Float ;_L_,__,_0n8P___,h,__:Int ;_:_){}Constructor (H,_,Z,m2b,d1,V,jl7_,_,__,hmn:Int ;Z,R_f_POw_4,h_,_Vi,_:Array [Array [Array [Array [Array [Array [Float ,86],5],0X2A],0xD_35_1D],0B1],036];_,A:Float ;_:Float ;_s_:a;TT,W:aK_t_;F,B_,_:Float ;_,_p:_;_,__i:Array [Float ,3_36_9_88];k1:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_6_),[]),ClassDecl(Id(p),Id(I98),[MethodDecl(Id(Constructor),Instance,[param(Id(p_),FloatType),param(Id(qm),FloatType),param(Id(c),ArrayType(72,ArrayType(10,FloatType))),param(Id(M),ArrayType(72,ArrayType(10,FloatType))),param(Id(R),ArrayType(72,ArrayType(10,FloatType))),param(Id(_4),ArrayType(72,ArrayType(10,FloatType))),param(Id(O),ArrayType(72,ArrayType(10,FloatType))),param(Id(_),ArrayType(72,ArrayType(10,FloatType))),param(Id(Z_),ArrayType(72,ArrayType(10,FloatType))),param(Id(_6),ArrayType(33,FloatType)),param(Id(__),ArrayType(33,FloatType)),param(Id(r),ArrayType(33,FloatType)),param(Id(__0_4o5),BoolType),param(Id(Hw_4),BoolType),param(Id(_),BoolType),param(Id(_46Q_),FloatType),param(Id(_L_),IntType),param(Id(__),IntType),param(Id(_0n8P___),IntType),param(Id(h),IntType),param(Id(__),IntType),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(H),IntType),param(Id(_),IntType),param(Id(Z),IntType),param(Id(m2b),IntType),param(Id(d1),IntType),param(Id(V),IntType),param(Id(jl7_),IntType),param(Id(_),IntType),param(Id(__),IntType),param(Id(hmn),IntType),param(Id(Z),ArrayType(30,ArrayType(1,ArrayType(865565,ArrayType(42,ArrayType(5,ArrayType(86,FloatType))))))),param(Id(R_f_POw_4),ArrayType(30,ArrayType(1,ArrayType(865565,ArrayType(42,ArrayType(5,ArrayType(86,FloatType))))))),param(Id(h_),ArrayType(30,ArrayType(1,ArrayType(865565,ArrayType(42,ArrayType(5,ArrayType(86,FloatType))))))),param(Id(_Vi),ArrayType(30,ArrayType(1,ArrayType(865565,ArrayType(42,ArrayType(5,ArrayType(86,FloatType))))))),param(Id(_),ArrayType(30,ArrayType(1,ArrayType(865565,ArrayType(42,ArrayType(5,ArrayType(86,FloatType))))))),param(Id(_),FloatType),param(Id(A),FloatType),param(Id(_),FloatType),param(Id(_s_),ClassType(Id(a))),param(Id(TT),ClassType(Id(aK_t_))),param(Id(W),ClassType(Id(aK_t_))),param(Id(F),FloatType),param(Id(B_),FloatType),param(Id(_),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_p),ClassType(Id(_))),param(Id(_),ArrayType(336988,FloatType)),param(Id(__i),ArrayType(336988,FloatType)),param(Id(k1),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 442))

    def test_443(self):
        line = '''Class _3_VU_:E{}Class B{}Class _q_94O4:_{}Class b{Val $__,$5_,K90,$8_w:Array [Array [Array [Array [String ,98],036],0B1_0_0],0X52];$2K(_:Array [String ,0B1]){}Constructor (_,_8E_,JN:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_3_VU_),Id(E),[]),ClassDecl(Id(B),[]),ClassDecl(Id(_q_94O4),Id(_),[]),ClassDecl(Id(b),[AttributeDecl(Static,ConstDecl(Id($__),ArrayType(82,ArrayType(4,ArrayType(30,ArrayType(98,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($5_),ArrayType(82,ArrayType(4,ArrayType(30,ArrayType(98,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(K90),ArrayType(82,ArrayType(4,ArrayType(30,ArrayType(98,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($8_w),ArrayType(82,ArrayType(4,ArrayType(30,ArrayType(98,StringType)))),None)),MethodDecl(Id($2K),Static,[param(Id(_),ArrayType(1,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_8E_),FloatType),param(Id(JN),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 443))

    def test_444(self):
        line = '''Class _2101985{Var O__0_6:Array [Array [Float ,0XD_E],8];Constructor (){}Constructor (S:Array [Array [Array [Array [Float ,0317],0x11_0C_8],02_0],0X4];z_4N,_,_:String ;a,D__5:H;G2573O,W6:Array [Array [String ,0XF],0xE];_r6_:Float ;w,_,_3:Array [Array [Array [Boolean ,4],04],03]){} }'''
        expect = '''Program([ClassDecl(Id(_2101985),[AttributeDecl(Instance,VarDecl(Id(O__0_6),ArrayType(8,ArrayType(222,FloatType)))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(S),ArrayType(4,ArrayType(16,ArrayType(69832,ArrayType(207,FloatType))))),param(Id(z_4N),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(a),ClassType(Id(H))),param(Id(D__5),ClassType(Id(H))),param(Id(G2573O),ArrayType(14,ArrayType(15,StringType))),param(Id(W6),ArrayType(14,ArrayType(15,StringType))),param(Id(_r6_),FloatType),param(Id(w),ArrayType(3,ArrayType(4,ArrayType(4,BoolType)))),param(Id(_),ArrayType(3,ArrayType(4,ArrayType(4,BoolType)))),param(Id(_3),ArrayType(3,ArrayType(4,ArrayType(4,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 444))

    def test_445(self):
        line = '''Class _8{Var $Iy,$_J,$_GE3,$rv,$Y5t4:n;Destructor (){}Constructor (){}Val $_2z,$1:Boolean ;Constructor (l:Int ;u_r:Float ;_8:dR){Break ;}Var $k_,$__:V;}Class _:B{}'''
        expect = '''Program([ClassDecl(Id(_8),[AttributeDecl(Static,VarDecl(Id($Iy),ClassType(Id(n)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_J),ClassType(Id(n)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_GE3),ClassType(Id(n)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($rv),ClassType(Id(n)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Y5t4),ClassType(Id(n)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_2z),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($1),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(l),IntType),param(Id(u_r),FloatType),param(Id(_8),ClassType(Id(dR)))],Block([Break])),AttributeDecl(Static,VarDecl(Id($k_),ClassType(Id(V)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(V)),NullLiteral()))]),ClassDecl(Id(_),Id(B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 445))

    def test_446(self):
        line = '''Class p__{$0(N_6,Q5_:_tK18_;T:g_;_,h3_,g_,__,_:Array [Array [Array [Int ,0xD],032],04_5_0];_:A_;_,D:Array [Array [Array [Boolean ,03],0B1],0X33];__O:w4;_:Array [String ,0B1]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(p__),[MethodDecl(Id($0),Static,[param(Id(N_6),ClassType(Id(_tK18_))),param(Id(Q5_),ClassType(Id(_tK18_))),param(Id(T),ClassType(Id(g_))),param(Id(_),ArrayType(296,ArrayType(26,ArrayType(13,IntType)))),param(Id(h3_),ArrayType(296,ArrayType(26,ArrayType(13,IntType)))),param(Id(g_),ArrayType(296,ArrayType(26,ArrayType(13,IntType)))),param(Id(__),ArrayType(296,ArrayType(26,ArrayType(13,IntType)))),param(Id(_),ArrayType(296,ArrayType(26,ArrayType(13,IntType)))),param(Id(_),ClassType(Id(A_))),param(Id(_),ArrayType(51,ArrayType(1,ArrayType(3,BoolType)))),param(Id(D),ArrayType(51,ArrayType(1,ArrayType(3,BoolType)))),param(Id(__O),ClassType(Id(w4))),param(Id(_),ArrayType(1,StringType))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 446))

    def test_447(self):
        line = '''Class _{Val $_,$DW_:Array [Array [Boolean ,0X8],04_4_1_5];Var $_V,_:Float ;$50_(I,tAI0,I:Array [Array [Array [Array [Array [Int ,0B1],020],1_5_5],0b1000],0x23];_:Array [Float ,014_6];V:Array [Array [Array [Array [Array [Float ,020],0B1_0],0x8],0B1],0B1000011]){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(2317,ArrayType(8,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($DW_),ArrayType(2317,ArrayType(8,BoolType)),None)),AttributeDecl(Static,VarDecl(Id($_V),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),MethodDecl(Id($50_),Static,[param(Id(I),ArrayType(35,ArrayType(8,ArrayType(155,ArrayType(16,ArrayType(1,IntType)))))),param(Id(tAI0),ArrayType(35,ArrayType(8,ArrayType(155,ArrayType(16,ArrayType(1,IntType)))))),param(Id(I),ArrayType(35,ArrayType(8,ArrayType(155,ArrayType(16,ArrayType(1,IntType)))))),param(Id(_),ArrayType(102,FloatType)),param(Id(V),ArrayType(67,ArrayType(1,ArrayType(8,ArrayType(2,ArrayType(16,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 447))

    def test_448(self):
        line = '''Class _7_g_wK79_{Val $s350,V:Boolean ;}Class JQ7:b{Constructor (jz:Array [Int ,027];p:String ){}$PQ(){} }Class _:WB{Constructor (S,N_CX5,E,_P3__,k:_27){Continue ;}Val _:String ;}Class _{}'''
        expect = '''Program([ClassDecl(Id(_7_g_wK79_),[AttributeDecl(Static,ConstDecl(Id($s350),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(V),BoolType,None))]),ClassDecl(Id(JQ7),Id(b),[MethodDecl(Id(Constructor),Instance,[param(Id(jz),ArrayType(23,IntType)),param(Id(p),StringType)],Block([])),MethodDecl(Id($PQ),Static,[],Block([]))]),ClassDecl(Id(_),Id(WB),[MethodDecl(Id(Constructor),Instance,[param(Id(S),ClassType(Id(_27))),param(Id(N_CX5),ClassType(Id(_27))),param(Id(E),ClassType(Id(_27))),param(Id(_P3__),ClassType(Id(_27))),param(Id(k),ClassType(Id(_27)))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 448))

    def test_449(self):
        line = '''Class _TvY:_{Constructor (__5:X8;Wv:Array [Array [Float ,0xC_2_2_1_6_2],0x35];_,i,gj,_K1:Int ;_,__p:Array [Array [Int ,5],0b110];_:_;_c:Int ;_4_:Array [Array [Float ,0B11000],0XD];x:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_TvY),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__5),ClassType(Id(X8))),param(Id(Wv),ArrayType(53,ArrayType(12722530,FloatType))),param(Id(_),IntType),param(Id(i),IntType),param(Id(gj),IntType),param(Id(_K1),IntType),param(Id(_),ArrayType(6,ArrayType(5,IntType))),param(Id(__p),ArrayType(6,ArrayType(5,IntType))),param(Id(_),ClassType(Id(_))),param(Id(_c),IntType),param(Id(_4_),ArrayType(13,ArrayType(24,FloatType))),param(Id(x),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 449))

    def test_450(self):
        line = '''Class _:_D444{}Class _:W_{Constructor (N1,_:N;S:Float ;M46:zp;_6h:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B1000100],0102],4],0671171],0102],0b1001000],0b1001000],0B1000100],01];__6_,G:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_D444),[]),ClassDecl(Id(_),Id(W_),[MethodDecl(Id(Constructor),Instance,[param(Id(N1),ClassType(Id(N))),param(Id(_),ClassType(Id(N))),param(Id(S),FloatType),param(Id(M46),ClassType(Id(zp))),param(Id(_6h),ArrayType(1,ArrayType(68,ArrayType(72,ArrayType(72,ArrayType(66,ArrayType(225913,ArrayType(4,ArrayType(66,ArrayType(68,IntType)))))))))),param(Id(__6_),StringType),param(Id(G),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 450))

    def test_451(self):
        line = '''Class f2M:_c_{}Class _Rl{_(W,_,K_:S;_:Array [Boolean ,0b110111];_:Array [Array [Array [Array [Array [Boolean ,29_2_5_5],9_4_4_8],0b110111],87],01]){} }Class _:__{}Class rE__{}Class M9:X3{}Class _u{}Class _0{}'''
        expect = '''Program([ClassDecl(Id(f2M),Id(_c_),[]),ClassDecl(Id(_Rl),[MethodDecl(Id(_),Instance,[param(Id(W),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(K_),ClassType(Id(S))),param(Id(_),ArrayType(55,BoolType)),param(Id(_),ArrayType(1,ArrayType(87,ArrayType(55,ArrayType(9448,ArrayType(29255,BoolType))))))],Block([]))]),ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(rE__),[]),ClassDecl(Id(M9),Id(X3),[]),ClassDecl(Id(_u),[]),ClassDecl(Id(_0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 451))

    def test_452(self):
        line = '''Class e7Kw:_{Constructor (by:Array [Array [String ,072],33];_b_O:Array [Boolean ,7];m,q_,n,Do5,g2g7:Array [Array [Int ,072],02]){} }Class O{Var md:Array [Array [Boolean ,0X32],07_7_0_63_0];}'''
        expect = '''Program([ClassDecl(Id(e7Kw),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(by),ArrayType(33,ArrayType(58,StringType))),param(Id(_b_O),ArrayType(7,BoolType)),param(Id(m),ArrayType(2,ArrayType(58,IntType))),param(Id(q_),ArrayType(2,ArrayType(58,IntType))),param(Id(n),ArrayType(2,ArrayType(58,IntType))),param(Id(Do5),ArrayType(2,ArrayType(58,IntType))),param(Id(g2g7),ArrayType(2,ArrayType(58,IntType)))],Block([]))]),ClassDecl(Id(O),[AttributeDecl(Instance,VarDecl(Id(md),ArrayType(258456,ArrayType(50,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 452))

    def test_453(self):
        line = '''Class P07:_{}Class _{Constructor (s:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0x7_3],0B1001011],024],0b10_11_1_00],0B1001011],0b1],0b1010],0B1_1],54]){Var _:Float ;}Destructor (){ {Val _o3_,_44m:__8;} }}'''
        expect = '''Program([ClassDecl(Id(P07),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(s),ArrayType(54,ArrayType(3,ArrayType(10,ArrayType(1,ArrayType(75,ArrayType(92,ArrayType(20,ArrayType(75,ArrayType(115,IntType))))))))))],Block([VarDecl(Id(_),FloatType)])),MethodDecl(Id(Destructor),Instance,[],Block([Block([ConstDecl(Id(_o3_),ClassType(Id(__8)),NullLiteral()),ConstDecl(Id(_44m),ClassType(Id(__8)),NullLiteral())])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 453))

    def test_454(self):
        line = '''Class _d:QQv{}Class V:_{Var $6P:Int ;}Class S:_6P8{Constructor (x4:String ;K,_,B,E,_1VtQ_zdi45t_c_H__:Array [Float ,0X32]){}Val $__,z:Array [Array [Array [Int ,0b100101],043],81];}'''
        expect = '''Program([ClassDecl(Id(_d),Id(QQv),[]),ClassDecl(Id(V),Id(_),[AttributeDecl(Static,VarDecl(Id($6P),IntType))]),ClassDecl(Id(S),Id(_6P8),[MethodDecl(Id(Constructor),Instance,[param(Id(x4),StringType),param(Id(K),ArrayType(50,FloatType)),param(Id(_),ArrayType(50,FloatType)),param(Id(B),ArrayType(50,FloatType)),param(Id(E),ArrayType(50,FloatType)),param(Id(_1VtQ_zdi45t_c_H__),ArrayType(50,FloatType))],Block([])),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(81,ArrayType(35,ArrayType(37,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(z),ArrayType(81,ArrayType(35,ArrayType(37,IntType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 454))

    def test_455(self):
        line = '''Class v:_{}Class _{Val $_2_I,_8,$3:Float ;Constructor (nG:_36__0;_,M:_;J,U:Array [Int ,2];b,Oi_D:N_;__13:l){} }Class yK8_oo:kZ_V{}Class KHN{Var q,id,$J,V_,$__04,_550u,R9_,g:_;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(v),Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_2_I),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_8),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($3),FloatType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(nG),ClassType(Id(_36__0))),param(Id(_),ClassType(Id(_))),param(Id(M),ClassType(Id(_))),param(Id(J),ArrayType(2,IntType)),param(Id(U),ArrayType(2,IntType)),param(Id(b),ClassType(Id(N_))),param(Id(Oi_D),ClassType(Id(N_))),param(Id(__13),ClassType(Id(l)))],Block([]))]),ClassDecl(Id(yK8_oo),Id(kZ_V),[]),ClassDecl(Id(KHN),[AttributeDecl(Instance,VarDecl(Id(q),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(id),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($J),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(V_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__04),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_550u),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(R9_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(g),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 455))

    def test_456(self):
        line = '''Class ____{$c(S_:Int ;_,_,_09:Array [String ,0XAE0]){}Constructor (V_Sv_:Kk;O,_64,M_7_:Array [Array [Boolean ,51],9];Z:Array [Array [String ,0XF],9];a:Array [Int ,0b1_01]){}Constructor (){}Destructor (){Break ;Val iS:Float ;} }'''
        expect = '''Program([ClassDecl(Id(____),[MethodDecl(Id($c),Static,[param(Id(S_),IntType),param(Id(_),ArrayType(2784,StringType)),param(Id(_),ArrayType(2784,StringType)),param(Id(_09),ArrayType(2784,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(V_Sv_),ClassType(Id(Kk))),param(Id(O),ArrayType(9,ArrayType(51,BoolType))),param(Id(_64),ArrayType(9,ArrayType(51,BoolType))),param(Id(M_7_),ArrayType(9,ArrayType(51,BoolType))),param(Id(Z),ArrayType(9,ArrayType(15,StringType))),param(Id(a),ArrayType(5,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break,ConstDecl(Id(iS),FloatType,None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 456))

    def test_457(self):
        line = '''Class d:_4kf{Constructor (){ {} }}Class W{}Class _{}Class D:_{}Class J7:L{}Class J{Constructor (_3qd_5_,k7:Array [Array [Float ,0b10100],0b10100];Q___92,Jy,c,_:Array [Boolean ,47];_:gA;s,_,P:Array [Array [Float ,0xB8],0601_5]){} }'''
        expect = '''Program([ClassDecl(Id(d),Id(_4kf),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(W),[]),ClassDecl(Id(_),[]),ClassDecl(Id(D),Id(_),[]),ClassDecl(Id(J7),Id(L),[]),ClassDecl(Id(J),[MethodDecl(Id(Constructor),Instance,[param(Id(_3qd_5_),ArrayType(20,ArrayType(20,FloatType))),param(Id(k7),ArrayType(20,ArrayType(20,FloatType))),param(Id(Q___92),ArrayType(47,BoolType)),param(Id(Jy),ArrayType(47,BoolType)),param(Id(c),ArrayType(47,BoolType)),param(Id(_),ArrayType(47,BoolType)),param(Id(_),ClassType(Id(gA))),param(Id(s),ArrayType(3085,ArrayType(184,FloatType))),param(Id(_),ArrayType(3085,ArrayType(184,FloatType))),param(Id(P),ArrayType(3085,ArrayType(184,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 457))

    def test_458(self):
        line = '''Class D:_{Constructor (___B,_:E8;H,ORB_7I:Array [Array [Boolean ,0x2C],020];e_N,_2T,_i6,_:Float ;e:Array [String ,020];u:String ;_B:Array [Array [String ,10],020];__:Array [Array [Array [String ,50],0X4],0B1];u,L:Array [Array [Boolean ,0b11],10]){} }'''
        expect = '''Program([ClassDecl(Id(D),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(___B),ClassType(Id(E8))),param(Id(_),ClassType(Id(E8))),param(Id(H),ArrayType(16,ArrayType(44,BoolType))),param(Id(ORB_7I),ArrayType(16,ArrayType(44,BoolType))),param(Id(e_N),FloatType),param(Id(_2T),FloatType),param(Id(_i6),FloatType),param(Id(_),FloatType),param(Id(e),ArrayType(16,StringType)),param(Id(u),StringType),param(Id(_B),ArrayType(16,ArrayType(10,StringType))),param(Id(__),ArrayType(1,ArrayType(4,ArrayType(50,StringType)))),param(Id(u),ArrayType(10,ArrayType(3,BoolType))),param(Id(L),ArrayType(10,ArrayType(3,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 458))

    def test_459(self):
        line = '''Class _z95{$8(_:_;r_:_44;_2,d,r1_,_U,_:Array [String ,69];_9v79:Int ){}Val __,$_,K,$2___Z:Boolean ;Constructor (__:String ){}Destructor (){Continue ;}Destructor (){}Val $_t1:G4;}'''
        expect = '''Program([ClassDecl(Id(_z95),[MethodDecl(Id($8),Static,[param(Id(_),ClassType(Id(_))),param(Id(r_),ClassType(Id(_44))),param(Id(_2),ArrayType(69,StringType)),param(Id(d),ArrayType(69,StringType)),param(Id(r1_),ArrayType(69,StringType)),param(Id(_U),ArrayType(69,StringType)),param(Id(_),ArrayType(69,StringType)),param(Id(_9v79),IntType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(__),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(K),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($2___Z),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_t1),ClassType(Id(G4)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 459))

    def test_460(self):
        line = '''Class ys_:I{Constructor (){}Constructor (){} }Class y:a3{Val $_,$9:Int ;Var $7_,$_:String ;}Class H:_{Var _:Array [Float ,0x3E];}Class L{}Class j:a_7{Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(ys_),Id(I),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(y),Id(a3),[AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($9),IntType,None)),AttributeDecl(Static,VarDecl(Id($7_),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType))]),ClassDecl(Id(H),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(62,FloatType)))]),ClassDecl(Id(L),[]),ClassDecl(Id(j),Id(a_7),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 460))

    def test_461(self):
        line = '''Class _:__c__{}Class __Z{Constructor (Z:Array [Float ,0X7276]){}Destructor (){}Var Nw__g,$B:Array [Array [Array [Array [String ,01_2],0B1011111],022],03_6_525_5_3];}Class r5:S{}'''
        expect = '''Program([ClassDecl(Id(_),Id(__c__),[]),ClassDecl(Id(__Z),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),ArrayType(29302,FloatType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(Nw__g),ArrayType(1004907,ArrayType(18,ArrayType(95,ArrayType(10,StringType)))))),AttributeDecl(Static,VarDecl(Id($B),ArrayType(1004907,ArrayType(18,ArrayType(95,ArrayType(10,StringType))))))]),ClassDecl(Id(r5),Id(S),[])])'''
        self.assertTrue(TestAST.test(line, expect, 461))

    def test_462(self):
        line = '''Class _{}Class _{Var __,B:Y_a;Val $045W,_e,$2:Array [Boolean ,74];}Class d_u{_(){}Constructor (W,_N__Y_,W_,S:Array [Array [Array [Array [Array [Array [Array [Int ,74],74],01],0B1010111],74],0130],0x2B]){}$A8(_9v,_17,_1,_F9,_G_,x8c_:Float ;_V,_:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(Y_a)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(B),ClassType(Id(Y_a)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($045W),ArrayType(74,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_e),ArrayType(74,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(74,BoolType),None))]),ClassDecl(Id(d_u),[MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(W),ArrayType(43,ArrayType(88,ArrayType(74,ArrayType(87,ArrayType(1,ArrayType(74,ArrayType(74,IntType)))))))),param(Id(_N__Y_),ArrayType(43,ArrayType(88,ArrayType(74,ArrayType(87,ArrayType(1,ArrayType(74,ArrayType(74,IntType)))))))),param(Id(W_),ArrayType(43,ArrayType(88,ArrayType(74,ArrayType(87,ArrayType(1,ArrayType(74,ArrayType(74,IntType)))))))),param(Id(S),ArrayType(43,ArrayType(88,ArrayType(74,ArrayType(87,ArrayType(1,ArrayType(74,ArrayType(74,IntType))))))))],Block([])),MethodDecl(Id($A8),Static,[param(Id(_9v),FloatType),param(Id(_17),FloatType),param(Id(_1),FloatType),param(Id(_F9),FloatType),param(Id(_G_),FloatType),param(Id(x8c_),FloatType),param(Id(_V),StringType),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 462))

    def test_463(self):
        line = '''Class _{}Class H9_:o_{Destructor (){ {}Continue ;Var KP:_k;Continue ;Continue ;}Constructor (_,X_1,_m__Xg32J,VD_N:Array [Array [Array [String ,0b1],06],0X15]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(H9_),Id(o_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Continue,VarDecl(Id(KP),ClassType(Id(_k)),NullLiteral()),Continue,Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(21,ArrayType(6,ArrayType(1,StringType)))),param(Id(X_1),ArrayType(21,ArrayType(6,ArrayType(1,StringType)))),param(Id(_m__Xg32J),ArrayType(21,ArrayType(6,ArrayType(1,StringType)))),param(Id(VD_N),ArrayType(21,ArrayType(6,ArrayType(1,StringType))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 463))

    def test_464(self):
        line = '''Class BH{Destructor (){ {}Break ;}Destructor (){} }Class VOj_{}Class A:x{}Class B_e4:g{Constructor (_:Array [Float ,0x1B];r_00:O7c){}Val $_:Float ;Destructor (){}Constructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(BH),[MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Break])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(VOj_),[]),ClassDecl(Id(A),Id(x),[]),ClassDecl(Id(B_e4),Id(g),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(27,FloatType)),param(Id(r_00),ClassType(Id(O7c)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 464))

    def test_465(self):
        line = '''Class oP:C_{}Class _{Var $s_s,h,$_,z,v,$_,$t,$_:Array [Array [Boolean ,05_0],0XF];Var $7__d_:Array [Array [Array [Array [Array [Boolean ,0B111],050],0xA8],0X23],050]=-""._._();}'''
        expect = '''Program([ClassDecl(Id(oP),Id(C_),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($s_s),ArrayType(15,ArrayType(40,BoolType)))),AttributeDecl(Instance,VarDecl(Id(h),ArrayType(15,ArrayType(40,BoolType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(15,ArrayType(40,BoolType)))),AttributeDecl(Instance,VarDecl(Id(z),ArrayType(15,ArrayType(40,BoolType)))),AttributeDecl(Instance,VarDecl(Id(v),ArrayType(15,ArrayType(40,BoolType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(15,ArrayType(40,BoolType)))),AttributeDecl(Static,VarDecl(Id($t),ArrayType(15,ArrayType(40,BoolType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(15,ArrayType(40,BoolType)))),AttributeDecl(Static,VarDecl(Id($k),ArrayType(40,ArrayType(35,ArrayType(168,ArrayType(40,ArrayType(7,BoolType))))),UnaryOp(-,CallExpr(FieldAccess(StringLit(),Id(_)),Id(_),[]))))])])'''
        #self.assertTrue(TestAST.test(line, expect, 465))

    def test_466(self):
        line = '''Class t{}Class _{Constructor (_,u1,_:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0XE],28],0b1010001],0B1_1_1],28],0b1],04_7542],28]){}$R(_4Qz,_W_,_:Boolean ;x8Y:_;_:c2;Z3922G9,z:Boolean ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(t),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(28,ArrayType(20322,ArrayType(1,ArrayType(28,ArrayType(7,ArrayType(81,ArrayType(28,ArrayType(14,FloatType))))))))),param(Id(u1),ArrayType(28,ArrayType(20322,ArrayType(1,ArrayType(28,ArrayType(7,ArrayType(81,ArrayType(28,ArrayType(14,FloatType))))))))),param(Id(_),ArrayType(28,ArrayType(20322,ArrayType(1,ArrayType(28,ArrayType(7,ArrayType(81,ArrayType(28,ArrayType(14,FloatType)))))))))],Block([])),MethodDecl(Id($R),Static,[param(Id(_4Qz),BoolType),param(Id(_W_),BoolType),param(Id(_),BoolType),param(Id(x8Y),ClassType(Id(_))),param(Id(_),ClassType(Id(c2))),param(Id(Z3922G9),BoolType),param(Id(z),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 466))

    def test_467(self):
        line = '''Class XL:U{}Class _:_{Var _O31:Array [Array [Float ,032],0X3D];}Class l:__M{Constructor (v0,M,v_Z,__q:Float ;e_1:Boolean ;_:Int ;_5_,_H:Int ;_5,_3:String ;M:Int ){} }Class _:_{}Class _:I89{}'''
        expect = '''Program([ClassDecl(Id(XL),Id(U),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(_O31),ArrayType(61,ArrayType(26,FloatType))))]),ClassDecl(Id(l),Id(__M),[MethodDecl(Id(Constructor),Instance,[param(Id(v0),FloatType),param(Id(M),FloatType),param(Id(v_Z),FloatType),param(Id(__q),FloatType),param(Id(e_1),BoolType),param(Id(_),IntType),param(Id(_5_),IntType),param(Id(_H),IntType),param(Id(_5),StringType),param(Id(_3),StringType),param(Id(M),IntType)],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(I89),[])])'''
        self.assertTrue(TestAST.test(line, expect, 467))

    def test_468(self):
        line = '''Class _{Var i,$_,$1M:__u;Val $_0m,$0,$6,z__:Hf;}Class r:_3{Val __Y,$_4N:Boolean ;Destructor (){Continue ;{}Break ;}$M(){}Val $qM_79,$650k0y:Array [Array [Boolean ,066],066];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(i),ClassType(Id(__u)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(__u)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($1M),ClassType(Id(__u)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_0m),ClassType(Id(Hf)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(Hf)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($6),ClassType(Id(Hf)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(z__),ClassType(Id(Hf)),NullLiteral()))]),ClassDecl(Id(r),Id(_3),[AttributeDecl(Instance,ConstDecl(Id(__Y),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_4N),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Block([]),Break])),MethodDecl(Id($M),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($qM_79),ArrayType(54,ArrayType(54,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($650k0y),ArrayType(54,ArrayType(54,BoolType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 468))

    def test_469(self):
        line = '''Class Y{}Class OI:c1{}Class Y{Destructor (){}Var lr:Array [Array [Array [String ,0x53],0X33],0100];Constructor (l2:_;_:_;_o09:Boolean ;i__,x:Array [Array [Boolean ,03],94]){ {Break ;_21::$w.__S4();} }Destructor (){}Destructor (){}Constructor (){Return ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(Y),[]),ClassDecl(Id(OI),Id(c1),[]),ClassDecl(Id(Y),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(lr),ArrayType(64,ArrayType(51,ArrayType(83,StringType))))),MethodDecl(Id(Constructor),Instance,[param(Id(l2),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_o09),BoolType),param(Id(i__),ArrayType(94,ArrayType(3,BoolType))),param(Id(x),ArrayType(94,ArrayType(3,BoolType)))],Block([Block([Break,Call(FieldAccess(Id(_21),Id($w)),Id(__S4),[])])])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Return(),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 469))

    def test_470(self):
        line = '''Class s8{Constructor (c,_n,_,M___:Array [Array [Float ,0b1_0],0xF];_Q_o_:Array [String ,0B1_01];l,_:Boolean ;c:R){Val me,G_:Array [Float ,9];} }Class _5{Constructor (_yn:Array [Boolean ,0X6];__,_:Array [Float ,0B111];UK,___17:df;_:Boolean ;_Q9s:Array [Float ,30];O_,F,_,b1:Array [Boolean ,0x4];_:Array [Array [Array [Float ,30],024],03_6]){} }'''
        expect = '''Program([ClassDecl(Id(s8),[MethodDecl(Id(Constructor),Instance,[param(Id(c),ArrayType(15,ArrayType(2,FloatType))),param(Id(_n),ArrayType(15,ArrayType(2,FloatType))),param(Id(_),ArrayType(15,ArrayType(2,FloatType))),param(Id(M___),ArrayType(15,ArrayType(2,FloatType))),param(Id(_Q_o_),ArrayType(5,StringType)),param(Id(l),BoolType),param(Id(_),BoolType),param(Id(c),ClassType(Id(R)))],Block([ConstDecl(Id(me),ArrayType(9,FloatType),None),ConstDecl(Id(G_),ArrayType(9,FloatType),None)]))]),ClassDecl(Id(_5),[MethodDecl(Id(Constructor),Instance,[param(Id(_yn),ArrayType(6,BoolType)),param(Id(__),ArrayType(7,FloatType)),param(Id(_),ArrayType(7,FloatType)),param(Id(UK),ClassType(Id(df))),param(Id(___17),ClassType(Id(df))),param(Id(_),BoolType),param(Id(_Q9s),ArrayType(30,FloatType)),param(Id(O_),ArrayType(4,BoolType)),param(Id(F),ArrayType(4,BoolType)),param(Id(_),ArrayType(4,BoolType)),param(Id(b1),ArrayType(4,BoolType)),param(Id(_),ArrayType(30,ArrayType(20,ArrayType(30,FloatType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 470))

    def test_471(self):
        line = '''Class _249:zd{Destructor (){}Var _,P1,$v:Float ;}Class _3_9Ui__l_3_{__s45_Cm8i(_d:o_;_F_A_:Array [Array [Boolean ,0X6],0B1011111];sQ_E9___Y_N:Array [Boolean ,0xB_3]){} }'''
        expect = '''Program([ClassDecl(Id(_249),Id(zd),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(P1),FloatType)),AttributeDecl(Static,VarDecl(Id($v),FloatType))]),ClassDecl(Id(_3_9Ui__l_3_),[MethodDecl(Id(__s45_Cm8i),Instance,[param(Id(_d),ClassType(Id(o_))),param(Id(_F_A_),ArrayType(95,ArrayType(6,BoolType))),param(Id(sQ_E9___Y_N),ArrayType(179,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 471))

    def test_472(self):
        line = '''Class A:__{Constructor (_4_ly,_,L_,__,H9,J,R:Array [Float ,0b110001];_d_5,_,t:Array [Array [String ,02],89];_F:Boolean ){} }Class q_{Var $_3:Array [Boolean ,89];}Class _2:C1{}'''
        expect = '''Program([ClassDecl(Id(A),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_4_ly),ArrayType(49,FloatType)),param(Id(_),ArrayType(49,FloatType)),param(Id(L_),ArrayType(49,FloatType)),param(Id(__),ArrayType(49,FloatType)),param(Id(H9),ArrayType(49,FloatType)),param(Id(J),ArrayType(49,FloatType)),param(Id(R),ArrayType(49,FloatType)),param(Id(_d_5),ArrayType(89,ArrayType(2,StringType))),param(Id(_),ArrayType(89,ArrayType(2,StringType))),param(Id(t),ArrayType(89,ArrayType(2,StringType))),param(Id(_F),BoolType)],Block([]))]),ClassDecl(Id(q_),[AttributeDecl(Static,VarDecl(Id($_3),ArrayType(89,BoolType)))]),ClassDecl(Id(_2),Id(C1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 472))

    def test_473(self):
        line = '''Class Y_0x_S{}Class _PP:_{$i7kBIs_5(_e2,jG,FI2,i4m:Array [Array [Array [Array [Array [Array [Boolean ,02_06],0B10111],0B1],0B10_1_01_0_1],0x5B],7];__,__,_:Array [Boolean ,9_5]){} }'''
        expect = '''Program([ClassDecl(Id(Y_0x_S),[]),ClassDecl(Id(_PP),Id(_),[MethodDecl(Id($i7kBIs_5),Static,[param(Id(_e2),ArrayType(7,ArrayType(91,ArrayType(85,ArrayType(1,ArrayType(23,ArrayType(134,BoolType))))))),param(Id(jG),ArrayType(7,ArrayType(91,ArrayType(85,ArrayType(1,ArrayType(23,ArrayType(134,BoolType))))))),param(Id(FI2),ArrayType(7,ArrayType(91,ArrayType(85,ArrayType(1,ArrayType(23,ArrayType(134,BoolType))))))),param(Id(i4m),ArrayType(7,ArrayType(91,ArrayType(85,ArrayType(1,ArrayType(23,ArrayType(134,BoolType))))))),param(Id(__),ArrayType(95,BoolType)),param(Id(__),ArrayType(95,BoolType)),param(Id(_),ArrayType(95,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 473))

    def test_474(self):
        line = '''Class _:_{Var h:s__;Constructor (_:Boolean ){} }Class p:s6{Destructor (){} }Class dC4_{}Class XB_592:b{}Class _{Var i:Int ;$_9_l_(U__1W,C__2,_2,_,_9B:k;f1h:b){Break ;} }Class En{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(h),ClassType(Id(s__)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(p),Id(s6),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(dC4_),[]),ClassDecl(Id(XB_592),Id(b),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(i),IntType)),MethodDecl(Id($_9_l_),Static,[param(Id(U__1W),ClassType(Id(k))),param(Id(C__2),ClassType(Id(k))),param(Id(_2),ClassType(Id(k))),param(Id(_),ClassType(Id(k))),param(Id(_9B),ClassType(Id(k))),param(Id(f1h),ClassType(Id(b)))],Block([Break]))]),ClassDecl(Id(En),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 474))

    def test_475(self):
        line = '''Class _:_8{Val _u:_6;}Class Bw9d__{Val $5s,$9_1R,y__,$8_D_:_L;Var $i:_;Var _,z,_,_:String ;$l(t,_,d,_qc7:String ;_,F0:Int ;H,_m,a8_,_63,_S,k,_,_,__:Array [Array [Array [Boolean ,02],0123],0123]){}Var $_m:Int ;}Class Koq8:_D{Constructor (Jz6121:Boolean ;i:String ;p:Int ;G:k;CH_6:Int ;_X23,p2,_:D){ {Return ;}Continue ;} }Class h{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_8),[AttributeDecl(Instance,ConstDecl(Id(_u),ClassType(Id(_6)),NullLiteral()))]),ClassDecl(Id(Bw9d__),[AttributeDecl(Static,ConstDecl(Id($5s),ClassType(Id(_L)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9_1R),ClassType(Id(_L)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(y__),ClassType(Id(_L)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($8_D_),ClassType(Id(_L)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($i),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(z),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),MethodDecl(Id($l),Static,[param(Id(t),StringType),param(Id(_),StringType),param(Id(d),StringType),param(Id(_qc7),StringType),param(Id(_),IntType),param(Id(F0),IntType),param(Id(H),ArrayType(83,ArrayType(83,ArrayType(2,BoolType)))),param(Id(_m),ArrayType(83,ArrayType(83,ArrayType(2,BoolType)))),param(Id(a8_),ArrayType(83,ArrayType(83,ArrayType(2,BoolType)))),param(Id(_63),ArrayType(83,ArrayType(83,ArrayType(2,BoolType)))),param(Id(_S),ArrayType(83,ArrayType(83,ArrayType(2,BoolType)))),param(Id(k),ArrayType(83,ArrayType(83,ArrayType(2,BoolType)))),param(Id(_),ArrayType(83,ArrayType(83,ArrayType(2,BoolType)))),param(Id(_),ArrayType(83,ArrayType(83,ArrayType(2,BoolType)))),param(Id(__),ArrayType(83,ArrayType(83,ArrayType(2,BoolType))))],Block([])),AttributeDecl(Static,VarDecl(Id($_m),IntType))]),ClassDecl(Id(Koq8),Id(_D),[MethodDecl(Id(Constructor),Instance,[param(Id(Jz6121),BoolType),param(Id(i),StringType),param(Id(p),IntType),param(Id(G),ClassType(Id(k))),param(Id(CH_6),IntType),param(Id(_X23),ClassType(Id(D))),param(Id(p2),ClassType(Id(D))),param(Id(_),ClassType(Id(D)))],Block([Block([Return()]),Continue]))]),ClassDecl(Id(h),[])])'''
        self.assertTrue(TestAST.test(line, expect, 475))

    def test_476(self):
        line = '''Class VY_{Var D4,_,$I:String ;$_(_0m,_:Array [Array [Array [Array [Array [Float ,0XD],0B1],0XD],014_1_4_40_5],39];_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0xE],0B1],0X9_D_5],062],0xE],0XD],062],2];_m:Array [Array [Boolean ,0X6],0xE];_4075:Array [Array [Array [Int ,0x7],0XF],0xE]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(VY_),[AttributeDecl(Instance,VarDecl(Id(D4),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($I),StringType)),MethodDecl(Id($_),Static,[param(Id(_0m),ArrayType(39,ArrayType(399621,ArrayType(13,ArrayType(1,ArrayType(13,FloatType)))))),param(Id(_),ArrayType(39,ArrayType(399621,ArrayType(13,ArrayType(1,ArrayType(13,FloatType)))))),param(Id(_),ArrayType(2,ArrayType(50,ArrayType(13,ArrayType(14,ArrayType(50,ArrayType(2517,ArrayType(1,ArrayType(14,IntType))))))))),param(Id(_m),ArrayType(14,ArrayType(6,BoolType))),param(Id(_4075),ArrayType(14,ArrayType(15,ArrayType(7,IntType))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 476))

    def test_477(self):
        line = '''Class u5:__00{Constructor (_:Float ;T:String ;BmV4,_2,_k,_,v:Array [Float ,0b1];f,zN:Array [String ,9_2_90]){}$9(){} }Class _:_oD__2927_{Var __:Float ;Val $y:Int ;Constructor (y,zf,_,_:_d9_;_:_X){}Val C:v_W_40;}'''
        expect = '''Program([ClassDecl(Id(u5),Id(__00),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(T),StringType),param(Id(BmV4),ArrayType(1,FloatType)),param(Id(_2),ArrayType(1,FloatType)),param(Id(_k),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(v),ArrayType(1,FloatType)),param(Id(f),ArrayType(9290,StringType)),param(Id(zN),ArrayType(9290,StringType))],Block([])),MethodDecl(Id($9),Static,[],Block([]))]),ClassDecl(Id(_),Id(_oD__2927_),[AttributeDecl(Instance,VarDecl(Id(__),FloatType)),AttributeDecl(Static,ConstDecl(Id($y),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(y),ClassType(Id(_d9_))),param(Id(zf),ClassType(Id(_d9_))),param(Id(_),ClassType(Id(_d9_))),param(Id(_),ClassType(Id(_d9_))),param(Id(_),ClassType(Id(_X)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(C),ClassType(Id(v_W_40)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 477))

    def test_478(self):
        line = '''Class _17I:___{}Class vw_{}Class JD{Destructor (){Break ;} }Class jz4_3:Pt{Val $_,$S0_,$O,$N,_7:Array [Array [String ,0114],0b10];Destructor (){}Constructor (){Break ;}Val g_,_:Int ;}'''
        expect = '''Program([ClassDecl(Id(_17I),Id(___),[]),ClassDecl(Id(vw_),[]),ClassDecl(Id(JD),[MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(jz4_3),Id(Pt),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(2,ArrayType(76,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($S0_),ArrayType(2,ArrayType(76,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($O),ArrayType(2,ArrayType(76,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($N),ArrayType(2,ArrayType(76,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_7),ArrayType(2,ArrayType(76,StringType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(g_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 478))

    def test_479(self):
        line = '''Class B71:ui_Jzp{Var $kv9,$G8:Array [Array [Array [Array [Array [Int ,03],4],046],0B1_0],07];}Class c184:_6{$_C(_,q,b12:Array [String ,0B101001]){_0::$_.___._();Break ;} }'''
        expect = '''Program([ClassDecl(Id(B71),Id(ui_Jzp),[AttributeDecl(Static,VarDecl(Id($kv9),ArrayType(7,ArrayType(2,ArrayType(38,ArrayType(4,ArrayType(3,IntType))))))),AttributeDecl(Static,VarDecl(Id($G8),ArrayType(7,ArrayType(2,ArrayType(38,ArrayType(4,ArrayType(3,IntType)))))))]),ClassDecl(Id(c184),Id(_6),[MethodDecl(Id($_C),Static,[param(Id(_),ArrayType(41,StringType)),param(Id(q),ArrayType(41,StringType)),param(Id(b12),ArrayType(41,StringType))],Block([Call(FieldAccess(FieldAccess(Id(_0),Id($_)),Id(___)),Id(_),[]),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 479))

    def test_480(self):
        line = '''Class __:_m{Destructor (){}Var $I:_55;Val l,$s:Int ;Val I:Array [Array [Array [Array [Array [Array [Array [Float ,0b1_00],4],0b101011],0b101011],0B1],02],0XD_8_5];}Class _1:T{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_m),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($I),ClassType(Id(_55)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(l),IntType,None)),AttributeDecl(Static,ConstDecl(Id($s),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(I),ArrayType(3461,ArrayType(2,ArrayType(1,ArrayType(43,ArrayType(43,ArrayType(4,ArrayType(4,FloatType))))))),None))]),ClassDecl(Id(_1),Id(T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 480))

    def test_481(self):
        line = '''Class _{Var $P,F:Array [Array [Array [Array [Array [Int ,0xB],0B110001],6_8],10],5_5];Constructor (){Break ;}Constructor (){Continue ;}Yr(){}Constructor (b,_J:Int ){} }Class _D:_{Constructor (){ {} }Val _:V__;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($P),ArrayType(55,ArrayType(10,ArrayType(68,ArrayType(49,ArrayType(11,IntType))))))),AttributeDecl(Instance,VarDecl(Id(F),ArrayType(55,ArrayType(10,ArrayType(68,ArrayType(49,ArrayType(11,IntType))))))),MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Yr),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(b),IntType),param(Id(_J),IntType)],Block([]))]),ClassDecl(Id(_D),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Block([])])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(V__)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 481))

    def test_482(self):
        line = '''Class g__2:_G_M{}Class __{Constructor (Q,a:Array [Int ,0xD];_:_;u552:_;__:N;f,BR7,r:T;_:_3;o:Array [Boolean ,0b1011000]){Break ;{}Return ;Var __,s_:Float ;} }Class _1S:P_j{}'''
        expect = '''Program([ClassDecl(Id(g__2),Id(_G_M),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(Q),ArrayType(13,IntType)),param(Id(a),ArrayType(13,IntType)),param(Id(_),ClassType(Id(_))),param(Id(u552),ClassType(Id(_))),param(Id(__),ClassType(Id(N))),param(Id(f),ClassType(Id(T))),param(Id(BR7),ClassType(Id(T))),param(Id(r),ClassType(Id(T))),param(Id(_),ClassType(Id(_3))),param(Id(o),ArrayType(88,BoolType))],Block([Break,Block([]),Return(),VarDecl(Id(__),FloatType),VarDecl(Id(s_),FloatType)]))]),ClassDecl(Id(_1S),Id(P_j),[])])'''
        self.assertTrue(TestAST.test(line, expect, 482))

    def test_483(self):
        line = '''Class _0I{Destructor (){}$X(Km__qW,J,_8,o4:Array [Array [Array [Float ,0b1010000],0b1010000],3]){}Var _:c_;$_(__:Array [Array [Array [Boolean ,0X61],0B1],043_6_6]){} }Class fX{}'''
        expect = '''Program([ClassDecl(Id(_0I),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($X),Static,[param(Id(Km__qW),ArrayType(3,ArrayType(80,ArrayType(80,FloatType)))),param(Id(J),ArrayType(3,ArrayType(80,ArrayType(80,FloatType)))),param(Id(_8),ArrayType(3,ArrayType(80,ArrayType(80,FloatType)))),param(Id(o4),ArrayType(3,ArrayType(80,ArrayType(80,FloatType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(c_)),NullLiteral())),MethodDecl(Id($_),Static,[param(Id(__),ArrayType(2294,ArrayType(1,ArrayType(97,BoolType))))],Block([]))]),ClassDecl(Id(fX),[])])'''
        self.assertTrue(TestAST.test(line, expect, 483))

    def test_484(self):
        line = '''Class MUr2_{Constructor (){}__(Q_:_){Val U_d:String ;} }Class _f:_3_5__728{Var __,$9:Array [Array [Array [Array [Array [Array [Boolean ,0b1],0x7],0X3],99],05_5],0b1];_(){} }Class _:b6{}'''
        expect = '''Program([ClassDecl(Id(MUr2_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(__),Instance,[param(Id(Q_),ClassType(Id(_)))],Block([ConstDecl(Id(U_d),StringType,None)]))]),ClassDecl(Id(_f),Id(_3_5__728),[AttributeDecl(Instance,VarDecl(Id(__),ArrayType(1,ArrayType(45,ArrayType(99,ArrayType(3,ArrayType(7,ArrayType(1,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($9),ArrayType(1,ArrayType(45,ArrayType(99,ArrayType(3,ArrayType(7,ArrayType(1,BoolType)))))))),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(_),Id(b6),[])])'''
        self.assertTrue(TestAST.test(line, expect, 484))

    def test_485(self):
        line = '''Class I{Constructor (_,LN,_:String ){Continue ;Continue ;}Constructor (a,S,_:Array [Array [Array [Boolean ,043],80],0x7]){}Var $3:_;Constructor (G,_,M,s:Array [Array [Array [Array [Int ,0b1],0X4_9_E_8_1],80],02_2];_,K:Array [Int ,01]){}Var $_5:M_;}'''
        expect = '''Program([ClassDecl(Id(I),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(LN),StringType),param(Id(_),StringType)],Block([Continue,Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(a),ArrayType(7,ArrayType(80,ArrayType(35,BoolType)))),param(Id(S),ArrayType(7,ArrayType(80,ArrayType(35,BoolType)))),param(Id(_),ArrayType(7,ArrayType(80,ArrayType(35,BoolType))))],Block([])),AttributeDecl(Static,VarDecl(Id($3),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(G),ArrayType(18,ArrayType(80,ArrayType(302721,ArrayType(1,IntType))))),param(Id(_),ArrayType(18,ArrayType(80,ArrayType(302721,ArrayType(1,IntType))))),param(Id(M),ArrayType(18,ArrayType(80,ArrayType(302721,ArrayType(1,IntType))))),param(Id(s),ArrayType(18,ArrayType(80,ArrayType(302721,ArrayType(1,IntType))))),param(Id(_),ArrayType(1,IntType)),param(Id(K),ArrayType(1,IntType))],Block([])),AttributeDecl(Static,VarDecl(Id($_5),ClassType(Id(M_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 485))

    def test_486(self):
        line = '''Class W:Lp9_{}Class _{Var $E:Array [String ,0110];}Class _P0{Constructor (sa,_,_0Pq8,U:_4_3;_e:Array [Array [Int ,03_7_6],0b101011];z:Float ;_,_,_t:Array [String ,0b101011];H:Array [String ,0110]){} }'''
        expect = '''Program([ClassDecl(Id(W),Id(Lp9_),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($E),ArrayType(72,StringType)))]),ClassDecl(Id(_P0),[MethodDecl(Id(Constructor),Instance,[param(Id(sa),ClassType(Id(_4_3))),param(Id(_),ClassType(Id(_4_3))),param(Id(_0Pq8),ClassType(Id(_4_3))),param(Id(U),ClassType(Id(_4_3))),param(Id(_e),ArrayType(43,ArrayType(254,IntType))),param(Id(z),FloatType),param(Id(_),ArrayType(43,StringType)),param(Id(_),ArrayType(43,StringType)),param(Id(_t),ArrayType(43,StringType)),param(Id(H),ArrayType(72,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 486))

    def test_487(self):
        line = '''Class _3_2_:_{g(v_,_F1R_,Vp90:Array [Array [Array [Array [Int ,03],0X44],0X44],055];X,J,_u_14,_86t_____:_87a;_,_,_:F;G:Array [Boolean ,074_4]){}Var $_,$B:Array [Array [Int ,6439],03];}Class gd:O{}'''
        expect = '''Program([ClassDecl(Id(_3_2_),Id(_),[MethodDecl(Id(g),Instance,[param(Id(v_),ArrayType(45,ArrayType(68,ArrayType(68,ArrayType(3,IntType))))),param(Id(_F1R_),ArrayType(45,ArrayType(68,ArrayType(68,ArrayType(3,IntType))))),param(Id(Vp90),ArrayType(45,ArrayType(68,ArrayType(68,ArrayType(3,IntType))))),param(Id(X),ClassType(Id(_87a))),param(Id(J),ClassType(Id(_87a))),param(Id(_u_14),ClassType(Id(_87a))),param(Id(_86t_____),ClassType(Id(_87a))),param(Id(_),ClassType(Id(F))),param(Id(_),ClassType(Id(F))),param(Id(_),ClassType(Id(F))),param(Id(G),ArrayType(484,BoolType))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,ArrayType(6439,IntType)))),AttributeDecl(Static,VarDecl(Id($B),ArrayType(3,ArrayType(6439,IntType))))]),ClassDecl(Id(gd),Id(O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 487))

    def test_488(self):
        line = '''Class _w{}Class h_:M_{Val M:Array [Boolean ,0X5A];Var $_0O:Array [Array [Array [Array [String ,98],02],0b1],0X5A];}Class _:_{Var $_:_;Constructor (E,_,Q0:Array [Array [Array [String ,4_93_1],45_0],0B110];J,M:Array [String ,07_21_0];_:Array [Array [Int ,0X5A],06];j5,_5_2_D,_w:Array [Array [Array [Array [Array [String ,023],06],023],9],05_5]){}Destructor (){Break ;{Break ;} }Var __,_,$_0,$_r6,_:Float ;}Class _:_8MeX18{}'''
        expect = '''Program([ClassDecl(Id(_w),[]),ClassDecl(Id(h_),Id(M_),[AttributeDecl(Instance,ConstDecl(Id(M),ArrayType(90,BoolType),None)),AttributeDecl(Static,VarDecl(Id($_0O),ArrayType(90,ArrayType(1,ArrayType(2,ArrayType(98,StringType))))))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(E),ArrayType(6,ArrayType(450,ArrayType(4931,StringType)))),param(Id(_),ArrayType(6,ArrayType(450,ArrayType(4931,StringType)))),param(Id(Q0),ArrayType(6,ArrayType(450,ArrayType(4931,StringType)))),param(Id(J),ArrayType(3720,StringType)),param(Id(M),ArrayType(3720,StringType)),param(Id(_),ArrayType(6,ArrayType(90,IntType))),param(Id(j5),ArrayType(45,ArrayType(9,ArrayType(19,ArrayType(6,ArrayType(19,StringType)))))),param(Id(_5_2_D),ArrayType(45,ArrayType(9,ArrayType(19,ArrayType(6,ArrayType(19,StringType)))))),param(Id(_w),ArrayType(45,ArrayType(9,ArrayType(19,ArrayType(6,ArrayType(19,StringType))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break,Block([Break])])),AttributeDecl(Instance,VarDecl(Id(__),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Static,VarDecl(Id($_0),FloatType)),AttributeDecl(Static,VarDecl(Id($_r6),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType))]),ClassDecl(Id(_),Id(_8MeX18),[])])'''
        self.assertTrue(TestAST.test(line, expect, 488))

    def test_489(self):
        line = '''Class _l_:_5{}Class H9_v{Constructor (_:__;K,_,__:Array [Array [Array [Array [Array [String ,0B10],0B10100],3_2_0],0b10_1],050];_31_T_2,___,m:Array [Float ,051];_,_:Array [Boolean ,0b1]){Continue ;{} }Var $_:_;}Class __6{Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_l_),Id(_5),[]),ClassDecl(Id(H9_v),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__))),param(Id(K),ArrayType(40,ArrayType(5,ArrayType(320,ArrayType(20,ArrayType(2,StringType)))))),param(Id(_),ArrayType(40,ArrayType(5,ArrayType(320,ArrayType(20,ArrayType(2,StringType)))))),param(Id(__),ArrayType(40,ArrayType(5,ArrayType(320,ArrayType(20,ArrayType(2,StringType)))))),param(Id(_31_T_2),ArrayType(41,FloatType)),param(Id(___),ArrayType(41,FloatType)),param(Id(m),ArrayType(41,FloatType)),param(Id(_),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType))],Block([Continue,Block([])])),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(__6),[MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 489))

    def test_490(self):
        line = '''Class _:j{Constructor (q__M,_:Array [String ,0B1100011];Oi:_vs;g,L:Array [Array [Array [Array [Boolean ,0x7],0X48_2],30],30];l_5d,f,y,Y,om,DE:r_3F){} }Class e6_7{Constructor (o9,s,_1:Array [Float ,16]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(j),[MethodDecl(Id(Constructor),Instance,[param(Id(q__M),ArrayType(99,StringType)),param(Id(_),ArrayType(99,StringType)),param(Id(Oi),ClassType(Id(_vs))),param(Id(g),ArrayType(30,ArrayType(30,ArrayType(1154,ArrayType(7,BoolType))))),param(Id(L),ArrayType(30,ArrayType(30,ArrayType(1154,ArrayType(7,BoolType))))),param(Id(l_5d),ClassType(Id(r_3F))),param(Id(f),ClassType(Id(r_3F))),param(Id(y),ClassType(Id(r_3F))),param(Id(Y),ClassType(Id(r_3F))),param(Id(om),ClassType(Id(r_3F))),param(Id(DE),ClassType(Id(r_3F)))],Block([]))]),ClassDecl(Id(e6_7),[MethodDecl(Id(Constructor),Instance,[param(Id(o9),ArrayType(16,FloatType)),param(Id(s),ArrayType(16,FloatType)),param(Id(_1),ArrayType(16,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 490))

    def test_491(self):
        line = '''Class _{}Class _y_YN:_A{Constructor (_:_;QH,_0,_,______,U,U_:_;_:Array [Boolean ,046]){}Constructor (_:Array [Int ,0X49]){}Var E:An;Val $0_,$v_5:Array [Boolean ,63];}Class _{Constructor (){}Var B,$D7:___o;Val $1:String ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_y_YN),Id(_A),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(QH),ClassType(Id(_))),param(Id(_0),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(______),ClassType(Id(_))),param(Id(U),ClassType(Id(_))),param(Id(U_),ClassType(Id(_))),param(Id(_),ArrayType(38,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(73,IntType))],Block([])),AttributeDecl(Instance,VarDecl(Id(E),ClassType(Id(An)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($0_),ArrayType(63,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($v_5),ArrayType(63,BoolType),None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(B),ClassType(Id(___o)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($D7),ClassType(Id(___o)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($1),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 491))

    def test_492(self):
        line = '''Class __{Val $8:Boolean ;$5q7(w,d,V80_:Array [Int ,0x4A];T,_2_,r,_:_;_z_04t:_;_,v04F,_:Array [Float ,0x4A]){}Destructor (){I_n6::$M();}Val $_6:Array [Array [Boolean ,0b1],0XD3];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($8),BoolType,None)),MethodDecl(Id($5q7),Static,[param(Id(w),ArrayType(74,IntType)),param(Id(d),ArrayType(74,IntType)),param(Id(V80_),ArrayType(74,IntType)),param(Id(T),ClassType(Id(_))),param(Id(_2_),ClassType(Id(_))),param(Id(r),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_z_04t),ClassType(Id(_))),param(Id(_),ArrayType(74,FloatType)),param(Id(v04F),ArrayType(74,FloatType)),param(Id(_),ArrayType(74,FloatType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(I_n6),Id($M),[])])),AttributeDecl(Static,ConstDecl(Id($_6),ArrayType(211,ArrayType(1,BoolType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 492))

    def test_493(self):
        line = '''Class _:_p{}Class _:A_5_{Destructor (){N1_Z::$__();} }Class x:_{Destructor (){}Constructor (A1__,s:y;_8:Array [Boolean ,030];m:Array [Array [Array [Boolean ,0x22],2],91];XN,_i,_,___B:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_p),[]),ClassDecl(Id(_),Id(A_5_),[MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(N1_Z),Id($__),[])]))]),ClassDecl(Id(x),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(A1__),ClassType(Id(y))),param(Id(s),ClassType(Id(y))),param(Id(_8),ArrayType(24,BoolType)),param(Id(m),ArrayType(91,ArrayType(2,ArrayType(34,BoolType)))),param(Id(XN),BoolType),param(Id(_i),BoolType),param(Id(_),BoolType),param(Id(___B),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 493))

    def test_494(self):
        line = '''Class t{Constructor (E7:String ;d_:J;_Ehqz:A6Z){}Destructor (){}Constructor (d,N,_,xJK:Int ;C02q:_;h_:Array [Array [Array [Array [Float ,56],0126],0X28],0x56];_2,L,Y:Y;D76_:Boolean ;_l,K,F:_){}ns_(){}Destructor (){} }Class LR1{Var _8,_,__y:Float ;}'''
        expect = '''Program([ClassDecl(Id(t),[MethodDecl(Id(Constructor),Instance,[param(Id(E7),StringType),param(Id(d_),ClassType(Id(J))),param(Id(_Ehqz),ClassType(Id(A6Z)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(d),IntType),param(Id(N),IntType),param(Id(_),IntType),param(Id(xJK),IntType),param(Id(C02q),ClassType(Id(_))),param(Id(h_),ArrayType(86,ArrayType(40,ArrayType(86,ArrayType(56,FloatType))))),param(Id(_2),ClassType(Id(Y))),param(Id(L),ClassType(Id(Y))),param(Id(Y),ClassType(Id(Y))),param(Id(D76_),BoolType),param(Id(_l),ClassType(Id(_))),param(Id(K),ClassType(Id(_))),param(Id(F),ClassType(Id(_)))],Block([])),MethodDecl(Id(ns_),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(LR1),[AttributeDecl(Instance,VarDecl(Id(_8),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(__y),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 494))

    def test_495(self):
        line = '''Class _{}Class _:r{Constructor (M:String ;E,G_,_,_i_:Array [Array [Array [Boolean ,0B10000],3_6],0x1_4];Z,W9,B:Array [Array [Array [Array [Array [String ,0B10000],075],1],0X4_1_F],0x12]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(r),[MethodDecl(Id(Constructor),Instance,[param(Id(M),StringType),param(Id(E),ArrayType(20,ArrayType(36,ArrayType(16,BoolType)))),param(Id(G_),ArrayType(20,ArrayType(36,ArrayType(16,BoolType)))),param(Id(_),ArrayType(20,ArrayType(36,ArrayType(16,BoolType)))),param(Id(_i_),ArrayType(20,ArrayType(36,ArrayType(16,BoolType)))),param(Id(Z),ArrayType(18,ArrayType(1055,ArrayType(1,ArrayType(61,ArrayType(16,StringType)))))),param(Id(W9),ArrayType(18,ArrayType(1055,ArrayType(1,ArrayType(61,ArrayType(16,StringType)))))),param(Id(B),ArrayType(18,ArrayType(1055,ArrayType(1,ArrayType(61,ArrayType(16,StringType))))))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 495))

    def test_496(self):
        line = '''Class R_{Val $_5,P__,_7_,_3,_:Array [Array [Array [Float ,0B1],0xD],53];Constructor (_,___,_i6,K,_R,j:String ;_9n,_i:J_8;__,_184__,_,x_97,wz_,_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0x7],0X9],0b110101],07_3],0xE],0b1],054],0XD],054],0X12];v,I:W){} }'''
        expect = '''Program([ClassDecl(Id(R_),[AttributeDecl(Static,ConstDecl(Id($_5),ArrayType(53,ArrayType(13,ArrayType(1,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(P__),ArrayType(53,ArrayType(13,ArrayType(1,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_7_),ArrayType(53,ArrayType(13,ArrayType(1,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_3),ArrayType(53,ArrayType(13,ArrayType(1,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(53,ArrayType(13,ArrayType(1,FloatType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(___),StringType),param(Id(_i6),StringType),param(Id(K),StringType),param(Id(_R),StringType),param(Id(j),StringType),param(Id(_9n),ClassType(Id(J_8))),param(Id(_i),ClassType(Id(J_8))),param(Id(__),ArrayType(18,ArrayType(44,ArrayType(13,ArrayType(44,ArrayType(1,ArrayType(14,ArrayType(59,ArrayType(53,ArrayType(9,ArrayType(7,FloatType))))))))))),param(Id(_184__),ArrayType(18,ArrayType(44,ArrayType(13,ArrayType(44,ArrayType(1,ArrayType(14,ArrayType(59,ArrayType(53,ArrayType(9,ArrayType(7,FloatType))))))))))),param(Id(_),ArrayType(18,ArrayType(44,ArrayType(13,ArrayType(44,ArrayType(1,ArrayType(14,ArrayType(59,ArrayType(53,ArrayType(9,ArrayType(7,FloatType))))))))))),param(Id(x_97),ArrayType(18,ArrayType(44,ArrayType(13,ArrayType(44,ArrayType(1,ArrayType(14,ArrayType(59,ArrayType(53,ArrayType(9,ArrayType(7,FloatType))))))))))),param(Id(wz_),ArrayType(18,ArrayType(44,ArrayType(13,ArrayType(44,ArrayType(1,ArrayType(14,ArrayType(59,ArrayType(53,ArrayType(9,ArrayType(7,FloatType))))))))))),param(Id(_),ArrayType(18,ArrayType(44,ArrayType(13,ArrayType(44,ArrayType(1,ArrayType(14,ArrayType(59,ArrayType(53,ArrayType(9,ArrayType(7,FloatType))))))))))),param(Id(v),ClassType(Id(W))),param(Id(I),ClassType(Id(W)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 496))

    def test_497(self):
        line = '''Class q{Var $t:Float ;S(_S:_){}$Q_(a:f;X,_8,K:_;_:Array [Boolean ,23]){}Var _:Array [Array [String ,070],0XB];Val U2I,_f,$_,$_:Boolean ;Var uN_4,_5,$_,$_:n;$x(L,o2_:__Y;S:Array [Boolean ,0xA_B_2F_25_9];tVN:E){}Destructor (){Continue ;}_(_v:__g){} }'''
        expect = '''Program([ClassDecl(Id(q),[AttributeDecl(Static,VarDecl(Id($t),FloatType)),MethodDecl(Id(S),Instance,[param(Id(_S),ClassType(Id(_)))],Block([])),MethodDecl(Id($Q_),Static,[param(Id(a),ClassType(Id(f))),param(Id(X),ClassType(Id(_))),param(Id(_8),ClassType(Id(_))),param(Id(K),ClassType(Id(_))),param(Id(_),ArrayType(23,BoolType))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(11,ArrayType(56,StringType)))),AttributeDecl(Instance,ConstDecl(Id(U2I),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_f),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(uN_4),ClassType(Id(n)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_5),ClassType(Id(n)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(n)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(n)),NullLiteral())),MethodDecl(Id($x),Static,[param(Id(L),ClassType(Id(__Y))),param(Id(o2_),ClassType(Id(__Y))),param(Id(S),ArrayType(179499609,BoolType)),param(Id(tVN),ClassType(Id(E)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(_),Instance,[param(Id(_v),ClassType(Id(__g)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 497))

    def test_498(self):
        line = '''Class _k:D__{Val Ox_,$6934_IJ:Float ;Val $2_6,$_,$q1Mc,$_:Boolean ;Var N_3,$7Mw3553:Array [Array [Array [Array [Array [Boolean ,0x16],0B1],0B1010000],0123],05];Val $3C,L_,_:Boolean ;Var $_,$_:Array [String ,0B1010000];}'''
        expect = '''Program([ClassDecl(Id(_k),Id(D__),[AttributeDecl(Instance,ConstDecl(Id(Ox_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($6934_IJ),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($2_6),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($q1Mc),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(N_3),ArrayType(5,ArrayType(83,ArrayType(80,ArrayType(1,ArrayType(22,BoolType))))))),AttributeDecl(Static,VarDecl(Id($7Mw3553),ArrayType(5,ArrayType(83,ArrayType(80,ArrayType(1,ArrayType(22,BoolType))))))),AttributeDecl(Static,ConstDecl(Id($3C),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(L_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(80,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(80,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 498))

    def test_499(self):
        line = '''Class K_{Var $l,$Q:String ;Val $_,__:Int ;}Class o{Val $03wf,$dwh6,$bJR,$_:F;Val _2,_7:Array [Array [Int ,0b1],0XA];Var __,$764,k2,_I80N_7g,n:Int ;}Class k{}Class _:___{}'''
        expect = '''Program([ClassDecl(Id(K_),[AttributeDecl(Static,VarDecl(Id($l),StringType)),AttributeDecl(Static,VarDecl(Id($Q),StringType)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(__),IntType,None))]),ClassDecl(Id(o),[AttributeDecl(Static,ConstDecl(Id($03wf),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($dwh6),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($bJR),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(F)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_2),ArrayType(10,ArrayType(1,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_7),ArrayType(10,ArrayType(1,IntType)),None)),AttributeDecl(Instance,VarDecl(Id(__),IntType)),AttributeDecl(Static,VarDecl(Id($764),IntType)),AttributeDecl(Instance,VarDecl(Id(k2),IntType)),AttributeDecl(Instance,VarDecl(Id(_I80N_7g),IntType)),AttributeDecl(Instance,VarDecl(Id(n),IntType))]),ClassDecl(Id(k),[]),ClassDecl(Id(_),Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 499))

    def test_500(self):
        line = '''Class _{Var _:Array [Array [Array [Int ,0B11],071],061];}Class MU:_7{Var $n3,_:Int ;Constructor (y,J,i,_:h){} }Class V{Destructor (){}Var $Z9q1:Array [Array [Array [Array [Array [Array [Int ,071],0x33],65],0x33],020],0B1000];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(49,ArrayType(57,ArrayType(3,IntType)))))]),ClassDecl(Id(MU),Id(_7),[AttributeDecl(Static,VarDecl(Id($n3),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(y),ClassType(Id(h))),param(Id(J),ClassType(Id(h))),param(Id(i),ClassType(Id(h))),param(Id(_),ClassType(Id(h)))],Block([]))]),ClassDecl(Id(V),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($Z9q1),ArrayType(8,ArrayType(16,ArrayType(51,ArrayType(65,ArrayType(51,ArrayType(57,IntType))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 500))

    def test_501(self):
        line = '''Class z{Val $P:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0X26_B_4],012],05],0B10000],012],0XE],0B10000],0b1],0x58];}Class _:X{}Class _{}Class X_267:I{}'''
        expect = '''Program([ClassDecl(Id(z),[AttributeDecl(Static,ConstDecl(Id($P),ArrayType(88,ArrayType(1,ArrayType(16,ArrayType(14,ArrayType(10,ArrayType(16,ArrayType(5,ArrayType(10,ArrayType(9908,BoolType))))))))),None))]),ClassDecl(Id(_),Id(X),[]),ClassDecl(Id(_),[]),ClassDecl(Id(X_267),Id(I),[])])'''
        self.assertTrue(TestAST.test(line, expect, 501))

    def test_502(self):
        line = '''Class O:P_8{Destructor (){} }Class e:__y{Var $_:x;}Class H_{Constructor (M:Array [Array [Float ,021],0x9]){} }Class T{Var _e6s:Array [String ,0xF];Var $j,$7___8_V2,$i:Array [Array [Array [Array [Array [Float ,0X33],021],2_0],0x5],72];Var D_1V:Float ;Var $__,_6:_8;Val _,$6:Array [String ,02];}'''
        expect = '''Program([ClassDecl(Id(O),Id(P_8),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(e),Id(__y),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(x)),NullLiteral()))]),ClassDecl(Id(H_),[MethodDecl(Id(Constructor),Instance,[param(Id(M),ArrayType(9,ArrayType(17,FloatType)))],Block([]))]),ClassDecl(Id(T),[AttributeDecl(Instance,VarDecl(Id(_e6s),ArrayType(15,StringType))),AttributeDecl(Static,VarDecl(Id($j),ArrayType(72,ArrayType(5,ArrayType(20,ArrayType(17,ArrayType(51,FloatType))))))),AttributeDecl(Static,VarDecl(Id($7___8_V2),ArrayType(72,ArrayType(5,ArrayType(20,ArrayType(17,ArrayType(51,FloatType))))))),AttributeDecl(Static,VarDecl(Id($i),ArrayType(72,ArrayType(5,ArrayType(20,ArrayType(17,ArrayType(51,FloatType))))))),AttributeDecl(Instance,VarDecl(Id(D_1V),FloatType)),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_8)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_6),ClassType(Id(_8)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,StringType),None)),AttributeDecl(Static,ConstDecl(Id($6),ArrayType(2,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 502))

    def test_503(self):
        line = '''Class _f{Var _:_;Constructor (__9_,_8_,A_7:Boolean ;D_,_5_O,__EsB,_:_w;_:Float ){Return ;}_(h6,W,D1,j5,_:Array [String ,0x3F];K2,m,jt_:Array [Array [Array [String ,0X14],1],070];_,_0___:Array [Array [Array [Int ,0b1010100],0B1000011],0b1010100]){} }Class r__3:_{Var $_,y_:Boolean ;Constructor (_t_,D:F11S;M,o_:__){} }'''
        expect = '''Program([ClassDecl(Id(_f),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(__9_),BoolType),param(Id(_8_),BoolType),param(Id(A_7),BoolType),param(Id(D_),ClassType(Id(_w))),param(Id(_5_O),ClassType(Id(_w))),param(Id(__EsB),ClassType(Id(_w))),param(Id(_),ClassType(Id(_w))),param(Id(_),FloatType)],Block([Return()])),MethodDecl(Id(_),Instance,[param(Id(h6),ArrayType(63,StringType)),param(Id(W),ArrayType(63,StringType)),param(Id(D1),ArrayType(63,StringType)),param(Id(j5),ArrayType(63,StringType)),param(Id(_),ArrayType(63,StringType)),param(Id(K2),ArrayType(56,ArrayType(1,ArrayType(20,StringType)))),param(Id(m),ArrayType(56,ArrayType(1,ArrayType(20,StringType)))),param(Id(jt_),ArrayType(56,ArrayType(1,ArrayType(20,StringType)))),param(Id(_),ArrayType(84,ArrayType(67,ArrayType(84,IntType)))),param(Id(_0___),ArrayType(84,ArrayType(67,ArrayType(84,IntType))))],Block([]))]),ClassDecl(Id(r__3),Id(_),[AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(y_),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(_t_),ClassType(Id(F11S))),param(Id(D),ClassType(Id(F11S))),param(Id(M),ClassType(Id(__))),param(Id(o_),ClassType(Id(__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 503))

    def test_504(self):
        line = '''Class F4:Ek{}Class _DY{}Class _:I{Var _,$0_:Array [Array [String ,0xE],03];}Class u{$F(__y,l,_:_0;_B_:Array [Array [Boolean ,03],0X9];z47Pd_:String ;_,_5__:R;_,_,__:Array [Array [Array [Array [Boolean ,0656_4_0_0],0141],0x71],6]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(F4),Id(Ek),[]),ClassDecl(Id(_DY),[]),ClassDecl(Id(_),Id(I),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(14,StringType)))),AttributeDecl(Static,VarDecl(Id($0_),ArrayType(3,ArrayType(14,StringType))))]),ClassDecl(Id(u),[MethodDecl(Id($F),Static,[param(Id(__y),ClassType(Id(_0))),param(Id(l),ClassType(Id(_0))),param(Id(_),ClassType(Id(_0))),param(Id(_B_),ArrayType(9,ArrayType(3,BoolType))),param(Id(z47Pd_),StringType),param(Id(_),ClassType(Id(R))),param(Id(_5__),ClassType(Id(R))),param(Id(_),ArrayType(6,ArrayType(113,ArrayType(97,ArrayType(220416,BoolType))))),param(Id(_),ArrayType(6,ArrayType(113,ArrayType(97,ArrayType(220416,BoolType))))),param(Id(__),ArrayType(6,ArrayType(113,ArrayType(97,ArrayType(220416,BoolType)))))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 504))

    def test_505(self):
        line = '''Class Q:_94{Val $5:Array [Array [Float ,05],91];}Class r:_S__{_(_ty:Array [Array [Array [Int ,91],0B10],91]){Continue ;}$9_(_:String ){}Constructor (){}Var _82_:yIV;}Class o{}'''
        expect = '''Program([ClassDecl(Id(Q),Id(_94),[AttributeDecl(Static,ConstDecl(Id($5),ArrayType(91,ArrayType(5,FloatType)),None))]),ClassDecl(Id(r),Id(_S__),[MethodDecl(Id(_),Instance,[param(Id(_ty),ArrayType(91,ArrayType(2,ArrayType(91,IntType))))],Block([Continue])),MethodDecl(Id($9_),Static,[param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_82_),ClassType(Id(yIV)),NullLiteral()))]),ClassDecl(Id(o),[])])'''
        self.assertTrue(TestAST.test(line, expect, 505))

    def test_506(self):
        line = '''Class X_b{Constructor (_:Int ;g,_9:Int ;P,Kz,___,j9:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0XAB],0X9_E],1_4_5],10_70],0X27],5],020],05];_:_90_6__;_:Array [String ,99];y_:String ;__:Boolean ;l,F4_7_,_O:Int ;_:Array [Boolean ,0x99_4]){} }Class _{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(X_b),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(g),IntType),param(Id(_9),IntType),param(Id(P),ArrayType(5,ArrayType(16,ArrayType(5,ArrayType(39,ArrayType(1070,ArrayType(145,ArrayType(158,ArrayType(171,BoolType))))))))),param(Id(Kz),ArrayType(5,ArrayType(16,ArrayType(5,ArrayType(39,ArrayType(1070,ArrayType(145,ArrayType(158,ArrayType(171,BoolType))))))))),param(Id(___),ArrayType(5,ArrayType(16,ArrayType(5,ArrayType(39,ArrayType(1070,ArrayType(145,ArrayType(158,ArrayType(171,BoolType))))))))),param(Id(j9),ArrayType(5,ArrayType(16,ArrayType(5,ArrayType(39,ArrayType(1070,ArrayType(145,ArrayType(158,ArrayType(171,BoolType))))))))),param(Id(_),ClassType(Id(_90_6__))),param(Id(_),ArrayType(99,StringType)),param(Id(y_),StringType),param(Id(__),BoolType),param(Id(l),IntType),param(Id(F4_7_),IntType),param(Id(_O),IntType),param(Id(_),ArrayType(2452,BoolType))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 506))

    def test_507(self):
        line = '''Class _23{}Class A_{Val F_,D:se;__(eh6:Array [String ,0b1];__q_a:Array [Array [Array [Boolean ,0b1_10],93],05];__GM,_:Array [Array [Array [String ,0b1000101],0137],2];__,__,y_,__7,_iZ:_){} }'''
        expect = '''Program([ClassDecl(Id(_23),[]),ClassDecl(Id(A_),[AttributeDecl(Instance,ConstDecl(Id(F_),ClassType(Id(se)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(D),ClassType(Id(se)),NullLiteral())),MethodDecl(Id(__),Instance,[param(Id(eh6),ArrayType(1,StringType)),param(Id(__q_a),ArrayType(5,ArrayType(93,ArrayType(6,BoolType)))),param(Id(__GM),ArrayType(2,ArrayType(95,ArrayType(69,StringType)))),param(Id(_),ArrayType(2,ArrayType(95,ArrayType(69,StringType)))),param(Id(__),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(y_),ClassType(Id(_))),param(Id(__7),ClassType(Id(_))),param(Id(_iZ),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 507))

    def test_508(self):
        line = '''Class z:_{}Class __a:_{Constructor (_:Array [Int ,65];_,_,_A,S,L,R,_T:Int ;_,k0r0,_:Array [Array [Array [Array [String ,65],0B1],25],0X61]){} }Class _{}Class _f_Z5e:z_zc{Var dK,$_:_w;}Class J{Val v,$_,_,$L:Array [Array [Array [String ,65],0X61],0xB_6];}'''
        expect = '''Program([ClassDecl(Id(z),Id(_),[]),ClassDecl(Id(__a),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(65,IntType)),param(Id(_),IntType),param(Id(_),IntType),param(Id(_A),IntType),param(Id(S),IntType),param(Id(L),IntType),param(Id(R),IntType),param(Id(_T),IntType),param(Id(_),ArrayType(97,ArrayType(25,ArrayType(1,ArrayType(65,StringType))))),param(Id(k0r0),ArrayType(97,ArrayType(25,ArrayType(1,ArrayType(65,StringType))))),param(Id(_),ArrayType(97,ArrayType(25,ArrayType(1,ArrayType(65,StringType)))))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_f_Z5e),Id(z_zc),[AttributeDecl(Instance,VarDecl(Id(dK),ClassType(Id(_w)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_w)),NullLiteral()))]),ClassDecl(Id(J),[AttributeDecl(Instance,ConstDecl(Id(v),ArrayType(182,ArrayType(97,ArrayType(65,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(182,ArrayType(97,ArrayType(65,StringType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(182,ArrayType(97,ArrayType(65,StringType))),None)),AttributeDecl(Static,ConstDecl(Id($L),ArrayType(182,ArrayType(97,ArrayType(65,StringType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 508))

    def test_509(self):
        line = '''Class __O_{}Class __80_{Var $_:String ;}Class Eym0w5:_L4{}Class X:_4{Destructor (){}Val _:Float ;}Class v:O6_{m_3(){}Var $e,$_:Array [Array [Float ,0b1010111],0X8];}Class _{Destructor (){}Var $c,$_:d_;}Class W{}'''
        expect = '''Program([ClassDecl(Id(__O_),[]),ClassDecl(Id(__80_),[AttributeDecl(Static,VarDecl(Id($_),StringType))]),ClassDecl(Id(Eym0w5),Id(_L4),[]),ClassDecl(Id(X),Id(_4),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))]),ClassDecl(Id(v),Id(O6_),[MethodDecl(Id(m_3),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($e),ArrayType(8,ArrayType(87,FloatType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(8,ArrayType(87,FloatType))))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($c),ClassType(Id(d_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(d_)),NullLiteral()))]),ClassDecl(Id(W),[])])'''
        self.assertTrue(TestAST.test(line, expect, 509))

    def test_510(self):
        line = '''Class _:q5{Val Z:Array [Float ,79];}Class c{Var Y,s:Array [Array [Boolean ,32],0b100001];}Class X11:_31{$0q_(){} }Class _:_6{H_1(p_1y_,_9W_,Hg:Array [Float ,010]){}j(m,_:Array [Boolean ,0b10]){}$A(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(q5),[AttributeDecl(Instance,ConstDecl(Id(Z),ArrayType(79,FloatType),None))]),ClassDecl(Id(c),[AttributeDecl(Instance,VarDecl(Id(Y),ArrayType(33,ArrayType(32,BoolType)))),AttributeDecl(Instance,VarDecl(Id(s),ArrayType(33,ArrayType(32,BoolType))))]),ClassDecl(Id(X11),Id(_31),[MethodDecl(Id($0q_),Static,[],Block([]))]),ClassDecl(Id(_),Id(_6),[MethodDecl(Id(H_1),Instance,[param(Id(p_1y_),ArrayType(8,FloatType)),param(Id(_9W_),ArrayType(8,FloatType)),param(Id(Hg),ArrayType(8,FloatType))],Block([])),MethodDecl(Id(j),Instance,[param(Id(m),ArrayType(2,BoolType)),param(Id(_),ArrayType(2,BoolType))],Block([])),MethodDecl(Id($A),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 510))

    def test_511(self):
        line = '''Class _:nTJ{Val $SC:String ;Val _,$26:t_1;Constructor (T_8,C,HK,_z1,V_:String ;T__zo_5,W60,x,E,_:String ;_:_0s;_r:String ;___,Q:Array [Array [Boolean ,49],022];L:Boolean ){}Var e_:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(nTJ),[AttributeDecl(Static,ConstDecl(Id($SC),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(t_1)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($26),ClassType(Id(t_1)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(T_8),StringType),param(Id(C),StringType),param(Id(HK),StringType),param(Id(_z1),StringType),param(Id(V_),StringType),param(Id(T__zo_5),StringType),param(Id(W60),StringType),param(Id(x),StringType),param(Id(E),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(_0s))),param(Id(_r),StringType),param(Id(___),ArrayType(18,ArrayType(49,BoolType))),param(Id(Q),ArrayType(18,ArrayType(49,BoolType))),param(Id(L),BoolType)],Block([])),AttributeDecl(Instance,VarDecl(Id(e_),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 511))

    def test_512(self):
        line = '''Class W_:_s{}Class z_:_25N{Constructor (g:Boolean ;dS_:String ;G,b,nlpnN_7,_:Int ;_:__;S,__oR,__7:h_a;_,Y_,_,P,_Z,m_:op_5__8;__k_,__,_6cQ__:Array [Float ,0x55];Y,G:String ;_,BW,_s:Array [Int ,0xC];c:Boolean ;_:_;o,_d5,_:m0){Break ;} }'''
        expect = '''Program([ClassDecl(Id(W_),Id(_s),[]),ClassDecl(Id(z_),Id(_25N),[MethodDecl(Id(Constructor),Instance,[param(Id(g),BoolType),param(Id(dS_),StringType),param(Id(G),IntType),param(Id(b),IntType),param(Id(nlpnN_7),IntType),param(Id(_),IntType),param(Id(_),ClassType(Id(__))),param(Id(S),ClassType(Id(h_a))),param(Id(__oR),ClassType(Id(h_a))),param(Id(__7),ClassType(Id(h_a))),param(Id(_),ClassType(Id(op_5__8))),param(Id(Y_),ClassType(Id(op_5__8))),param(Id(_),ClassType(Id(op_5__8))),param(Id(P),ClassType(Id(op_5__8))),param(Id(_Z),ClassType(Id(op_5__8))),param(Id(m_),ClassType(Id(op_5__8))),param(Id(__k_),ArrayType(85,FloatType)),param(Id(__),ArrayType(85,FloatType)),param(Id(_6cQ__),ArrayType(85,FloatType)),param(Id(Y),StringType),param(Id(G),StringType),param(Id(_),ArrayType(12,IntType)),param(Id(BW),ArrayType(12,IntType)),param(Id(_s),ArrayType(12,IntType)),param(Id(c),BoolType),param(Id(_),ClassType(Id(_))),param(Id(o),ClassType(Id(m0))),param(Id(_d5),ClassType(Id(m0))),param(Id(_),ClassType(Id(m0)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 512))

    def test_513(self):
        line = '''Class f{Val $__:Boolean ;}Class x9{Constructor (cW,p_,_,q:Array [Array [Float ,0x8],0x23];_5_,N0:Int ;_b:sRkc;O8,_,J8:N_FF;C5:Boolean ;l:Array [String ,014];__09:r;H:String ;n,_:Array [Array [Array [Int ,0X7],014],0X7]){ {}Val _:J;} }Class L{}'''
        expect = '''Program([ClassDecl(Id(f),[AttributeDecl(Static,ConstDecl(Id($__),BoolType,None))]),ClassDecl(Id(x9),[MethodDecl(Id(Constructor),Instance,[param(Id(cW),ArrayType(35,ArrayType(8,FloatType))),param(Id(p_),ArrayType(35,ArrayType(8,FloatType))),param(Id(_),ArrayType(35,ArrayType(8,FloatType))),param(Id(q),ArrayType(35,ArrayType(8,FloatType))),param(Id(_5_),IntType),param(Id(N0),IntType),param(Id(_b),ClassType(Id(sRkc))),param(Id(O8),ClassType(Id(N_FF))),param(Id(_),ClassType(Id(N_FF))),param(Id(J8),ClassType(Id(N_FF))),param(Id(C5),BoolType),param(Id(l),ArrayType(12,StringType)),param(Id(__09),ClassType(Id(r))),param(Id(H),StringType),param(Id(n),ArrayType(7,ArrayType(12,ArrayType(7,IntType)))),param(Id(_),ArrayType(7,ArrayType(12,ArrayType(7,IntType))))],Block([Block([]),ConstDecl(Id(_),ClassType(Id(J)),NullLiteral())]))]),ClassDecl(Id(L),[])])'''
        self.assertTrue(TestAST.test(line, expect, 513))

    def test_514(self):
        line = '''Class BB:E8{}Class _{$VM_(_m7__PP,E7,U_,_,NG,_6W9,_0,S,_:__83;U,b,_,_:Array [Array [Array [Float ,05_0],5],52];d_:Boolean ;W:yt;HR:ha;_o:String ;jI:O;_1_:Array [Array [Boolean ,035],0X6B]){} }Class W__{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(BB),Id(E8),[]),ClassDecl(Id(_),[MethodDecl(Id($VM_),Static,[param(Id(_m7__PP),ClassType(Id(__83))),param(Id(E7),ClassType(Id(__83))),param(Id(U_),ClassType(Id(__83))),param(Id(_),ClassType(Id(__83))),param(Id(NG),ClassType(Id(__83))),param(Id(_6W9),ClassType(Id(__83))),param(Id(_0),ClassType(Id(__83))),param(Id(S),ClassType(Id(__83))),param(Id(_),ClassType(Id(__83))),param(Id(U),ArrayType(52,ArrayType(5,ArrayType(40,FloatType)))),param(Id(b),ArrayType(52,ArrayType(5,ArrayType(40,FloatType)))),param(Id(_),ArrayType(52,ArrayType(5,ArrayType(40,FloatType)))),param(Id(_),ArrayType(52,ArrayType(5,ArrayType(40,FloatType)))),param(Id(d_),BoolType),param(Id(W),ClassType(Id(yt))),param(Id(HR),ClassType(Id(ha))),param(Id(_o),StringType),param(Id(jI),ClassType(Id(O))),param(Id(_1_),ArrayType(107,ArrayType(29,BoolType)))],Block([]))]),ClassDecl(Id(W__),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 514))

    def test_515(self):
        line = '''Class _h{}Class _{_(_:String ;__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0b1011011],0X4],9],0B10001],0300_6],0B1_1_0_10_1],0X33],0112],0b1];b_L__:_b_I;_c:String ;p0H:Int ;F:Boolean ){} }Class ZH6___0{}'''
        expect = '''Program([ClassDecl(Id(_h),[]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(_),StringType),param(Id(__),ArrayType(1,ArrayType(74,ArrayType(51,ArrayType(53,ArrayType(1542,ArrayType(17,ArrayType(9,ArrayType(4,ArrayType(91,FloatType)))))))))),param(Id(b_L__),ClassType(Id(_b_I))),param(Id(_c),StringType),param(Id(p0H),IntType),param(Id(F),BoolType)],Block([]))]),ClassDecl(Id(ZH6___0),[])])'''
        self.assertTrue(TestAST.test(line, expect, 515))

    def test_516(self):
        line = '''Class __:_{_(bR:Int ){ {} }Var $5,$8__4:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,05],0B1_1],0b1],621],43],0x10],0B1011000],0x10];Val _,T:Array [Array [Array [Boolean ,0xE68],7],0133];Val _,_,$T7D,_:Array [String ,0b11010];}Class i{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[MethodDecl(Id(_),Instance,[param(Id(bR),IntType)],Block([Block([])])),AttributeDecl(Static,VarDecl(Id($5),ArrayType(16,ArrayType(88,ArrayType(16,ArrayType(43,ArrayType(621,ArrayType(1,ArrayType(3,ArrayType(5,BoolType)))))))))),AttributeDecl(Static,VarDecl(Id($8__4),ArrayType(16,ArrayType(88,ArrayType(16,ArrayType(43,ArrayType(621,ArrayType(1,ArrayType(3,ArrayType(5,BoolType)))))))))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(91,ArrayType(7,ArrayType(3688,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(91,ArrayType(7,ArrayType(3688,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,StringType),None)),AttributeDecl(Static,ConstDecl(Id($T7D),ArrayType(26,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,StringType),None))]),ClassDecl(Id(i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 516))

    def test_517(self):
        line = '''Class _4:I{Var y_,Z,$Z3Be,yF,$M__,$_:Array [Array [Array [Array [Int ,055],0134],35],04_2_1];Destructor (){}Val T:Array [Array [Array [Array [Boolean ,8732],0x3B],0134],0134];}'''
        expect = '''Program([ClassDecl(Id(_4),Id(I),[AttributeDecl(Instance,VarDecl(Id(y_),ArrayType(273,ArrayType(35,ArrayType(92,ArrayType(45,IntType)))))),AttributeDecl(Instance,VarDecl(Id(Z),ArrayType(273,ArrayType(35,ArrayType(92,ArrayType(45,IntType)))))),AttributeDecl(Static,VarDecl(Id($Z3Be),ArrayType(273,ArrayType(35,ArrayType(92,ArrayType(45,IntType)))))),AttributeDecl(Instance,VarDecl(Id(yF),ArrayType(273,ArrayType(35,ArrayType(92,ArrayType(45,IntType)))))),AttributeDecl(Static,VarDecl(Id($M__),ArrayType(273,ArrayType(35,ArrayType(92,ArrayType(45,IntType)))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(273,ArrayType(35,ArrayType(92,ArrayType(45,IntType)))))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(92,ArrayType(92,ArrayType(59,ArrayType(8732,BoolType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 517))

    def test_518(self):
        line = '''Class G{Constructor (_KXG_t:Array [Array [Array [Array [Array [Array [Array [Boolean ,04644],07],0x59],0XE],5],0XC],6];_H:Array [Boolean ,49];_,x5:Array [Boolean ,0b1011110]){} }'''
        expect = '''Program([ClassDecl(Id(G),[MethodDecl(Id(Constructor),Instance,[param(Id(_KXG_t),ArrayType(6,ArrayType(12,ArrayType(5,ArrayType(14,ArrayType(89,ArrayType(7,ArrayType(2468,BoolType)))))))),param(Id(_H),ArrayType(49,BoolType)),param(Id(_),ArrayType(94,BoolType)),param(Id(x5),ArrayType(94,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 518))

    def test_519(self):
        line = '''Class fg:_zD_{Constructor (_n,G:Array [String ,02_0];_:Array [Array [Array [Array [Int ,0b111],0b111],0B1],6_7]){}$i2(a,D5:String ){} }Class _{}Class _04{Var _4H__lo:Array [Array [Boolean ,0b1],30];F(){} }'''
        expect = '''Program([ClassDecl(Id(fg),Id(_zD_),[MethodDecl(Id(Constructor),Instance,[param(Id(_n),ArrayType(16,StringType)),param(Id(G),ArrayType(16,StringType)),param(Id(_),ArrayType(67,ArrayType(1,ArrayType(7,ArrayType(7,IntType)))))],Block([])),MethodDecl(Id($i2),Static,[param(Id(a),StringType),param(Id(D5),StringType)],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_04),[AttributeDecl(Instance,VarDecl(Id(_4H__lo),ArrayType(30,ArrayType(1,BoolType)))),MethodDecl(Id(F),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 519))

    def test_520(self):
        line = '''Class z{a69(V:Array [String ,0X28];d,X1,_,i,_t:A;I,_,_8_:Array [Int ,013];_:_;_,__2:_){}$__(){}Destructor (){Break ;Continue ;}$7qd(){}Val __:Array [Array [Int ,3],0X28];}'''
        expect = '''Program([ClassDecl(Id(z),[MethodDecl(Id(a69),Instance,[param(Id(V),ArrayType(40,StringType)),param(Id(d),ClassType(Id(A))),param(Id(X1),ClassType(Id(A))),param(Id(_),ClassType(Id(A))),param(Id(i),ClassType(Id(A))),param(Id(_t),ClassType(Id(A))),param(Id(I),ArrayType(11,IntType)),param(Id(_),ArrayType(11,IntType)),param(Id(_8_),ArrayType(11,IntType)),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__2),ClassType(Id(_)))],Block([])),MethodDecl(Id($__),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue])),MethodDecl(Id($7qd),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(40,ArrayType(3,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 520))

    def test_521(self):
        line = '''Class __8:l0A{Destructor (){}Constructor (_,G32T:Array [Array [Array [Array [Array [Float ,0b1_1_01],067],1],4],0b1];W_,_:Array [Array [Float ,2],1];_78:_){Break ;} }'''
        expect = '''Program([ClassDecl(Id(__8),Id(l0A),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,ArrayType(4,ArrayType(1,ArrayType(55,ArrayType(13,FloatType)))))),param(Id(G32T),ArrayType(1,ArrayType(4,ArrayType(1,ArrayType(55,ArrayType(13,FloatType)))))),param(Id(W_),ArrayType(1,ArrayType(2,FloatType))),param(Id(_),ArrayType(1,ArrayType(2,FloatType))),param(Id(_78),ClassType(Id(_)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 521))

    def test_522(self):
        line = '''Class _:No{$_D(n__,R_:Array [Array [Array [Array [Array [Float ,4],46_00_14_4],047],047],047];Q,E:Float ;_P_:String ;__:Array [Boolean ,48];_8:Array [Array [Array [Array [Array [Float ,0x35],0B1],0b1_1_11_1],01],0x4_3B_5_D];r2N,bh:Array [Int ,06];A,_KP:_19){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(No),[MethodDecl(Id($_D),Static,[param(Id(n__),ArrayType(39,ArrayType(39,ArrayType(39,ArrayType(4600144,ArrayType(4,FloatType)))))),param(Id(R_),ArrayType(39,ArrayType(39,ArrayType(39,ArrayType(4600144,ArrayType(4,FloatType)))))),param(Id(Q),FloatType),param(Id(E),FloatType),param(Id(_P_),StringType),param(Id(__),ArrayType(48,BoolType)),param(Id(_8),ArrayType(277341,ArrayType(1,ArrayType(31,ArrayType(1,ArrayType(53,FloatType)))))),param(Id(r2N),ArrayType(6,IntType)),param(Id(bh),ArrayType(6,IntType)),param(Id(A),ClassType(Id(_19))),param(Id(_KP),ClassType(Id(_19)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 522))

    def test_523(self):
        line = '''Class __{Oc(DM:Array [String ,0X2];v:_;_7:_;_M,_:Array [Array [String ,8_7],19];m,v_g,_:_;_:_;A:Float ;_:Array [Array [Array [Array [Array [Array [String ,0x5F],3],02],0X16],0x32],0X5];k,_,A:Boolean ;K:__8_){Break ;} }Class g_:__05{}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Oc),Instance,[param(Id(DM),ArrayType(2,StringType)),param(Id(v),ClassType(Id(_))),param(Id(_7),ClassType(Id(_))),param(Id(_M),ArrayType(19,ArrayType(87,StringType))),param(Id(_),ArrayType(19,ArrayType(87,StringType))),param(Id(m),ClassType(Id(_))),param(Id(v_g),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(A),FloatType),param(Id(_),ArrayType(5,ArrayType(50,ArrayType(22,ArrayType(2,ArrayType(3,ArrayType(95,StringType))))))),param(Id(k),BoolType),param(Id(_),BoolType),param(Id(A),BoolType),param(Id(K),ClassType(Id(__8_)))],Block([Break]))]),ClassDecl(Id(g_),Id(__05),[])])'''
        self.assertTrue(TestAST.test(line, expect, 523))

    def test_524(self):
        line = '''Class _:__{}Class _40{Constructor (){}Constructor (){Return ;}Var $8,__B,__,$2_,_,Z,T8:VBD__;}Class _i:f__0s{Var $_z,$4,$953,_3,C,$4:__r;Var $Z,$_x,$EI,T_2y:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(_40),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Return()])),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(VBD__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__B),ClassType(Id(VBD__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(VBD__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($2_),ClassType(Id(VBD__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(VBD__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Z),ClassType(Id(VBD__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(T8),ClassType(Id(VBD__)),NullLiteral()))]),ClassDecl(Id(_i),Id(f__0s),[AttributeDecl(Static,VarDecl(Id($_z),ClassType(Id(__r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(__r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($953),ClassType(Id(__r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_3),ClassType(Id(__r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(C),ClassType(Id(__r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(__r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Z),StringType)),AttributeDecl(Static,VarDecl(Id($_x),StringType)),AttributeDecl(Static,VarDecl(Id($EI),StringType)),AttributeDecl(Instance,VarDecl(Id(T_2y),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 524))

    def test_525(self):
        line = '''Class _V{Constructor (){} }Class _:_4Ek{Constructor (){}K_(){} }Class Q{Constructor (_:Boolean ;_531152P_2t:Int ;PXN,_:Array [Float ,0x36]){Return ;}Constructor (){D3_.__5y1lk._8a();}$5_7_8_l(e_,E:z_o;XN:Y){} }'''
        expect = '''Program([ClassDecl(Id(_V),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_4Ek),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(K_),Instance,[],Block([]))]),ClassDecl(Id(Q),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_531152P_2t),IntType),param(Id(PXN),ArrayType(54,FloatType)),param(Id(_),ArrayType(54,FloatType))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[],Block([Call(FieldAccess(Id(D3_),Id(__5y1lk)),Id(_8a),[])])),MethodDecl(Id($5_7_8_l),Static,[param(Id(e_),ClassType(Id(z_o))),param(Id(E),ClassType(Id(z_o))),param(Id(XN),ClassType(Id(Y)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 525))

    def test_526(self):
        line = '''Class t:_{}Class _:C5{}Class B{$_1(_4:Array [Array [Boolean ,0x8],021];g:Array [Array [Array [Array [Array [Array [Int ,0b1],0x3C],0X3F],0x2B],0x2B],021]){} }Class Y{}Class zTH{}'''
        expect = '''Program([ClassDecl(Id(t),Id(_),[]),ClassDecl(Id(_),Id(C5),[]),ClassDecl(Id(B),[MethodDecl(Id($_1),Static,[param(Id(_4),ArrayType(17,ArrayType(8,BoolType))),param(Id(g),ArrayType(17,ArrayType(43,ArrayType(43,ArrayType(63,ArrayType(60,ArrayType(1,IntType)))))))],Block([]))]),ClassDecl(Id(Y),[]),ClassDecl(Id(zTH),[])])'''
        self.assertTrue(TestAST.test(line, expect, 526))

    def test_527(self):
        line = '''Class __5{Constructor (__2:__;j,___:Array [Array [Array [Array [Array [Boolean ,061],0b1],02],8_73_1],0B1100010];G_:Array [Array [Array [Array [Boolean ,36],0XA_9],01_5],0X48]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(__5),[MethodDecl(Id(Constructor),Instance,[param(Id(__2),ClassType(Id(__))),param(Id(j),ArrayType(98,ArrayType(8731,ArrayType(2,ArrayType(1,ArrayType(49,BoolType)))))),param(Id(___),ArrayType(98,ArrayType(8731,ArrayType(2,ArrayType(1,ArrayType(49,BoolType)))))),param(Id(G_),ArrayType(72,ArrayType(13,ArrayType(169,ArrayType(36,BoolType)))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 527))

    def test_528(self):
        line = '''Class l:No{$6_(U_2_:String ;_,B,____0,_:Boolean ;_,_v_:__3N){}Destructor (){Break ;} }Class _Tm_:_{D__(a,M,b_2:kS_20K;_:Float ;__:String ;S9:J){Break ;}_1(_,_x7_,D32n:String ){} }'''
        expect = '''Program([ClassDecl(Id(l),Id(No),[MethodDecl(Id($6_),Static,[param(Id(U_2_),StringType),param(Id(_),BoolType),param(Id(B),BoolType),param(Id(____0),BoolType),param(Id(_),BoolType),param(Id(_),ClassType(Id(__3N))),param(Id(_v_),ClassType(Id(__3N)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(_Tm_),Id(_),[MethodDecl(Id(D__),Instance,[param(Id(a),ClassType(Id(kS_20K))),param(Id(M),ClassType(Id(kS_20K))),param(Id(b_2),ClassType(Id(kS_20K))),param(Id(_),FloatType),param(Id(__),StringType),param(Id(S9),ClassType(Id(J)))],Block([Break])),MethodDecl(Id(_1),Instance,[param(Id(_),StringType),param(Id(_x7_),StringType),param(Id(D32n),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 528))

    def test_529(self):
        line = '''Class HG:s{Destructor (){ {}Return ;}Constructor (_P_N:Int ){Break ;}Constructor (){}Var Y,_,$1:Y;Val $3,$d6,$8m,_:Array [Int ,0B110011];}Class B:B1_4{Constructor (){} }Class _{}Class _:__{}'''
        expect = '''Program([ClassDecl(Id(HG),Id(s),[MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(_P_N),IntType)],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(Y),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($1),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(51,IntType),None)),AttributeDecl(Static,ConstDecl(Id($d6),ArrayType(51,IntType),None)),AttributeDecl(Static,ConstDecl(Id($8m),ArrayType(51,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(51,IntType),None))]),ClassDecl(Id(B),Id(B1_4),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 529))

    def test_530(self):
        line = '''Class F71_:ht_{}Class m:x_{}Class l:_{Val $_,_W_3,$___s,$i_9:Array [Array [String ,0b110001],9];}Class AD_{m(){} }Class Q{}Class __{}Class d:D{Constructor (_,__,B6,__,__,_R5_,_6__,__5:Array [Array [Array [Array [String ,014],0b110001],0b100_0_0_0],0B1011100];T_:Array [Array [Int ,055],0XF7]){} }'''
        expect = '''Program([ClassDecl(Id(F71_),Id(ht_),[]),ClassDecl(Id(m),Id(x_),[]),ClassDecl(Id(l),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(9,ArrayType(49,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_W_3),ArrayType(9,ArrayType(49,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($___s),ArrayType(9,ArrayType(49,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($i_9),ArrayType(9,ArrayType(49,StringType)),None))]),ClassDecl(Id(AD_),[MethodDecl(Id(m),Instance,[],Block([]))]),ClassDecl(Id(Q),[]),ClassDecl(Id(__),[]),ClassDecl(Id(d),Id(D),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(92,ArrayType(32,ArrayType(49,ArrayType(12,StringType))))),param(Id(__),ArrayType(92,ArrayType(32,ArrayType(49,ArrayType(12,StringType))))),param(Id(B6),ArrayType(92,ArrayType(32,ArrayType(49,ArrayType(12,StringType))))),param(Id(__),ArrayType(92,ArrayType(32,ArrayType(49,ArrayType(12,StringType))))),param(Id(__),ArrayType(92,ArrayType(32,ArrayType(49,ArrayType(12,StringType))))),param(Id(_R5_),ArrayType(92,ArrayType(32,ArrayType(49,ArrayType(12,StringType))))),param(Id(_6__),ArrayType(92,ArrayType(32,ArrayType(49,ArrayType(12,StringType))))),param(Id(__5),ArrayType(92,ArrayType(32,ArrayType(49,ArrayType(12,StringType))))),param(Id(T_),ArrayType(247,ArrayType(45,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 530))

    def test_531(self):
        line = '''Class V:U{Val v,$_K9,$5:String ;_(E:Array [Boolean ,0X6_3]){Val _Q,q,_:String ;} }Class _6_:j{Constructor (_:Int ;_,s9zC_qv,YXfE,_44F_,A03_,_,q0_:gr_;K:Array [Array [String ,0144],0144]){}Val __,__:Boolean ;}Class I{}'''
        expect = '''Program([ClassDecl(Id(V),Id(U),[AttributeDecl(Instance,ConstDecl(Id(v),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_K9),StringType,None)),AttributeDecl(Static,ConstDecl(Id($5),StringType,None)),MethodDecl(Id(_),Instance,[param(Id(E),ArrayType(99,BoolType))],Block([ConstDecl(Id(_Q),StringType,None),ConstDecl(Id(q),StringType,None),ConstDecl(Id(_),StringType,None)]))]),ClassDecl(Id(_6_),Id(j),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),ClassType(Id(gr_))),param(Id(s9zC_qv),ClassType(Id(gr_))),param(Id(YXfE),ClassType(Id(gr_))),param(Id(_44F_),ClassType(Id(gr_))),param(Id(A03_),ClassType(Id(gr_))),param(Id(_),ClassType(Id(gr_))),param(Id(q0_),ClassType(Id(gr_))),param(Id(K),ArrayType(100,ArrayType(100,StringType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(__),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(__),BoolType,None))]),ClassDecl(Id(I),[])])'''
        self.assertTrue(TestAST.test(line, expect, 531))

    def test_532(self):
        line = '''Class _h_1{t(d,_,KX:Array [Array [Array [Boolean ,0B101111],1],99];_z516z:Float ;f5:Array [Array [Array [String ,0b1000011],0X49],4];r2f,v,____,k10,__,aG:String ;k_1:Array [Array [Int ,39],0x41]){} }'''
        expect = '''Program([ClassDecl(Id(_h_1),[MethodDecl(Id(t),Instance,[param(Id(d),ArrayType(99,ArrayType(1,ArrayType(47,BoolType)))),param(Id(_),ArrayType(99,ArrayType(1,ArrayType(47,BoolType)))),param(Id(KX),ArrayType(99,ArrayType(1,ArrayType(47,BoolType)))),param(Id(_z516z),FloatType),param(Id(f5),ArrayType(4,ArrayType(73,ArrayType(67,StringType)))),param(Id(r2f),StringType),param(Id(v),StringType),param(Id(____),StringType),param(Id(k10),StringType),param(Id(__),StringType),param(Id(aG),StringType),param(Id(k_1),ArrayType(65,ArrayType(39,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 532))

    def test_533(self):
        line = '''Class GMSc0M8_g{}Class _6:C{$_(v:Array [Array [Array [Array [Array [Float ,28],072],0B11],0x3],0b1]){}Constructor (s_,txlA_9,_:M;_869:Boolean ;a_,__:Array [Int ,0B1];B:Boolean ;krX,M:wv;_3:Int ){} }'''
        expect = '''Program([ClassDecl(Id(GMSc0M8_g),[]),ClassDecl(Id(_6),Id(C),[MethodDecl(Id($_),Static,[param(Id(v),ArrayType(1,ArrayType(3,ArrayType(3,ArrayType(58,ArrayType(28,FloatType))))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(s_),ClassType(Id(M))),param(Id(txlA_9),ClassType(Id(M))),param(Id(_),ClassType(Id(M))),param(Id(_869),BoolType),param(Id(a_),ArrayType(1,IntType)),param(Id(__),ArrayType(1,IntType)),param(Id(B),BoolType),param(Id(krX),ClassType(Id(wv))),param(Id(M),ClassType(Id(wv))),param(Id(_3),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 533))

    def test_534(self):
        line = '''Class r{$_(Bg9,B:Array [String ,0B1010100];_q_:Array [Int ,0b1100001];p7:Float ;_:Array [Array [Boolean ,0B1010100],593_0]){}Var $__,__,$0hs5:C;Constructor (R,_:Array [String ,4]){} }Class _52_Fl{}'''
        expect = '''Program([ClassDecl(Id(r),[MethodDecl(Id($_),Static,[param(Id(Bg9),ArrayType(84,StringType)),param(Id(B),ArrayType(84,StringType)),param(Id(_q_),ArrayType(97,IntType)),param(Id(p7),FloatType),param(Id(_),ArrayType(5930,ArrayType(84,BoolType)))],Block([])),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(C)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(C)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0hs5),ClassType(Id(C)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(R),ArrayType(4,StringType)),param(Id(_),ArrayType(4,StringType))],Block([]))]),ClassDecl(Id(_52_Fl),[])])'''
        self.assertTrue(TestAST.test(line, expect, 534))

    def test_535(self):
        line = '''Class e1{}Class EE{Constructor (z,I_0,o,ov8,M,o002,bM,X,_,a7,_63N_q,h,U:_;t1z8:_;Bb_,_,_:Int ;_,_R,r9,_i8_Ho_4_,_B1:Int ;_,_:Int ;N:Array [Array [Array [Int ,1_3_0_7],0X7],070]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(e1),[]),ClassDecl(Id(EE),[MethodDecl(Id(Constructor),Instance,[param(Id(z),ClassType(Id(_))),param(Id(I_0),ClassType(Id(_))),param(Id(o),ClassType(Id(_))),param(Id(ov8),ClassType(Id(_))),param(Id(M),ClassType(Id(_))),param(Id(o002),ClassType(Id(_))),param(Id(bM),ClassType(Id(_))),param(Id(X),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(a7),ClassType(Id(_))),param(Id(_63N_q),ClassType(Id(_))),param(Id(h),ClassType(Id(_))),param(Id(U),ClassType(Id(_))),param(Id(t1z8),ClassType(Id(_))),param(Id(Bb_),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_R),IntType),param(Id(r9),IntType),param(Id(_i8_Ho_4_),IntType),param(Id(_B1),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(N),ArrayType(56,ArrayType(7,ArrayType(1307,IntType))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 535))

    def test_536(self):
        line = '''Class _79{}Class P:_O{}Class B__b{}Class _{Val _:__;}Class _Fk:z{Val $_,_82,$6__:_4;Val q:Array [Array [Array [String ,31],21],0B1];Var __,_9,Ku_:Boolean ;}Class i7{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_79),[]),ClassDecl(Id(P),Id(_O),[]),ClassDecl(Id(B__b),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__)),NullLiteral()))]),ClassDecl(Id(_Fk),Id(z),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_82),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($6__),ClassType(Id(_4)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(q),ArrayType(1,ArrayType(21,ArrayType(31,StringType))),None)),AttributeDecl(Instance,VarDecl(Id(__),BoolType)),AttributeDecl(Instance,VarDecl(Id(_9),BoolType)),AttributeDecl(Instance,VarDecl(Id(Ku_),BoolType))]),ClassDecl(Id(i7),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 536))

    def test_537(self):
        line = '''Class j__{}Class _:O{Val _7O:Float ;}Class _6:_{Var $H,m_,$7,__,$__2,$500:Array [Array [Array [Int ,07_4],4],0B1110];Constructor (){}Var _:Array [Array [Array [Int ,05_6_7],0x1B],0B1_1];Destructor (){Return ;} }Class X:_{}'''
        expect = '''Program([ClassDecl(Id(j__),[]),ClassDecl(Id(_),Id(O),[AttributeDecl(Instance,ConstDecl(Id(_7O),FloatType,None))]),ClassDecl(Id(_6),Id(_),[AttributeDecl(Static,VarDecl(Id($H),ArrayType(14,ArrayType(4,ArrayType(60,IntType))))),AttributeDecl(Instance,VarDecl(Id(m_),ArrayType(14,ArrayType(4,ArrayType(60,IntType))))),AttributeDecl(Static,VarDecl(Id($7),ArrayType(14,ArrayType(4,ArrayType(60,IntType))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(14,ArrayType(4,ArrayType(60,IntType))))),AttributeDecl(Static,VarDecl(Id($__2),ArrayType(14,ArrayType(4,ArrayType(60,IntType))))),AttributeDecl(Static,VarDecl(Id($500),ArrayType(14,ArrayType(4,ArrayType(60,IntType))))),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(27,ArrayType(375,IntType))))),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))]),ClassDecl(Id(X),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 537))

    def test_538(self):
        line = '''Class Y{Var u,F1_9_:Boolean ;Constructor (g:Array [Int ,61];__b:Array [Array [Array [Float ,64],0X5B],0b10];_:Array [Boolean ,61]){Return ;}Var $8xl_1,__g:Boolean ;Constructor (_:Array [String ,0113]){} }'''
        expect = '''Program([ClassDecl(Id(Y),[AttributeDecl(Instance,VarDecl(Id(u),BoolType)),AttributeDecl(Instance,VarDecl(Id(F1_9_),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(g),ArrayType(61,IntType)),param(Id(__b),ArrayType(2,ArrayType(91,ArrayType(64,FloatType)))),param(Id(_),ArrayType(61,BoolType))],Block([Return()])),AttributeDecl(Static,VarDecl(Id($8xl_1),BoolType)),AttributeDecl(Instance,VarDecl(Id(__g),BoolType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(75,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 538))

    def test_539(self):
        line = '''Class z:_{Var __5,L__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B1_0],0XF],58],9],0X5A],7],060],1],0x26];$__(__8,_:_;_:_){} }Class D2_361{}Class _{}'''
        expect = '''Program([ClassDecl(Id(z),Id(_),[AttributeDecl(Instance,VarDecl(Id(__5),ArrayType(38,ArrayType(1,ArrayType(48,ArrayType(7,ArrayType(90,ArrayType(9,ArrayType(58,ArrayType(15,ArrayType(2,IntType))))))))))),AttributeDecl(Instance,VarDecl(Id(L__),ArrayType(38,ArrayType(1,ArrayType(48,ArrayType(7,ArrayType(90,ArrayType(9,ArrayType(58,ArrayType(15,ArrayType(2,IntType))))))))))),MethodDecl(Id($__),Static,[param(Id(__8),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(D2_361),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 539))

    def test_540(self):
        line = '''Class c9f:_6{Constructor (__:Array [Array [Array [Float ,0b1],0b10110],0115];_3:Int ;S:Array [Array [Array [Array [Array [Array [Array [Boolean ,0b10110],0X16],03],0115],06_00],06],0b1];O:Boolean ;A,_6i:Array [Float ,0X9_1028]){} }'''
        expect = '''Program([ClassDecl(Id(c9f),Id(_6),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(77,ArrayType(22,ArrayType(1,FloatType)))),param(Id(_3),IntType),param(Id(S),ArrayType(1,ArrayType(6,ArrayType(384,ArrayType(77,ArrayType(3,ArrayType(22,ArrayType(22,BoolType)))))))),param(Id(O),BoolType),param(Id(A),ArrayType(593960,FloatType)),param(Id(_6i),ArrayType(593960,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 540))

    def test_541(self):
        line = '''Class V7:_t{}Class g{}Class cw:__z{Constructor (){}Var $e04,$8,$t80:Array [Array [Array [String ,0x3A],022],05];Val $D_0__6__,_,$g_3:Array [Float ,0x3A];d(_g:Array [Boolean ,031_6_3_6]){ {}{ {} }} }Class _b{Var $_v:Boolean ;}Class fZj:_{}'''
        expect = '''Program([ClassDecl(Id(V7),Id(_t),[]),ClassDecl(Id(g),[]),ClassDecl(Id(cw),Id(__z),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($e04),ArrayType(5,ArrayType(18,ArrayType(58,StringType))))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(5,ArrayType(18,ArrayType(58,StringType))))),AttributeDecl(Static,VarDecl(Id($t80),ArrayType(5,ArrayType(18,ArrayType(58,StringType))))),AttributeDecl(Static,ConstDecl(Id($D_0__6__),ArrayType(58,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(58,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($g_3),ArrayType(58,FloatType),None)),MethodDecl(Id(d),Instance,[param(Id(_g),ArrayType(13214,BoolType))],Block([Block([]),Block([Block([])])]))]),ClassDecl(Id(_b),[AttributeDecl(Static,VarDecl(Id($_v),BoolType))]),ClassDecl(Id(fZj),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 541))

    def test_542(self):
        line = '''Class W_:R8{}Class _:b{Val _84:String ;Val $O:x89;}Class zAa_5V:r{$dm(_,c:_;_9a604_m,x,M,p2:Array [Float ,0663_7]){}wS_65(F9,_,TZm,F,A__:_1;g:n;n,__CJ5:Float ){} }'''
        expect = '''Program([ClassDecl(Id(W_),Id(R8),[]),ClassDecl(Id(_),Id(b),[AttributeDecl(Instance,ConstDecl(Id(_84),StringType,None)),AttributeDecl(Static,ConstDecl(Id($O),ClassType(Id(x89)),NullLiteral()))]),ClassDecl(Id(zAa_5V),Id(r),[MethodDecl(Id($dm),Static,[param(Id(_),ClassType(Id(_))),param(Id(c),ClassType(Id(_))),param(Id(_9a604_m),ArrayType(3487,FloatType)),param(Id(x),ArrayType(3487,FloatType)),param(Id(M),ArrayType(3487,FloatType)),param(Id(p2),ArrayType(3487,FloatType))],Block([])),MethodDecl(Id(wS_65),Instance,[param(Id(F9),ClassType(Id(_1))),param(Id(_),ClassType(Id(_1))),param(Id(TZm),ClassType(Id(_1))),param(Id(F),ClassType(Id(_1))),param(Id(A__),ClassType(Id(_1))),param(Id(g),ClassType(Id(n))),param(Id(n),FloatType),param(Id(__CJ5),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 542))

    def test_543(self):
        line = '''Class _D{Constructor (_:String ;_,n9:Array [Array [Array [Array [Array [Array [Array [Array [Float ,063],063],0b1],0x6_C],99],0XE],0XE],0X3];_:String ;_z:Array [Float ,0B1_0]){} }Class z{Val _:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_D),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_),ArrayType(3,ArrayType(14,ArrayType(14,ArrayType(99,ArrayType(108,ArrayType(1,ArrayType(51,ArrayType(51,FloatType))))))))),param(Id(n9),ArrayType(3,ArrayType(14,ArrayType(14,ArrayType(99,ArrayType(108,ArrayType(1,ArrayType(51,ArrayType(51,FloatType))))))))),param(Id(_),StringType),param(Id(_z),ArrayType(2,FloatType))],Block([]))]),ClassDecl(Id(z),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 543))

    def test_544(self):
        line = '''Class o:N{_(_,_,A_,_7:Array [String ,0x75_0_2]){}Constructor (_s9_:Array [Int ,0X4_61_3];Oc_:Array [Array [Float ,040],0b101000]){}Val $__,$0,$9_:_;}Class f_0{Val __,$_,$1,_3:Float ;}'''
        expect = '''Program([ClassDecl(Id(o),Id(N),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(29954,StringType)),param(Id(_),ArrayType(29954,StringType)),param(Id(A_),ArrayType(29954,StringType)),param(Id(_7),ArrayType(29954,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_s9_),ArrayType(17939,IntType)),param(Id(Oc_),ArrayType(40,ArrayType(32,FloatType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(f_0),[AttributeDecl(Instance,ConstDecl(Id(__),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($1),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_3),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 544))

    def test_545(self):
        line = '''Class _:n{Destructor (){Val e:Float ;Continue ;} }Class _y0{}Class S{Val _:Float ;__l(){Continue ;}$7r(__:H){} }Class _h__{}Class j:p{Constructor (MGE:b4){Var _:Array [String ,0112];Val _,Q__vq:Array [String ,0x43];}Constructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(n),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(e),FloatType,None),Continue]))]),ClassDecl(Id(_y0),[]),ClassDecl(Id(S),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),MethodDecl(Id(__l),Instance,[],Block([Continue])),MethodDecl(Id($7r),Static,[param(Id(__),ClassType(Id(H)))],Block([]))]),ClassDecl(Id(_h__),[]),ClassDecl(Id(j),Id(p),[MethodDecl(Id(Constructor),Instance,[param(Id(MGE),ClassType(Id(b4)))],Block([VarDecl(Id(_),ArrayType(74,StringType)),ConstDecl(Id(_),ArrayType(67,StringType),None),ConstDecl(Id(Q__vq),ArrayType(67,StringType),None)])),MethodDecl(Id(Constructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 545))

    def test_546(self):
        line = '''Class _:Z{}Class S____:_{}Class g00r{_76a(m:Boolean ;_:Float ;f:_;_,_:Array [Array [Array [Array [Array [Array [Float ,68],0x4C],0B11101],0B11101],8_95],0B11101]){}Var $1__0Y_1_,k:_N;Constructor (_,x:Array [Array [String ,2_1_4_9],68]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(Z),[]),ClassDecl(Id(S____),Id(_),[]),ClassDecl(Id(g00r),[MethodDecl(Id(_76a),Instance,[param(Id(m),BoolType),param(Id(_),FloatType),param(Id(f),ClassType(Id(_))),param(Id(_),ArrayType(29,ArrayType(895,ArrayType(29,ArrayType(29,ArrayType(76,ArrayType(68,FloatType))))))),param(Id(_),ArrayType(29,ArrayType(895,ArrayType(29,ArrayType(29,ArrayType(76,ArrayType(68,FloatType)))))))],Block([])),AttributeDecl(Static,VarDecl(Id($1__0Y_1_),ClassType(Id(_N)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(k),ClassType(Id(_N)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(68,ArrayType(2149,StringType))),param(Id(x),ArrayType(68,ArrayType(2149,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 546))

    def test_547(self):
        line = '''Class __0:_{Val _:Array [Array [String ,0x9],0b1_0];Constructor (v,pr__9,_9,_Q,__:Boolean ;__5Z:Array [String ,03];U:Array [Array [String ,0b10101],84];__:Array [Float ,84]){ {} }}'''
        expect = '''Program([ClassDecl(Id(__0),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(2,ArrayType(9,StringType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(v),BoolType),param(Id(pr__9),BoolType),param(Id(_9),BoolType),param(Id(_Q),BoolType),param(Id(__),BoolType),param(Id(__5Z),ArrayType(3,StringType)),param(Id(U),ArrayType(84,ArrayType(21,StringType))),param(Id(__),ArrayType(84,FloatType))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 547))

    def test_548(self):
        line = '''Class _{_(_:Int ;_:Array [Float ,5]){} }Class _:e{sd(_z_,_:J;_39_DC,_sL:Array [String ,76];_:_){Continue ;}Var $0h,a:String ;}Class gW{}Class Z:h__{}Class _{Destructor (){} }Class _d4_{}Class RJ9:s{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(_),IntType),param(Id(_),ArrayType(5,FloatType))],Block([]))]),ClassDecl(Id(_),Id(e),[MethodDecl(Id(sd),Instance,[param(Id(_z_),ClassType(Id(J))),param(Id(_),ClassType(Id(J))),param(Id(_39_DC),ArrayType(76,StringType)),param(Id(_sL),ArrayType(76,StringType)),param(Id(_),ClassType(Id(_)))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($0h),StringType)),AttributeDecl(Instance,VarDecl(Id(a),StringType))]),ClassDecl(Id(gW),[]),ClassDecl(Id(Z),Id(h__),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_d4_),[]),ClassDecl(Id(RJ9),Id(s),[])])'''
        self.assertTrue(TestAST.test(line, expect, 548))

    def test_549(self):
        line = '''Class _{}Class h9:_{Destructor (){} }Class qe:_{Constructor (X:S){}$_(U9b:Float ;d,_:Array [String ,0xBD];_,I_:Array [Array [Array [Boolean ,65],87],87]){}Destructor (){ {}Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(h9),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(qe),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(X),ClassType(Id(S)))],Block([])),MethodDecl(Id($_),Static,[param(Id(U9b),FloatType),param(Id(d),ArrayType(189,StringType)),param(Id(_),ArrayType(189,StringType)),param(Id(_),ArrayType(87,ArrayType(87,ArrayType(65,BoolType)))),param(Id(I_),ArrayType(87,ArrayType(87,ArrayType(65,BoolType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 549))

    def test_550(self):
        line = '''Class _BS3:TQ__o99{Var _NjA,_R2YQ1:String ;__9(){ {} }$VY(){} }Class _{Constructor (lY:dc;e:Float ){} }Class j:R{}Class _86__{Var _,Xa,q_7_,_p:Array [Array [Array [Array [Int ,076],0B1011000],9],3];Destructor (){} }Class _:Ssm{}'''
        expect = '''Program([ClassDecl(Id(_BS3),Id(TQ__o99),[AttributeDecl(Instance,VarDecl(Id(_NjA),StringType)),AttributeDecl(Instance,VarDecl(Id(_R2YQ1),StringType)),MethodDecl(Id(__9),Instance,[],Block([Block([])])),MethodDecl(Id($VY),Static,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(lY),ClassType(Id(dc))),param(Id(e),FloatType)],Block([]))]),ClassDecl(Id(j),Id(R),[]),ClassDecl(Id(_86__),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,ArrayType(9,ArrayType(88,ArrayType(62,IntType)))))),AttributeDecl(Instance,VarDecl(Id(Xa),ArrayType(3,ArrayType(9,ArrayType(88,ArrayType(62,IntType)))))),AttributeDecl(Instance,VarDecl(Id(q_7_),ArrayType(3,ArrayType(9,ArrayType(88,ArrayType(62,IntType)))))),AttributeDecl(Instance,VarDecl(Id(_p),ArrayType(3,ArrayType(9,ArrayType(88,ArrayType(62,IntType)))))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(Ssm),[])])'''
        self.assertTrue(TestAST.test(line, expect, 550))

    def test_551(self):
        line = '''Class _:A{}Class __t423:_{}Class _:oG{Constructor (__7_36,_,E,_,d_:Array [Array [Float ,0xF],017];__:VI9_5P_f5;a,_5,cD,___,J:E;_qXb7_S_,m:K;_b33__,_:Array [Int ,017]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(A),[]),ClassDecl(Id(__t423),Id(_),[]),ClassDecl(Id(_),Id(oG),[MethodDecl(Id(Constructor),Instance,[param(Id(__7_36),ArrayType(15,ArrayType(15,FloatType))),param(Id(_),ArrayType(15,ArrayType(15,FloatType))),param(Id(E),ArrayType(15,ArrayType(15,FloatType))),param(Id(_),ArrayType(15,ArrayType(15,FloatType))),param(Id(d_),ArrayType(15,ArrayType(15,FloatType))),param(Id(__),ClassType(Id(VI9_5P_f5))),param(Id(a),ClassType(Id(E))),param(Id(_5),ClassType(Id(E))),param(Id(cD),ClassType(Id(E))),param(Id(___),ClassType(Id(E))),param(Id(J),ClassType(Id(E))),param(Id(_qXb7_S_),ClassType(Id(K))),param(Id(m),ClassType(Id(K))),param(Id(_b33__),ArrayType(15,IntType)),param(Id(_),ArrayType(15,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 551))

    def test_552(self):
        line = '''Class _2_:o_4{}Class L{$Mt4682(){}Constructor (_1,_:Array [Array [Array [Array [Int ,5_9_9],1_04],0b1001100],96];v,n:__;_5_,a:Boolean ;A:Array [Int ,0b1001100]){Continue ;} }Class _{}Class I2_{}'''
        expect = '''Program([ClassDecl(Id(_2_),Id(o_4),[]),ClassDecl(Id(L),[MethodDecl(Id($Mt4682),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_1),ArrayType(96,ArrayType(76,ArrayType(104,ArrayType(599,IntType))))),param(Id(_),ArrayType(96,ArrayType(76,ArrayType(104,ArrayType(599,IntType))))),param(Id(v),ClassType(Id(__))),param(Id(n),ClassType(Id(__))),param(Id(_5_),BoolType),param(Id(a),BoolType),param(Id(A),ArrayType(76,IntType))],Block([Continue]))]),ClassDecl(Id(_),[]),ClassDecl(Id(I2_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 552))

    def test_553(self):
        line = '''Class _:mv{Constructor (V0:d){}Constructor (){}Val $0:Array [Array [Array [Array [Array [Boolean ,100],0143],0xA_F_4],100],0143];Var $_:_;Var $0_,_:Float ;Val $2_:Boolean ;}Class of4y8:_O{}'''
        expect = '''Program([ClassDecl(Id(_),Id(mv),[MethodDecl(Id(Constructor),Instance,[param(Id(V0),ClassType(Id(d)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(99,ArrayType(100,ArrayType(2804,ArrayType(99,ArrayType(100,BoolType))))),None)),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Static,ConstDecl(Id($2_),BoolType,None))]),ClassDecl(Id(of4y8),Id(_O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 553))

    def test_554(self):
        line = '''Class W3h{_(){Val e,_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1011000],82],071],07],7],0xA1_06],0B1],071],0B1_101],04_1],053_0];} }'''
        expect = '''Program([ClassDecl(Id(W3h),[MethodDecl(Id(_),Instance,[],Block([ConstDecl(Id(e),ArrayType(344,ArrayType(33,ArrayType(13,ArrayType(57,ArrayType(1,ArrayType(41222,ArrayType(7,ArrayType(7,ArrayType(57,ArrayType(82,ArrayType(88,StringType))))))))))),None),ConstDecl(Id(_),ArrayType(344,ArrayType(33,ArrayType(13,ArrayType(57,ArrayType(1,ArrayType(41222,ArrayType(7,ArrayType(7,ArrayType(57,ArrayType(82,ArrayType(88,StringType))))))))))),None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 554))

    def test_555(self):
        line = '''Class _{Constructor (_,__G:Array [Array [Array [Array [Array [Float ,0b100101],96],03],0x4],025];L_F,B,T:I_;_:String ;_:K__79;U:String ;_,___:Float ;_46,_,_5:_;_1x,A:Boolean ){} }Class Ve{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(21,ArrayType(4,ArrayType(3,ArrayType(96,ArrayType(37,FloatType)))))),param(Id(__G),ArrayType(21,ArrayType(4,ArrayType(3,ArrayType(96,ArrayType(37,FloatType)))))),param(Id(L_F),ClassType(Id(I_))),param(Id(B),ClassType(Id(I_))),param(Id(T),ClassType(Id(I_))),param(Id(_),StringType),param(Id(_),ClassType(Id(K__79))),param(Id(U),StringType),param(Id(_),FloatType),param(Id(___),FloatType),param(Id(_46),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_5),ClassType(Id(_))),param(Id(_1x),BoolType),param(Id(A),BoolType)],Block([]))]),ClassDecl(Id(Ve),[])])'''
        self.assertTrue(TestAST.test(line, expect, 555))

    def test_556(self):
        line = '''Class S7__P{y4OJ_(k,n:Float ){}Destructor (){}Constructor (_5:_61_;r,_,c,v_M,_r2zK_k,_,_,_a,I:Array [Array [String ,4],0x48]){}Destructor (){}Destructor (){}Var $g:_Y;Val _:Array [Array [String ,0x48],0X50];}Class T10_Y{Var lv:Int ;}'''
        expect = '''Program([ClassDecl(Id(S7__P),[MethodDecl(Id(y4OJ_),Instance,[param(Id(k),FloatType),param(Id(n),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_5),ClassType(Id(_61_))),param(Id(r),ArrayType(72,ArrayType(4,StringType))),param(Id(_),ArrayType(72,ArrayType(4,StringType))),param(Id(c),ArrayType(72,ArrayType(4,StringType))),param(Id(v_M),ArrayType(72,ArrayType(4,StringType))),param(Id(_r2zK_k),ArrayType(72,ArrayType(4,StringType))),param(Id(_),ArrayType(72,ArrayType(4,StringType))),param(Id(_),ArrayType(72,ArrayType(4,StringType))),param(Id(_a),ArrayType(72,ArrayType(4,StringType))),param(Id(I),ArrayType(72,ArrayType(4,StringType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($g),ClassType(Id(_Y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(80,ArrayType(72,StringType)),None))]),ClassDecl(Id(T10_Y),[AttributeDecl(Instance,VarDecl(Id(lv),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 556))

    def test_557(self):
        line = '''Class VJ12{$_2(){} }Class _O_{}Class v_0:_{}Class _:__{Constructor (_:_o_2){Break ;}Val _02H8g0z_:Array [Array [Array [Array [Array [Float ,0b1],6],071],0x5710_0B_B_4],0xB_0F_1];Var $_,_,_7K:Array [Int ,0X29];Var o95:_;Val M:Array [Array [Array [Array [String ,0b1],046],0X29],0xB_3_9];}'''
        expect = '''Program([ClassDecl(Id(VJ12),[MethodDecl(Id($_2),Static,[],Block([]))]),ClassDecl(Id(_O_),[]),ClassDecl(Id(v_0),Id(_),[]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_o_2)))],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(_02H8g0z_),ArrayType(45297,ArrayType(1460669364,ArrayType(57,ArrayType(6,ArrayType(1,FloatType))))),None)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(41,IntType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(41,IntType))),AttributeDecl(Instance,VarDecl(Id(_7K),ArrayType(41,IntType))),AttributeDecl(Instance,VarDecl(Id(o95),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(M),ArrayType(2873,ArrayType(41,ArrayType(38,ArrayType(1,StringType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 557))

    def test_558(self):
        line = '''Class _{Constructor (_,_,h,_Y:Array [Array [String ,06_5],0b10]){Break ;Break ;} }Class Ua:_{}Class _G_7:Y{S(_,Z9_71__,g,_:_;_:Array [Array [String ,0B110],07_0_7];T,__T_,_148,_Ru,_,H:Int ;t1,nv74,_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(2,ArrayType(53,StringType))),param(Id(_),ArrayType(2,ArrayType(53,StringType))),param(Id(h),ArrayType(2,ArrayType(53,StringType))),param(Id(_Y),ArrayType(2,ArrayType(53,StringType)))],Block([Break,Break]))]),ClassDecl(Id(Ua),Id(_),[]),ClassDecl(Id(_G_7),Id(Y),[MethodDecl(Id(S),Instance,[param(Id(_),ClassType(Id(_))),param(Id(Z9_71__),ClassType(Id(_))),param(Id(g),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(455,ArrayType(6,StringType))),param(Id(T),IntType),param(Id(__T_),IntType),param(Id(_148),IntType),param(Id(_Ru),IntType),param(Id(_),IntType),param(Id(H),IntType),param(Id(t1),FloatType),param(Id(nv74),FloatType),param(Id(_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 558))

    def test_559(self):
        line = '''Class __4_:__c_75{Var _,$7:Array [String ,042];}Class m{}Class _{}Class D{Destructor (){}$_(){}Var $4,$__:Array [String ,6];}Class _{Var $Q_:Array [Int ,0B101011];$z(_,_:String ;__O,e_,_,W:L_Z;y:Array [Array [Boolean ,0726_6],0XB];P:String ){}Val __,_,$2Z_:Array [Float ,0X2F];}'''
        expect = '''Program([ClassDecl(Id(__4_),Id(__c_75),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(34,StringType))),AttributeDecl(Static,VarDecl(Id($7),ArrayType(34,StringType)))]),ClassDecl(Id(m),[]),ClassDecl(Id(_),[]),ClassDecl(Id(D),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[],Block([])),AttributeDecl(Static,VarDecl(Id($4),ArrayType(6,StringType))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(6,StringType)))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($Q_),ArrayType(43,IntType))),MethodDecl(Id($z),Static,[param(Id(_),StringType),param(Id(_),StringType),param(Id(__O),ClassType(Id(L_Z))),param(Id(e_),ClassType(Id(L_Z))),param(Id(_),ClassType(Id(L_Z))),param(Id(W),ClassType(Id(L_Z))),param(Id(y),ArrayType(11,ArrayType(3766,BoolType))),param(Id(P),StringType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(47,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(47,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($2Z_),ArrayType(47,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 559))

    def test_560(self):
        line = '''Class c:R{}Class l0:Mt{}Class D275:M9{}Class _{}Class __{}Class _4:u{_iy(wp2,_:Array [Array [Array [Array [String ,68],2669],0X8],0xE_6];_:Array [Float ,0b1];gC:__;n,_:Int ;U:s_;__w_,r_:Q7){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(c),Id(R),[]),ClassDecl(Id(l0),Id(Mt),[]),ClassDecl(Id(D275),Id(M9),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__),[]),ClassDecl(Id(_4),Id(u),[MethodDecl(Id(_iy),Instance,[param(Id(wp2),ArrayType(230,ArrayType(8,ArrayType(2669,ArrayType(68,StringType))))),param(Id(_),ArrayType(230,ArrayType(8,ArrayType(2669,ArrayType(68,StringType))))),param(Id(_),ArrayType(1,FloatType)),param(Id(gC),ClassType(Id(__))),param(Id(n),IntType),param(Id(_),IntType),param(Id(U),ClassType(Id(s_))),param(Id(__w_),ClassType(Id(Q7))),param(Id(r_),ClassType(Id(Q7)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 560))

    def test_561(self):
        line = '''Class __:q1{Destructor (){}Val _,_:_;}Class _d{Val k47:Array [Array [String ,0b1111],0x20];Var _,_,__5_e:r;}Class _{Val $4_:Array [Array [Array [Float ,0b1],0x9_7],0b1];}'''
        expect = '''Program([ClassDecl(Id(__),Id(q1),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_d),[AttributeDecl(Instance,ConstDecl(Id(k47),ArrayType(32,ArrayType(15,StringType)),None)),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__5_e),ClassType(Id(r)),NullLiteral()))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($4_),ArrayType(1,ArrayType(151,ArrayType(1,FloatType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 561))

    def test_562(self):
        line = '''Class _{Val B,s,$x_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,2],0B1_1],0B1_00_1],0X2B],01],2_67],0b10_1_0],2],016],0b11011],5_4];}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(B),ArrayType(54,ArrayType(27,ArrayType(14,ArrayType(2,ArrayType(10,ArrayType(267,ArrayType(1,ArrayType(43,ArrayType(9,ArrayType(3,ArrayType(2,FloatType))))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(s),ArrayType(54,ArrayType(27,ArrayType(14,ArrayType(2,ArrayType(10,ArrayType(267,ArrayType(1,ArrayType(43,ArrayType(9,ArrayType(3,ArrayType(2,FloatType))))))))))),None)),AttributeDecl(Static,ConstDecl(Id($x_),ArrayType(54,ArrayType(27,ArrayType(14,ArrayType(2,ArrayType(10,ArrayType(267,ArrayType(1,ArrayType(43,ArrayType(9,ArrayType(3,ArrayType(2,FloatType))))))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 562))

    def test_563(self):
        line = '''Class _{$0__(){}Var _0:Array [Array [Array [Array [Array [String ,067],025_6],05],22],0b1010];Constructor (_:Float ;__M:P;_y:Boolean ){} }Class Ce:___0_K{Var i,_W3:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($0__),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_0),ArrayType(10,ArrayType(22,ArrayType(5,ArrayType(174,ArrayType(55,StringType))))))),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(__M),ClassType(Id(P))),param(Id(_y),BoolType)],Block([]))]),ClassDecl(Id(Ce),Id(___0_K),[AttributeDecl(Instance,VarDecl(Id(i),IntType)),AttributeDecl(Instance,VarDecl(Id(_W3),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 563))

    def test_564(self):
        line = '''Class m:w{Var _2Fq_,$_:Int ;Val _,$_2,$4:Boolean ;}Class L0{Val $Z:Int ;Var Q,$S779:Float ;Var j3A__q:Boolean ;}Class _9{}Class i{}Class XD_:_{Val Go,_,_:Array [Float ,04];}'''
        expect = '''Program([ClassDecl(Id(m),Id(w),[AttributeDecl(Instance,VarDecl(Id(_2Fq_),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_2),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($4),BoolType,None))]),ClassDecl(Id(L0),[AttributeDecl(Static,ConstDecl(Id($Z),IntType,None)),AttributeDecl(Instance,VarDecl(Id(Q),FloatType)),AttributeDecl(Static,VarDecl(Id($S779),FloatType)),AttributeDecl(Instance,VarDecl(Id(j3A__q),BoolType))]),ClassDecl(Id(_9),[]),ClassDecl(Id(i),[]),ClassDecl(Id(XD_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(Go),ArrayType(4,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 564))

    def test_565(self):
        line = '''Class I_:vYl0{}Class Ew6{Var $k,$_3,K,_5:Array [Array [Array [String ,0B1],0B1],0B1010111];$5_22(p3:Array [Array [Array [Array [Array [Array [Array [Array [String ,0B11],0X5_32_C],21],0B1010111],036],036],0X3F],21];X:_;L,El:Array [Float ,0X3F];n:T_){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(I_),Id(vYl0),[]),ClassDecl(Id(Ew6),[AttributeDecl(Static,VarDecl(Id($k),ArrayType(87,ArrayType(1,ArrayType(1,StringType))))),AttributeDecl(Static,VarDecl(Id($_3),ArrayType(87,ArrayType(1,ArrayType(1,StringType))))),AttributeDecl(Instance,VarDecl(Id(K),ArrayType(87,ArrayType(1,ArrayType(1,StringType))))),AttributeDecl(Instance,VarDecl(Id(_5),ArrayType(87,ArrayType(1,ArrayType(1,StringType))))),MethodDecl(Id($5_22),Static,[param(Id(p3),ArrayType(21,ArrayType(63,ArrayType(30,ArrayType(30,ArrayType(87,ArrayType(21,ArrayType(21292,ArrayType(3,StringType))))))))),param(Id(X),ClassType(Id(_))),param(Id(L),ArrayType(63,FloatType)),param(Id(El),ArrayType(63,FloatType)),param(Id(n),ClassType(Id(T_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 565))

    def test_566(self):
        line = '''Class __4NWi__{Var $xi:Array [Array [String ,0B1],4];Val $_,$3k:_3;Val $_,W,G,Su9:e;_(){}$51_(){} }Class G2:_KT{}Class _{}Class v:_1{Destructor (){} }Class J:y6{Constructor (){Var G5_O:h;} }'''
        expect = '''Program([ClassDecl(Id(__4NWi__),[AttributeDecl(Static,VarDecl(Id($xi),ArrayType(4,ArrayType(1,StringType)))),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_3)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($3k),ClassType(Id(_3)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(W),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(G),ClassType(Id(e)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(Su9),ClassType(Id(e)),NullLiteral())),MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id($51_),Static,[],Block([]))]),ClassDecl(Id(G2),Id(_KT),[]),ClassDecl(Id(_),[]),ClassDecl(Id(v),Id(_1),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(J),Id(y6),[MethodDecl(Id(Constructor),Instance,[],Block([VarDecl(Id(G5_O),ClassType(Id(h)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 566))

    def test_567(self):
        line = '''Class _44r:_rr_{$0(gtT:String ;Tm:Array [Boolean ,5];_,b:n_;Y_,fL:Array [Array [Array [Array [Float ,0111],0X31],0111],0x2]){Break ;}_(_2:Array [String ,0B111010]){}R5_88(pL6KO6,X:__B){} }'''
        expect = '''Program([ClassDecl(Id(_44r),Id(_rr_),[MethodDecl(Id($0),Static,[param(Id(gtT),StringType),param(Id(Tm),ArrayType(5,BoolType)),param(Id(_),ClassType(Id(n_))),param(Id(b),ClassType(Id(n_))),param(Id(Y_),ArrayType(2,ArrayType(73,ArrayType(49,ArrayType(73,FloatType))))),param(Id(fL),ArrayType(2,ArrayType(73,ArrayType(49,ArrayType(73,FloatType)))))],Block([Break])),MethodDecl(Id(_),Instance,[param(Id(_2),ArrayType(58,StringType))],Block([])),MethodDecl(Id(R5_88),Instance,[param(Id(pL6KO6),ClassType(Id(__B))),param(Id(X),ClassType(Id(__B)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 567))

    def test_568(self):
        line = '''Class xf{Constructor (Kj,_:n_x_;C_,_1:String ;df,_,_,Y0:Array [Array [Int ,0b10010],03];_269:Array [Array [Boolean ,0X44],0x2E_A]){} }Class M:K_{}Class d:Y{Constructor (_6_,F,Kv5,O:Float ;_H:Array [Array [Array [Array [Float ,0B100],5_1],19],19];_,__6_:String ;_V,I:Float ){} }'''
        expect = '''Program([ClassDecl(Id(xf),[MethodDecl(Id(Constructor),Instance,[param(Id(Kj),ClassType(Id(n_x_))),param(Id(_),ClassType(Id(n_x_))),param(Id(C_),StringType),param(Id(_1),StringType),param(Id(df),ArrayType(3,ArrayType(18,IntType))),param(Id(_),ArrayType(3,ArrayType(18,IntType))),param(Id(_),ArrayType(3,ArrayType(18,IntType))),param(Id(Y0),ArrayType(3,ArrayType(18,IntType))),param(Id(_269),ArrayType(746,ArrayType(68,BoolType)))],Block([]))]),ClassDecl(Id(M),Id(K_),[]),ClassDecl(Id(d),Id(Y),[MethodDecl(Id(Constructor),Instance,[param(Id(_6_),FloatType),param(Id(F),FloatType),param(Id(Kv5),FloatType),param(Id(O),FloatType),param(Id(_H),ArrayType(19,ArrayType(19,ArrayType(51,ArrayType(4,FloatType))))),param(Id(_),StringType),param(Id(__6_),StringType),param(Id(_V),FloatType),param(Id(I),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 568))

    def test_569(self):
        line = '''Class y:_1To__{O(f:String ;_405,_u_,_L,l,_Zy,_S,__N,q:V_;e,_:Array [Array [Array [Array [Array [Int ,0X16],0X16],0X16],0xE_4],0B1000101]){}Constructor (B5_,_S:m9;_z1:Int ){Var _bi:Array [Array [Boolean ,36],0X4_7];} }'''
        expect = '''Program([ClassDecl(Id(y),Id(_1To__),[MethodDecl(Id(O),Instance,[param(Id(f),StringType),param(Id(_405),ClassType(Id(V_))),param(Id(_u_),ClassType(Id(V_))),param(Id(_L),ClassType(Id(V_))),param(Id(l),ClassType(Id(V_))),param(Id(_Zy),ClassType(Id(V_))),param(Id(_S),ClassType(Id(V_))),param(Id(__N),ClassType(Id(V_))),param(Id(q),ClassType(Id(V_))),param(Id(e),ArrayType(69,ArrayType(228,ArrayType(22,ArrayType(22,ArrayType(22,IntType)))))),param(Id(_),ArrayType(69,ArrayType(228,ArrayType(22,ArrayType(22,ArrayType(22,IntType))))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(B5_),ClassType(Id(m9))),param(Id(_S),ClassType(Id(m9))),param(Id(_z1),IntType)],Block([VarDecl(Id(_bi),ArrayType(71,ArrayType(36,BoolType)))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 569))

    def test_570(self):
        line = '''Class q_R:_87_{Constructor (_,R33_2j:_;_3:Array [String ,0x61]){Break ;}Val Y_G,$9__,$316,V:_1;Destructor (){} }Class _:_{}Class T:T{}Class zl:_7{Var XO__:Float =!!!!!_::$80.__;}'''
        expect = '''Program([ClassDecl(Id(q_R),Id(_87_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(R33_2j),ClassType(Id(_))),param(Id(_3),ArrayType(97,StringType))],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(Y_G),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9__),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($316),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(V),ClassType(Id(_1)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(T),Id(T),[]),ClassDecl(Id(zl),Id(_7),[AttributeDecl(Instance,VarDecl(Id(S1_bx89o),FloatType,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,UnaryOp(!,FieldAccess(FieldAccess(Id(_),Id($80)),Id(__)))))))))])])'''
        #self.assertTrue(TestAST.test(line, expect, 570))

    def test_571(self):
        line = '''Class _{Constructor (td:Float ;sp,Q69L:Int ;_0_:Array [Float ,0B110];_17,c,_35,R,G,K_:Array [String ,64];Gc,L4:Array [Array [Array [Int ,045],0x55],045]){}Val $yM:Float ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(td),FloatType),param(Id(sp),IntType),param(Id(Q69L),IntType),param(Id(_0_),ArrayType(6,FloatType)),param(Id(_17),ArrayType(64,StringType)),param(Id(c),ArrayType(64,StringType)),param(Id(_35),ArrayType(64,StringType)),param(Id(R),ArrayType(64,StringType)),param(Id(G),ArrayType(64,StringType)),param(Id(K_),ArrayType(64,StringType)),param(Id(Gc),ArrayType(37,ArrayType(85,ArrayType(37,IntType)))),param(Id(L4),ArrayType(37,ArrayType(85,ArrayType(37,IntType))))],Block([])),AttributeDecl(Static,ConstDecl(Id($yM),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 571))

    def test_572(self):
        line = '''Class Cm_:_5{}Class __{Destructor (){} }Class __I:__D{}Class X:D_{Constructor (_5,_6:Array [Array [Array [Array [Boolean ,0X1],073],0X1],4];z_,_F5,O:IS2v){Return ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Cm_),Id(_5),[]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__I),Id(__D),[]),ClassDecl(Id(X),Id(D_),[MethodDecl(Id(Constructor),Instance,[param(Id(_5),ArrayType(4,ArrayType(1,ArrayType(59,ArrayType(1,BoolType))))),param(Id(_6),ArrayType(4,ArrayType(1,ArrayType(59,ArrayType(1,BoolType))))),param(Id(z_),ClassType(Id(IS2v))),param(Id(_F5),ClassType(Id(IS2v))),param(Id(O),ClassType(Id(IS2v)))],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 572))

    def test_573(self):
        line = '''Class c{Constructor (){}Constructor (u__x:w5Ja;_:_;ip_:Array [Array [Array [String ,0B1111],45],0X5]){}p0(){} }Class _:_{Var $33,$__,$TxGr,o,$_:_1;K0(){} }Class __:W_{}'''
        expect = '''Program([ClassDecl(Id(c),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(u__x),ClassType(Id(w5Ja))),param(Id(_),ClassType(Id(_))),param(Id(ip_),ArrayType(5,ArrayType(45,ArrayType(15,StringType))))],Block([])),MethodDecl(Id(p0),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($33),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($TxGr),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(o),ClassType(Id(_1)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_1)),NullLiteral())),MethodDecl(Id(K0),Instance,[],Block([]))]),ClassDecl(Id(__),Id(W_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 573))

    def test_574(self):
        line = '''Class dJ4V9:_{}Class _832Hp:Z6{Val $yB:_;Val O_y,_t_:EeB3;}Class d:f{Val $946:_;}Class _P{Var $2_,$_,$C,$__sc:Array [Array [Array [Array [Array [String ,7],0X42],02],0B1],0x31];}'''
        expect = '''Program([ClassDecl(Id(dJ4V9),Id(_),[]),ClassDecl(Id(_832Hp),Id(Z6),[AttributeDecl(Static,ConstDecl(Id($yB),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(O_y),ClassType(Id(EeB3)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_t_),ClassType(Id(EeB3)),NullLiteral()))]),ClassDecl(Id(d),Id(f),[AttributeDecl(Static,ConstDecl(Id($946),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_P),[AttributeDecl(Static,VarDecl(Id($2_),ArrayType(49,ArrayType(1,ArrayType(2,ArrayType(66,ArrayType(7,StringType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(49,ArrayType(1,ArrayType(2,ArrayType(66,ArrayType(7,StringType))))))),AttributeDecl(Static,VarDecl(Id($C),ArrayType(49,ArrayType(1,ArrayType(2,ArrayType(66,ArrayType(7,StringType))))))),AttributeDecl(Static,VarDecl(Id($__sc),ArrayType(49,ArrayType(1,ArrayType(2,ArrayType(66,ArrayType(7,StringType)))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 574))

    def test_575(self):
        line = '''Class Q:c{Val v__4:Array [Array [Array [String ,01],0B1],07];Var $_4:Array [Boolean ,02_3];Destructor (){}Val _,$8:Array [Array [Array [Array [Boolean ,2],2],2],0x1];}'''
        expect = '''Program([ClassDecl(Id(Q),Id(c),[AttributeDecl(Instance,ConstDecl(Id(v__4),ArrayType(7,ArrayType(1,ArrayType(1,StringType))),None)),AttributeDecl(Static,VarDecl(Id($_4),ArrayType(19,BoolType))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(2,ArrayType(2,ArrayType(2,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(1,ArrayType(2,ArrayType(2,ArrayType(2,BoolType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 575))

    def test_576(self):
        line = '''Class _:o{}Class _{Val __,$9:U;}Class IXr:h{Var $m,$_:Array [String ,0B101111];Constructor (_2:M){}Constructor (){Continue ;Continue ;Val y6L_,_,_:Array [String ,0B101111];}Val $8V4_5:x;}'''
        expect = '''Program([ClassDecl(Id(_),Id(o),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(U)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(U)),NullLiteral()))]),ClassDecl(Id(IXr),Id(h),[AttributeDecl(Static,VarDecl(Id($m),ArrayType(47,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(47,StringType))),MethodDecl(Id(Constructor),Instance,[param(Id(_2),ClassType(Id(M)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Continue,ConstDecl(Id(y6L_),ArrayType(47,StringType),None),ConstDecl(Id(_),ArrayType(47,StringType),None),ConstDecl(Id(_),ArrayType(47,StringType),None)])),AttributeDecl(Static,ConstDecl(Id($8V4_5),ClassType(Id(x)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 576))

    def test_577(self):
        line = '''Class h4:rb{Constructor (){Continue ;Return ;} }Class _:__{}Class _2q5_:_WsT{Var _:Boolean ;Constructor (){}__D0(){Var x,_,___:v_;Return ;Val u,y,_2:_;}Var $Q,_V5:String ;}'''
        expect = '''Program([ClassDecl(Id(h4),Id(rb),[MethodDecl(Id(Constructor),Instance,[],Block([Continue,Return()]))]),ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(_2q5_),Id(_WsT),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(__D0),Instance,[],Block([VarDecl(Id(x),ClassType(Id(v_)),NullLiteral()),VarDecl(Id(_),ClassType(Id(v_)),NullLiteral()),VarDecl(Id(___),ClassType(Id(v_)),NullLiteral()),Return(),ConstDecl(Id(u),ClassType(Id(_)),NullLiteral()),ConstDecl(Id(y),ClassType(Id(_)),NullLiteral()),ConstDecl(Id(_2),ClassType(Id(_)),NullLiteral())])),AttributeDecl(Static,VarDecl(Id($Q),StringType)),AttributeDecl(Instance,VarDecl(Id(_V5),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 577))

    def test_578(self):
        line = '''Class Y6:c__{}Class _{}Class _:oS_{Destructor (){}Destructor (){} }Class _{}Class _4{}Class _:i31T2_2_0ih{}Class K{}Class g_6__{$5_l(_S_,_,_po__,_,_0__2_S_OG2P,W2,H:_GZ){} }Class _3V{Destructor (){Var _W_w6:b;} }Class H2B4{Val _8,$_:Array [Int ,06_6];}Class E{}Class R2_:__{Val $_:Float ;}'''
        expect = '''Program([ClassDecl(Id(Y6),Id(c__),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(oS_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_4),[]),ClassDecl(Id(_),Id(i31T2_2_0ih),[]),ClassDecl(Id(K),[]),ClassDecl(Id(g_6__),[MethodDecl(Id($5_l),Static,[param(Id(_S_),ClassType(Id(_GZ))),param(Id(_),ClassType(Id(_GZ))),param(Id(_po__),ClassType(Id(_GZ))),param(Id(_),ClassType(Id(_GZ))),param(Id(_0__2_S_OG2P),ClassType(Id(_GZ))),param(Id(W2),ClassType(Id(_GZ))),param(Id(H),ClassType(Id(_GZ)))],Block([]))]),ClassDecl(Id(_3V),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_W_w6),ClassType(Id(b)),NullLiteral())]))]),ClassDecl(Id(H2B4),[AttributeDecl(Instance,ConstDecl(Id(_8),ArrayType(54,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(54,IntType),None))]),ClassDecl(Id(E),[]),ClassDecl(Id(R2_),Id(__),[AttributeDecl(Static,ConstDecl(Id($_),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 578))

    def test_579(self):
        line = '''Class Uw:Z{Constructor (){}Val $_4:f;Destructor (){}Var W7:Int ;Constructor (){}Val $4H:Array [String ,0B1100];}Class K:_g{}Class _Ng{$Y9(__,T2r,_:Array [Array [Array [String ,7],0b100111],024];f4_:Boolean ;_,_:u){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Uw),Id(Z),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_4),ClassType(Id(f)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(W7),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($4H),ArrayType(12,StringType),None))]),ClassDecl(Id(K),Id(_g),[]),ClassDecl(Id(_Ng),[MethodDecl(Id($Y9),Static,[param(Id(__),ArrayType(20,ArrayType(39,ArrayType(7,StringType)))),param(Id(T2r),ArrayType(20,ArrayType(39,ArrayType(7,StringType)))),param(Id(_),ArrayType(20,ArrayType(39,ArrayType(7,StringType)))),param(Id(f4_),BoolType),param(Id(_),ClassType(Id(u))),param(Id(_),ClassType(Id(u)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 579))

    def test_580(self):
        line = '''Class D{_5_Q(_e_:Float ;_8,_u,o_:Array [String ,074];t__:Array [Array [Float ,01_3],0B1]){}Val a48Q,$r,$_,P,$__:C;}Class t0:C{Var _o6:Array [Array [Float ,0B11],0b11];}'''
        expect = '''Program([ClassDecl(Id(D),[MethodDecl(Id(_5_Q),Instance,[param(Id(_e_),FloatType),param(Id(_8),ArrayType(60,StringType)),param(Id(_u),ArrayType(60,StringType)),param(Id(o_),ArrayType(60,StringType)),param(Id(t__),ArrayType(1,ArrayType(11,FloatType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(a48Q),ClassType(Id(C)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($r),ClassType(Id(C)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(C)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(P),ClassType(Id(C)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(C)),NullLiteral()))]),ClassDecl(Id(t0),Id(C),[AttributeDecl(Instance,VarDecl(Id(_o6),ArrayType(3,ArrayType(3,FloatType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 580))

    def test_581(self):
        line = '''Class s__{Val Y:Array [Int ,0B10111];Val $4__,$__,_,_S_3_2P_C,$04,$98_,$4:Array [Float ,4];t_(){} }Class E:lk{}Class _{$ID(_u:_;_0,__:Array [Array [Float ,0X5B],2];W:_;ZS59,p,__1_:Array [String ,7]){_::$B._Y();}Constructor (X0A,p_:Float ;__:String ;O_,_:Array [Array [Array [Boolean ,0B1],0x36],0X7_D];_,S:Array [Int ,06]){} }'''
        expect = '''Program([ClassDecl(Id(s__),[AttributeDecl(Instance,ConstDecl(Id(Y),ArrayType(23,IntType),None)),AttributeDecl(Static,ConstDecl(Id($4__),ArrayType(4,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(4,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_S_3_2P_C),ArrayType(4,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($04),ArrayType(4,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($98_),ArrayType(4,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(4,FloatType),None)),MethodDecl(Id(t_),Instance,[],Block([]))]),ClassDecl(Id(E),Id(lk),[]),ClassDecl(Id(_),[MethodDecl(Id($ID),Static,[param(Id(_u),ClassType(Id(_))),param(Id(_0),ArrayType(2,ArrayType(91,FloatType))),param(Id(__),ArrayType(2,ArrayType(91,FloatType))),param(Id(W),ClassType(Id(_))),param(Id(ZS59),ArrayType(7,StringType)),param(Id(p),ArrayType(7,StringType)),param(Id(__1_),ArrayType(7,StringType))],Block([Call(FieldAccess(Id(_),Id($B)),Id(_Y),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(X0A),FloatType),param(Id(p_),FloatType),param(Id(__),StringType),param(Id(O_),ArrayType(125,ArrayType(54,ArrayType(1,BoolType)))),param(Id(_),ArrayType(125,ArrayType(54,ArrayType(1,BoolType)))),param(Id(_),ArrayType(6,IntType)),param(Id(S),ArrayType(6,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 581))

    def test_582(self):
        line = '''Class _{Var $JzT32,l:pc;Val $7SAO_l5,_,$4Mh7P__,$2__J,$_D,__:__;_(_0,_,P,_13:Array [Array [Float ,0x60],12];N_f:Array [Array [Boolean ,0B1010100],0X2];__i:Array [Array [Array [Boolean ,0B1],0XE],0x60]){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($JzT32),ClassType(Id(pc)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(l),ClassType(Id(pc)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($7SAO_l5),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($4Mh7P__),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($2__J),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_D),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(_0),ArrayType(12,ArrayType(96,FloatType))),param(Id(_),ArrayType(12,ArrayType(96,FloatType))),param(Id(P),ArrayType(12,ArrayType(96,FloatType))),param(Id(_13),ArrayType(12,ArrayType(96,FloatType))),param(Id(N_f),ArrayType(2,ArrayType(84,BoolType))),param(Id(__i),ArrayType(96,ArrayType(14,ArrayType(1,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 582))

    def test_583(self):
        line = '''Class _:_{Constructor (G7:U;J,_1,_:Array [Array [Array [Array [Array [String ,0B1],03],03_6_20_04_1],07],0B1_10];V:Array [Boolean ,0B10001];T9_t_,G,_4,_7,_,U,M:Array [Array [Array [Array [Array [Boolean ,0X11],030],046_1],3_6_30_044],0B10001]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(G7),ClassType(Id(U))),param(Id(J),ArrayType(6,ArrayType(7,ArrayType(991265,ArrayType(3,ArrayType(1,StringType)))))),param(Id(_1),ArrayType(6,ArrayType(7,ArrayType(991265,ArrayType(3,ArrayType(1,StringType)))))),param(Id(_),ArrayType(6,ArrayType(7,ArrayType(991265,ArrayType(3,ArrayType(1,StringType)))))),param(Id(V),ArrayType(17,BoolType)),param(Id(T9_t_),ArrayType(17,ArrayType(3630044,ArrayType(305,ArrayType(24,ArrayType(17,BoolType)))))),param(Id(G),ArrayType(17,ArrayType(3630044,ArrayType(305,ArrayType(24,ArrayType(17,BoolType)))))),param(Id(_4),ArrayType(17,ArrayType(3630044,ArrayType(305,ArrayType(24,ArrayType(17,BoolType)))))),param(Id(_7),ArrayType(17,ArrayType(3630044,ArrayType(305,ArrayType(24,ArrayType(17,BoolType)))))),param(Id(_),ArrayType(17,ArrayType(3630044,ArrayType(305,ArrayType(24,ArrayType(17,BoolType)))))),param(Id(U),ArrayType(17,ArrayType(3630044,ArrayType(305,ArrayType(24,ArrayType(17,BoolType)))))),param(Id(M),ArrayType(17,ArrayType(3630044,ArrayType(305,ArrayType(24,ArrayType(17,BoolType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 583))

    def test_584(self):
        line = '''Class B{hZFyT_8_(){} }Class MO{}Class l1_t_j:_{Constructor (){}Val $k5:Array [Array [Array [Array [Array [Array [String ,0X1E],67],0X1E],0x1],027],0x5B];}Class L_45_:_{}'''
        expect = '''Program([ClassDecl(Id(B),[MethodDecl(Id(hZFyT_8_),Instance,[],Block([]))]),ClassDecl(Id(MO),[]),ClassDecl(Id(l1_t_j),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($k5),ArrayType(91,ArrayType(23,ArrayType(1,ArrayType(30,ArrayType(67,ArrayType(30,StringType)))))),None))]),ClassDecl(Id(L_45_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 584))

    def test_585(self):
        line = '''Class j_{Destructor (){} }Class __{Var $_,_m_2,$_,K:Array [Array [Array [Boolean ,38],0142],0B1_0];Val t7,$G_2,$8,$_K09_9e:u;Destructor (){}Val $jN:Array [Int ,0142];Destructor (){}Val $9g:String ;}'''
        expect = '''Program([ClassDecl(Id(j_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(2,ArrayType(98,ArrayType(38,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_m_2),ArrayType(2,ArrayType(98,ArrayType(38,BoolType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(2,ArrayType(98,ArrayType(38,BoolType))))),AttributeDecl(Instance,VarDecl(Id(K),ArrayType(2,ArrayType(98,ArrayType(38,BoolType))))),AttributeDecl(Instance,ConstDecl(Id(t7),ClassType(Id(u)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($G_2),ClassType(Id(u)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($8),ClassType(Id(u)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_K09_9e),ClassType(Id(u)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($jN),ArrayType(98,IntType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($9g),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 585))

    def test_586(self):
        line = '''Class G{Destructor (){o_o1::$_();}Constructor (ih_,_,_,_,__,x,_5,Rw,___9X_P:Int ){} }Class zg{Val $7n:Array [Array [String ,4],0X26];$y(_0,R_53_10,__U2,F4_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(G),[MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(o_o1),Id($_),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(ih_),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(__),IntType),param(Id(x),IntType),param(Id(_5),IntType),param(Id(Rw),IntType),param(Id(___9X_P),IntType)],Block([]))]),ClassDecl(Id(zg),[AttributeDecl(Static,ConstDecl(Id($7n),ArrayType(38,ArrayType(4,StringType)),None)),MethodDecl(Id($y),Static,[param(Id(_0),BoolType),param(Id(R_53_10),BoolType),param(Id(__U2),BoolType),param(Id(F4_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 586))

    def test_587(self):
        line = '''Class _{Val Q,K_9_,$87,$_,mI,$e:Array [Array [Array [Int ,056],0b1001111],0b1001111];Val _:_;Constructor (j:Array [Array [Array [Boolean ,7],0X64],0XB1_4]){Break ;}Destructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(Q),ArrayType(79,ArrayType(79,ArrayType(46,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(K_9_),ArrayType(79,ArrayType(79,ArrayType(46,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($87),ArrayType(79,ArrayType(79,ArrayType(46,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(79,ArrayType(79,ArrayType(46,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(mI),ArrayType(79,ArrayType(79,ArrayType(46,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($e),ArrayType(79,ArrayType(79,ArrayType(46,IntType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(j),ArrayType(2836,ArrayType(100,ArrayType(7,BoolType))))],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 587))

    def test_588(self):
        line = '''Class __{Var Z2,$1_8:Int ;}Class M{v(ST_:Array [Boolean ,0X1F];_,sq5,W,_,_:String ;_,c7,O,r_5:C;_5,_,f_:Float ){} }Class ___:T{Var t:N;}Class B5:__{Val $q03OM7:_;}Class __:_2_{}'''
        expect = '''Program([ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(Z2),IntType)),AttributeDecl(Static,VarDecl(Id($1_8),IntType))]),ClassDecl(Id(M),[MethodDecl(Id(v),Instance,[param(Id(ST_),ArrayType(31,BoolType)),param(Id(_),StringType),param(Id(sq5),StringType),param(Id(W),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(_),ClassType(Id(C))),param(Id(c7),ClassType(Id(C))),param(Id(O),ClassType(Id(C))),param(Id(r_5),ClassType(Id(C))),param(Id(_5),FloatType),param(Id(_),FloatType),param(Id(f_),FloatType)],Block([]))]),ClassDecl(Id(___),Id(T),[AttributeDecl(Instance,VarDecl(Id(t),ClassType(Id(N)),NullLiteral()))]),ClassDecl(Id(B5),Id(__),[AttributeDecl(Static,ConstDecl(Id($q03OM7),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(__),Id(_2_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 588))

    def test_589(self):
        line = '''Class bQ_5I:_7{}Class _:_4{Destructor (){}Constructor (_6p,__6e,_,_:Array [String ,0X2A];_:Array [String ,9];D7,I2:Z;m3_:Boolean ;__6,_A__,__,F,e:J){}Var C,$e:Int ;Var $7:Array [Array [Array [Array [String ,9],0X2A],05],05];}Class G{}Class D4_1_:h_a{}'''
        expect = '''Program([ClassDecl(Id(bQ_5I),Id(_7),[]),ClassDecl(Id(_),Id(_4),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_6p),ArrayType(42,StringType)),param(Id(__6e),ArrayType(42,StringType)),param(Id(_),ArrayType(42,StringType)),param(Id(_),ArrayType(42,StringType)),param(Id(_),ArrayType(9,StringType)),param(Id(D7),ClassType(Id(Z))),param(Id(I2),ClassType(Id(Z))),param(Id(m3_),BoolType),param(Id(__6),ClassType(Id(J))),param(Id(_A__),ClassType(Id(J))),param(Id(__),ClassType(Id(J))),param(Id(F),ClassType(Id(J))),param(Id(e),ClassType(Id(J)))],Block([])),AttributeDecl(Instance,VarDecl(Id(C),IntType)),AttributeDecl(Static,VarDecl(Id($e),IntType)),AttributeDecl(Static,VarDecl(Id($7),ArrayType(5,ArrayType(5,ArrayType(42,ArrayType(9,StringType))))))]),ClassDecl(Id(G),[]),ClassDecl(Id(D4_1_),Id(h_a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 589))

    def test_590(self):
        line = '''Class _{Constructor (_,De:Array [Float ,01];SE_7f,_5_:Array [Array [Boolean ,0b1010111],14]){}Var $2:Boolean ;}Class V{Constructor (w,L8,L__7,y_79t:Array [Float ,0144];_4s76:Float ;_,_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,FloatType)),param(Id(De),ArrayType(1,FloatType)),param(Id(SE_7f),ArrayType(14,ArrayType(87,BoolType))),param(Id(_5_),ArrayType(14,ArrayType(87,BoolType)))],Block([])),AttributeDecl(Static,VarDecl(Id($2),BoolType))]),ClassDecl(Id(V),[MethodDecl(Id(Constructor),Instance,[param(Id(w),ArrayType(100,FloatType)),param(Id(L8),ArrayType(100,FloatType)),param(Id(L__7),ArrayType(100,FloatType)),param(Id(y_79t),ArrayType(100,FloatType)),param(Id(_4s76),FloatType),param(Id(_),IntType),param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 590))

    def test_591(self):
        line = '''Class _:W_{$O(){}Val _,X:String ;Var _,_:Array [Array [Array [String ,02_3],0b1010010],0x30];_2q_(){} }Class _{Destructor (){} }Class ngJ{Var $2,_:Array [Array [Array [Array [Int ,0xE_E81],0x2],1_1],0X6];}'''
        expect = '''Program([ClassDecl(Id(_),Id(W_),[MethodDecl(Id($O),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(X),StringType,None)),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(48,ArrayType(82,ArrayType(19,StringType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(48,ArrayType(82,ArrayType(19,StringType))))),MethodDecl(Id(_2q_),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(ngJ),[AttributeDecl(Static,VarDecl(Id($2),ArrayType(6,ArrayType(11,ArrayType(2,ArrayType(61057,IntType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(6,ArrayType(11,ArrayType(2,ArrayType(61057,IntType))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 591))

    def test_592(self):
        line = '''Class _P5{$L7(vE5,D:Array [String ,0X7];_v,_:_g___;N_1,c9:Array [Float ,036];_,M:Array [Array [Int ,07],044_6_7];I,_,_:Array [Boolean ,0x3F]){}$2(_:W9;i:Array [Boolean ,0x3F]){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_P5),[MethodDecl(Id($L7),Static,[param(Id(vE5),ArrayType(7,StringType)),param(Id(D),ArrayType(7,StringType)),param(Id(_v),ClassType(Id(_g___))),param(Id(_),ClassType(Id(_g___))),param(Id(N_1),ArrayType(30,FloatType)),param(Id(c9),ArrayType(30,FloatType)),param(Id(_),ArrayType(2359,ArrayType(7,IntType))),param(Id(M),ArrayType(2359,ArrayType(7,IntType))),param(Id(I),ArrayType(63,BoolType)),param(Id(_),ArrayType(63,BoolType)),param(Id(_),ArrayType(63,BoolType))],Block([])),MethodDecl(Id($2),Static,[param(Id(_),ClassType(Id(W9))),param(Id(i),ArrayType(63,BoolType))],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 592))

    def test_593(self):
        line = '''Class _:__{Val _,_8Cw0,$_:_6;}Class _:L9{}Class D{Var _4,i,$G:Array [Array [Int ,027],034_3_6];_(E,E_g:Boolean ;_o,s:Array [Array [Array [Int ,0X1],0X2F_6_3],027];r0,F3Z,o,B,v,F3,T19ro,x7_,nCq5k_y_:String ;H2,c9:String ){}Var $K,W,$k1N_:Array [Array [Array [Int ,0b10011],78],027];$3b(){}Var _:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_8Cw0),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_6)),NullLiteral()))]),ClassDecl(Id(_),Id(L9),[]),ClassDecl(Id(D),[AttributeDecl(Instance,VarDecl(Id(_4),ArrayType(1822,ArrayType(23,IntType)))),AttributeDecl(Instance,VarDecl(Id(i),ArrayType(1822,ArrayType(23,IntType)))),AttributeDecl(Static,VarDecl(Id($G),ArrayType(1822,ArrayType(23,IntType)))),MethodDecl(Id(_),Instance,[param(Id(E),BoolType),param(Id(E_g),BoolType),param(Id(_o),ArrayType(23,ArrayType(12131,ArrayType(1,IntType)))),param(Id(s),ArrayType(23,ArrayType(12131,ArrayType(1,IntType)))),param(Id(r0),StringType),param(Id(F3Z),StringType),param(Id(o),StringType),param(Id(B),StringType),param(Id(v),StringType),param(Id(F3),StringType),param(Id(T19ro),StringType),param(Id(x7_),StringType),param(Id(nCq5k_y_),StringType),param(Id(H2),StringType),param(Id(c9),StringType)],Block([])),AttributeDecl(Static,VarDecl(Id($K),ArrayType(23,ArrayType(78,ArrayType(19,IntType))))),AttributeDecl(Instance,VarDecl(Id(W),ArrayType(23,ArrayType(78,ArrayType(19,IntType))))),AttributeDecl(Static,VarDecl(Id($k1N_),ArrayType(23,ArrayType(78,ArrayType(19,IntType))))),MethodDecl(Id($3b),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 593))

    def test_594(self):
        line = '''Class X{}Class _q{}Class U{Constructor (x:Array [String ,8_6]){Break ;Return ;}Destructor (){}Constructor (k,_,_d_uu,bu8WY__5,h:Int ;__36vd,l37_,dm4,m,a:Int ;uyY_,__:Int ){Return ;} }Class U{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(X),[]),ClassDecl(Id(_q),[]),ClassDecl(Id(U),[MethodDecl(Id(Constructor),Instance,[param(Id(x),ArrayType(86,StringType))],Block([Break,Return()])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(k),IntType),param(Id(_),IntType),param(Id(_d_uu),IntType),param(Id(bu8WY__5),IntType),param(Id(h),IntType),param(Id(__36vd),IntType),param(Id(l37_),IntType),param(Id(dm4),IntType),param(Id(m),IntType),param(Id(a),IntType),param(Id(uyY_),IntType),param(Id(__),IntType)],Block([Return()]))]),ClassDecl(Id(U),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 594))

    def test_595(self):
        line = '''Class K{Destructor (){Return ;}Val e:_;_j(b__:_){}Var $_h:Int ;Var $K8,$_,x:Array [Float ,0X27];Var _,__,$_,$p,$_,$_,$_,d:Array [Array [Array [String ,0X27],0B1],02];}'''
        expect = '''Program([ClassDecl(Id(K),[MethodDecl(Id(Destructor),Instance,[],Block([Return()])),AttributeDecl(Instance,ConstDecl(Id(e),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(_j),Instance,[param(Id(b__),ClassType(Id(_)))],Block([])),AttributeDecl(Static,VarDecl(Id($_h),IntType)),AttributeDecl(Static,VarDecl(Id($K8),ArrayType(39,FloatType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(39,FloatType))),AttributeDecl(Instance,VarDecl(Id(x),ArrayType(39,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2,ArrayType(1,ArrayType(39,StringType))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(2,ArrayType(1,ArrayType(39,StringType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(2,ArrayType(1,ArrayType(39,StringType))))),AttributeDecl(Static,VarDecl(Id($p),ArrayType(2,ArrayType(1,ArrayType(39,StringType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(2,ArrayType(1,ArrayType(39,StringType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(2,ArrayType(1,ArrayType(39,StringType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(2,ArrayType(1,ArrayType(39,StringType))))),AttributeDecl(Instance,VarDecl(Id(d),ArrayType(2,ArrayType(1,ArrayType(39,StringType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 595))

    def test_596(self):
        line = '''Class __:_{Val Wf:Array [Array [Array [Array [Array [Array [String ,18],0x16],0b101000],0B111],0b1],0X2];}Class _:QI1x6{Destructor (){} }Class g_y:_h6_Q{Val $3:Float ;Var _068:M87_;}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(Wf),ArrayType(2,ArrayType(1,ArrayType(7,ArrayType(40,ArrayType(22,ArrayType(18,StringType)))))),None))]),ClassDecl(Id(_),Id(QI1x6),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(g_y),Id(_h6_Q),[AttributeDecl(Static,ConstDecl(Id($3),FloatType,None)),AttributeDecl(Instance,VarDecl(Id(_068),ClassType(Id(M87_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 596))

    def test_597(self):
        line = '''Class x:D7_{}Class _{}Class _:__z_{}Class _2:_I{$8(_:String ){} }Class Wp{Val _2__:String ;}Class _7b4{Val $_3_9G5P3,R__,$0_:Array [Array [Array [Array [Float ,010],5],9],04_7];}'''
        expect = '''Program([ClassDecl(Id(x),Id(D7_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(__z_),[]),ClassDecl(Id(_2),Id(_I),[MethodDecl(Id($8),Static,[param(Id(_),StringType)],Block([]))]),ClassDecl(Id(Wp),[AttributeDecl(Instance,ConstDecl(Id(_2__),StringType,None))]),ClassDecl(Id(_7b4),[AttributeDecl(Static,ConstDecl(Id($_3_9G5P3),ArrayType(39,ArrayType(9,ArrayType(5,ArrayType(8,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(R__),ArrayType(39,ArrayType(9,ArrayType(5,ArrayType(8,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($0_),ArrayType(39,ArrayType(9,ArrayType(5,ArrayType(8,FloatType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 597))

    def test_598(self):
        line = '''Class __3{Constructor (k,_6J,y,_9K,K8,H,___i,A,c,_:M;_,R,_3,_,v_ce4EP4,_,G,_1:Array [String ,0B1];_,k:Boolean ){}Destructor (){Break ;}$_4__1E(){Return ;} }Class _{}'''
        expect = '''Program([ClassDecl(Id(__3),[MethodDecl(Id(Constructor),Instance,[param(Id(k),ClassType(Id(M))),param(Id(_6J),ClassType(Id(M))),param(Id(y),ClassType(Id(M))),param(Id(_9K),ClassType(Id(M))),param(Id(K8),ClassType(Id(M))),param(Id(H),ClassType(Id(M))),param(Id(___i),ClassType(Id(M))),param(Id(A),ClassType(Id(M))),param(Id(c),ClassType(Id(M))),param(Id(_),ClassType(Id(M))),param(Id(_),ArrayType(1,StringType)),param(Id(R),ArrayType(1,StringType)),param(Id(_3),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(v_ce4EP4),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(G),ArrayType(1,StringType)),param(Id(_1),ArrayType(1,StringType)),param(Id(_),BoolType),param(Id(k),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id($_4__1E),Static,[],Block([Return()]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 598))

    def test_599(self):
        line = '''Class _j{}Class _m_:S{}Class pA{$_g4(w:Boolean ;__:_;D10:Array [Int ,5];m_:Float ;X,d:Array [Int ,5];s,Jb,N:Array [Float ,01]){}Val H,u,$L,$8_,L_4_S_K_,$6:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_j),[]),ClassDecl(Id(_m_),Id(S),[]),ClassDecl(Id(pA),[MethodDecl(Id($_g4),Static,[param(Id(w),BoolType),param(Id(__),ClassType(Id(_))),param(Id(D10),ArrayType(5,IntType)),param(Id(m_),FloatType),param(Id(X),ArrayType(5,IntType)),param(Id(d),ArrayType(5,IntType)),param(Id(s),ArrayType(1,FloatType)),param(Id(Jb),ArrayType(1,FloatType)),param(Id(N),ArrayType(1,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(H),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(u),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($L),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($8_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(L_4_S_K_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($6),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 599))

    def test_600(self):
        line = '''Class H:__{_(_,__,_p:Boolean ;_,S_0,_3,U8,a,_,_,_,u:Array [Array [Array [String ,02],0B110101],04_6];_,u:_){}t63(_28:O;T:cj;_:c_C56A_;_,m:_;__54__,H,T:String ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(H),Id(__),[MethodDecl(Id(_),Instance,[param(Id(_),BoolType),param(Id(__),BoolType),param(Id(_p),BoolType),param(Id(_),ArrayType(38,ArrayType(53,ArrayType(2,StringType)))),param(Id(S_0),ArrayType(38,ArrayType(53,ArrayType(2,StringType)))),param(Id(_3),ArrayType(38,ArrayType(53,ArrayType(2,StringType)))),param(Id(U8),ArrayType(38,ArrayType(53,ArrayType(2,StringType)))),param(Id(a),ArrayType(38,ArrayType(53,ArrayType(2,StringType)))),param(Id(_),ArrayType(38,ArrayType(53,ArrayType(2,StringType)))),param(Id(_),ArrayType(38,ArrayType(53,ArrayType(2,StringType)))),param(Id(_),ArrayType(38,ArrayType(53,ArrayType(2,StringType)))),param(Id(u),ArrayType(38,ArrayType(53,ArrayType(2,StringType)))),param(Id(_),ClassType(Id(_))),param(Id(u),ClassType(Id(_)))],Block([])),MethodDecl(Id(t63),Instance,[param(Id(_28),ClassType(Id(O))),param(Id(T),ClassType(Id(cj))),param(Id(_),ClassType(Id(c_C56A_))),param(Id(_),ClassType(Id(_))),param(Id(m),ClassType(Id(_))),param(Id(__54__),StringType),param(Id(H),StringType),param(Id(T),StringType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 600))

    def test_601(self):
        line = '''Class _1_{Constructor (Rf:Float ;_G,__6:Float ;_:Array [Array [Array [Int ,0111],0111],0B1000001];g:Array [Boolean ,0b1000100];_:_b;Z:Int ;_,v:String ){l2pV::$9__n();}Val $7,$_w4___:Float ;Var $_:Array [Array [Boolean ,0111],0111];}'''
        expect = '''Program([ClassDecl(Id(_1_),[MethodDecl(Id(Constructor),Instance,[param(Id(Rf),FloatType),param(Id(_G),FloatType),param(Id(__6),FloatType),param(Id(_),ArrayType(65,ArrayType(73,ArrayType(73,IntType)))),param(Id(g),ArrayType(68,BoolType)),param(Id(_),ClassType(Id(_b))),param(Id(Z),IntType),param(Id(_),StringType),param(Id(v),StringType)],Block([Call(Id(l2pV),Id($9__n),[])])),AttributeDecl(Static,ConstDecl(Id($7),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_w4___),FloatType,None)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(73,ArrayType(73,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 601))

    def test_602(self):
        line = '''Class __33x_5:A_ZR{}Class __{}Class W{}Class _A_33f:P{_D(o,j,U___v:Array [Array [Array [Array [Array [Array [Float ,70],0B1],70],07],0B110011],2_5];o362,_k:Float ;g:b;F:Boolean ){}Var $D,$3N:Array [Float ,94];}'''
        expect = '''Program([ClassDecl(Id(__33x_5),Id(A_ZR),[]),ClassDecl(Id(__),[]),ClassDecl(Id(W),[]),ClassDecl(Id(_A_33f),Id(P),[MethodDecl(Id(_D),Instance,[param(Id(o),ArrayType(25,ArrayType(51,ArrayType(7,ArrayType(70,ArrayType(1,ArrayType(70,FloatType))))))),param(Id(j),ArrayType(25,ArrayType(51,ArrayType(7,ArrayType(70,ArrayType(1,ArrayType(70,FloatType))))))),param(Id(U___v),ArrayType(25,ArrayType(51,ArrayType(7,ArrayType(70,ArrayType(1,ArrayType(70,FloatType))))))),param(Id(o362),FloatType),param(Id(_k),FloatType),param(Id(g),ClassType(Id(b))),param(Id(F),BoolType)],Block([])),AttributeDecl(Static,VarDecl(Id($D),ArrayType(94,FloatType))),AttributeDecl(Static,VarDecl(Id($3N),ArrayType(94,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 602))

    def test_603(self):
        line = '''Class _:x{}Class _5__:_e{Val $5:_;}Class _08:_{Val kT:au__099;}Class __:_V{Val $CC:P;$____0(){}Destructor (){}$l(_6:Array [Array [Array [String ,0b1111_01_1],18],18];Q,x,L,d:Boolean ){} }Class _{Constructor (){}Val $__3:_;}Class _9{Var $__,X:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(x),[]),ClassDecl(Id(_5__),Id(_e),[AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_08),Id(_),[AttributeDecl(Instance,ConstDecl(Id(kT),ClassType(Id(au__099)),NullLiteral()))]),ClassDecl(Id(__),Id(_V),[AttributeDecl(Static,ConstDecl(Id($CC),ClassType(Id(P)),NullLiteral())),MethodDecl(Id($____0),Static,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($l),Static,[param(Id(_6),ArrayType(18,ArrayType(18,ArrayType(123,StringType)))),param(Id(Q),BoolType),param(Id(x),BoolType),param(Id(L),BoolType),param(Id(d),BoolType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($__3),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_9),[AttributeDecl(Static,VarDecl(Id($__),BoolType)),AttributeDecl(Instance,VarDecl(Id(X),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 603))

    def test_604(self):
        line = '''Class _Q:L{}Class _l:__C{}Class _86:Y_55{Destructor (){New mm(!!89.95210E-6.T2()||!---_::$p7()).__.n._();}Constructor (){}Destructor (){} }Class F_:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_Q),Id(L),[]),ClassDecl(Id(_l),Id(__C),[]),ClassDecl(Id(_86),Id(Y_55),[MethodDecl(Id(Destructor),Instance,[],Block([Call(FieldAccess(FieldAccess(NewExpr(Id(mm),[BinaryOp(||,UnaryOp(!,UnaryOp(!,CallExpr(FloatLit(8.99521e-05),Id(T2),[]))),UnaryOp(!,UnaryOp(-,UnaryOp(-,UnaryOp(-,CallExpr(Id(_),Id($p7),[]))))))]),Id(__)),Id(n)),Id(_),[])])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(F_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 604))

    def test_605(self):
        line = '''Class _{}Class _:z{Constructor (N:Array [Int ,0B101101];Qu_,J,TbUJ__,_:Array [Array [Boolean ,0B1],69]){}Var $_1,$6,Y,$1K:Array [Array [Array [Array [Array [Array [Boolean ,0B101101],69],0x6],0b100001],010],69];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(z),[MethodDecl(Id(Constructor),Instance,[param(Id(N),ArrayType(45,IntType)),param(Id(Qu_),ArrayType(69,ArrayType(1,BoolType))),param(Id(J),ArrayType(69,ArrayType(1,BoolType))),param(Id(TbUJ__),ArrayType(69,ArrayType(1,BoolType))),param(Id(_),ArrayType(69,ArrayType(1,BoolType)))],Block([])),AttributeDecl(Static,VarDecl(Id($_1),ArrayType(69,ArrayType(8,ArrayType(33,ArrayType(6,ArrayType(69,ArrayType(45,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($6),ArrayType(69,ArrayType(8,ArrayType(33,ArrayType(6,ArrayType(69,ArrayType(45,BoolType)))))))),AttributeDecl(Instance,VarDecl(Id(Y),ArrayType(69,ArrayType(8,ArrayType(33,ArrayType(6,ArrayType(69,ArrayType(45,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($1K),ArrayType(69,ArrayType(8,ArrayType(33,ArrayType(6,ArrayType(69,ArrayType(45,BoolType))))))))])])'''
        self.assertTrue(TestAST.test(line, expect, 605))

    def test_606(self):
        line = '''Class P{}Class U__:K56{Constructor (){} }Class q:Q{Var $3,X,$_,Gr0:Array [Array [Array [Array [Array [String ,0b11],8_5_43_7],0B1001110],0X8F],07];$_(_9w:_;_:__){} }Class Zy:U{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(P),[]),ClassDecl(Id(U__),Id(K56),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(q),Id(Q),[AttributeDecl(Static,VarDecl(Id($3),ArrayType(7,ArrayType(143,ArrayType(78,ArrayType(85437,ArrayType(3,StringType))))))),AttributeDecl(Instance,VarDecl(Id(X),ArrayType(7,ArrayType(143,ArrayType(78,ArrayType(85437,ArrayType(3,StringType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(7,ArrayType(143,ArrayType(78,ArrayType(85437,ArrayType(3,StringType))))))),AttributeDecl(Instance,VarDecl(Id(Gr0),ArrayType(7,ArrayType(143,ArrayType(78,ArrayType(85437,ArrayType(3,StringType))))))),MethodDecl(Id($_),Static,[param(Id(_9w),ClassType(Id(_))),param(Id(_),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(Zy),Id(U),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 606))

    def test_607(self):
        line = '''Class _0:b{Destructor (){}Val q____J:Array [Float ,0b1_01];Val __:N_;Constructor (Ff51_,_4,_f,__3,_,d,i,_:Iq__R;E_U6,lA_J:String ){Return ;{Val _,_,_54:Array [Array [Int ,2],0B1_11_0];} }}'''
        expect = '''Program([ClassDecl(Id(_0),Id(b),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(q____J),ArrayType(5,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(N_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(Ff51_),ClassType(Id(Iq__R))),param(Id(_4),ClassType(Id(Iq__R))),param(Id(_f),ClassType(Id(Iq__R))),param(Id(__3),ClassType(Id(Iq__R))),param(Id(_),ClassType(Id(Iq__R))),param(Id(d),ClassType(Id(Iq__R))),param(Id(i),ClassType(Id(Iq__R))),param(Id(_),ClassType(Id(Iq__R))),param(Id(E_U6),StringType),param(Id(lA_J),StringType)],Block([Return(),Block([ConstDecl(Id(_),ArrayType(14,ArrayType(2,IntType)),None),ConstDecl(Id(_),ArrayType(14,ArrayType(2,IntType)),None),ConstDecl(Id(_54),ArrayType(14,ArrayType(2,IntType)),None)])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 607))

    def test_608(self):
        line = '''Class ___901r6:_117{Constructor (A53S,qBO:Array [Array [Array [Array [Array [Int ,94],0B1],94],0X63],0114];_9,_,e,n,_,y,_:Boolean ){}Val $0,$2:String ;Destructor (){Return ;_::$3();} }'''
        expect = '''Program([ClassDecl(Id(___901r6),Id(_117),[MethodDecl(Id(Constructor),Instance,[param(Id(A53S),ArrayType(76,ArrayType(99,ArrayType(94,ArrayType(1,ArrayType(94,IntType)))))),param(Id(qBO),ArrayType(76,ArrayType(99,ArrayType(94,ArrayType(1,ArrayType(94,IntType)))))),param(Id(_9),BoolType),param(Id(_),BoolType),param(Id(e),BoolType),param(Id(n),BoolType),param(Id(_),BoolType),param(Id(y),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($0),StringType,None)),AttributeDecl(Static,ConstDecl(Id($2),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Return(),Call(Id(_),Id($3),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 608))

    def test_609(self):
        line = '''Class _tbW{Constructor (_9:Array [Boolean ,0B1_0];iY0:Float ;_0,k:Array [Array [Array [Array [Array [String ,13],0b1000011],13],0106],9];T_:_){} }Class _e21__97o:_{}Class z7:_{}'''
        expect = '''Program([ClassDecl(Id(_tbW),[MethodDecl(Id(Constructor),Instance,[param(Id(_9),ArrayType(2,BoolType)),param(Id(iY0),FloatType),param(Id(_0),ArrayType(9,ArrayType(70,ArrayType(13,ArrayType(67,ArrayType(13,StringType)))))),param(Id(k),ArrayType(9,ArrayType(70,ArrayType(13,ArrayType(67,ArrayType(13,StringType)))))),param(Id(T_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_e21__97o),Id(_),[]),ClassDecl(Id(z7),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 609))

    def test_610(self):
        line = '''Class _v5{Constructor (_,_0,__Yo4:Array [Int ,07];J7Y:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0x51_33B8],0X32],0b10_00],0B1],0x904D],9],06740],0125];_Q,Nk3m,_,_g:String ){} }Class y_s4E{}'''
        expect = '''Program([ClassDecl(Id(_v5),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(7,IntType)),param(Id(_0),ArrayType(7,IntType)),param(Id(__Yo4),ArrayType(7,IntType)),param(Id(J7Y),ArrayType(85,ArrayType(3552,ArrayType(9,ArrayType(36941,ArrayType(1,ArrayType(8,ArrayType(50,ArrayType(5321656,IntType))))))))),param(Id(_Q),StringType),param(Id(Nk3m),StringType),param(Id(_),StringType),param(Id(_g),StringType)],Block([]))]),ClassDecl(Id(y_s4E),[])])'''
        self.assertTrue(TestAST.test(line, expect, 610))

    def test_611(self):
        line = '''Class h:F_8_G{Var Bl:Array [String ,0X6];$6(W_:y7G_47_;_,Y,_,k_,I,_:Float ;_,i_uQ_,C:_t0;_:Array [Array [Array [Array [Boolean ,0X46],0b1_1_1],0B1_0],65];w,q_:Array [Array [Int ,65],04]){} }Class Y:_{DX_13(_G5:Int ){} }'''
        expect = '''Program([ClassDecl(Id(h),Id(F_8_G),[AttributeDecl(Instance,VarDecl(Id(Bl),ArrayType(6,StringType))),MethodDecl(Id($6),Static,[param(Id(W_),ClassType(Id(y7G_47_))),param(Id(_),FloatType),param(Id(Y),FloatType),param(Id(_),FloatType),param(Id(k_),FloatType),param(Id(I),FloatType),param(Id(_),FloatType),param(Id(_),ClassType(Id(_t0))),param(Id(i_uQ_),ClassType(Id(_t0))),param(Id(C),ClassType(Id(_t0))),param(Id(_),ArrayType(65,ArrayType(2,ArrayType(7,ArrayType(70,BoolType))))),param(Id(w),ArrayType(4,ArrayType(65,IntType))),param(Id(q_),ArrayType(4,ArrayType(65,IntType)))],Block([]))]),ClassDecl(Id(Y),Id(_),[MethodDecl(Id(DX_13),Instance,[param(Id(_G5),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 611))

    def test_612(self):
        line = '''Class O2n{}Class _{Constructor (a,_3_:_81_;_,o_:Array [Array [Float ,044],22]){} }Class _296{Val $7H:_X_;}Class _:z{}Class _2o:_{Val $_:String ;$6_(){}Constructor (_R_,CCvi35_,uZ:__6){} }'''
        expect = '''Program([ClassDecl(Id(O2n),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(a),ClassType(Id(_81_))),param(Id(_3_),ClassType(Id(_81_))),param(Id(_),ArrayType(22,ArrayType(36,FloatType))),param(Id(o_),ArrayType(22,ArrayType(36,FloatType)))],Block([]))]),ClassDecl(Id(_296),[AttributeDecl(Static,ConstDecl(Id($7H),ClassType(Id(_X_)),NullLiteral()))]),ClassDecl(Id(_),Id(z),[]),ClassDecl(Id(_2o),Id(_),[AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),MethodDecl(Id($6_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_R_),ClassType(Id(__6))),param(Id(CCvi35_),ClassType(Id(__6))),param(Id(uZ),ClassType(Id(__6)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 612))

    def test_613(self):
        line = '''Class Md5{__(_n7,u:_){}Var __:Array [Array [Array [Array [Float ,0xD6B_0],8],0x18],0B111101];Val $4:Float ;}Class s__n{Var U_:Array [Array [Boolean ,036],0X4_2];Destructor (){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(Md5),[MethodDecl(Id(__),Instance,[param(Id(_n7),ClassType(Id(_))),param(Id(u),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(61,ArrayType(24,ArrayType(8,ArrayType(54960,FloatType)))))),AttributeDecl(Static,ConstDecl(Id($4),FloatType,None))]),ClassDecl(Id(s__n),[AttributeDecl(Instance,VarDecl(Id(U_),ArrayType(66,ArrayType(30,BoolType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 613))

    def test_614(self):
        line = '''Class D7f:M{zm(g7W:String ;d:Int ;_,_:Array [Int ,7_1]){}_(x,x__0:Array [Array [Array [Array [Array [Array [Array [Array [Int ,0x4_7F],2_0],40],40],04],0x60],0b1],0B1010001]){} }'''
        expect = '''Program([ClassDecl(Id(D7f),Id(M),[MethodDecl(Id(zm),Instance,[param(Id(g7W),StringType),param(Id(d),IntType),param(Id(_),ArrayType(71,IntType)),param(Id(_),ArrayType(71,IntType))],Block([])),MethodDecl(Id(_),Instance,[param(Id(x),ArrayType(81,ArrayType(1,ArrayType(96,ArrayType(4,ArrayType(40,ArrayType(40,ArrayType(20,ArrayType(1151,IntType))))))))),param(Id(x__0),ArrayType(81,ArrayType(1,ArrayType(96,ArrayType(4,ArrayType(40,ArrayType(40,ArrayType(20,ArrayType(1151,IntType)))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 614))

    def test_615(self):
        line = '''Class __U4_{Constructor (_,_,____,_:_;_,n_,_,r60_,_:Array [Array [String ,0XE73],053];__4,w,i,_x:Array [Boolean ,0b1];_,_:_){} }Class _{SI(){}Destructor (){}Destructor (){} }Class Q:_9{}'''
        expect = '''Program([ClassDecl(Id(__U4_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(____),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(43,ArrayType(3699,StringType))),param(Id(n_),ArrayType(43,ArrayType(3699,StringType))),param(Id(_),ArrayType(43,ArrayType(3699,StringType))),param(Id(r60_),ArrayType(43,ArrayType(3699,StringType))),param(Id(_),ArrayType(43,ArrayType(3699,StringType))),param(Id(__4),ArrayType(1,BoolType)),param(Id(w),ArrayType(1,BoolType)),param(Id(i),ArrayType(1,BoolType)),param(Id(_x),ArrayType(1,BoolType)),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(SI),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Q),Id(_9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 615))

    def test_616(self):
        line = '''Class _:_X__4{B(){}Constructor (GQ:_7){Break ;}Constructor (){}_(){}Val oE:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,046],1],0b111100],82],0b111100],82],0x5E],82],0x5E];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_X__4),[MethodDecl(Id(B),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(GQ),ClassType(Id(_7)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(oE),ArrayType(94,ArrayType(82,ArrayType(94,ArrayType(82,ArrayType(60,ArrayType(82,ArrayType(60,ArrayType(1,ArrayType(38,IntType))))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 616))

    def test_617(self):
        line = '''Class Qu{Constructor (_,K_:String ;i_,_:m;_,d:Boolean ;_:Array [Int ,75];b_:_;p0:Array [Array [Int ,05],0140]){}$3(H_:Float ;_,e,z:_;_:K;N__:d8;_9:Int ){Val E:Array [Boolean ,75];}U(_,n:Array [Array [Array [Boolean ,1],4_5],0b1000110]){} }Class c:_{}'''
        expect = '''Program([ClassDecl(Id(Qu),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(K_),StringType),param(Id(i_),ClassType(Id(m))),param(Id(_),ClassType(Id(m))),param(Id(_),BoolType),param(Id(d),BoolType),param(Id(_),ArrayType(75,IntType)),param(Id(b_),ClassType(Id(_))),param(Id(p0),ArrayType(96,ArrayType(5,IntType)))],Block([])),MethodDecl(Id($3),Static,[param(Id(H_),FloatType),param(Id(_),ClassType(Id(_))),param(Id(e),ClassType(Id(_))),param(Id(z),ClassType(Id(_))),param(Id(_),ClassType(Id(K))),param(Id(N__),ClassType(Id(d8))),param(Id(_9),IntType)],Block([ConstDecl(Id(E),ArrayType(75,BoolType),None)])),MethodDecl(Id(U),Instance,[param(Id(_),ArrayType(70,ArrayType(45,ArrayType(1,BoolType)))),param(Id(n),ArrayType(70,ArrayType(45,ArrayType(1,BoolType))))],Block([]))]),ClassDecl(Id(c),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 617))

    def test_618(self):
        line = '''Class c__:d{}Class _6{Constructor (_,_L:f0_){ {Break ;} }Var _q_Mn_:Array [Array [Array [Array [Array [String ,1],0B1100001],0132],0b110],0X29];Val $1:Float ;}Class _:h{Val $5,$_:Array [Array [Array [Array [Array [String ,01],0B11],05],0b11],0x12];}Class i1{Constructor (_,_z_:Array [Array [Array [Boolean ,0XA],0x12],05]){}Var $15q5_m7H3:Int ;e7(_,v:Boolean ;h,_:Array [Array [String ,8],0b1]){} }'''
        expect = '''Program([ClassDecl(Id(c__),Id(d),[]),ClassDecl(Id(_6),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(f0_))),param(Id(_L),ClassType(Id(f0_)))],Block([Block([Break])])),AttributeDecl(Instance,VarDecl(Id(_q_Mn_),ArrayType(41,ArrayType(6,ArrayType(90,ArrayType(97,ArrayType(1,StringType))))))),AttributeDecl(Static,ConstDecl(Id($1),FloatType,None))]),ClassDecl(Id(_),Id(h),[AttributeDecl(Static,ConstDecl(Id($5),ArrayType(18,ArrayType(3,ArrayType(5,ArrayType(3,ArrayType(1,StringType))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(18,ArrayType(3,ArrayType(5,ArrayType(3,ArrayType(1,StringType))))),None))]),ClassDecl(Id(i1),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(5,ArrayType(18,ArrayType(10,BoolType)))),param(Id(_z_),ArrayType(5,ArrayType(18,ArrayType(10,BoolType))))],Block([])),AttributeDecl(Static,VarDecl(Id($15q5_m7H3),IntType)),MethodDecl(Id(e7),Instance,[param(Id(_),BoolType),param(Id(v),BoolType),param(Id(h),ArrayType(1,ArrayType(8,StringType))),param(Id(_),ArrayType(1,ArrayType(8,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 618))

    def test_619(self):
        line = '''Class _:_{Var _,o6:Array [Array [Boolean ,0B1_00],33];}Class I{Constructor (){}Constructor (U85:_;Id:Array [String ,33];_,t,OC,_cu,_Rr,_,T,__,XU_,_9:Float ){}_(){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(33,ArrayType(4,BoolType)))),AttributeDecl(Instance,VarDecl(Id(o6),ArrayType(33,ArrayType(4,BoolType))))]),ClassDecl(Id(I),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(U85),ClassType(Id(_))),param(Id(Id),ArrayType(33,StringType)),param(Id(_),FloatType),param(Id(t),FloatType),param(Id(OC),FloatType),param(Id(_cu),FloatType),param(Id(_Rr),FloatType),param(Id(_),FloatType),param(Id(T),FloatType),param(Id(__),FloatType),param(Id(XU_),FloatType),param(Id(_9),FloatType)],Block([])),MethodDecl(Id(_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 619))

    def test_620(self):
        line = '''Class b____{Val E,$_F,$U:Array [Int ,65];$7__(_,_1,t,d,OZ,_7F2:String ){}Val $I4_,$07e_:Array [Array [Array [Int ,02_0461_201],0X9],0b101010];Destructor (){} }Class _:l3_{}'''
        expect = '''Program([ClassDecl(Id(b____),[AttributeDecl(Instance,ConstDecl(Id(E),ArrayType(65,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_F),ArrayType(65,IntType),None)),AttributeDecl(Static,ConstDecl(Id($U),ArrayType(65,IntType),None)),MethodDecl(Id($7__),Static,[param(Id(_),StringType),param(Id(_1),StringType),param(Id(t),StringType),param(Id(d),StringType),param(Id(OZ),StringType),param(Id(_7F2),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($I4_),ArrayType(42,ArrayType(9,ArrayType(4350593,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($07e_),ArrayType(42,ArrayType(9,ArrayType(4350593,IntType))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(l3_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 620))

    def test_621(self):
        line = '''Class __:_{Constructor (w:Array [Float ,036];h:Array [Boolean ,02_5_4]){}Constructor (xZe,j__:Array [Array [Float ,0b1000010],0b1_0_1_1];_,S:_;__,_:_){}Constructor (_2_:p){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(w),ArrayType(30,FloatType)),param(Id(h),ArrayType(172,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(xZe),ArrayType(11,ArrayType(66,FloatType))),param(Id(j__),ArrayType(11,ArrayType(66,FloatType))),param(Id(_),ClassType(Id(_))),param(Id(S),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_2_),ClassType(Id(p)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 621))

    def test_622(self):
        line = '''Class _{Var _Fm3,_7:Boolean ;Constructor (){} }Class T{Constructor (e,D:_){}Constructor (_3,Ya2_8,G,_if,u,_,m:Array [Boolean ,9];_s:Array [Array [Float ,9],016];_,_,_i:String ;_:Float ;Xr:Float ;_vp:sJM){Var _:Array [Boolean ,016];} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_Fm3),BoolType)),AttributeDecl(Instance,VarDecl(Id(_7),BoolType)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(T),[MethodDecl(Id(Constructor),Instance,[param(Id(e),ClassType(Id(_))),param(Id(D),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_3),ArrayType(9,BoolType)),param(Id(Ya2_8),ArrayType(9,BoolType)),param(Id(G),ArrayType(9,BoolType)),param(Id(_if),ArrayType(9,BoolType)),param(Id(u),ArrayType(9,BoolType)),param(Id(_),ArrayType(9,BoolType)),param(Id(m),ArrayType(9,BoolType)),param(Id(_s),ArrayType(14,ArrayType(9,FloatType))),param(Id(_),StringType),param(Id(_),StringType),param(Id(_i),StringType),param(Id(_),FloatType),param(Id(Xr),FloatType),param(Id(_vp),ClassType(Id(sJM)))],Block([VarDecl(Id(_),ArrayType(14,BoolType))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 622))

    def test_623(self):
        line = '''Class __949:_z46{}Class _{Constructor (W_k:Int ;j:Array [Array [Array [Array [Array [Int ,024],5_5_5],0xC],60],629]){} }Class ___:_ut{Destructor (){} }Class __:y{u(){} }'''
        expect = '''Program([ClassDecl(Id(__949),Id(_z46),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(W_k),IntType),param(Id(j),ArrayType(629,ArrayType(60,ArrayType(12,ArrayType(555,ArrayType(20,IntType))))))],Block([]))]),ClassDecl(Id(___),Id(_ut),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(y),[MethodDecl(Id(u),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 623))

    def test_624(self):
        line = '''Class a_:uD3{Var $dCC,$DC_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,03_4],0x7],05],8],0X1_2],047],5],0B1010000],07];Constructor (){Continue ;Return ;} }'''
        expect = '''Program([ClassDecl(Id(a_),Id(uD3),[AttributeDecl(Static,VarDecl(Id($dCC),ArrayType(7,ArrayType(80,ArrayType(5,ArrayType(39,ArrayType(18,ArrayType(8,ArrayType(5,ArrayType(7,ArrayType(28,BoolType))))))))))),AttributeDecl(Static,VarDecl(Id($DC_),ArrayType(7,ArrayType(80,ArrayType(5,ArrayType(39,ArrayType(18,ArrayType(8,ArrayType(5,ArrayType(7,ArrayType(28,BoolType))))))))))),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 624))

    def test_625(self):
        line = '''Class w8h434_:_{}Class t{}Class _if_L{$G0K(_,j_:Array [Array [Array [Array [Array [Array [Int ,0B1],0X7_8F_9],85],82_1_1],8],0X2_E];Fb,b,__,r0,U,Z:Int ){}Constructor (_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(w8h434_),Id(_),[]),ClassDecl(Id(t),[]),ClassDecl(Id(_if_L),[MethodDecl(Id($G0K),Static,[param(Id(_),ArrayType(46,ArrayType(8,ArrayType(8211,ArrayType(85,ArrayType(30969,ArrayType(1,IntType))))))),param(Id(j_),ArrayType(46,ArrayType(8,ArrayType(8211,ArrayType(85,ArrayType(30969,ArrayType(1,IntType))))))),param(Id(Fb),IntType),param(Id(b),IntType),param(Id(__),IntType),param(Id(r0),IntType),param(Id(U),IntType),param(Id(Z),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 625))

    def test_626(self):
        line = '''Class W:H{Constructor (n,_7U__:String ;_Z:Boolean ;_:_6;U,_x:T_;__,__4_,_:Array [Array [Array [Boolean ,22],0x35],01]){} }Class _6{}Class _{c_h_(__:Boolean ){} }Class C{O(i:Float ;_:Array [Boolean ,0b1]){} }Class ez___{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(W),Id(H),[MethodDecl(Id(Constructor),Instance,[param(Id(n),StringType),param(Id(_7U__),StringType),param(Id(_Z),BoolType),param(Id(_),ClassType(Id(_6))),param(Id(U),ClassType(Id(T_))),param(Id(_x),ClassType(Id(T_))),param(Id(__),ArrayType(1,ArrayType(53,ArrayType(22,BoolType)))),param(Id(__4_),ArrayType(1,ArrayType(53,ArrayType(22,BoolType)))),param(Id(_),ArrayType(1,ArrayType(53,ArrayType(22,BoolType))))],Block([]))]),ClassDecl(Id(_6),[]),ClassDecl(Id(_),[MethodDecl(Id(c_h_),Instance,[param(Id(__),BoolType)],Block([]))]),ClassDecl(Id(C),[MethodDecl(Id(O),Instance,[param(Id(i),FloatType),param(Id(_),ArrayType(1,BoolType))],Block([]))]),ClassDecl(Id(ez___),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 626))

    def test_627(self):
        line = '''Class l_{Val $5n5_9:Array [Array [Int ,0X5],48];Var $_eB_c:Array [Int ,01];}Class G:_{Constructor (){}Constructor (){}$43n(g,r:Q;_pW_,_3,__,_,wZ:String ){Continue ;}_(u:Array [Array [Array [String ,48],48],0x63];_,_,h3__:String ;k,_8:String ;_:L;_,_2:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(l_),[AttributeDecl(Static,ConstDecl(Id($5n5_9),ArrayType(48,ArrayType(5,IntType)),None)),AttributeDecl(Static,VarDecl(Id($_eB_c),ArrayType(1,IntType)))]),ClassDecl(Id(G),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($43n),Static,[param(Id(g),ClassType(Id(Q))),param(Id(r),ClassType(Id(Q))),param(Id(_pW_),StringType),param(Id(_3),StringType),param(Id(__),StringType),param(Id(_),StringType),param(Id(wZ),StringType)],Block([Continue])),MethodDecl(Id(_),Instance,[param(Id(u),ArrayType(99,ArrayType(48,ArrayType(48,StringType)))),param(Id(_),StringType),param(Id(_),StringType),param(Id(h3__),StringType),param(Id(k),StringType),param(Id(_8),StringType),param(Id(_),ClassType(Id(L))),param(Id(_),BoolType),param(Id(_2),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 627))

    def test_628(self):
        line = '''Class _n:k_6{Constructor (Z,_:_;_:Array [Array [Boolean ,0B11_0_0],0B1];D,_7,_7,g_,_,I:Array [Array [Array [Boolean ,070],0X1],3]){}Constructor (_:Array [String ,0b10]){} }'''
        expect = '''Program([ClassDecl(Id(_n),Id(k_6),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(1,ArrayType(12,BoolType))),param(Id(D),ArrayType(3,ArrayType(1,ArrayType(56,BoolType)))),param(Id(_7),ArrayType(3,ArrayType(1,ArrayType(56,BoolType)))),param(Id(_7),ArrayType(3,ArrayType(1,ArrayType(56,BoolType)))),param(Id(g_),ArrayType(3,ArrayType(1,ArrayType(56,BoolType)))),param(Id(_),ArrayType(3,ArrayType(1,ArrayType(56,BoolType)))),param(Id(I),ArrayType(3,ArrayType(1,ArrayType(56,BoolType))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(2,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 628))

    def test_629(self):
        line = '''Class __mX:_{_0(_,_,f4P_,_:Array [Array [Boolean ,469_1],0x5_D];_60_k:C){}Val $G_06M_1:Array [Array [Array [Array [Array [Int ,0x8_B],0X26],0B110000],0X26],0B10];}Class __{}Class __76:K{Var r0,$_,C,_:String ;}'''
        expect = '''Program([ClassDecl(Id(__mX),Id(_),[MethodDecl(Id(_0),Instance,[param(Id(_),ArrayType(93,ArrayType(4691,BoolType))),param(Id(_),ArrayType(93,ArrayType(4691,BoolType))),param(Id(f4P_),ArrayType(93,ArrayType(4691,BoolType))),param(Id(_),ArrayType(93,ArrayType(4691,BoolType))),param(Id(_60_k),ClassType(Id(C)))],Block([])),AttributeDecl(Static,ConstDecl(Id($G_06M_1),ArrayType(2,ArrayType(38,ArrayType(48,ArrayType(38,ArrayType(139,IntType))))),None))]),ClassDecl(Id(__),[]),ClassDecl(Id(__76),Id(K),[AttributeDecl(Instance,VarDecl(Id(r0),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Instance,VarDecl(Id(C),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 629))

    def test_630(self):
        line = '''Class X{Destructor (){} }Class _:z96{}Class Y:f{$5_8(v:Int ;Q,_2,_,_:Boolean ;_8,p:Array [String ,0B11010];_,Q8,__5,_,o:Int ){} }Class l{Val $4t___6,V5_75,P,_,_,_:Array [String ,04];}'''
        expect = '''Program([ClassDecl(Id(X),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(z96),[]),ClassDecl(Id(Y),Id(f),[MethodDecl(Id($5_8),Static,[param(Id(v),IntType),param(Id(Q),BoolType),param(Id(_2),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_8),ArrayType(26,StringType)),param(Id(p),ArrayType(26,StringType)),param(Id(_),IntType),param(Id(Q8),IntType),param(Id(__5),IntType),param(Id(_),IntType),param(Id(o),IntType)],Block([]))]),ClassDecl(Id(l),[AttributeDecl(Static,ConstDecl(Id($4t___6),ArrayType(4,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(V5_75),ArrayType(4,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(P),ArrayType(4,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 630))

    def test_631(self):
        line = '''Class A:__{Val _:l;Var W,__37:Array [Int ,0x9_D];Constructor (b0:Boolean ;u,Xm1:Array [String ,3];O:Int ){} }Class B_:__r{Constructor (w,C3_,J,B___38__:Boolean ;pf5:Boolean ;_1:Boolean ){} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(A),Id(__),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(l)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(W),ArrayType(157,IntType))),AttributeDecl(Instance,VarDecl(Id(__37),ArrayType(157,IntType))),MethodDecl(Id(Constructor),Instance,[param(Id(b0),BoolType),param(Id(u),ArrayType(3,StringType)),param(Id(Xm1),ArrayType(3,StringType)),param(Id(O),IntType)],Block([]))]),ClassDecl(Id(B_),Id(__r),[MethodDecl(Id(Constructor),Instance,[param(Id(w),BoolType),param(Id(C3_),BoolType),param(Id(J),BoolType),param(Id(B___38__),BoolType),param(Id(pf5),BoolType),param(Id(_1),BoolType)],Block([]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 631))

    def test_632(self):
        line = '''Class fp{Constructor (n4,a96389__,_I:Array [Array [Array [Array [Array [Float ,06],0b111001],0b1],5],0X8]){}Val $C4:String ;_(_:Array [Array [Int ,0b1_0_1_1_101],0x10]){} }Class b0:_5{Var _f:__4;}'''
        expect = '''Program([ClassDecl(Id(fp),[MethodDecl(Id(Constructor),Instance,[param(Id(n4),ArrayType(8,ArrayType(5,ArrayType(1,ArrayType(57,ArrayType(6,FloatType)))))),param(Id(a96389__),ArrayType(8,ArrayType(5,ArrayType(1,ArrayType(57,ArrayType(6,FloatType)))))),param(Id(_I),ArrayType(8,ArrayType(5,ArrayType(1,ArrayType(57,ArrayType(6,FloatType))))))],Block([])),AttributeDecl(Static,ConstDecl(Id($C4),StringType,None)),MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(16,ArrayType(93,IntType)))],Block([]))]),ClassDecl(Id(b0),Id(_5),[AttributeDecl(Instance,VarDecl(Id(_f),ClassType(Id(__4)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 632))

    def test_633(self):
        line = '''Class Q_6{Var $7,_51,A:Array [Float ,16];}Class _7_C:_24{}Class _oY3:a{Constructor (_:Array [Int ,0x14];_0,O,i,_0p_a9,_:Array [String ,042];p_,cy4_8Z2m_:Array [Array [Boolean ,0x14],0X61_F_8E]){ {} }Destructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Q_6),[AttributeDecl(Static,VarDecl(Id($7),ArrayType(16,FloatType))),AttributeDecl(Instance,VarDecl(Id(_51),ArrayType(16,FloatType))),AttributeDecl(Instance,VarDecl(Id(A),ArrayType(16,FloatType)))]),ClassDecl(Id(_7_C),Id(_24),[]),ClassDecl(Id(_oY3),Id(a),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(20,IntType)),param(Id(_0),ArrayType(34,StringType)),param(Id(O),ArrayType(34,StringType)),param(Id(i),ArrayType(34,StringType)),param(Id(_0p_a9),ArrayType(34,StringType)),param(Id(_),ArrayType(34,StringType)),param(Id(p_),ArrayType(401294,ArrayType(20,BoolType))),param(Id(cy4_8Z2m_),ArrayType(401294,ArrayType(20,BoolType)))],Block([Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 633))

    def test_634(self):
        line = '''Class __8N_:W{Var $fK_:L_;$_(_:Array [Array [Array [Array [Array [Array [Int ,27_8],0x5D],0x5D],031],0xC],0x5]){}Constructor (_,_:Q;n__04:Array [Int ,031]){} }Class r_{}'''
        expect = '''Program([ClassDecl(Id(__8N_),Id(W),[AttributeDecl(Static,VarDecl(Id($fK_),ClassType(Id(L_)),NullLiteral())),MethodDecl(Id($_),Static,[param(Id(_),ArrayType(5,ArrayType(12,ArrayType(25,ArrayType(93,ArrayType(93,ArrayType(278,IntType)))))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(Q))),param(Id(_),ClassType(Id(Q))),param(Id(n__04),ArrayType(25,IntType))],Block([]))]),ClassDecl(Id(r_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 634))

    def test_635(self):
        line = '''Class __f4_{}Class kV_:_{}Class _:__O_4_{}Class Om{Var $_:Array [Array [Float ,0XC5],0B1011110];$1(n_540_:_L8;_:Array [String ,067]){}Constructor (_,d:Array [Array [Array [Float ,0x18],0B1],0x8]){}Var B2,__94:Int ;}'''
        expect = '''Program([ClassDecl(Id(__f4_),[]),ClassDecl(Id(kV_),Id(_),[]),ClassDecl(Id(_),Id(__O_4_),[]),ClassDecl(Id(Om),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(94,ArrayType(197,FloatType)))),MethodDecl(Id($1),Static,[param(Id(n_540_),ClassType(Id(_L8))),param(Id(_),ArrayType(55,StringType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(8,ArrayType(1,ArrayType(24,FloatType)))),param(Id(d),ArrayType(8,ArrayType(1,ArrayType(24,FloatType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(B2),IntType)),AttributeDecl(Instance,VarDecl(Id(__94),IntType))])])'''
        self.assertTrue(TestAST.test(line, expect, 635))

    def test_636(self):
        line = '''Class w:c{Destructor (){} }Class __{Val $8HJ,_,$i,n2,Y_,$Gv,_,_,$_:Int ;}Class _{Constructor (){} }Class _:_{Destructor (){}$9(){Val _:Float ;Break ;}Destructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(w),Id(c),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($8HJ),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($i),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(n2),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(Y_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($Gv),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($9),Static,[],Block([ConstDecl(Id(_),FloatType,None),Break])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 636))

    def test_637(self):
        line = '''Class __:__5{$p(k,_,_,U_,__,_8,_480E_:_9;rU__,__,f__,__,_,_p:Array [Array [Float ,0143],0B1110];w:Boolean ;q___,ZJ,_:Array [Float ,0b1100010];t_1__,d_2_8:Array [Array [Array [Int ,0X60],0x28],0b1100010]){} }Class _:gk_l0m{}'''
        expect = '''Program([ClassDecl(Id(__),Id(__5),[MethodDecl(Id($p),Static,[param(Id(k),ClassType(Id(_9))),param(Id(_),ClassType(Id(_9))),param(Id(_),ClassType(Id(_9))),param(Id(U_),ClassType(Id(_9))),param(Id(__),ClassType(Id(_9))),param(Id(_8),ClassType(Id(_9))),param(Id(_480E_),ClassType(Id(_9))),param(Id(rU__),ArrayType(14,ArrayType(99,FloatType))),param(Id(__),ArrayType(14,ArrayType(99,FloatType))),param(Id(f__),ArrayType(14,ArrayType(99,FloatType))),param(Id(__),ArrayType(14,ArrayType(99,FloatType))),param(Id(_),ArrayType(14,ArrayType(99,FloatType))),param(Id(_p),ArrayType(14,ArrayType(99,FloatType))),param(Id(w),BoolType),param(Id(q___),ArrayType(98,FloatType)),param(Id(ZJ),ArrayType(98,FloatType)),param(Id(_),ArrayType(98,FloatType)),param(Id(t_1__),ArrayType(98,ArrayType(40,ArrayType(96,IntType)))),param(Id(d_2_8),ArrayType(98,ArrayType(40,ArrayType(96,IntType))))],Block([]))]),ClassDecl(Id(_),Id(gk_l0m),[])])'''
        self.assertTrue(TestAST.test(line, expect, 637))

    def test_638(self):
        line = '''Class _{Destructor (){} }Class F:_UuV{X(__a,_B,_v,__:__){Continue ;} }Class _8x{Constructor (m:_7;zc,__,l,_:Float ;_74:Array [String ,03_02]){} }Class __3yW4s{}Class Hbe:Y{}Class _{$_U(){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(F),Id(_UuV),[MethodDecl(Id(X),Instance,[param(Id(__a),ClassType(Id(__))),param(Id(_B),ClassType(Id(__))),param(Id(_v),ClassType(Id(__))),param(Id(__),ClassType(Id(__)))],Block([Continue]))]),ClassDecl(Id(_8x),[MethodDecl(Id(Constructor),Instance,[param(Id(m),ClassType(Id(_7))),param(Id(zc),FloatType),param(Id(__),FloatType),param(Id(l),FloatType),param(Id(_),FloatType),param(Id(_74),ArrayType(194,StringType))],Block([]))]),ClassDecl(Id(__3yW4s),[]),ClassDecl(Id(Hbe),Id(Y),[]),ClassDecl(Id(_),[MethodDecl(Id($_U),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 638))

    def test_639(self):
        line = '''Class __3w:pL___{}Class Z:_6{Constructor (_,__:W;_,__6,_4zhS,_9G:Array [Array [Array [Array [Int ,0x5D],022],0x5D],22]){}Destructor (){}b03(k,p:_;hL:U;_B_6:Float ;y05,u__7p_:String ){} }Class _51{Var L,$82E:Int ;Val pI,O_e60,D0,$9:Array [Array [Int ,02_653],9];}Class W{}'''
        expect = '''Program([ClassDecl(Id(__3w),Id(pL___),[]),ClassDecl(Id(Z),Id(_6),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(W))),param(Id(__),ClassType(Id(W))),param(Id(_),ArrayType(22,ArrayType(93,ArrayType(18,ArrayType(93,IntType))))),param(Id(__6),ArrayType(22,ArrayType(93,ArrayType(18,ArrayType(93,IntType))))),param(Id(_4zhS),ArrayType(22,ArrayType(93,ArrayType(18,ArrayType(93,IntType))))),param(Id(_9G),ArrayType(22,ArrayType(93,ArrayType(18,ArrayType(93,IntType)))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(b03),Instance,[param(Id(k),ClassType(Id(_))),param(Id(p),ClassType(Id(_))),param(Id(hL),ClassType(Id(U))),param(Id(_B_6),FloatType),param(Id(y05),StringType),param(Id(u__7p_),StringType)],Block([]))]),ClassDecl(Id(_51),[AttributeDecl(Instance,VarDecl(Id(L),IntType)),AttributeDecl(Static,VarDecl(Id($82E),IntType)),AttributeDecl(Instance,ConstDecl(Id(pI),ArrayType(9,ArrayType(1451,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(O_e60),ArrayType(9,ArrayType(1451,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(D0),ArrayType(9,ArrayType(1451,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($9),ArrayType(9,ArrayType(1451,IntType)),None))]),ClassDecl(Id(W),[])])'''
        self.assertTrue(TestAST.test(line, expect, 639))

    def test_640(self):
        line = '''Class _8{Var $5r_L_,_,$0,_x5_4:Array [Array [Boolean ,0b10010],0B11110_0];}Class T_:ux_{Var $p:Float ;Val _:_CYx;$L(B:Array [Array [Float ,054],0b10010];j,_Adm,_,_,U2_,_,_i,_:Array [Int ,04]){}Var e0i2b2:Array [Array [Array [Int ,0b10],04],0B111];}'''
        expect = '''Program([ClassDecl(Id(_8),[AttributeDecl(Static,VarDecl(Id($5r_L_),ArrayType(60,ArrayType(18,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(60,ArrayType(18,BoolType)))),AttributeDecl(Static,VarDecl(Id($0),ArrayType(60,ArrayType(18,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_x5_4),ArrayType(60,ArrayType(18,BoolType))))]),ClassDecl(Id(T_),Id(ux_),[AttributeDecl(Static,VarDecl(Id($p),FloatType)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_CYx)),NullLiteral())),MethodDecl(Id($L),Static,[param(Id(B),ArrayType(18,ArrayType(44,FloatType))),param(Id(j),ArrayType(4,IntType)),param(Id(_Adm),ArrayType(4,IntType)),param(Id(_),ArrayType(4,IntType)),param(Id(_),ArrayType(4,IntType)),param(Id(U2_),ArrayType(4,IntType)),param(Id(_),ArrayType(4,IntType)),param(Id(_i),ArrayType(4,IntType)),param(Id(_),ArrayType(4,IntType))],Block([])),AttributeDecl(Instance,VarDecl(Id(e0i2b2),ArrayType(7,ArrayType(4,ArrayType(2,IntType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 640))

    def test_641(self):
        line = '''Class B5_:_{}Class _:_82a{}Class yQ_l{$_1Xk_(_82,z_0,V,_S_:Array [Array [Array [Array [Array [Array [Int ,0x4],37],0X5_B_A0_0_0_164_9_D],6_1],0x2],0b1];P:Array [Array [Int ,0X5],37];_XN9c,F4,_,Y7,W,P,s_:Array [Array [Boolean ,0b1_0],0x3D];_,m,o,_c7iD:C){Continue ;}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(B5_),Id(_),[]),ClassDecl(Id(_),Id(_82a),[]),ClassDecl(Id(yQ_l),[MethodDecl(Id($_1Xk_),Static,[param(Id(_82),ArrayType(1,ArrayType(2,ArrayType(61,ArrayType(6296422147229,ArrayType(37,ArrayType(4,IntType))))))),param(Id(z_0),ArrayType(1,ArrayType(2,ArrayType(61,ArrayType(6296422147229,ArrayType(37,ArrayType(4,IntType))))))),param(Id(V),ArrayType(1,ArrayType(2,ArrayType(61,ArrayType(6296422147229,ArrayType(37,ArrayType(4,IntType))))))),param(Id(_S_),ArrayType(1,ArrayType(2,ArrayType(61,ArrayType(6296422147229,ArrayType(37,ArrayType(4,IntType))))))),param(Id(P),ArrayType(37,ArrayType(5,IntType))),param(Id(_XN9c),ArrayType(61,ArrayType(2,BoolType))),param(Id(F4),ArrayType(61,ArrayType(2,BoolType))),param(Id(_),ArrayType(61,ArrayType(2,BoolType))),param(Id(Y7),ArrayType(61,ArrayType(2,BoolType))),param(Id(W),ArrayType(61,ArrayType(2,BoolType))),param(Id(P),ArrayType(61,ArrayType(2,BoolType))),param(Id(s_),ArrayType(61,ArrayType(2,BoolType))),param(Id(_),ClassType(Id(C))),param(Id(m),ClassType(Id(C))),param(Id(o),ClassType(Id(C))),param(Id(_c7iD),ClassType(Id(C)))],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 641))

    def test_642(self):
        line = '''Class C:n6{Destructor (){}Constructor (){ {{} }Continue ;} }Class _{Constructor (t,X_6V__f8:VlL;R__,_,Z,_2,_:LR;d:d;P7,___m:Array [Array [Array [Float ,0x3B],0xF_B60],11]){}Destructor (){}Var _,$_,_,_,Z_:Float ;Val __:Float ;}Class _{Var $4_:Array [Array [Array [Array [Array [Boolean ,0X1],0113],89],050],4];Val C_,$U3:Array [Array [Array [Int ,04],0XE],0x3_5];}'''
        expect = '''Program([ClassDecl(Id(C),Id(n6),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Block([Block([])]),Continue]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(t),ClassType(Id(VlL))),param(Id(X_6V__f8),ClassType(Id(VlL))),param(Id(R__),ClassType(Id(LR))),param(Id(_),ClassType(Id(LR))),param(Id(Z),ClassType(Id(LR))),param(Id(_2),ClassType(Id(LR))),param(Id(_),ClassType(Id(LR))),param(Id(d),ClassType(Id(d))),param(Id(P7),ArrayType(11,ArrayType(64352,ArrayType(59,FloatType)))),param(Id(___m),ArrayType(11,ArrayType(64352,ArrayType(59,FloatType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(Z_),FloatType)),AttributeDecl(Instance,ConstDecl(Id(__),FloatType,None))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($4_),ArrayType(4,ArrayType(40,ArrayType(89,ArrayType(75,ArrayType(1,BoolType))))))),AttributeDecl(Instance,ConstDecl(Id(C_),ArrayType(53,ArrayType(14,ArrayType(4,IntType))),None)),AttributeDecl(Static,ConstDecl(Id($U3),ArrayType(53,ArrayType(14,ArrayType(4,IntType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 642))

    def test_643(self):
        line = '''Class j:_{Val _9G_eC,_:Array [Array [Int ,06],0X53];Val _,$l,_,$32,$_W2:Float ;Constructor (){Return ;_::$_3_();Continue ;}A(w:Array [Int ,6];_4___:d){}Val $G:Int ;Constructor (k:String ){} }'''
        expect = '''Program([ClassDecl(Id(j),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_9G_eC),ArrayType(83,ArrayType(6,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(83,ArrayType(6,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($l),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($32),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_W2),FloatType,None)),MethodDecl(Id(Constructor),Instance,[],Block([Return(),Call(Id(_),Id($_3_),[]),Continue])),MethodDecl(Id(A),Instance,[param(Id(w),ArrayType(6,IntType)),param(Id(_4___),ClassType(Id(d)))],Block([])),AttributeDecl(Static,ConstDecl(Id($G),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(k),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 643))

    def test_644(self):
        line = '''Class U:H{Destructor (){} }Class ___:_{Constructor (_:Array [Array [Array [Array [Array [Float ,06],01],0b1],8],690_2_0]){} }Class _H{Destructor (){Var __,y,_a:_oy_;} }'''
        expect = '''Program([ClassDecl(Id(U),Id(H),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(___),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(69020,ArrayType(8,ArrayType(1,ArrayType(1,ArrayType(6,FloatType))))))],Block([]))]),ClassDecl(Id(_H),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(__),ClassType(Id(_oy_)),NullLiteral()),VarDecl(Id(y),ClassType(Id(_oy_)),NullLiteral()),VarDecl(Id(_a),ClassType(Id(_oy_)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 644))

    def test_645(self):
        line = '''Class _{Constructor (_:Array [Int ,06_667]){}_(_,R3E:Array [Array [Array [Array [Array [Array [Float ,0B1_1],077],045],0B1_0],041],0X9];nO:Array [Array [Boolean ,0XB2_B],60];ZN_,A:Array [Array [Array [Array [Array [Int ,49],91],01],4_6_9],1_7];Z___,_2,nV_,a2:Array [Float ,045];G:String ;k,_o_:String ){} }Class w_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3511,IntType))],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(9,ArrayType(33,ArrayType(2,ArrayType(37,ArrayType(63,ArrayType(3,FloatType))))))),param(Id(R3E),ArrayType(9,ArrayType(33,ArrayType(2,ArrayType(37,ArrayType(63,ArrayType(3,FloatType))))))),param(Id(nO),ArrayType(60,ArrayType(2859,BoolType))),param(Id(ZN_),ArrayType(17,ArrayType(469,ArrayType(1,ArrayType(91,ArrayType(49,IntType)))))),param(Id(A),ArrayType(17,ArrayType(469,ArrayType(1,ArrayType(91,ArrayType(49,IntType)))))),param(Id(Z___),ArrayType(37,FloatType)),param(Id(_2),ArrayType(37,FloatType)),param(Id(nV_),ArrayType(37,FloatType)),param(Id(a2),ArrayType(37,FloatType)),param(Id(G),StringType),param(Id(k),StringType),param(Id(_o_),StringType)],Block([]))]),ClassDecl(Id(w_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 645))

    def test_646(self):
        line = '''Class X___{Var v_3:String ;Destructor (){Val d,_8,bL0i,Q1:Array [Int ,0b1];} }Class Z0:o{}Class __9JD{$84(h:_N;t,_:Array [String ,034];o4_N:String ){}Constructor (_Po,d:_){} }'''
        expect = '''Program([ClassDecl(Id(X___),[AttributeDecl(Instance,VarDecl(Id(v_3),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(d),ArrayType(1,IntType),None),ConstDecl(Id(_8),ArrayType(1,IntType),None),ConstDecl(Id(bL0i),ArrayType(1,IntType),None),ConstDecl(Id(Q1),ArrayType(1,IntType),None)]))]),ClassDecl(Id(Z0),Id(o),[]),ClassDecl(Id(__9JD),[MethodDecl(Id($84),Static,[param(Id(h),ClassType(Id(_N))),param(Id(t),ArrayType(28,StringType)),param(Id(_),ArrayType(28,StringType)),param(Id(o4_N),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_Po),ClassType(Id(_))),param(Id(d),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 646))

    def test_647(self):
        line = '''Class g7{Val e_j6JQ,__,$_,$_,x4m,$D:Y;Val h6_POG:Boolean ;Val $1:Array [Array [Array [Array [Float ,0B1],0X7_D],0XB_5],89];Val $f:Array [Array [Int ,89],2];$3(_7,z:String ;_B__,_:_1){} }'''
        expect = '''Program([ClassDecl(Id(g7),[AttributeDecl(Instance,ConstDecl(Id(e_j6JQ),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(x4m),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($D),ClassType(Id(Y)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(h6_POG),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(89,ArrayType(181,ArrayType(125,ArrayType(1,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($f),ArrayType(2,ArrayType(89,IntType)),None)),MethodDecl(Id($3),Static,[param(Id(_7),StringType),param(Id(z),StringType),param(Id(_B__),ClassType(Id(_1))),param(Id(_),ClassType(Id(_1)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 647))

    def test_648(self):
        line = '''Class _{Constructor (y,_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,07],03],0b1],0XE1_2],0b1],0xB],0b1],0xB];__:Array [Float ,0131];k5:Array [Array [Array [Array [Array [String ,8_061],8],94],0xB],0b101000]){Break ;} }Class A{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(y),ArrayType(11,ArrayType(1,ArrayType(11,ArrayType(1,ArrayType(3602,ArrayType(1,ArrayType(3,ArrayType(7,IntType))))))))),param(Id(_),ArrayType(11,ArrayType(1,ArrayType(11,ArrayType(1,ArrayType(3602,ArrayType(1,ArrayType(3,ArrayType(7,IntType))))))))),param(Id(__),ArrayType(89,FloatType)),param(Id(k5),ArrayType(40,ArrayType(11,ArrayType(94,ArrayType(8,ArrayType(8061,StringType))))))],Block([Break]))]),ClassDecl(Id(A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 648))

    def test_649(self):
        line = '''Class Yi:_{}Class T:wO{$63_(_6E,i:Array [Array [Array [Array [Array [Array [Array [Array [String ,0XF_9],0X26],2],04_0],6],0112],0X26],66_4]){} }Class _:_0O_{}Class G{}Class p_l:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(Yi),Id(_),[]),ClassDecl(Id(T),Id(wO),[MethodDecl(Id($63_),Static,[param(Id(_6E),ArrayType(664,ArrayType(38,ArrayType(74,ArrayType(6,ArrayType(32,ArrayType(2,ArrayType(38,ArrayType(249,StringType))))))))),param(Id(i),ArrayType(664,ArrayType(38,ArrayType(74,ArrayType(6,ArrayType(32,ArrayType(2,ArrayType(38,ArrayType(249,StringType)))))))))],Block([]))]),ClassDecl(Id(_),Id(_0O_),[]),ClassDecl(Id(G),[]),ClassDecl(Id(p_l),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 649))

    def test_650(self):
        line = '''Class Ze_7X:_X8_{Constructor (){}Val N_:Boolean ;Val $8:Int ;Var n:_7G;}Class _:_{Val _,$_1t_2:Array [Array [Float ,0b1001000],0b11_0_0];Var Q,_:Array [Array [Array [Boolean ,0xE3_B2_D_94],054],5];}'''
        expect = '''Program([ClassDecl(Id(Ze_7X),Id(_X8_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(N_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($8),IntType,None)),AttributeDecl(Instance,VarDecl(Id(n),ClassType(Id(_7G)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(12,ArrayType(72,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($_1t_2),ArrayType(12,ArrayType(72,FloatType)),None)),AttributeDecl(Instance,VarDecl(Id(Q),ArrayType(5,ArrayType(44,ArrayType(238759316,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(5,ArrayType(44,ArrayType(238759316,BoolType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 650))

    def test_651(self):
        line = '''Class _8_{}Class _:_{Var _,$_:Array [Boolean ,0x5];}Class _:C_Ez1{Var $__,$z:Array [Boolean ,03_6];}Class m{D(__4,Xl25___,K,_:String ;_,_,A:Array [Array [Array [Array [Float ,05_33_1],0x1_5D_B],67],01]){} }'''
        expect = '''Program([ClassDecl(Id(_8_),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(5,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(5,BoolType)))]),ClassDecl(Id(_),Id(C_Ez1),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(30,BoolType))),AttributeDecl(Static,VarDecl(Id($z),ArrayType(30,BoolType)))]),ClassDecl(Id(m),[MethodDecl(Id(D),Instance,[param(Id(__4),StringType),param(Id(Xl25___),StringType),param(Id(K),StringType),param(Id(_),StringType),param(Id(_),ArrayType(1,ArrayType(67,ArrayType(5595,ArrayType(2777,FloatType))))),param(Id(_),ArrayType(1,ArrayType(67,ArrayType(5595,ArrayType(2777,FloatType))))),param(Id(A),ArrayType(1,ArrayType(67,ArrayType(5595,ArrayType(2777,FloatType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 651))

    def test_652(self):
        line = '''Class X{}Class q_:e{}Class ___{Constructor (){} }Class _:_{__(_,_b:_;A_7u,_2,___X:Array [Array [Array [String ,0b1],0x3D],061]){Continue ;E::$z1s();}Constructor (_z,g,_,W55_,_,A,_d,_:a_){}Var _y,__:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(X),[]),ClassDecl(Id(q_),Id(e),[]),ClassDecl(Id(___),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(__),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_b),ClassType(Id(_))),param(Id(A_7u),ArrayType(49,ArrayType(61,ArrayType(1,StringType)))),param(Id(_2),ArrayType(49,ArrayType(61,ArrayType(1,StringType)))),param(Id(___X),ArrayType(49,ArrayType(61,ArrayType(1,StringType))))],Block([Continue,Call(Id(E),Id($z1s),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(_z),ClassType(Id(a_))),param(Id(g),ClassType(Id(a_))),param(Id(_),ClassType(Id(a_))),param(Id(W55_),ClassType(Id(a_))),param(Id(_),ClassType(Id(a_))),param(Id(A),ClassType(Id(a_))),param(Id(_d),ClassType(Id(a_))),param(Id(_),ClassType(Id(a_)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_y),BoolType)),AttributeDecl(Instance,VarDecl(Id(__),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 652))

    def test_653(self):
        line = '''Class u_:U{$_S33z(pR01__9KI0,_1,N:Array [Array [Array [Array [String ,0B1_1],1],13],036];_4,_,_S,Y:String ){}v(_,__,PE:Array [Array [Array [Array [Float ,3],0x4],0x4],04];_:Array [Boolean ,01];__,gN,_,_,z__9:Array [Array [Float ,07_5],0B111010];Vt,G,_,v6,_,Ej5:_;O0p75__,_,E8Q:Array [Array [Array [Array [Array [Array [String ,036],0x2A],13],034],0X16],041]){} }'''
        expect = '''Program([ClassDecl(Id(u_),Id(U),[MethodDecl(Id($_S33z),Static,[param(Id(pR01__9KI0),ArrayType(30,ArrayType(13,ArrayType(1,ArrayType(3,StringType))))),param(Id(_1),ArrayType(30,ArrayType(13,ArrayType(1,ArrayType(3,StringType))))),param(Id(N),ArrayType(30,ArrayType(13,ArrayType(1,ArrayType(3,StringType))))),param(Id(_4),StringType),param(Id(_),StringType),param(Id(_S),StringType),param(Id(Y),StringType)],Block([])),MethodDecl(Id(v),Instance,[param(Id(_),ArrayType(4,ArrayType(4,ArrayType(4,ArrayType(3,FloatType))))),param(Id(__),ArrayType(4,ArrayType(4,ArrayType(4,ArrayType(3,FloatType))))),param(Id(PE),ArrayType(4,ArrayType(4,ArrayType(4,ArrayType(3,FloatType))))),param(Id(_),ArrayType(1,BoolType)),param(Id(__),ArrayType(58,ArrayType(61,FloatType))),param(Id(gN),ArrayType(58,ArrayType(61,FloatType))),param(Id(_),ArrayType(58,ArrayType(61,FloatType))),param(Id(_),ArrayType(58,ArrayType(61,FloatType))),param(Id(z__9),ArrayType(58,ArrayType(61,FloatType))),param(Id(Vt),ClassType(Id(_))),param(Id(G),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(v6),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(Ej5),ClassType(Id(_))),param(Id(O0p75__),ArrayType(33,ArrayType(22,ArrayType(28,ArrayType(13,ArrayType(42,ArrayType(30,StringType))))))),param(Id(_),ArrayType(33,ArrayType(22,ArrayType(28,ArrayType(13,ArrayType(42,ArrayType(30,StringType))))))),param(Id(E8Q),ArrayType(33,ArrayType(22,ArrayType(28,ArrayType(13,ArrayType(42,ArrayType(30,StringType)))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 653))

    def test_654(self):
        line = '''Class vw2:E{Constructor (){}Val _:Array [Boolean ,0x5];Var $__,k,n,$T4:Array [Array [Float ,67],2_6];_AS(p,_:String ;X_:Array [Array [Array [Int ,0b11011],0x49],043];_,_J0_T6_:Boolean ;_3x:Array [Int ,4_2];i:Array [Boolean ,043]){} }'''
        expect = '''Program([ClassDecl(Id(vw2),Id(E),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(5,BoolType),None)),AttributeDecl(Static,VarDecl(Id($__),ArrayType(26,ArrayType(67,FloatType)))),AttributeDecl(Instance,VarDecl(Id(k),ArrayType(26,ArrayType(67,FloatType)))),AttributeDecl(Instance,VarDecl(Id(n),ArrayType(26,ArrayType(67,FloatType)))),AttributeDecl(Static,VarDecl(Id($T4),ArrayType(26,ArrayType(67,FloatType)))),MethodDecl(Id(_AS),Instance,[param(Id(p),StringType),param(Id(_),StringType),param(Id(X_),ArrayType(35,ArrayType(73,ArrayType(27,IntType)))),param(Id(_),BoolType),param(Id(_J0_T6_),BoolType),param(Id(_3x),ArrayType(42,IntType)),param(Id(i),ArrayType(35,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 654))

    def test_655(self):
        line = '''Class _QD{Destructor (){Return ;Return ;Val F:Int ;} }Class n1a_:_{Constructor (d_:t;n:H;_,_:Array [Array [Array [String ,0b110011],012],0XE]){}Var J8_,u,$V4I,x,_8,E0:_V;}'''
        expect = '''Program([ClassDecl(Id(_QD),[MethodDecl(Id(Destructor),Instance,[],Block([Return(),Return(),ConstDecl(Id(F),IntType,None)]))]),ClassDecl(Id(n1a_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(d_),ClassType(Id(t))),param(Id(n),ClassType(Id(H))),param(Id(_),ArrayType(14,ArrayType(10,ArrayType(51,StringType)))),param(Id(_),ArrayType(14,ArrayType(10,ArrayType(51,StringType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(J8_),ClassType(Id(_V)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(u),ClassType(Id(_V)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($V4I),ClassType(Id(_V)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(x),ClassType(Id(_V)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_8),ClassType(Id(_V)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(E0),ClassType(Id(_V)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 655))

    def test_656(self):
        line = '''Class G{Constructor (){}Ut0U3(D,_:Array [Array [Array [Array [Float ,0350],06],0X31],014]){}Constructor (__,_jK_,K_,mv_,e:Array [String ,0B100011];B_,L_,G:Array [Array [Float ,9_7_04],31]){} }'''
        expect = '''Program([ClassDecl(Id(G),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Ut0U3),Instance,[param(Id(D),ArrayType(12,ArrayType(49,ArrayType(6,ArrayType(232,FloatType))))),param(Id(_),ArrayType(12,ArrayType(49,ArrayType(6,ArrayType(232,FloatType)))))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(35,StringType)),param(Id(_jK_),ArrayType(35,StringType)),param(Id(K_),ArrayType(35,StringType)),param(Id(mv_),ArrayType(35,StringType)),param(Id(e),ArrayType(35,StringType)),param(Id(B_),ArrayType(31,ArrayType(9704,FloatType))),param(Id(L_),ArrayType(31,ArrayType(9704,FloatType))),param(Id(G),ArrayType(31,ArrayType(9704,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 656))

    def test_657(self):
        line = '''Class _:_46_{}Class _s{}Class p_5:LAf{Var $43,E:_2;m(__:_;___232G_:Array [Array [Array [Array [Array [Boolean ,0b1],7],0X5],0x47],0b1_1]){} }Class _{}Class l:_{Var $6,$_G:_;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_46_),[]),ClassDecl(Id(_s),[]),ClassDecl(Id(p_5),Id(LAf),[AttributeDecl(Static,VarDecl(Id($43),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(E),ClassType(Id(_2)),NullLiteral())),MethodDecl(Id(m),Instance,[param(Id(__),ClassType(Id(_))),param(Id(___232G_),ArrayType(3,ArrayType(71,ArrayType(5,ArrayType(7,ArrayType(1,BoolType))))))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(l),Id(_),[AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_G),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 657))

    def test_658(self):
        line = '''Class a:_{}Class _:_{Constructor (e9,P_:_){}Constructor (_8,f82_,_4___5:__;_,o,k,L_,atd8:Array [Array [Int ,0130],0b1]){Val i,_9,__:j_4;Var L,v_Z:H;}Var U_:Array [Boolean ,0b1100];}Class Q7:_{}Class _4{}'''
        expect = '''Program([ClassDecl(Id(a),Id(_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(e9),ClassType(Id(_))),param(Id(P_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_8),ClassType(Id(__))),param(Id(f82_),ClassType(Id(__))),param(Id(_4___5),ClassType(Id(__))),param(Id(_),ArrayType(1,ArrayType(88,IntType))),param(Id(o),ArrayType(1,ArrayType(88,IntType))),param(Id(k),ArrayType(1,ArrayType(88,IntType))),param(Id(L_),ArrayType(1,ArrayType(88,IntType))),param(Id(atd8),ArrayType(1,ArrayType(88,IntType)))],Block([ConstDecl(Id(i),ClassType(Id(j_4)),NullLiteral()),ConstDecl(Id(_9),ClassType(Id(j_4)),NullLiteral()),ConstDecl(Id(__),ClassType(Id(j_4)),NullLiteral()),VarDecl(Id(L),ClassType(Id(H)),NullLiteral()),VarDecl(Id(v_Z),ClassType(Id(H)),NullLiteral())])),AttributeDecl(Instance,VarDecl(Id(U_),ArrayType(12,BoolType)))]),ClassDecl(Id(Q7),Id(_),[]),ClassDecl(Id(_4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 658))

    def test_659(self):
        line = '''Class l:_{}Class k:s2{Destructor (){}Constructor (){Break ;}Val $_7:Array [Int ,94];}Class _{S(){}Val I__2,$k_,_:o5;}Class X:_9___XI__{$e584(_c_,_h__50,Z,_:_;e:n_;M,__,__:String ){}C4X(){} }'''
        expect = '''Program([ClassDecl(Id(l),Id(_),[]),ClassDecl(Id(k),Id(s2),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break])),AttributeDecl(Static,ConstDecl(Id($_7),ArrayType(94,IntType),None))]),ClassDecl(Id(_),[MethodDecl(Id(S),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(I__2),ClassType(Id(o5)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($k_),ClassType(Id(o5)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(o5)),NullLiteral()))]),ClassDecl(Id(X),Id(_9___XI__),[MethodDecl(Id($e584),Static,[param(Id(_c_),ClassType(Id(_))),param(Id(_h__50),ClassType(Id(_))),param(Id(Z),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(e),ClassType(Id(n_))),param(Id(M),StringType),param(Id(__),StringType),param(Id(__),StringType)],Block([])),MethodDecl(Id(C4X),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 659))

    def test_660(self):
        line = '''Class SM6:y9{}Class H__{$__(R:Array [Array [Array [String ,07_5],2],0X3A];__7,P_3__,o8h9:_;_,B___,Z:O;A,_:Y;Sb_W:Array [Array [Array [Array [Boolean ,0B111],9],29],0x4B];_,_,_:Array [Array [Int ,033],0X5C]){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(SM6),Id(y9),[]),ClassDecl(Id(H__),[MethodDecl(Id($__),Static,[param(Id(R),ArrayType(58,ArrayType(2,ArrayType(61,StringType)))),param(Id(__7),ClassType(Id(_))),param(Id(P_3__),ClassType(Id(_))),param(Id(o8h9),ClassType(Id(_))),param(Id(_),ClassType(Id(O))),param(Id(B___),ClassType(Id(O))),param(Id(Z),ClassType(Id(O))),param(Id(A),ClassType(Id(Y))),param(Id(_),ClassType(Id(Y))),param(Id(Sb_W),ArrayType(75,ArrayType(29,ArrayType(9,ArrayType(7,BoolType))))),param(Id(_),ArrayType(92,ArrayType(27,IntType))),param(Id(_),ArrayType(92,ArrayType(27,IntType))),param(Id(_),ArrayType(92,ArrayType(27,IntType)))],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 660))

    def test_661(self):
        line = '''Class _:zdb{}Class _xY0:TP9{}Class ci_:VN{$_(__:Int ;s9:_;_,_,_:Array [Boolean ,0X9];h14:Array [Array [Array [Array [Int ,0121],0b1000011],0X34],0B1_1_0]){Continue ;Break ;}$_H_(){} }Class M_:N_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(zdb),[]),ClassDecl(Id(_xY0),Id(TP9),[]),ClassDecl(Id(ci_),Id(VN),[MethodDecl(Id($_),Static,[param(Id(__),IntType),param(Id(s9),ClassType(Id(_))),param(Id(_),ArrayType(9,BoolType)),param(Id(_),ArrayType(9,BoolType)),param(Id(_),ArrayType(9,BoolType)),param(Id(h14),ArrayType(6,ArrayType(52,ArrayType(67,ArrayType(81,IntType)))))],Block([Continue,Break])),MethodDecl(Id($_H_),Static,[],Block([]))]),ClassDecl(Id(M_),Id(N_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 661))

    def test_662(self):
        line = '''Class _:_L{Var _:Array [Array [Array [Array [Array [Array [String ,0b10],0X8_D],0X46],43],0X1_C],065];$_(YZM:Array [Array [Float ,053],053];_93,c:Int ;_,_9:Array [Boolean ,0b1];qM,_:e){} }Class l{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_L),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(53,ArrayType(28,ArrayType(43,ArrayType(70,ArrayType(141,ArrayType(2,StringType)))))))),MethodDecl(Id($_),Static,[param(Id(YZM),ArrayType(43,ArrayType(43,FloatType))),param(Id(_93),IntType),param(Id(c),IntType),param(Id(_),ArrayType(1,BoolType)),param(Id(_9),ArrayType(1,BoolType)),param(Id(qM),ClassType(Id(e))),param(Id(_),ClassType(Id(e)))],Block([]))]),ClassDecl(Id(l),[])])'''
        self.assertTrue(TestAST.test(line, expect, 662))

    def test_663(self):
        line = '''Class v{}Class _:aI0{}Class xb_:_{$22(W:N_;m3_:String ;_:c0;U:Boolean ){}Val $_,_F__q,$2t,$5:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0115],6],0B10],012_5_27],0b110],0115],15],0xE1];Constructor (a1,mTH:Array [Boolean ,2];W__P5,u_H_,j,g:_6uz){}Var $88,_,__,tS,__,w__k:_V0_;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(v),[]),ClassDecl(Id(_),Id(aI0),[]),ClassDecl(Id(xb_),Id(_),[MethodDecl(Id($22),Static,[param(Id(W),ClassType(Id(N_))),param(Id(m3_),StringType),param(Id(_),ClassType(Id(c0))),param(Id(U),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(225,ArrayType(15,ArrayType(77,ArrayType(6,ArrayType(5463,ArrayType(2,ArrayType(6,ArrayType(77,BoolType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_F__q),ArrayType(225,ArrayType(15,ArrayType(77,ArrayType(6,ArrayType(5463,ArrayType(2,ArrayType(6,ArrayType(77,BoolType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($2t),ArrayType(225,ArrayType(15,ArrayType(77,ArrayType(6,ArrayType(5463,ArrayType(2,ArrayType(6,ArrayType(77,BoolType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(225,ArrayType(15,ArrayType(77,ArrayType(6,ArrayType(5463,ArrayType(2,ArrayType(6,ArrayType(77,BoolType)))))))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(a1),ArrayType(2,BoolType)),param(Id(mTH),ArrayType(2,BoolType)),param(Id(W__P5),ClassType(Id(_6uz))),param(Id(u_H_),ClassType(Id(_6uz))),param(Id(j),ClassType(Id(_6uz))),param(Id(g),ClassType(Id(_6uz)))],Block([])),AttributeDecl(Static,VarDecl(Id($88),ClassType(Id(_V0_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_V0_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_V0_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(tS),ClassType(Id(_V0_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(_V0_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(w__k),ClassType(Id(_V0_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 663))

    def test_664(self):
        line = '''Class _{}Class L{Var $_:String ;Destructor (){} }Class _:__D{$_Y(T1,U,__:O_U;_92,__:String ;a3,m:Int ){Break ;} }Class P{}Class x{}Class _g{Val $8__,$15:_;Constructor (){}$_(){} }Class _7{$_B(__:Array [Array [Array [Array [Array [Array [Int ,0x2],0xF],7],0B1],034],8_2];_9:Array [Array [Array [Array [Float ,6_1],034],0x2B],0b100001]){} }Class G:r{}Class z4_20_{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(L),[AttributeDecl(Static,VarDecl(Id($_),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(__D),[MethodDecl(Id($_Y),Static,[param(Id(T1),ClassType(Id(O_U))),param(Id(U),ClassType(Id(O_U))),param(Id(__),ClassType(Id(O_U))),param(Id(_92),StringType),param(Id(__),StringType),param(Id(a3),IntType),param(Id(m),IntType)],Block([Break]))]),ClassDecl(Id(P),[]),ClassDecl(Id(x),[]),ClassDecl(Id(_g),[AttributeDecl(Static,ConstDecl(Id($8__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($15),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(_7),[MethodDecl(Id($_B),Static,[param(Id(__),ArrayType(82,ArrayType(28,ArrayType(1,ArrayType(7,ArrayType(15,ArrayType(2,IntType))))))),param(Id(_9),ArrayType(33,ArrayType(43,ArrayType(28,ArrayType(61,FloatType)))))],Block([]))]),ClassDecl(Id(G),Id(r),[]),ClassDecl(Id(z4_20_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 664))

    def test_665(self):
        line = '''Class D4:p__Qj{Val $_ZfL8:Array [Boolean ,0B1110];Destructor (){}Val $3__,$o:G__;Var b_2:Array [Array [Array [Array [Array [Array [Float ,7],0B1],076],076],0B1],0X2D];$b(){ {Break ;} }}Class bCY8{_3(){} }'''
        expect = '''Program([ClassDecl(Id(D4),Id(p__Qj),[AttributeDecl(Static,ConstDecl(Id($_ZfL8),ArrayType(14,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($3__),ClassType(Id(G__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($o),ClassType(Id(G__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(b_2),ArrayType(45,ArrayType(1,ArrayType(62,ArrayType(62,ArrayType(1,ArrayType(7,FloatType)))))))),MethodDecl(Id($b),Static,[],Block([Block([Break])]))]),ClassDecl(Id(bCY8),[MethodDecl(Id(_3),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 665))

    def test_666(self):
        line = '''Class s_:NJ{}Class _{}Class __wcp__K6g_O_{Destructor (){}Var _,_,_,$_H,F4l:Int ;}Class h{Constructor (__:Array [Array [Array [Boolean ,05],0B10],040]){Var F3y,__,Lh,__,_:Int ;}Val CAUk,$_9,$K:Array [Int ,0x28];}'''
        expect = '''Program([ClassDecl(Id(s_),Id(NJ),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__wcp__K6g_O_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Instance,VarDecl(Id(_),IntType)),AttributeDecl(Static,VarDecl(Id($_H),IntType)),AttributeDecl(Instance,VarDecl(Id(F4l),IntType))]),ClassDecl(Id(h),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ArrayType(32,ArrayType(2,ArrayType(5,BoolType))))],Block([VarDecl(Id(F3y),IntType),VarDecl(Id(__),IntType),VarDecl(Id(Lh),IntType),VarDecl(Id(__),IntType),VarDecl(Id(_),IntType)])),AttributeDecl(Instance,ConstDecl(Id(CAUk),ArrayType(40,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_9),ArrayType(40,IntType),None)),AttributeDecl(Static,ConstDecl(Id($K),ArrayType(40,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 666))

    def test_667(self):
        line = '''Class _2N8:_{Constructor (olL:Array [Array [String ,0B111011],021];D:a;_S:Float ;_1,u,X12:Array [Float ,2_1_5_12629];_,i_,s:B_;__,_,_w5,a,___1U:Float ;_,_,_87R:_;_6:Int ;Q,CB,K,b:d){} }Class Y:l_{Constructor (){}$1W(){Return ;} }'''
        expect = '''Program([ClassDecl(Id(_2N8),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(olL),ArrayType(17,ArrayType(59,StringType))),param(Id(D),ClassType(Id(a))),param(Id(_S),FloatType),param(Id(_1),ArrayType(21512629,FloatType)),param(Id(u),ArrayType(21512629,FloatType)),param(Id(X12),ArrayType(21512629,FloatType)),param(Id(_),ClassType(Id(B_))),param(Id(i_),ClassType(Id(B_))),param(Id(s),ClassType(Id(B_))),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(_w5),FloatType),param(Id(a),FloatType),param(Id(___1U),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_87R),ClassType(Id(_))),param(Id(_6),IntType),param(Id(Q),ClassType(Id(d))),param(Id(CB),ClassType(Id(d))),param(Id(K),ClassType(Id(d))),param(Id(b),ClassType(Id(d)))],Block([]))]),ClassDecl(Id(Y),Id(l_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($1W),Static,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 667))

    def test_668(self):
        line = '''Class _wr38:_{Constructor (m,x,J,_:LE;_1:Boolean ;h_R,_,N:Float ;o,_,_,a:Array [Array [Array [Array [Float ,075],5_3],0x8],07_12];_8:_;W:Array [Array [Float ,0B10010],0B10010]){Break ;Val R64,__:Array [Float ,0b1];}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_wr38),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(m),ClassType(Id(LE))),param(Id(x),ClassType(Id(LE))),param(Id(J),ClassType(Id(LE))),param(Id(_),ClassType(Id(LE))),param(Id(_1),BoolType),param(Id(h_R),FloatType),param(Id(_),FloatType),param(Id(N),FloatType),param(Id(o),ArrayType(458,ArrayType(8,ArrayType(53,ArrayType(61,FloatType))))),param(Id(_),ArrayType(458,ArrayType(8,ArrayType(53,ArrayType(61,FloatType))))),param(Id(_),ArrayType(458,ArrayType(8,ArrayType(53,ArrayType(61,FloatType))))),param(Id(a),ArrayType(458,ArrayType(8,ArrayType(53,ArrayType(61,FloatType))))),param(Id(_8),ClassType(Id(_))),param(Id(W),ArrayType(18,ArrayType(18,FloatType)))],Block([Break,ConstDecl(Id(R64),ArrayType(1,FloatType),None),ConstDecl(Id(__),ArrayType(1,FloatType),None)])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 668))

    def test_669(self):
        line = '''Class ___u7:a___{_(N47_4_6,_6:Float ;B:Msi__;_:C){Return ;}Constructor (P:Array [String ,50];_:Int ;_,b:s;__:K__7;v,_:Int ;E:Boolean ;_,nU,____81:Array [Array [Boolean ,0X3_EB],0b10000]){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(___u7),Id(a___),[MethodDecl(Id(_),Instance,[param(Id(N47_4_6),FloatType),param(Id(_6),FloatType),param(Id(B),ClassType(Id(Msi__))),param(Id(_),ClassType(Id(C)))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(P),ArrayType(50,StringType)),param(Id(_),IntType),param(Id(_),ClassType(Id(s))),param(Id(b),ClassType(Id(s))),param(Id(__),ClassType(Id(K__7))),param(Id(v),IntType),param(Id(_),IntType),param(Id(E),BoolType),param(Id(_),ArrayType(16,ArrayType(1003,BoolType))),param(Id(nU),ArrayType(16,ArrayType(1003,BoolType))),param(Id(____81),ArrayType(16,ArrayType(1003,BoolType)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 669))

    def test_670(self):
        line = '''Class __:_48_{$_(){Var __,_:Boolean ;}Constructor (_:Array [Array [Array [Array [Array [Boolean ,0b111],0x15],0X63],1],0b10110];m,_Q_,__vx_,_0Uk____V__k:String ){} }Class _7:_4c{}'''
        expect = '''Program([ClassDecl(Id(__),Id(_48_),[MethodDecl(Id($_),Static,[],Block([VarDecl(Id(__),BoolType),VarDecl(Id(_),BoolType)])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(22,ArrayType(1,ArrayType(99,ArrayType(21,ArrayType(7,BoolType)))))),param(Id(m),StringType),param(Id(_Q_),StringType),param(Id(__vx_),StringType),param(Id(_0Uk____V__k),StringType)],Block([]))]),ClassDecl(Id(_7),Id(_4c),[])])'''
        self.assertTrue(TestAST.test(line, expect, 670))

    def test_671(self):
        line = '''Class _4R:_{$3(_,_p,FQ,_A_,_:Array [Array [Array [Array [String ,0x5],0x44],91],0113];Zt,__,_42:String ;Q:Int ;_:Array [Array [Float ,0B110010],91];u:Float ;_P_:R){Continue ;}Val _:Float ;}Class i9_:h8{}'''
        expect = '''Program([ClassDecl(Id(_4R),Id(_),[MethodDecl(Id($3),Static,[param(Id(_),ArrayType(75,ArrayType(91,ArrayType(68,ArrayType(5,StringType))))),param(Id(_p),ArrayType(75,ArrayType(91,ArrayType(68,ArrayType(5,StringType))))),param(Id(FQ),ArrayType(75,ArrayType(91,ArrayType(68,ArrayType(5,StringType))))),param(Id(_A_),ArrayType(75,ArrayType(91,ArrayType(68,ArrayType(5,StringType))))),param(Id(_),ArrayType(75,ArrayType(91,ArrayType(68,ArrayType(5,StringType))))),param(Id(Zt),StringType),param(Id(__),StringType),param(Id(_42),StringType),param(Id(Q),IntType),param(Id(_),ArrayType(91,ArrayType(50,FloatType))),param(Id(u),FloatType),param(Id(_P_),ClassType(Id(R)))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))]),ClassDecl(Id(i9_),Id(h8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 671))

    def test_672(self):
        line = '''Class w{Val rs:String ;Var $w:kp;Val $2,U5y_:Array [Array [Array [Array [Array [Array [String ,0XD],0B1_0],8],0x3],0X3C],8];}Class W5av:_H{Var h7,$4_,$5_,iq:Array [Float ,02];}Class __{}'''
        expect = '''Program([ClassDecl(Id(w),[AttributeDecl(Instance,ConstDecl(Id(rs),StringType,None)),AttributeDecl(Static,VarDecl(Id($w),ClassType(Id(kp)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(8,ArrayType(60,ArrayType(3,ArrayType(8,ArrayType(2,ArrayType(13,StringType)))))),None)),AttributeDecl(Instance,ConstDecl(Id(U5y_),ArrayType(8,ArrayType(60,ArrayType(3,ArrayType(8,ArrayType(2,ArrayType(13,StringType)))))),None))]),ClassDecl(Id(W5av),Id(_H),[AttributeDecl(Instance,VarDecl(Id(h7),ArrayType(2,FloatType))),AttributeDecl(Static,VarDecl(Id($4_),ArrayType(2,FloatType))),AttributeDecl(Static,VarDecl(Id($5_),ArrayType(2,FloatType))),AttributeDecl(Instance,VarDecl(Id(iq),ArrayType(2,FloatType)))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 672))

    def test_673(self):
        line = '''Class _{_t_(e_:Array [Array [Int ,040_1],0B1010];_:Cj_){}Constructor (){}Constructor (_6,f:Boolean ){ {} }}Class o{}Class _{Constructor (_:Array [Array [Array [Array [Array [Float ,0x8_7],7],7],7],7]){}Var _,$j,_:Array [Array [String ,0b1_1_1],0b1];}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_t_),Instance,[param(Id(e_),ArrayType(10,ArrayType(257,IntType))),param(Id(_),ClassType(Id(Cj_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_6),BoolType),param(Id(f),BoolType)],Block([Block([])]))]),ClassDecl(Id(o),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(7,ArrayType(7,ArrayType(7,ArrayType(7,ArrayType(135,FloatType))))))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(7,StringType)))),AttributeDecl(Static,VarDecl(Id($j),ArrayType(1,ArrayType(7,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(7,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 673))

    def test_674(self):
        line = '''Class _a{}Class __X:Y{Val $5_,$_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,3],4_8_0_715_2_72],0XF7_8D],0xB7],07],57],9],07];}Class N0_{}Class __Do{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_a),[]),ClassDecl(Id(__X),Id(Y),[AttributeDecl(Static,ConstDecl(Id($5_),ArrayType(7,ArrayType(9,ArrayType(57,ArrayType(7,ArrayType(183,ArrayType(63373,ArrayType(480715272,ArrayType(3,IntType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(7,ArrayType(9,ArrayType(57,ArrayType(7,ArrayType(183,ArrayType(63373,ArrayType(480715272,ArrayType(3,IntType)))))))),None))]),ClassDecl(Id(N0_),[]),ClassDecl(Id(__Do),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 674))

    def test_675(self):
        line = '''Class D_K:_PH6{}Class Z:Nn{H(_A:Array [Array [Array [Float ,0xD],0X9],66];o30,_43:Array [String ,59];y_R,dG__0_t__:f;r:Array [Int ,0xD]){__Y__::$i.y().u.__.Dg_();} }'''
        expect = '''Program([ClassDecl(Id(D_K),Id(_PH6),[]),ClassDecl(Id(Z),Id(Nn),[MethodDecl(Id(H),Instance,[param(Id(_A),ArrayType(66,ArrayType(9,ArrayType(13,FloatType)))),param(Id(o30),ArrayType(59,StringType)),param(Id(_43),ArrayType(59,StringType)),param(Id(y_R),ClassType(Id(f))),param(Id(dG__0_t__),ClassType(Id(f))),param(Id(r),ArrayType(13,IntType))],Block([Call(FieldAccess(FieldAccess(CallExpr(FieldAccess(Id(__Y__),Id($i)),Id(y),[]),Id(u)),Id(__)),Id(Dg_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 675))

    def test_676(self):
        line = '''Class _:c_{Constructor (){Break ;}Constructor (_:i;q6:Float ){}Constructor (BG,_b_:Array [Int ,0B10];__4:Int ;j0_,E_,C,s_:_){Continue ;Break ;Continue ;}Var $bL,$Bu4,$d2:Array [Int ,6_9];}'''
        expect = '''Program([ClassDecl(Id(_),Id(c_),[MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(i))),param(Id(q6),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(BG),ArrayType(2,IntType)),param(Id(_b_),ArrayType(2,IntType)),param(Id(__4),IntType),param(Id(j0_),ClassType(Id(_))),param(Id(E_),ClassType(Id(_))),param(Id(C),ClassType(Id(_))),param(Id(s_),ClassType(Id(_)))],Block([Continue,Break,Continue])),AttributeDecl(Static,VarDecl(Id($bL),ArrayType(69,IntType))),AttributeDecl(Static,VarDecl(Id($Bu4),ArrayType(69,IntType))),AttributeDecl(Static,VarDecl(Id($d2),ArrayType(69,IntType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 676))

    def test_677(self):
        line = '''Class E{}Class __6_:k__1{Var $1:Array [Array [Array [Boolean ,0133],0b100011],9_74];$_7ZL(){}Constructor (CG,r,_,A_aN,f74,u:Array [Float ,0X13]){}Constructor (_u,_,__,_44F:T){}$3(J:Float ;_,b:Array [Array [Array [Array [String ,0133],0133],0x6],6]){Break ;}__(_,_z,M:Float ;j,_0,q:Array [Array [Int ,86],0x18];_:Array [Int ,650]){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(E),[]),ClassDecl(Id(__6_),Id(k__1),[AttributeDecl(Static,VarDecl(Id($1),ArrayType(974,ArrayType(35,ArrayType(91,BoolType))))),MethodDecl(Id($_7ZL),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(CG),ArrayType(19,FloatType)),param(Id(r),ArrayType(19,FloatType)),param(Id(_),ArrayType(19,FloatType)),param(Id(A_aN),ArrayType(19,FloatType)),param(Id(f74),ArrayType(19,FloatType)),param(Id(u),ArrayType(19,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_u),ClassType(Id(T))),param(Id(_),ClassType(Id(T))),param(Id(__),ClassType(Id(T))),param(Id(_44F),ClassType(Id(T)))],Block([])),MethodDecl(Id($3),Static,[param(Id(J),FloatType),param(Id(_),ArrayType(6,ArrayType(6,ArrayType(91,ArrayType(91,StringType))))),param(Id(b),ArrayType(6,ArrayType(6,ArrayType(91,ArrayType(91,StringType)))))],Block([Break])),MethodDecl(Id(__),Instance,[param(Id(_),FloatType),param(Id(_z),FloatType),param(Id(M),FloatType),param(Id(j),ArrayType(24,ArrayType(86,IntType))),param(Id(_0),ArrayType(24,ArrayType(86,IntType))),param(Id(q),ArrayType(24,ArrayType(86,IntType))),param(Id(_),ArrayType(650,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 677))

    def test_678(self):
        line = '''Class B2__:_7L{}Class _0{$_3_(_,_,V,B72:Float ){}Val c:String ;Var $___,E,P1,r5_,y,$5:Array [Array [Int ,0xA],013];Constructor (){}Var I:Array [Array [Int ,0B1],03_1_373_2];}Class b:q{}Class _{}Class __m5:m_{}Class _35_Jb_{}'''
        expect = '''Program([ClassDecl(Id(B2__),Id(_7L),[]),ClassDecl(Id(_0),[MethodDecl(Id($_3_),Static,[param(Id(_),FloatType),param(Id(_),FloatType),param(Id(V),FloatType),param(Id(B72),FloatType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(c),StringType,None)),AttributeDecl(Static,VarDecl(Id($___),ArrayType(11,ArrayType(10,IntType)))),AttributeDecl(Instance,VarDecl(Id(E),ArrayType(11,ArrayType(10,IntType)))),AttributeDecl(Instance,VarDecl(Id(P1),ArrayType(11,ArrayType(10,IntType)))),AttributeDecl(Instance,VarDecl(Id(r5_),ArrayType(11,ArrayType(10,IntType)))),AttributeDecl(Instance,VarDecl(Id(y),ArrayType(11,ArrayType(10,IntType)))),AttributeDecl(Static,VarDecl(Id($5),ArrayType(11,ArrayType(10,IntType)))),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(I),ArrayType(104410,ArrayType(1,IntType))))]),ClassDecl(Id(b),Id(q),[]),ClassDecl(Id(_),[]),ClassDecl(Id(__m5),Id(m_),[]),ClassDecl(Id(_35_Jb_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 678))

    def test_679(self):
        line = '''Class __:L{$A(R,OD,_,i__:Boolean ;_92,w:Array [Boolean ,0x43];s,_:Array [Array [Array [Int ,0101],1],0b1];_:Array [String ,0xE9]){}Destructor (){ {Continue ;}Break ;{Continue ;} }}Class __:D0_7_{}Class _9:_2{}Class i__x{}'''
        expect = '''Program([ClassDecl(Id(__),Id(L),[MethodDecl(Id($A),Static,[param(Id(R),BoolType),param(Id(OD),BoolType),param(Id(_),BoolType),param(Id(i__),BoolType),param(Id(_92),ArrayType(67,BoolType)),param(Id(w),ArrayType(67,BoolType)),param(Id(s),ArrayType(1,ArrayType(1,ArrayType(65,IntType)))),param(Id(_),ArrayType(1,ArrayType(1,ArrayType(65,IntType)))),param(Id(_),ArrayType(233,StringType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([Continue]),Break,Block([Continue])]))]),ClassDecl(Id(__),Id(D0_7_),[]),ClassDecl(Id(_9),Id(_2),[]),ClassDecl(Id(i__x),[])])'''
        self.assertTrue(TestAST.test(line, expect, 679))

    def test_680(self):
        line = '''Class _3u{$h_(r:String ){}Var $2:Array [Array [Array [Float ,064],35_4],064];}Class E_:_{Var $w,$_:Array [Array [Array [Array [Array [String ,0X3E],0x5],99],0B1],0X7];}Class Zr_8:_{Val $4n:Array [Array [Array [Array [Array [Array [Boolean ,0X5_B_5],7],99],99],064],0X5C];Destructor (){} }Class _{Var $_:Boolean ;Val a_7m:Int ;}'''
        expect = '''Program([ClassDecl(Id(_3u),[MethodDecl(Id($h_),Static,[param(Id(r),StringType)],Block([])),AttributeDecl(Static,VarDecl(Id($2),ArrayType(52,ArrayType(354,ArrayType(52,FloatType)))))]),ClassDecl(Id(E_),Id(_),[AttributeDecl(Static,VarDecl(Id($w),ArrayType(7,ArrayType(1,ArrayType(99,ArrayType(5,ArrayType(62,StringType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(7,ArrayType(1,ArrayType(99,ArrayType(5,ArrayType(62,StringType)))))))]),ClassDecl(Id(Zr_8),Id(_),[AttributeDecl(Static,ConstDecl(Id($4n),ArrayType(92,ArrayType(52,ArrayType(99,ArrayType(99,ArrayType(7,ArrayType(1461,BoolType)))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,ConstDecl(Id(a_7m),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 680))

    def test_681(self):
        line = '''Class _:_6_{Destructor (){} }Class __:_{Val Hx_:Array [Array [Array [Int ,0B11],0b10_0_0],0x35];Var $_:Int ;t2_(__8:Array [Array [Array [Array [Array [Array [Boolean ,0B11],050],0137],0b11001],0X2],0B11];__:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_6_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__),Id(_),[AttributeDecl(Instance,ConstDecl(Id(Hx_),ArrayType(53,ArrayType(8,ArrayType(3,IntType))),None)),AttributeDecl(Static,VarDecl(Id($_),IntType)),MethodDecl(Id(t2_),Instance,[param(Id(__8),ArrayType(3,ArrayType(2,ArrayType(25,ArrayType(95,ArrayType(40,ArrayType(3,BoolType))))))),param(Id(__),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 681))

    def test_682(self):
        line = '''Class nE3{Var $_,$9,_990_x_VO:Array [Array [Array [Array [Float ,0B1],0b1_1_01_1_1],0B11101],0x7];}Class _:_{Constructor (e4_PP__7:Array [String ,0x7]){ {}Return ;} }Class j_{Destructor (){Continue ;}_(V,k:Int ){}Constructor (){}$_(__:_86D){} }'''
        expect = '''Program([ClassDecl(Id(nE3),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(7,ArrayType(29,ArrayType(55,ArrayType(1,FloatType)))))),AttributeDecl(Static,VarDecl(Id($9),ArrayType(7,ArrayType(29,ArrayType(55,ArrayType(1,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(_990_x_VO),ArrayType(7,ArrayType(29,ArrayType(55,ArrayType(1,FloatType))))))]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(e4_PP__7),ArrayType(7,StringType))],Block([Block([]),Return()]))]),ClassDecl(Id(j_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(_),Instance,[param(Id(V),IntType),param(Id(k),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[param(Id(__),ClassType(Id(_86D)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 682))

    def test_683(self):
        line = '''Class I_{}Class vD8R__3{Var A__A__,S,__,$m,$4W:Array [Float ,040];_B(FB:Array [Array [Array [Int ,07],0XD],0B11];_:Array [Int ,0XD];_d,D,x:Array [Array [Array [Float ,0b11110],2],0b1]){}Val n0:Array [Array [Int ,07],0b1];}'''
        expect = '''Program([ClassDecl(Id(I_),[]),ClassDecl(Id(vD8R__3),[AttributeDecl(Instance,VarDecl(Id(A__A__),ArrayType(32,FloatType))),AttributeDecl(Instance,VarDecl(Id(S),ArrayType(32,FloatType))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(32,FloatType))),AttributeDecl(Static,VarDecl(Id($m),ArrayType(32,FloatType))),AttributeDecl(Static,VarDecl(Id($4W),ArrayType(32,FloatType))),MethodDecl(Id(_B),Instance,[param(Id(FB),ArrayType(3,ArrayType(13,ArrayType(7,IntType)))),param(Id(_),ArrayType(13,IntType)),param(Id(_d),ArrayType(1,ArrayType(2,ArrayType(30,FloatType)))),param(Id(D),ArrayType(1,ArrayType(2,ArrayType(30,FloatType)))),param(Id(x),ArrayType(1,ArrayType(2,ArrayType(30,FloatType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(n0),ArrayType(1,ArrayType(7,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 683))

    def test_684(self):
        line = '''Class a___{Constructor (Z:Boolean ){} }Class _{$_b(_5T,Eb,w3:Array [Array [Array [Array [Array [String ,0XA_9],0B1010001],0B10],0b1],013];_:Boolean ;i:_;V2S:Boolean ){} }Class i92__:S{}Class Z0{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(a___),[MethodDecl(Id(Constructor),Instance,[param(Id(Z),BoolType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($_b),Static,[param(Id(_5T),ArrayType(11,ArrayType(1,ArrayType(2,ArrayType(81,ArrayType(169,StringType)))))),param(Id(Eb),ArrayType(11,ArrayType(1,ArrayType(2,ArrayType(81,ArrayType(169,StringType)))))),param(Id(w3),ArrayType(11,ArrayType(1,ArrayType(2,ArrayType(81,ArrayType(169,StringType)))))),param(Id(_),BoolType),param(Id(i),ClassType(Id(_))),param(Id(V2S),BoolType)],Block([]))]),ClassDecl(Id(i92__),Id(S),[]),ClassDecl(Id(Z0),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 684))

    def test_685(self):
        line = '''Class F{}Class M:_1{$o__43e(_,_:Array [Float ,56];_1k7,__8,_Y51y:__;__:Boolean ){} }Class S{Constructor (_7J:String ;_:String ){ {}Continue ;}Destructor (){ {} }}Class x:__13{}'''
        expect = '''Program([ClassDecl(Id(F),[]),ClassDecl(Id(M),Id(_1),[MethodDecl(Id($o__43e),Static,[param(Id(_),ArrayType(56,FloatType)),param(Id(_),ArrayType(56,FloatType)),param(Id(_1k7),ClassType(Id(__))),param(Id(__8),ClassType(Id(__))),param(Id(_Y51y),ClassType(Id(__))),param(Id(__),BoolType)],Block([]))]),ClassDecl(Id(S),[MethodDecl(Id(Constructor),Instance,[param(Id(_7J),StringType),param(Id(_),StringType)],Block([Block([]),Continue])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(x),Id(__13),[])])'''
        self.assertTrue(TestAST.test(line, expect, 685))

    def test_686(self):
        line = '''Class _{}Class M1G{_a_(X,u_,_L0:Array [Array [Array [Array [Array [Array [Array [Int ,0B1],2],07],0B1],07],8_48],0xB]){} }Class _2_{}Class w_Mq:o_{Val $1:Array [Array [Int ,0X5_3_A_B36F],0X40];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(M1G),[MethodDecl(Id(_a_),Instance,[param(Id(X),ArrayType(11,ArrayType(848,ArrayType(7,ArrayType(1,ArrayType(7,ArrayType(2,ArrayType(1,IntType)))))))),param(Id(u_),ArrayType(11,ArrayType(848,ArrayType(7,ArrayType(1,ArrayType(7,ArrayType(2,ArrayType(1,IntType)))))))),param(Id(_L0),ArrayType(11,ArrayType(848,ArrayType(7,ArrayType(1,ArrayType(7,ArrayType(2,ArrayType(1,IntType))))))))],Block([]))]),ClassDecl(Id(_2_),[]),ClassDecl(Id(w_Mq),Id(o_),[AttributeDecl(Static,ConstDecl(Id($1),ArrayType(64,ArrayType(87733103,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 686))

    def test_687(self):
        line = '''Class S{Constructor (){} }Class dN{Constructor (x,_:Array [Array [Array [Int ,01],29],0x2B];K,_,_Y22:Array [String ,0b101];_,KHY5__,_,_:IV;u:_;_Iw:C1_z0334){ {} }Var _,_:_;}'''
        expect = '''Program([ClassDecl(Id(S),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(dN),[MethodDecl(Id(Constructor),Instance,[param(Id(x),ArrayType(43,ArrayType(29,ArrayType(1,IntType)))),param(Id(_),ArrayType(43,ArrayType(29,ArrayType(1,IntType)))),param(Id(K),ArrayType(5,StringType)),param(Id(_),ArrayType(5,StringType)),param(Id(_Y22),ArrayType(5,StringType)),param(Id(_),ClassType(Id(IV))),param(Id(KHY5__),ClassType(Id(IV))),param(Id(_),ClassType(Id(IV))),param(Id(_),ClassType(Id(IV))),param(Id(u),ClassType(Id(_))),param(Id(_Iw),ClassType(Id(C1_z0334)))],Block([Block([])])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 687))

    def test_688(self):
        line = '''Class _{m(G:Array [Array [Array [String ,0x39_1416],0x34],78];X,_9_:Array [Array [Array [Array [String ,99],0b1000010],0b1000010],01];u_,_7,F6m,_0y,w:Array [Boolean ,0b11_1_0];e:String ){}$_(__G_,_,_:Array [Array [Float ,0B1],99];_,_:q_){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(m),Instance,[param(Id(G),ArrayType(78,ArrayType(52,ArrayType(3740694,StringType)))),param(Id(X),ArrayType(1,ArrayType(66,ArrayType(66,ArrayType(99,StringType))))),param(Id(_9_),ArrayType(1,ArrayType(66,ArrayType(66,ArrayType(99,StringType))))),param(Id(u_),ArrayType(14,BoolType)),param(Id(_7),ArrayType(14,BoolType)),param(Id(F6m),ArrayType(14,BoolType)),param(Id(_0y),ArrayType(14,BoolType)),param(Id(w),ArrayType(14,BoolType)),param(Id(e),StringType)],Block([])),MethodDecl(Id($_),Static,[param(Id(__G_),ArrayType(99,ArrayType(1,FloatType))),param(Id(_),ArrayType(99,ArrayType(1,FloatType))),param(Id(_),ArrayType(99,ArrayType(1,FloatType))),param(Id(_),ClassType(Id(q_))),param(Id(_),ClassType(Id(q_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 688))

    def test_689(self):
        line = '''Class _:_G__Z_Ud{}Class _{Val _1:_;Destructor (){}Constructor (_,l,qr,N8,Q:Array [Int ,0B1]){} }Class T_:__{Constructor (J3:Array [Array [Boolean ,1],077]){Continue ;}Var $3_:Float ;Constructor (_1:s;mo___78_:Array [Int ,077]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_G__Z_Ud),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_1),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(1,IntType)),param(Id(l),ArrayType(1,IntType)),param(Id(qr),ArrayType(1,IntType)),param(Id(N8),ArrayType(1,IntType)),param(Id(Q),ArrayType(1,IntType))],Block([]))]),ClassDecl(Id(T_),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(J3),ArrayType(63,ArrayType(1,BoolType)))],Block([Continue])),AttributeDecl(Static,VarDecl(Id($3_),FloatType)),MethodDecl(Id(Constructor),Instance,[param(Id(_1),ClassType(Id(s))),param(Id(mo___78_),ArrayType(63,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 689))

    def test_690(self):
        line = '''Class _1Q_J{U3(_L,A,_r4:Array [Array [Array [Array [Array [Array [Array [Float ,0x17],62],045],045],0B1001110],045],0B1];f:String ){} }Class M{}Class _{Var _:t___;}Class IEp_{}Class __{}Class O{}Class _N:__9{}'''
        expect = '''Program([ClassDecl(Id(_1Q_J),[MethodDecl(Id(U3),Instance,[param(Id(_L),ArrayType(1,ArrayType(37,ArrayType(78,ArrayType(37,ArrayType(37,ArrayType(62,ArrayType(23,FloatType)))))))),param(Id(A),ArrayType(1,ArrayType(37,ArrayType(78,ArrayType(37,ArrayType(37,ArrayType(62,ArrayType(23,FloatType)))))))),param(Id(_r4),ArrayType(1,ArrayType(37,ArrayType(78,ArrayType(37,ArrayType(37,ArrayType(62,ArrayType(23,FloatType)))))))),param(Id(f),StringType)],Block([]))]),ClassDecl(Id(M),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(t___)),NullLiteral()))]),ClassDecl(Id(IEp_),[]),ClassDecl(Id(__),[]),ClassDecl(Id(O),[]),ClassDecl(Id(_N),Id(__9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 690))

    def test_691(self):
        line = '''Class _9{Y(p,s,j:Array [Array [Array [Array [Boolean ,035],0XE],0b1],62]){}$_2(_:Boolean ;_,v:Array [Array [Array [Array [Int ,0144],62],0X52],0x1]){Continue ;} }Class v{}'''
        expect = '''Program([ClassDecl(Id(_9),[MethodDecl(Id(Y),Instance,[param(Id(p),ArrayType(62,ArrayType(1,ArrayType(14,ArrayType(29,BoolType))))),param(Id(s),ArrayType(62,ArrayType(1,ArrayType(14,ArrayType(29,BoolType))))),param(Id(j),ArrayType(62,ArrayType(1,ArrayType(14,ArrayType(29,BoolType)))))],Block([])),MethodDecl(Id($_2),Static,[param(Id(_),BoolType),param(Id(_),ArrayType(1,ArrayType(82,ArrayType(62,ArrayType(100,IntType))))),param(Id(v),ArrayType(1,ArrayType(82,ArrayType(62,ArrayType(100,IntType)))))],Block([Continue]))]),ClassDecl(Id(v),[])])'''
        self.assertTrue(TestAST.test(line, expect, 691))

    def test_692(self):
        line = '''Class T:_v__4_{Var Df_,$_3QI:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0b101_1_1],0134],0xF],0B1_0],04],9],0134],0134],8_3],0B1000101],32],0B10];Var $_,j,$b:u1;}'''
        expect = '''Program([ClassDecl(Id(T),Id(_v__4_),[AttributeDecl(Instance,VarDecl(Id(Df_),ArrayType(2,ArrayType(32,ArrayType(69,ArrayType(83,ArrayType(92,ArrayType(92,ArrayType(9,ArrayType(4,ArrayType(2,ArrayType(15,ArrayType(92,ArrayType(23,IntType)))))))))))))),AttributeDecl(Static,VarDecl(Id($_3QI),ArrayType(2,ArrayType(32,ArrayType(69,ArrayType(83,ArrayType(92,ArrayType(92,ArrayType(9,ArrayType(4,ArrayType(2,ArrayType(15,ArrayType(92,ArrayType(23,IntType)))))))))))))),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(u1)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(j),ClassType(Id(u1)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($b),ClassType(Id(u1)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 692))

    def test_693(self):
        line = '''Class _{}Class x0:_2W6{k7l(_:String ;m:Array [Array [Array [String ,0X2],0x4D],87];i4i,_,l,_:_){Return ;} }Class y_1{}Class _:_2{Var $_G:H;}Class I{}Class _{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(x0),Id(_2W6),[MethodDecl(Id(k7l),Instance,[param(Id(_),StringType),param(Id(m),ArrayType(87,ArrayType(77,ArrayType(2,StringType)))),param(Id(i4i),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(l),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([Return()]))]),ClassDecl(Id(y_1),[]),ClassDecl(Id(_),Id(_2),[AttributeDecl(Static,VarDecl(Id($_G),ClassType(Id(H)),NullLiteral()))]),ClassDecl(Id(I),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 693))

    def test_694(self):
        line = '''Class Et0{$N(_,_,i,_:Array [Float ,0136];I2,x:Float ;_Gq:_;c__,_dV,_1u4,_:Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1_111],0136],0136],055_60],0XA],0X47E],86],0b1000101];z:Array [Array [Float ,0X3E],0b1000101];_:Array [Array [Array [Array [Boolean ,86],073_0_0],04],0b1]){ {} }}'''
        expect = '''Program([ClassDecl(Id(Et0),[MethodDecl(Id($N),Static,[param(Id(_),ArrayType(94,FloatType)),param(Id(_),ArrayType(94,FloatType)),param(Id(i),ArrayType(94,FloatType)),param(Id(_),ArrayType(94,FloatType)),param(Id(I2),FloatType),param(Id(x),FloatType),param(Id(_Gq),ClassType(Id(_))),param(Id(c__),ArrayType(69,ArrayType(86,ArrayType(1150,ArrayType(10,ArrayType(2928,ArrayType(94,ArrayType(94,ArrayType(15,StringType))))))))),param(Id(_dV),ArrayType(69,ArrayType(86,ArrayType(1150,ArrayType(10,ArrayType(2928,ArrayType(94,ArrayType(94,ArrayType(15,StringType))))))))),param(Id(_1u4),ArrayType(69,ArrayType(86,ArrayType(1150,ArrayType(10,ArrayType(2928,ArrayType(94,ArrayType(94,ArrayType(15,StringType))))))))),param(Id(_),ArrayType(69,ArrayType(86,ArrayType(1150,ArrayType(10,ArrayType(2928,ArrayType(94,ArrayType(94,ArrayType(15,StringType))))))))),param(Id(z),ArrayType(69,ArrayType(62,FloatType))),param(Id(_),ArrayType(1,ArrayType(4,ArrayType(3776,ArrayType(86,BoolType)))))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 694))

    def test_695(self):
        line = '''Class _{}Class L{Var __6:Array [Array [Array [Boolean ,0XF4],0X7],05_3704];}Class N:DF1_{Constructor (){}Var $r,$_:Array [Array [Int ,2_7_6],03];$8(){}Val $_5,$y:Int ;}Class Q{Var WM49_1,EY_34_j:_w_;Val $z0,_:Boolean ;Var _7,_:_b;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(L),[AttributeDecl(Instance,VarDecl(Id(__6),ArrayType(22468,ArrayType(7,ArrayType(244,BoolType)))))]),ClassDecl(Id(N),Id(DF1_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($r),ArrayType(3,ArrayType(276,IntType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,ArrayType(276,IntType)))),MethodDecl(Id($8),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_5),IntType,None)),AttributeDecl(Static,ConstDecl(Id($y),IntType,None))]),ClassDecl(Id(Q),[AttributeDecl(Instance,VarDecl(Id(WM49_1),ClassType(Id(_w_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(EY_34_j),ClassType(Id(_w_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($z0),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,VarDecl(Id(_7),ClassType(Id(_b)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_b)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 695))

    def test_696(self):
        line = '''Class s_4_2{Constructor (H,P,_,G2:Array [Array [Array [Array [Array [Array [Array [String ,0B110010],0B110010],0706],0b1_1],0B1],0xA],6];o_n:Float ;q,cNQ,xC,_,__,_pX__a779,__,_:String ){} }Class Z:_{}'''
        expect = '''Program([ClassDecl(Id(s_4_2),[MethodDecl(Id(Constructor),Instance,[param(Id(H),ArrayType(6,ArrayType(10,ArrayType(1,ArrayType(3,ArrayType(454,ArrayType(50,ArrayType(50,StringType)))))))),param(Id(P),ArrayType(6,ArrayType(10,ArrayType(1,ArrayType(3,ArrayType(454,ArrayType(50,ArrayType(50,StringType)))))))),param(Id(_),ArrayType(6,ArrayType(10,ArrayType(1,ArrayType(3,ArrayType(454,ArrayType(50,ArrayType(50,StringType)))))))),param(Id(G2),ArrayType(6,ArrayType(10,ArrayType(1,ArrayType(3,ArrayType(454,ArrayType(50,ArrayType(50,StringType)))))))),param(Id(o_n),FloatType),param(Id(q),StringType),param(Id(cNQ),StringType),param(Id(xC),StringType),param(Id(_),StringType),param(Id(__),StringType),param(Id(_pX__a779),StringType),param(Id(__),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(Z),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 696))

    def test_697(self):
        line = '''Class I36{}Class v:l{}Class _0_0_:____l{Constructor (jA_Q,_,_,_39,p:Array [Array [Array [Int ,9],0x403],054];_,C_yf_2_0E,O,R9,_0,_sT16:_0_n1;_:Array [Array [Boolean ,054],9]){} }'''
        expect = '''Program([ClassDecl(Id(I36),[]),ClassDecl(Id(v),Id(l),[]),ClassDecl(Id(_0_0_),Id(____l),[MethodDecl(Id(Constructor),Instance,[param(Id(jA_Q),ArrayType(44,ArrayType(1027,ArrayType(9,IntType)))),param(Id(_),ArrayType(44,ArrayType(1027,ArrayType(9,IntType)))),param(Id(_),ArrayType(44,ArrayType(1027,ArrayType(9,IntType)))),param(Id(_39),ArrayType(44,ArrayType(1027,ArrayType(9,IntType)))),param(Id(p),ArrayType(44,ArrayType(1027,ArrayType(9,IntType)))),param(Id(_),ClassType(Id(_0_n1))),param(Id(C_yf_2_0E),ClassType(Id(_0_n1))),param(Id(O),ClassType(Id(_0_n1))),param(Id(R9),ClassType(Id(_0_n1))),param(Id(_0),ClassType(Id(_0_n1))),param(Id(_sT16),ClassType(Id(_0_n1))),param(Id(_),ArrayType(9,ArrayType(44,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 697))

    def test_698(self):
        line = '''Class __X_O7f{Constructor (_:Array [Array [Array [Float ,1],06],0x14];g:Array [Array [Array [Array [String ,0B11],0140],0XB],0b10011]){Return ;}Constructor (){O::$2._.HT();} }Class q{}'''
        expect = '''Program([ClassDecl(Id(__X_O7f),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(20,ArrayType(6,ArrayType(1,FloatType)))),param(Id(g),ArrayType(19,ArrayType(11,ArrayType(96,ArrayType(3,StringType)))))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[],Block([Call(FieldAccess(FieldAccess(Id(O),Id($2)),Id(_)),Id(HT),[])]))]),ClassDecl(Id(q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 698))

    def test_699(self):
        line = '''Class _b:s_G{Constructor (A0:Array [Array [Float ,05],4_5];___,y:Array [Array [Array [Array [Array [Array [Boolean ,0X7],05],96],0B100_11_10_1],05],41_8_0]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_b),Id(s_G),[MethodDecl(Id(Constructor),Instance,[param(Id(A0),ArrayType(45,ArrayType(5,FloatType))),param(Id(___),ArrayType(4180,ArrayType(5,ArrayType(157,ArrayType(96,ArrayType(5,ArrayType(7,BoolType))))))),param(Id(y),ArrayType(4180,ArrayType(5,ArrayType(157,ArrayType(96,ArrayType(5,ArrayType(7,BoolType)))))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 699))

    def test_700(self):
        line = '''Class c:v8__{Constructor (N3w_c_7:Array [Array [Array [Array [Array [Float ,0X1],19],0xA_5],19],0x2D];B:Array [Array [Array [Array [Boolean ,8],0x2D],0116],0B1001101]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(c),Id(v8__),[MethodDecl(Id(Constructor),Instance,[param(Id(N3w_c_7),ArrayType(45,ArrayType(19,ArrayType(165,ArrayType(19,ArrayType(1,FloatType)))))),param(Id(B),ArrayType(77,ArrayType(78,ArrayType(45,ArrayType(8,BoolType)))))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 700))

    def test_701(self):
        line = '''Class z{Destructor (){}Destructor (){}Var $_U,$4:___;Destructor (){Val _FV,L,zj_3_:Array [Float ,055];Var P:Array [Array [Array [Array [Array [Array [Array [String ,0B101011],0x1D],0b101],055],0b101],0x13],79];} }Class E{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(z),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_U),ClassType(Id(___)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(___)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_FV),ArrayType(45,FloatType),None),ConstDecl(Id(L),ArrayType(45,FloatType),None),ConstDecl(Id(zj_3_),ArrayType(45,FloatType),None),VarDecl(Id(P),ArrayType(79,ArrayType(19,ArrayType(5,ArrayType(45,ArrayType(5,ArrayType(29,ArrayType(43,StringType))))))))]))]),ClassDecl(Id(E),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 701))

    def test_702(self):
        line = '''Class O_{Constructor (x:Int ;R,_g,_:Array [Float ,0X22];___3h,x:_9;_A5_:z1;_:Array [Array [Float ,054],2];_5,_,g,nY_:Array [Array [Float ,23_9],0X22];h,__,_9_f:Array [String ,2];W,Y:String ;YGbU:e4){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(O_),[MethodDecl(Id(Constructor),Instance,[param(Id(x),IntType),param(Id(R),ArrayType(34,FloatType)),param(Id(_g),ArrayType(34,FloatType)),param(Id(_),ArrayType(34,FloatType)),param(Id(___3h),ClassType(Id(_9))),param(Id(x),ClassType(Id(_9))),param(Id(_A5_),ClassType(Id(z1))),param(Id(_),ArrayType(2,ArrayType(44,FloatType))),param(Id(_5),ArrayType(34,ArrayType(239,FloatType))),param(Id(_),ArrayType(34,ArrayType(239,FloatType))),param(Id(g),ArrayType(34,ArrayType(239,FloatType))),param(Id(nY_),ArrayType(34,ArrayType(239,FloatType))),param(Id(h),ArrayType(2,StringType)),param(Id(__),ArrayType(2,StringType)),param(Id(_9_f),ArrayType(2,StringType)),param(Id(W),StringType),param(Id(Y),StringType),param(Id(YGbU),ClassType(Id(e4)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 702))

    def test_703(self):
        line = '''Class fA0e_5_4:D{}Class a:S{_(U_r___:String ){}Val $B_4,$6__9,_:Array [Int ,0B100001];}Class O59{Destructor (){}Val $kn,_,$jg5_,$_q__:Array [Array [Int ,6],0b11_0_1];$5_N_U(t,_,_,_,_,_8:Array [Int ,043];HX,_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(fA0e_5_4),Id(D),[]),ClassDecl(Id(a),Id(S),[MethodDecl(Id(_),Instance,[param(Id(U_r___),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($B_4),ArrayType(33,IntType),None)),AttributeDecl(Static,ConstDecl(Id($6__9),ArrayType(33,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(33,IntType),None))]),ClassDecl(Id(O59),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($kn),ArrayType(13,ArrayType(6,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(13,ArrayType(6,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($jg5_),ArrayType(13,ArrayType(6,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($_q__),ArrayType(13,ArrayType(6,IntType)),None)),MethodDecl(Id($5_N_U),Static,[param(Id(t),ArrayType(35,IntType)),param(Id(_),ArrayType(35,IntType)),param(Id(_),ArrayType(35,IntType)),param(Id(_),ArrayType(35,IntType)),param(Id(_),ArrayType(35,IntType)),param(Id(_8),ArrayType(35,IntType)),param(Id(HX),IntType),param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 703))

    def test_704(self):
        line = '''Class q:__8{$_2(){Continue ;}Destructor (){}Destructor (){}Var $O8__:String ;Destructor (){} }Class _{Constructor (){}Val $0:String ;Var $7ZSE,_:String ;Constructor (_:__S){} }'''
        expect = '''Program([ClassDecl(Id(q),Id(__8),[MethodDecl(Id($_2),Static,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($O8__),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($0),StringType,None)),AttributeDecl(Static,VarDecl(Id($7ZSE),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__S)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 704))

    def test_705(self):
        line = '''Class _:_{Constructor (A,_5,_,_:Boolean ){}____d0C(__:Array [Array [Array [Array [String ,0b11],0b11],045],0x4];B:Array [Array [Boolean ,0X3D_C4],045];h:Array [Array [Array [String ,045],0b1],6]){Break ;} }Class _99{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(A),BoolType),param(Id(_5),BoolType),param(Id(_),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(____d0C),Instance,[param(Id(__),ArrayType(4,ArrayType(37,ArrayType(3,ArrayType(3,StringType))))),param(Id(B),ArrayType(37,ArrayType(15812,BoolType))),param(Id(h),ArrayType(6,ArrayType(1,ArrayType(37,StringType))))],Block([Break]))]),ClassDecl(Id(_99),[])])'''
        self.assertTrue(TestAST.test(line, expect, 705))

    def test_706(self):
        line = '''Class p7n{Constructor (_p,__,_Y8:Array [Array [String ,9],0xE_F_9_5];_I,_5:Array [Array [Array [Array [Array [Float ,5],5],5],453861],03];B2,x6__9:String ;J,_,L,q94_:Array [Array [Int ,03],0XF];RRg,_,o:Boolean ;_3,a7,g:Array [Boolean ,7];W_,t_:r00){} }Class Y:__X6E8{}'''
        expect = '''Program([ClassDecl(Id(p7n),[MethodDecl(Id(Constructor),Instance,[param(Id(_p),ArrayType(61333,ArrayType(9,StringType))),param(Id(__),ArrayType(61333,ArrayType(9,StringType))),param(Id(_Y8),ArrayType(61333,ArrayType(9,StringType))),param(Id(_I),ArrayType(3,ArrayType(453861,ArrayType(5,ArrayType(5,ArrayType(5,FloatType)))))),param(Id(_5),ArrayType(3,ArrayType(453861,ArrayType(5,ArrayType(5,ArrayType(5,FloatType)))))),param(Id(B2),StringType),param(Id(x6__9),StringType),param(Id(J),ArrayType(15,ArrayType(3,IntType))),param(Id(_),ArrayType(15,ArrayType(3,IntType))),param(Id(L),ArrayType(15,ArrayType(3,IntType))),param(Id(q94_),ArrayType(15,ArrayType(3,IntType))),param(Id(RRg),BoolType),param(Id(_),BoolType),param(Id(o),BoolType),param(Id(_3),ArrayType(7,BoolType)),param(Id(a7),ArrayType(7,BoolType)),param(Id(g),ArrayType(7,BoolType)),param(Id(W_),ClassType(Id(r00))),param(Id(t_),ClassType(Id(r00)))],Block([]))]),ClassDecl(Id(Y),Id(__X6E8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 706))

    def test_707(self):
        line = '''Class _:o20Ih{Constructor (){Break ;}$_(Ey_,D,x_:p;__,nU_8:Array [Int ,0116];Z,_,q,_,Q_0L5,qh_,__Bz_,_:Array [Array [Array [Boolean ,0B1010],0B1],0116];q1:A7){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(o20Ih),[MethodDecl(Id(Constructor),Instance,[],Block([Break])),MethodDecl(Id($_),Static,[param(Id(Ey_),ClassType(Id(p))),param(Id(D),ClassType(Id(p))),param(Id(x_),ClassType(Id(p))),param(Id(__),ArrayType(78,IntType)),param(Id(nU_8),ArrayType(78,IntType)),param(Id(Z),ArrayType(78,ArrayType(1,ArrayType(10,BoolType)))),param(Id(_),ArrayType(78,ArrayType(1,ArrayType(10,BoolType)))),param(Id(q),ArrayType(78,ArrayType(1,ArrayType(10,BoolType)))),param(Id(_),ArrayType(78,ArrayType(1,ArrayType(10,BoolType)))),param(Id(Q_0L5),ArrayType(78,ArrayType(1,ArrayType(10,BoolType)))),param(Id(qh_),ArrayType(78,ArrayType(1,ArrayType(10,BoolType)))),param(Id(__Bz_),ArrayType(78,ArrayType(1,ArrayType(10,BoolType)))),param(Id(_),ArrayType(78,ArrayType(1,ArrayType(10,BoolType)))),param(Id(q1),ClassType(Id(A7)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 707))

    def test_708(self):
        line = '''Class _:D{Destructor (){} }Class _{}Class O61_7vIN{}Class _{Destructor (){}Constructor (B8h_,n:Array [Array [Array [Boolean ,03],6_2],0b1_0_1_1]){Val _,_w:o26P_;{} }Var $53:_;}'''
        expect = '''Program([ClassDecl(Id(_),Id(D),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(O61_7vIN),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(B8h_),ArrayType(11,ArrayType(62,ArrayType(3,BoolType)))),param(Id(n),ArrayType(11,ArrayType(62,ArrayType(3,BoolType))))],Block([ConstDecl(Id(_),ClassType(Id(o26P_)),NullLiteral()),ConstDecl(Id(_w),ClassType(Id(o26P_)),NullLiteral()),Block([])])),AttributeDecl(Static,VarDecl(Id($53),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 708))

    def test_709(self):
        line = '''Class _{}Class CZ{Val $33__3___,$1_,$_lZ_:Boolean ;_7(_0I:y){}Var $1,$0:Array [Boolean ,02];Constructor (_3,z6__1,G:Array [Array [Int ,047_7],2];m5,W5u:Int ;p:_){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(CZ),[AttributeDecl(Static,ConstDecl(Id($33__3___),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($1_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_lZ_),BoolType,None)),MethodDecl(Id(_7),Instance,[param(Id(_0I),ClassType(Id(y)))],Block([])),AttributeDecl(Static,VarDecl(Id($1),ArrayType(2,BoolType))),AttributeDecl(Static,VarDecl(Id($0),ArrayType(2,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(_3),ArrayType(2,ArrayType(319,IntType))),param(Id(z6__1),ArrayType(2,ArrayType(319,IntType))),param(Id(G),ArrayType(2,ArrayType(319,IntType))),param(Id(m5),IntType),param(Id(W5u),IntType),param(Id(p),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 709))

    def test_710(self):
        line = '''Class i_{Constructor (Y:Array [Array [Array [Array [Array [String ,026_5],0B1100],0b101001],36],0B1100];_Y:n1){} }Class _:_n{}Class W{}Class _{}Class H_Q:k{Var r4:Int ;$i(){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(i_),[MethodDecl(Id(Constructor),Instance,[param(Id(Y),ArrayType(12,ArrayType(36,ArrayType(41,ArrayType(12,ArrayType(181,StringType)))))),param(Id(_Y),ClassType(Id(n1)))],Block([]))]),ClassDecl(Id(_),Id(_n),[]),ClassDecl(Id(W),[]),ClassDecl(Id(_),[]),ClassDecl(Id(H_Q),Id(k),[AttributeDecl(Instance,VarDecl(Id(r4),IntType)),MethodDecl(Id($i),Static,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 710))

    def test_711(self):
        line = '''Class _2X:CI{Constructor (_,_,_,__,Y:Boolean ;O_:Int ;Q_2:Array [Array [Float ,0b101101],0B10_0_1_1_0_00_1_1_1]){Val _Ls:Float ;}Val _e_,_,_g,__:_sR;Constructor (_v_j,m,F:Array [Float ,013];_,_Zd3:String ;C,O__0:Float ;__L,_,v786,s_,_D,F__:_){Return ;} }Class _{}'''
        expect = '''Program([ClassDecl(Id(_2X),Id(CI),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(__),BoolType),param(Id(Y),BoolType),param(Id(O_),IntType),param(Id(Q_2),ArrayType(1223,ArrayType(45,FloatType)))],Block([ConstDecl(Id(_Ls),FloatType,None)])),AttributeDecl(Instance,ConstDecl(Id(_e_),ClassType(Id(_sR)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_sR)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_g),ClassType(Id(_sR)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_sR)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_v_j),ArrayType(11,FloatType)),param(Id(m),ArrayType(11,FloatType)),param(Id(F),ArrayType(11,FloatType)),param(Id(_),StringType),param(Id(_Zd3),StringType),param(Id(C),FloatType),param(Id(O__0),FloatType),param(Id(__L),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(v786),ClassType(Id(_))),param(Id(s_),ClassType(Id(_))),param(Id(_D),ClassType(Id(_))),param(Id(F__),ClassType(Id(_)))],Block([Return()]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 711))

    def test_712(self):
        line = '''Class L{Constructor (_E:Array [Int ,030];T,v51,d7_:_;xn:D_;vey_:Array [Array [Array [Int ,0XA_F],0117],0b10];_hA,i,T,_0kw:I2h;_:Float ;_:Boolean ;J:va_;_:String ;I:Array [String ,02];c___8,K5o,b,_,_,X8_95_00m_:Float ){} }Class A{}Class d{_(S2:a){} }'''
        expect = '''Program([ClassDecl(Id(L),[MethodDecl(Id(Constructor),Instance,[param(Id(_E),ArrayType(24,IntType)),param(Id(T),ClassType(Id(_))),param(Id(v51),ClassType(Id(_))),param(Id(d7_),ClassType(Id(_))),param(Id(xn),ClassType(Id(D_))),param(Id(vey_),ArrayType(2,ArrayType(79,ArrayType(175,IntType)))),param(Id(_hA),ClassType(Id(I2h))),param(Id(i),ClassType(Id(I2h))),param(Id(T),ClassType(Id(I2h))),param(Id(_0kw),ClassType(Id(I2h))),param(Id(_),FloatType),param(Id(_),BoolType),param(Id(J),ClassType(Id(va_))),param(Id(_),StringType),param(Id(I),ArrayType(2,StringType)),param(Id(c___8),FloatType),param(Id(K5o),FloatType),param(Id(b),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(X8_95_00m_),FloatType)],Block([]))]),ClassDecl(Id(A),[]),ClassDecl(Id(d),[MethodDecl(Id(_),Instance,[param(Id(S2),ClassType(Id(a)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 712))

    def test_713(self):
        line = '''Class _:mv{Val $8,s8O_,ll__,$_,_,$91,$_MA,_s:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0X26B],0b110001],0x20],0B1_0],0xC],0B10],0B1_01_0_10],0B111011],032];Var $c:Float ;}Class w:H5{Var $S,_3C5__B,$CQ,p,$8:Array [Int ,25];$_1_0_H(v7:Boolean ;H01__:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(mv),[AttributeDecl(Static,ConstDecl(Id($8),ArrayType(26,ArrayType(59,ArrayType(42,ArrayType(2,ArrayType(12,ArrayType(2,ArrayType(32,ArrayType(49,ArrayType(619,StringType))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(s8O_),ArrayType(26,ArrayType(59,ArrayType(42,ArrayType(2,ArrayType(12,ArrayType(2,ArrayType(32,ArrayType(49,ArrayType(619,StringType))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(ll__),ArrayType(26,ArrayType(59,ArrayType(42,ArrayType(2,ArrayType(12,ArrayType(2,ArrayType(32,ArrayType(49,ArrayType(619,StringType))))))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(26,ArrayType(59,ArrayType(42,ArrayType(2,ArrayType(12,ArrayType(2,ArrayType(32,ArrayType(49,ArrayType(619,StringType))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(26,ArrayType(59,ArrayType(42,ArrayType(2,ArrayType(12,ArrayType(2,ArrayType(32,ArrayType(49,ArrayType(619,StringType))))))))),None)),AttributeDecl(Static,ConstDecl(Id($91),ArrayType(26,ArrayType(59,ArrayType(42,ArrayType(2,ArrayType(12,ArrayType(2,ArrayType(32,ArrayType(49,ArrayType(619,StringType))))))))),None)),AttributeDecl(Static,ConstDecl(Id($_MA),ArrayType(26,ArrayType(59,ArrayType(42,ArrayType(2,ArrayType(12,ArrayType(2,ArrayType(32,ArrayType(49,ArrayType(619,StringType))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_s),ArrayType(26,ArrayType(59,ArrayType(42,ArrayType(2,ArrayType(12,ArrayType(2,ArrayType(32,ArrayType(49,ArrayType(619,StringType))))))))),None)),AttributeDecl(Static,VarDecl(Id($c),FloatType))]),ClassDecl(Id(w),Id(H5),[AttributeDecl(Static,VarDecl(Id($S),ArrayType(25,IntType))),AttributeDecl(Instance,VarDecl(Id(_3C5__B),ArrayType(25,IntType))),AttributeDecl(Static,VarDecl(Id($CQ),ArrayType(25,IntType))),AttributeDecl(Instance,VarDecl(Id(p),ArrayType(25,IntType))),AttributeDecl(Static,VarDecl(Id($8),ArrayType(25,IntType))),MethodDecl(Id($_1_0_H),Static,[param(Id(v7),BoolType),param(Id(H01__),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 713))

    def test_714(self):
        line = '''Class Id:f{}Class T{}Class l86wR{}Class k:_{_0(W,_H:_u;Tm_bi:Array [Boolean ,71];Q:P;x_4_,_D,_,x_:_;y8:Array [Array [Array [Array [Float ,01],0B1],0X39],0x37]){} }Class d_L:_5_{Val $p_:_3;Constructor (_,q,R,___r_:Int ;E,P3,_,__:Array [String ,0b1];____J_:Array [Array [Array [Array [Int ,076],0x8],0B1],0b1];_57:Array [Array [Array [Int ,9_9],0B111001],0x3];_:Array [Float ,0x4_94E_8_D3A];h,_,v,wc___:Array [Float ,060];b,_5,__,__sf_,_,_:Array [Int ,060];_,Y,__5y,__142_:Array [Array [Array [Array [Array [Float ,0X39],0B111001],060],0B1],0X39];Gl:_;i,W:Array [Array [Float ,060],0X39];_,q,_M:Float ;d8:Array [Array [Boolean ,0B111001],0b1];_,____,_,r:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(Id),Id(f),[]),ClassDecl(Id(T),[]),ClassDecl(Id(l86wR),[]),ClassDecl(Id(k),Id(_),[MethodDecl(Id(_0),Instance,[param(Id(W),ClassType(Id(_u))),param(Id(_H),ClassType(Id(_u))),param(Id(Tm_bi),ArrayType(71,BoolType)),param(Id(Q),ClassType(Id(P))),param(Id(x_4_),ClassType(Id(_))),param(Id(_D),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(x_),ClassType(Id(_))),param(Id(y8),ArrayType(55,ArrayType(57,ArrayType(1,ArrayType(1,FloatType)))))],Block([]))]),ClassDecl(Id(d_L),Id(_5_),[AttributeDecl(Static,ConstDecl(Id($p_),ClassType(Id(_3)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(q),IntType),param(Id(R),IntType),param(Id(___r_),IntType),param(Id(E),ArrayType(1,StringType)),param(Id(P3),ArrayType(1,StringType)),param(Id(_),ArrayType(1,StringType)),param(Id(__),ArrayType(1,StringType)),param(Id(____J_),ArrayType(1,ArrayType(1,ArrayType(8,ArrayType(62,IntType))))),param(Id(_57),ArrayType(3,ArrayType(57,ArrayType(99,IntType)))),param(Id(_),ArrayType(1229884730,FloatType)),param(Id(h),ArrayType(48,FloatType)),param(Id(_),ArrayType(48,FloatType)),param(Id(v),ArrayType(48,FloatType)),param(Id(wc___),ArrayType(48,FloatType)),param(Id(b),ArrayType(48,IntType)),param(Id(_5),ArrayType(48,IntType)),param(Id(__),ArrayType(48,IntType)),param(Id(__sf_),ArrayType(48,IntType)),param(Id(_),ArrayType(48,IntType)),param(Id(_),ArrayType(48,IntType)),param(Id(_),ArrayType(57,ArrayType(1,ArrayType(48,ArrayType(57,ArrayType(57,FloatType)))))),param(Id(Y),ArrayType(57,ArrayType(1,ArrayType(48,ArrayType(57,ArrayType(57,FloatType)))))),param(Id(__5y),ArrayType(57,ArrayType(1,ArrayType(48,ArrayType(57,ArrayType(57,FloatType)))))),param(Id(__142_),ArrayType(57,ArrayType(1,ArrayType(48,ArrayType(57,ArrayType(57,FloatType)))))),param(Id(Gl),ClassType(Id(_))),param(Id(i),ArrayType(57,ArrayType(48,FloatType))),param(Id(W),ArrayType(57,ArrayType(48,FloatType))),param(Id(_),FloatType),param(Id(q),FloatType),param(Id(_M),FloatType),param(Id(d8),ArrayType(1,ArrayType(57,BoolType))),param(Id(_),BoolType),param(Id(____),BoolType),param(Id(_),BoolType),param(Id(r),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 714))

    def test_715(self):
        line = '''Class kD:__{p(_,G,p:i__){Var __,E:Array [Float ,01];b::$i_.s();} }Class q_:R{Var _,Y7D_70:String ;}Class B:B_{}Class c:_0{Var _s:Array [Boolean ,0x9_3_7_6]=!Q::$I_.__._3._;Val $p:String ;Constructor (_,C_,_c,P,A:String ){Continue ;} }Class _q_v:_{}'''
        expect = '''Program([ClassDecl(Id(kD),Id(__),[MethodDecl(Id(p),Instance,[param(Id(_),ClassType(Id(i__))),param(Id(G),ClassType(Id(i__))),param(Id(p),ClassType(Id(i__)))],Block([VarDecl(Id(__),ArrayType(1,FloatType)),VarDecl(Id(E),ArrayType(1,FloatType)),Call(FieldAccess(Id(b),Id($i_)),Id(s),[])]))]),ClassDecl(Id(q_),Id(R),[AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(Y7D_70),StringType))]),ClassDecl(Id(B),Id(B_),[]),ClassDecl(Id(c),Id(_0),[AttributeDecl(Instance,VarDecl(Id(XO__),ArrayType(37750,BoolType),UnaryOp(!,FieldAccess(FieldAccess(FieldAccess(FieldAccess(Id(Q),Id($I_)),Id(__)),Id(_3)),Id(_))))),AttributeDecl(Static,ConstDecl(Id($p),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(C_),StringType),param(Id(_c),StringType),param(Id(P),StringType),param(Id(A),StringType)],Block([Continue]))]),ClassDecl(Id(_q_v),Id(_),[])])'''
        #self.assertTrue(TestAST.test(line, expect, 715))

    def test_716(self):
        line = '''Class _2l{Val S8:Int ;Destructor (){Break ;}Val _,e6__U,$_I:l;Val $6,_:Array [Array [String ,062],0500_1_756];Val _1:Array [Float ,0B1110];}Class Ue6:__F{}Class u_{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_2l),[AttributeDecl(Instance,ConstDecl(Id(S8),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(l)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(e6__U),ClassType(Id(l)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_I),ClassType(Id(l)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($6),ArrayType(1311726,ArrayType(50,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1311726,ArrayType(50,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_1),ArrayType(14,FloatType),None))]),ClassDecl(Id(Ue6),Id(__F),[]),ClassDecl(Id(u_),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 716))

    def test_717(self):
        line = '''Class _{Constructor (){} }Class C{Val $_:Array [Int ,0105];b_(_3:Array [Float ,7];__,m_,_4,_0,m:Array [Array [Int ,0XF],1];__:Z3h;_,_E:Array [Array [Array [Array [Int ,0B10_1],062],5],0105]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(C),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(69,IntType),None)),MethodDecl(Id(b_),Instance,[param(Id(_3),ArrayType(7,FloatType)),param(Id(__),ArrayType(1,ArrayType(15,IntType))),param(Id(m_),ArrayType(1,ArrayType(15,IntType))),param(Id(_4),ArrayType(1,ArrayType(15,IntType))),param(Id(_0),ArrayType(1,ArrayType(15,IntType))),param(Id(m),ArrayType(1,ArrayType(15,IntType))),param(Id(__),ClassType(Id(Z3h))),param(Id(_),ArrayType(69,ArrayType(5,ArrayType(50,ArrayType(5,IntType))))),param(Id(_E),ArrayType(69,ArrayType(5,ArrayType(50,ArrayType(5,IntType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 717))

    def test_718(self):
        line = '''Class _3_{}Class _{Destructor (){}Destructor (){Val _8_5,b:Q_;Continue ;}$_S(__C___:String ){}B(){Continue ;} }Class a{$K_3(){_::$__.___._();Return ;Val _kDVFU:Array [Array [Int ,62],0X3];} }Class E{}'''
        expect = '''Program([ClassDecl(Id(_3_),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_8_5),ClassType(Id(Q_)),NullLiteral()),ConstDecl(Id(b),ClassType(Id(Q_)),NullLiteral()),Continue])),MethodDecl(Id($_S),Static,[param(Id(__C___),StringType)],Block([])),MethodDecl(Id(B),Instance,[],Block([Continue]))]),ClassDecl(Id(a),[MethodDecl(Id($K_3),Static,[],Block([Call(FieldAccess(FieldAccess(Id(_),Id($__)),Id(___)),Id(_),[]),Return(),ConstDecl(Id(_kDVFU),ArrayType(3,ArrayType(62,IntType)),None)]))]),ClassDecl(Id(E),[])])'''
        self.assertTrue(TestAST.test(line, expect, 718))

    def test_719(self):
        line = '''Class O__:_{Constructor (T,_,_,Pr,Y__,_:Array [Float ,16]){}Var _,$A_:Array [Array [Array [Boolean ,0xA],0112],0112];__(e4,_j_v:Array [Array [Array [String ,06],0XE],0112];__6:Float ;_8,_,y,n6,P7F_11:_26d_R6;_,_,_34G:Int ;_:Float ){Return ;} }'''
        expect = '''Program([ClassDecl(Id(O__),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(T),ArrayType(16,FloatType)),param(Id(_),ArrayType(16,FloatType)),param(Id(_),ArrayType(16,FloatType)),param(Id(Pr),ArrayType(16,FloatType)),param(Id(Y__),ArrayType(16,FloatType)),param(Id(_),ArrayType(16,FloatType))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(74,ArrayType(74,ArrayType(10,BoolType))))),AttributeDecl(Static,VarDecl(Id($A_),ArrayType(74,ArrayType(74,ArrayType(10,BoolType))))),MethodDecl(Id(__),Instance,[param(Id(e4),ArrayType(74,ArrayType(14,ArrayType(6,StringType)))),param(Id(_j_v),ArrayType(74,ArrayType(14,ArrayType(6,StringType)))),param(Id(__6),FloatType),param(Id(_8),ClassType(Id(_26d_R6))),param(Id(_),ClassType(Id(_26d_R6))),param(Id(y),ClassType(Id(_26d_R6))),param(Id(n6),ClassType(Id(_26d_R6))),param(Id(P7F_11),ClassType(Id(_26d_R6))),param(Id(_),IntType),param(Id(_),IntType),param(Id(_34G),IntType),param(Id(_),FloatType)],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 719))

    def test_720(self):
        line = '''Class _4:_9{Constructor (E,QX,H:Int ;p_:_;_,__6,_:Float ;_f,y__D:Array [String ,0123];Y2,g46AS:Float ;_7,Tb:Array [Float ,0b1_0_0];_:String ;j,__f:String ;i:Array [String ,0123];_j,m,_,j,g:__;_:W){} }'''
        expect = '''Program([ClassDecl(Id(_4),Id(_9),[MethodDecl(Id(Constructor),Instance,[param(Id(E),IntType),param(Id(QX),IntType),param(Id(H),IntType),param(Id(p_),ClassType(Id(_))),param(Id(_),FloatType),param(Id(__6),FloatType),param(Id(_),FloatType),param(Id(_f),ArrayType(83,StringType)),param(Id(y__D),ArrayType(83,StringType)),param(Id(Y2),FloatType),param(Id(g46AS),FloatType),param(Id(_7),ArrayType(4,FloatType)),param(Id(Tb),ArrayType(4,FloatType)),param(Id(_),StringType),param(Id(j),StringType),param(Id(__f),StringType),param(Id(i),ArrayType(83,StringType)),param(Id(_j),ClassType(Id(__))),param(Id(m),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(j),ClassType(Id(__))),param(Id(g),ClassType(Id(__))),param(Id(_),ClassType(Id(W)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 720))

    def test_721(self):
        line = '''Class _:O4_{$_(){} }Class SX:p{}Class _1{}Class _26{Constructor (){}Constructor (a_J:Array [Int ,0X5]){}Destructor (){}Destructor (){}Val E,$8_27:Array [Array [Float ,0672_0],0xC_E];}'''
        expect = '''Program([ClassDecl(Id(_),Id(O4_),[MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(SX),Id(p),[]),ClassDecl(Id(_1),[]),ClassDecl(Id(_26),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(a_J),ArrayType(5,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(E),ArrayType(206,ArrayType(3536,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($8_27),ArrayType(206,ArrayType(3536,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 721))

    def test_722(self):
        line = '''Class s_{__r_(_:Float ){}Constructor (_,z,S,_W407:Int ;_:Array [Array [Array [Array [Array [Boolean ,43],073_71],0x4_3_D1],05],0b111110];___91_:e;_,n:g){Var e8:Array [Float ,0125];}Destructor (){}Val $_,_B0:_;}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(s_),[MethodDecl(Id(__r_),Instance,[param(Id(_),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(z),IntType),param(Id(S),IntType),param(Id(_W407),IntType),param(Id(_),ArrayType(62,ArrayType(5,ArrayType(17361,ArrayType(3833,ArrayType(43,BoolType)))))),param(Id(___91_),ClassType(Id(e))),param(Id(_),ClassType(Id(g))),param(Id(n),ClassType(Id(g)))],Block([VarDecl(Id(e8),ArrayType(85,FloatType))])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_B0),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 722))

    def test_723(self):
        line = '''Class _{Val $95,_,S:Array [Array [Array [Array [Boolean ,0B100111],06_1_10_7],0b100],0b1];Constructor (K780Jw:Array [Array [Int ,06],036];_:_;_:_;_:Array [Array [Array [Float ,62],1],036];ZU_:Float ){} }Class O:d{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($95),ArrayType(1,ArrayType(4,ArrayType(25159,ArrayType(39,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(4,ArrayType(25159,ArrayType(39,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(S),ArrayType(1,ArrayType(4,ArrayType(25159,ArrayType(39,BoolType)))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(K780Jw),ArrayType(30,ArrayType(6,IntType))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ArrayType(30,ArrayType(1,ArrayType(62,FloatType)))),param(Id(ZU_),FloatType)],Block([]))]),ClassDecl(Id(O),Id(d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 723))

    def test_724(self):
        line = '''Class A0OO{Constructor (d6,M,p,w7:Int ;_,K3,m:_;_9:Boolean ){Continue ;Break ;}Var F__4,qI__P,P:Array [Int ,05];Destructor (){} }Class __S3:_{Var n,_:Array [String ,014];}Class __:_{}'''
        expect = '''Program([ClassDecl(Id(A0OO),[MethodDecl(Id(Constructor),Instance,[param(Id(d6),IntType),param(Id(M),IntType),param(Id(p),IntType),param(Id(w7),IntType),param(Id(_),ClassType(Id(_))),param(Id(K3),ClassType(Id(_))),param(Id(m),ClassType(Id(_))),param(Id(_9),BoolType)],Block([Continue,Break])),AttributeDecl(Instance,VarDecl(Id(F__4),ArrayType(5,IntType))),AttributeDecl(Instance,VarDecl(Id(qI__P),ArrayType(5,IntType))),AttributeDecl(Instance,VarDecl(Id(P),ArrayType(5,IntType))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(__S3),Id(_),[AttributeDecl(Instance,VarDecl(Id(n),ArrayType(12,StringType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(12,StringType)))]),ClassDecl(Id(__),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 724))

    def test_725(self):
        line = '''Class __{}Class Ch{Var $rF,$l9:Int ;}Class wK{}Class s:_{Destructor (){}$_M(N:z_z7pV;V_,__:Float ){Val _v,I,B9,__X__6,M:Float ;}Var __:Boolean ;Var $__:Boolean ;}Class j:KR{}Class c:b{}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(Ch),[AttributeDecl(Static,VarDecl(Id($rF),IntType)),AttributeDecl(Static,VarDecl(Id($l9),IntType))]),ClassDecl(Id(wK),[]),ClassDecl(Id(s),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_M),Static,[param(Id(N),ClassType(Id(z_z7pV))),param(Id(V_),FloatType),param(Id(__),FloatType)],Block([ConstDecl(Id(_v),FloatType,None),ConstDecl(Id(I),FloatType,None),ConstDecl(Id(B9),FloatType,None),ConstDecl(Id(__X__6),FloatType,None),ConstDecl(Id(M),FloatType,None)])),AttributeDecl(Instance,VarDecl(Id(__),BoolType)),AttributeDecl(Static,VarDecl(Id($__),BoolType))]),ClassDecl(Id(j),Id(KR),[]),ClassDecl(Id(c),Id(b),[])])'''
        self.assertTrue(TestAST.test(line, expect, 725))

    def test_726(self):
        line = '''Class i_9j:omj{}Class A:_{Val $e,T:Array [Array [Array [Float ,0126],0x15],0126];Val o__:_4;}Class t_1{Var $2,L,s:Array [Array [Array [Array [Array [Array [Array [Array [String ,5_6],0B100010],0b111111],0B1],0X44],0x15],65],4_7_4];}Class _:j{}'''
        expect = '''Program([ClassDecl(Id(i_9j),Id(omj),[]),ClassDecl(Id(A),Id(_),[AttributeDecl(Static,ConstDecl(Id($e),ArrayType(86,ArrayType(21,ArrayType(86,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(86,ArrayType(21,ArrayType(86,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(o__),ClassType(Id(_4)),NullLiteral()))]),ClassDecl(Id(t_1),[AttributeDecl(Static,VarDecl(Id($2),ArrayType(474,ArrayType(65,ArrayType(21,ArrayType(68,ArrayType(1,ArrayType(63,ArrayType(34,ArrayType(56,StringType)))))))))),AttributeDecl(Instance,VarDecl(Id(L),ArrayType(474,ArrayType(65,ArrayType(21,ArrayType(68,ArrayType(1,ArrayType(63,ArrayType(34,ArrayType(56,StringType)))))))))),AttributeDecl(Instance,VarDecl(Id(s),ArrayType(474,ArrayType(65,ArrayType(21,ArrayType(68,ArrayType(1,ArrayType(63,ArrayType(34,ArrayType(56,StringType))))))))))]),ClassDecl(Id(_),Id(j),[])])'''
        self.assertTrue(TestAST.test(line, expect, 726))

    def test_727(self):
        line = '''Class _:__8{Val $7_,__009d,$g_,q,_,_E:Array [Float ,0b1101];}Class Y__{Val $o,$_,l:Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1],0B1],056],06],95],01],0b1101],0X5A];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(__8),[AttributeDecl(Static,ConstDecl(Id($7_),ArrayType(13,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__009d),ArrayType(13,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($g_),ArrayType(13,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(q),ArrayType(13,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(13,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_E),ArrayType(13,FloatType),None))]),ClassDecl(Id(Y__),[AttributeDecl(Static,ConstDecl(Id($o),ArrayType(90,ArrayType(13,ArrayType(1,ArrayType(95,ArrayType(6,ArrayType(46,ArrayType(1,ArrayType(1,StringType)))))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(90,ArrayType(13,ArrayType(1,ArrayType(95,ArrayType(6,ArrayType(46,ArrayType(1,ArrayType(1,StringType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(l),ArrayType(90,ArrayType(13,ArrayType(1,ArrayType(95,ArrayType(6,ArrayType(46,ArrayType(1,ArrayType(1,StringType)))))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 727))

    def test_728(self):
        line = '''Class US{Constructor (_91_:Boolean ){}Constructor (g:a_;_,F_4,i:Int ;_q5X:Int ){}Constructor (pK,_U:_l0;_,__I67,_P:Array [Array [String ,0x5A],6636_3];z,_4,_,_8,D,__:_){Val C:L3;} }'''
        expect = '''Program([ClassDecl(Id(US),[MethodDecl(Id(Constructor),Instance,[param(Id(_91_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(g),ClassType(Id(a_))),param(Id(_),IntType),param(Id(F_4),IntType),param(Id(i),IntType),param(Id(_q5X),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(pK),ClassType(Id(_l0))),param(Id(_U),ClassType(Id(_l0))),param(Id(_),ArrayType(66363,ArrayType(90,StringType))),param(Id(__I67),ArrayType(66363,ArrayType(90,StringType))),param(Id(_P),ArrayType(66363,ArrayType(90,StringType))),param(Id(z),ClassType(Id(_))),param(Id(_4),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_8),ClassType(Id(_))),param(Id(D),ClassType(Id(_))),param(Id(__),ClassType(Id(_)))],Block([ConstDecl(Id(C),ClassType(Id(L3)),NullLiteral())]))])])'''
        self.assertTrue(TestAST.test(line, expect, 728))

    def test_729(self):
        line = '''Class ol_:r4_W{Var y1:Array [Float ,0X6B_25];Constructor (_,PW_,ucO,_s1e9l_:Int ;_b,l,w:Int ;_,R__,D_h_,_18Q,D:Array [Array [Float ,0x48],033];__,y:dk){}L(){Continue ;}u__0_w(){}Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(ol_),Id(r4_W),[AttributeDecl(Instance,VarDecl(Id(y1),ArrayType(27429,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(PW_),IntType),param(Id(ucO),IntType),param(Id(_s1e9l_),IntType),param(Id(_b),IntType),param(Id(l),IntType),param(Id(w),IntType),param(Id(_),ArrayType(27,ArrayType(72,FloatType))),param(Id(R__),ArrayType(27,ArrayType(72,FloatType))),param(Id(D_h_),ArrayType(27,ArrayType(72,FloatType))),param(Id(_18Q),ArrayType(27,ArrayType(72,FloatType))),param(Id(D),ArrayType(27,ArrayType(72,FloatType))),param(Id(__),ClassType(Id(dk))),param(Id(y),ClassType(Id(dk)))],Block([])),MethodDecl(Id(L),Instance,[],Block([Continue])),MethodDecl(Id(u__0_w),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 729))

    def test_730(self):
        line = '''Class F{}Class _{Destructor (){} }Class _34S:d_j5{o(i:String ;R:b5T__Cqr;_:_;l3:Float ;_,a:Array [Array [Array [Array [String ,0x57],0x57],2],0X1]){}Val $__,x_3,j,$0,$___,o__P,h,$FYcd_2:Array [Array [Array [Boolean ,05],0x57],03_54];}'''
        expect = '''Program([ClassDecl(Id(F),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_34S),Id(d_j5),[MethodDecl(Id(o),Instance,[param(Id(i),StringType),param(Id(R),ClassType(Id(b5T__Cqr))),param(Id(_),ClassType(Id(_))),param(Id(l3),FloatType),param(Id(_),ArrayType(1,ArrayType(2,ArrayType(87,ArrayType(87,StringType))))),param(Id(a),ArrayType(1,ArrayType(2,ArrayType(87,ArrayType(87,StringType)))))],Block([])),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(236,ArrayType(87,ArrayType(5,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(x_3),ArrayType(236,ArrayType(87,ArrayType(5,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(j),ArrayType(236,ArrayType(87,ArrayType(5,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($0),ArrayType(236,ArrayType(87,ArrayType(5,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($___),ArrayType(236,ArrayType(87,ArrayType(5,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(o__P),ArrayType(236,ArrayType(87,ArrayType(5,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(h),ArrayType(236,ArrayType(87,ArrayType(5,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($FYcd_2),ArrayType(236,ArrayType(87,ArrayType(5,BoolType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 730))

    def test_731(self):
        line = '''Class __:_U{Val $_6_2,_f3:Int ;$7(C8e:m){} }Class o{Var _,$_4,j71:Array [Array [Array [Array [Float ,0b10101],0XE2_D1E_3],0B1011110],074];Val l57:p2__fa;Var $xk:h;$_5_(N74:_3){Break ;}Val $_,D3__,wD,$_:Float ;}'''
        expect = '''Program([ClassDecl(Id(__),Id(_U),[AttributeDecl(Static,ConstDecl(Id($_6_2),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_f3),IntType,None)),MethodDecl(Id($7),Static,[param(Id(C8e),ClassType(Id(m)))],Block([]))]),ClassDecl(Id(o),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(60,ArrayType(94,ArrayType(14864867,ArrayType(21,FloatType)))))),AttributeDecl(Static,VarDecl(Id($_4),ArrayType(60,ArrayType(94,ArrayType(14864867,ArrayType(21,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(j71),ArrayType(60,ArrayType(94,ArrayType(14864867,ArrayType(21,FloatType)))))),AttributeDecl(Instance,ConstDecl(Id(l57),ClassType(Id(p2__fa)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($xk),ClassType(Id(h)),NullLiteral())),MethodDecl(Id($_5_),Static,[param(Id(N74),ClassType(Id(_3)))],Block([Break])),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(D3__),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(wD),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 731))

    def test_732(self):
        line = '''Class _:_0{Destructor (){}_K(__,_420_,x,_Sd:_){} }Class __4_{Destructor (){}Val _2:Array [Array [Array [Array [Array [Array [Array [Float ,0XE_5],0b1_0],0b1],0111],0B1_10_0],0XA_7_C],0x7];Val $O,$5,$_:____;}Class _{Val _,_O2:Array [Int ,8];}Class NXg{Val $8,_:Array [Array [Array [Array [Float ,0B111011],0xB49],32],100];}Class ___:lF_pG__{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_0),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_K),Instance,[param(Id(__),ClassType(Id(_))),param(Id(_420_),ClassType(Id(_))),param(Id(x),ClassType(Id(_))),param(Id(_Sd),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(__4_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_2),ArrayType(7,ArrayType(2684,ArrayType(12,ArrayType(73,ArrayType(1,ArrayType(2,ArrayType(229,FloatType))))))),None)),AttributeDecl(Static,ConstDecl(Id($O),ClassType(Id(____)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($5),ClassType(Id(____)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(____)),NullLiteral()))]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(8,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_O2),ArrayType(8,IntType),None))]),ClassDecl(Id(NXg),[AttributeDecl(Static,ConstDecl(Id($8),ArrayType(100,ArrayType(32,ArrayType(2889,ArrayType(59,FloatType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(100,ArrayType(32,ArrayType(2889,ArrayType(59,FloatType)))),None))]),ClassDecl(Id(___),Id(lF_pG__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 732))

    def test_733(self):
        line = '''Class _{Val $__n4__,_:Array [Array [Boolean ,0b1_1],0b1];Destructor (){}Constructor (){}Constructor (P3:String ;_8,F_,__46b_i:_U;_:Array [Float ,0X57]){Q2::$97h._._();} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($__n4__),ArrayType(1,ArrayType(3,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(3,BoolType)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(P3),StringType),param(Id(_8),ClassType(Id(_U))),param(Id(F_),ClassType(Id(_U))),param(Id(__46b_i),ClassType(Id(_U))),param(Id(_),ArrayType(87,FloatType))],Block([Call(FieldAccess(FieldAccess(Id(Q2),Id($97h)),Id(_)),Id(_),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 733))

    def test_734(self):
        line = '''Class _6Qo1:G{Val $pwQ,$_:Array [Array [Array [Boolean ,0x4],0B1],07];}Class k{Constructor (d_3__4:__4;M:_d_7;_L2n:Float ){Break ;}Constructor (){} }Class cZ{}Class C{}'''
        expect = '''Program([ClassDecl(Id(_6Qo1),Id(G),[AttributeDecl(Static,ConstDecl(Id($pwQ),ArrayType(7,ArrayType(1,ArrayType(4,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(7,ArrayType(1,ArrayType(4,BoolType))),None))]),ClassDecl(Id(k),[MethodDecl(Id(Constructor),Instance,[param(Id(d_3__4),ClassType(Id(__4))),param(Id(M),ClassType(Id(_d_7))),param(Id(_L2n),FloatType)],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(cZ),[]),ClassDecl(Id(C),[])])'''
        self.assertTrue(TestAST.test(line, expect, 734))

    def test_735(self):
        line = '''Class _{Constructor (_,_V,_65V5,_43,Q4__:Array [Array [Array [Float ,27],0B1_1_1_00_1],024_7_15_7];i_27y,Z:_;_,I,_K__6:l;Q:_X;b:Int ;aV:O;rf,r2:_w__;_:_;_,__:_){} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(85615,ArrayType(57,ArrayType(27,FloatType)))),param(Id(_V),ArrayType(85615,ArrayType(57,ArrayType(27,FloatType)))),param(Id(_65V5),ArrayType(85615,ArrayType(57,ArrayType(27,FloatType)))),param(Id(_43),ArrayType(85615,ArrayType(57,ArrayType(27,FloatType)))),param(Id(Q4__),ArrayType(85615,ArrayType(57,ArrayType(27,FloatType)))),param(Id(i_27y),ClassType(Id(_))),param(Id(Z),ClassType(Id(_))),param(Id(_),ClassType(Id(l))),param(Id(I),ClassType(Id(l))),param(Id(_K__6),ClassType(Id(l))),param(Id(Q),ClassType(Id(_X))),param(Id(b),IntType),param(Id(aV),ClassType(Id(O))),param(Id(rf),ClassType(Id(_w__))),param(Id(r2),ClassType(Id(_w__))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 735))

    def test_736(self):
        line = '''Class B:_5{$4(T08,_DM,__1,__g0_q,V:Array [Boolean ,5_2];D:Array [Array [Array [Array [Boolean ,87],3],0x15_9],06];__:Int ){_P::$I._3()._();}Constructor (){} }Class g:D{Destructor (){}Val S:Int ;}'''
        expect = '''Program([ClassDecl(Id(B),Id(_5),[MethodDecl(Id($4),Static,[param(Id(T08),ArrayType(52,BoolType)),param(Id(_DM),ArrayType(52,BoolType)),param(Id(__1),ArrayType(52,BoolType)),param(Id(__g0_q),ArrayType(52,BoolType)),param(Id(V),ArrayType(52,BoolType)),param(Id(D),ArrayType(6,ArrayType(345,ArrayType(3,ArrayType(87,BoolType))))),param(Id(__),IntType)],Block([Call(CallExpr(FieldAccess(Id(_P),Id($I)),Id(_3),[]),Id(_),[])])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(g),Id(D),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(S),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 736))

    def test_737(self):
        line = '''Class _:_{}Class _:v__{}Class _:_{Constructor (K,C_,LP,_I_8_:Float ;i_,z__x9:Float ;_EX:Int ;Z_,_,_:Array [Array [Array [Array [Float ,7_7],015],0X56],0x1A]){Continue ;}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(v__),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(K),FloatType),param(Id(C_),FloatType),param(Id(LP),FloatType),param(Id(_I_8_),FloatType),param(Id(i_),FloatType),param(Id(z__x9),FloatType),param(Id(_EX),IntType),param(Id(Z_),ArrayType(26,ArrayType(86,ArrayType(13,ArrayType(77,FloatType))))),param(Id(_),ArrayType(26,ArrayType(86,ArrayType(13,ArrayType(77,FloatType))))),param(Id(_),ArrayType(26,ArrayType(86,ArrayType(13,ArrayType(77,FloatType)))))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 737))

    def test_738(self):
        line = '''Class _6x:_{}Class __116_Qn_:u_6{Constructor (c6Y,P_701qe:__;_M_:K){}Val T,$4_:Array [Array [Array [Array [Array [Array [Array [String ,0x18],060],0B1],64],0x4],0X3],060];}'''
        expect = '''Program([ClassDecl(Id(_6x),Id(_),[]),ClassDecl(Id(__116_Qn_),Id(u_6),[MethodDecl(Id(Constructor),Instance,[param(Id(c6Y),ClassType(Id(__))),param(Id(P_701qe),ClassType(Id(__))),param(Id(_M_),ClassType(Id(K)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(48,ArrayType(3,ArrayType(4,ArrayType(64,ArrayType(1,ArrayType(48,ArrayType(24,StringType))))))),None)),AttributeDecl(Static,ConstDecl(Id($4_),ArrayType(48,ArrayType(3,ArrayType(4,ArrayType(64,ArrayType(1,ArrayType(48,ArrayType(24,StringType))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 738))

    def test_739(self):
        line = '''Class ___7{Destructor (){}$m(D8:Array [String ,0X2];gr349e,__:Array [Array [Array [String ,055],06_3],0x3];_:Boolean ;O,X:Int ;_3:Array [Array [Float ,4_3_4],0117];__35:Float ){ {} }}'''
        expect = '''Program([ClassDecl(Id(___7),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($m),Static,[param(Id(D8),ArrayType(2,StringType)),param(Id(gr349e),ArrayType(3,ArrayType(51,ArrayType(45,StringType)))),param(Id(__),ArrayType(3,ArrayType(51,ArrayType(45,StringType)))),param(Id(_),BoolType),param(Id(O),IntType),param(Id(X),IntType),param(Id(_3),ArrayType(79,ArrayType(434,FloatType))),param(Id(__35),FloatType)],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 739))

    def test_740(self):
        line = '''Class M_:_{$_(){}Constructor (_c_,Q:Array [String ,0X5B];_:_;_O:Float ){Var UM,h:Array [Array [Array [Float ,0X4],50],0B11];}Var _4:Array [Array [Array [Array [Array [Boolean ,50],0b110010],50],0x27],01_3];Var d,$6W_,$T6,$388,__,$C:Array [Array [Array [Array [Array [Float ,0B111100],0B1],055],04],0x18_E];Destructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(M_),Id(_),[MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_c_),ArrayType(91,StringType)),param(Id(Q),ArrayType(91,StringType)),param(Id(_),ClassType(Id(_))),param(Id(_O),FloatType)],Block([VarDecl(Id(UM),ArrayType(3,ArrayType(50,ArrayType(4,FloatType)))),VarDecl(Id(h),ArrayType(3,ArrayType(50,ArrayType(4,FloatType))))])),AttributeDecl(Instance,VarDecl(Id(_4),ArrayType(11,ArrayType(39,ArrayType(50,ArrayType(50,ArrayType(50,BoolType))))))),AttributeDecl(Instance,VarDecl(Id(d),ArrayType(398,ArrayType(4,ArrayType(45,ArrayType(1,ArrayType(60,FloatType))))))),AttributeDecl(Static,VarDecl(Id($6W_),ArrayType(398,ArrayType(4,ArrayType(45,ArrayType(1,ArrayType(60,FloatType))))))),AttributeDecl(Static,VarDecl(Id($T6),ArrayType(398,ArrayType(4,ArrayType(45,ArrayType(1,ArrayType(60,FloatType))))))),AttributeDecl(Static,VarDecl(Id($388),ArrayType(398,ArrayType(4,ArrayType(45,ArrayType(1,ArrayType(60,FloatType))))))),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(398,ArrayType(4,ArrayType(45,ArrayType(1,ArrayType(60,FloatType))))))),AttributeDecl(Static,VarDecl(Id($C),ArrayType(398,ArrayType(4,ArrayType(45,ArrayType(1,ArrayType(60,FloatType))))))),MethodDecl(Id(Destructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 740))

    def test_741(self):
        line = '''Class _i7_1{_(_,__,F,__,_,S,W:Int ;f:Array [Array [Array [String ,047],0B1000100],0X5];G_:Float ){}$K_(s:_7;G,_:b;_,__:Boolean ;_,_O:V_;Q,A:Array [Float ,71_2_4];_:Array [Int ,0B1000100]){}Constructor (){}Val q:Array [String ,0b10];}'''
        expect = '''Program([ClassDecl(Id(_i7_1),[MethodDecl(Id(_),Instance,[param(Id(_),IntType),param(Id(__),IntType),param(Id(F),IntType),param(Id(__),IntType),param(Id(_),IntType),param(Id(S),IntType),param(Id(W),IntType),param(Id(f),ArrayType(5,ArrayType(68,ArrayType(39,StringType)))),param(Id(G_),FloatType)],Block([])),MethodDecl(Id($K_),Static,[param(Id(s),ClassType(Id(_7))),param(Id(G),ClassType(Id(b))),param(Id(_),ClassType(Id(b))),param(Id(_),BoolType),param(Id(__),BoolType),param(Id(_),ClassType(Id(V_))),param(Id(_O),ClassType(Id(V_))),param(Id(Q),ArrayType(7124,FloatType)),param(Id(A),ArrayType(7124,FloatType)),param(Id(_),ArrayType(68,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(q),ArrayType(2,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 741))

    def test_742(self):
        line = '''Class _p{Constructor (){}Constructor (e_W:Array [Array [Array [String ,7],75],0B111011];_:String ;l_:zu2C;_:Array [Array [Array [Array [Int ,7],0b1_1_1],75],1];U5:Array [Int ,0b1100100];i_:_;_,__:Array [Float ,0132]){} }Class F:R1{}'''
        expect = '''Program([ClassDecl(Id(_p),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(e_W),ArrayType(59,ArrayType(75,ArrayType(7,StringType)))),param(Id(_),StringType),param(Id(l_),ClassType(Id(zu2C))),param(Id(_),ArrayType(1,ArrayType(75,ArrayType(7,ArrayType(7,IntType))))),param(Id(U5),ArrayType(100,IntType)),param(Id(i_),ClassType(Id(_))),param(Id(_),ArrayType(90,FloatType)),param(Id(__),ArrayType(90,FloatType))],Block([]))]),ClassDecl(Id(F),Id(R1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 742))

    def test_743(self):
        line = '''Class _:_{Var $6b:_;$fb_(m,g,_:_70;x,_g,W,_,__,_pw,c6,r6,k8,P_39O:Array [Float ,77];Qr8D,_L,K,M,_3__:Array [Boolean ,0b11001];p,_x5:String ){} }Class _A:F{Constructor (DW32:__){Continue ;}Val R,$8_:_;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Static,VarDecl(Id($6b),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($fb_),Static,[param(Id(m),ClassType(Id(_70))),param(Id(g),ClassType(Id(_70))),param(Id(_),ClassType(Id(_70))),param(Id(x),ArrayType(77,FloatType)),param(Id(_g),ArrayType(77,FloatType)),param(Id(W),ArrayType(77,FloatType)),param(Id(_),ArrayType(77,FloatType)),param(Id(__),ArrayType(77,FloatType)),param(Id(_pw),ArrayType(77,FloatType)),param(Id(c6),ArrayType(77,FloatType)),param(Id(r6),ArrayType(77,FloatType)),param(Id(k8),ArrayType(77,FloatType)),param(Id(P_39O),ArrayType(77,FloatType)),param(Id(Qr8D),ArrayType(25,BoolType)),param(Id(_L),ArrayType(25,BoolType)),param(Id(K),ArrayType(25,BoolType)),param(Id(M),ArrayType(25,BoolType)),param(Id(_3__),ArrayType(25,BoolType)),param(Id(p),StringType),param(Id(_x5),StringType)],Block([]))]),ClassDecl(Id(_A),Id(F),[MethodDecl(Id(Constructor),Instance,[param(Id(DW32),ClassType(Id(__)))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(R),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($8_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 743))

    def test_744(self):
        line = '''Class F:Q{Constructor (kRN_0_:Array [Float ,074]){}Constructor (){} }Class _j:B{}Class _5:H__RX{}Class __O_:d{Constructor (_:Array [Array [Float ,0b111100],86];_:_){}Destructor (){}$1(d4,N,_:Float ;_,a,T_,I7:Z_;_,_,_0:C__;L,_,e:Array [Array [Array [Boolean ,0b1],86],1]){Break ;} }'''
        expect = '''Program([ClassDecl(Id(F),Id(Q),[MethodDecl(Id(Constructor),Instance,[param(Id(kRN_0_),ArrayType(60,FloatType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_j),Id(B),[]),ClassDecl(Id(_5),Id(H__RX),[]),ClassDecl(Id(__O_),Id(d),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(86,ArrayType(60,FloatType))),param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($1),Static,[param(Id(d4),FloatType),param(Id(N),FloatType),param(Id(_),FloatType),param(Id(_),ClassType(Id(Z_))),param(Id(a),ClassType(Id(Z_))),param(Id(T_),ClassType(Id(Z_))),param(Id(I7),ClassType(Id(Z_))),param(Id(_),ClassType(Id(C__))),param(Id(_),ClassType(Id(C__))),param(Id(_0),ClassType(Id(C__))),param(Id(L),ArrayType(1,ArrayType(86,ArrayType(1,BoolType)))),param(Id(_),ArrayType(1,ArrayType(86,ArrayType(1,BoolType)))),param(Id(e),ArrayType(1,ArrayType(86,ArrayType(1,BoolType))))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 744))

    def test_745(self):
        line = '''Class qD_ID6:_{Var $l,p1:_6;$6__6(_a:String ){} }Class QWl{}Class M{}Class aa{Val h,_:Array [Array [String ,0b1_0_0],033];w(_Ab,N:Array [Array [Boolean ,06],0x6_D_4]){} }'''
        expect = '''Program([ClassDecl(Id(qD_ID6),Id(_),[AttributeDecl(Static,VarDecl(Id($l),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(p1),ClassType(Id(_6)),NullLiteral())),MethodDecl(Id($6__6),Static,[param(Id(_a),StringType)],Block([]))]),ClassDecl(Id(QWl),[]),ClassDecl(Id(M),[]),ClassDecl(Id(aa),[AttributeDecl(Instance,ConstDecl(Id(h),ArrayType(27,ArrayType(4,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(27,ArrayType(4,StringType)),None)),MethodDecl(Id(w),Instance,[param(Id(_Ab),ArrayType(1748,ArrayType(6,BoolType))),param(Id(N),ArrayType(1748,ArrayType(6,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 745))

    def test_746(self):
        line = '''Class F:B{L(_c,__3,i:Array [Array [Array [Array [Int ,54],02],0B1],6];_,y,_V8I2m:Boolean ){Continue ;Var l_,T,o_,_:Array [Array [Array [Array [Array [Boolean ,0B1_0_0],0B1],071],54],035];} }'''
        expect = '''Program([ClassDecl(Id(F),Id(B),[MethodDecl(Id(L),Instance,[param(Id(_c),ArrayType(6,ArrayType(1,ArrayType(2,ArrayType(54,IntType))))),param(Id(__3),ArrayType(6,ArrayType(1,ArrayType(2,ArrayType(54,IntType))))),param(Id(i),ArrayType(6,ArrayType(1,ArrayType(2,ArrayType(54,IntType))))),param(Id(_),BoolType),param(Id(y),BoolType),param(Id(_V8I2m),BoolType)],Block([Continue,VarDecl(Id(l_),ArrayType(29,ArrayType(54,ArrayType(57,ArrayType(1,ArrayType(4,BoolType)))))),VarDecl(Id(T),ArrayType(29,ArrayType(54,ArrayType(57,ArrayType(1,ArrayType(4,BoolType)))))),VarDecl(Id(o_),ArrayType(29,ArrayType(54,ArrayType(57,ArrayType(1,ArrayType(4,BoolType)))))),VarDecl(Id(_),ArrayType(29,ArrayType(54,ArrayType(57,ArrayType(1,ArrayType(4,BoolType))))))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 746))

    def test_747(self):
        line = '''Class M0:__{Var $j1:Array [Array [Array [Array [Array [Int ,0B1100100],0B1],061],3],0B1_1];Val __,_O,$V,s:Array [Float ,0x9_F];Destructor (){}Constructor (){ {} }}Class Z9M_L:_{}'''
        expect = '''Program([ClassDecl(Id(M0),Id(__),[AttributeDecl(Static,VarDecl(Id($j1),ArrayType(3,ArrayType(3,ArrayType(49,ArrayType(1,ArrayType(100,IntType))))))),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(159,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_O),ArrayType(159,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($V),ArrayType(159,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(s),ArrayType(159,FloatType),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(Z9M_L),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 747))

    def test_748(self):
        line = '''Class _:B___{}Class _{Constructor (){}Destructor (){} }Class _7_{$A(T_H_,a,_,b:T;_:Array [Boolean ,05];_,TUb:Boolean ;I_,R,n:_){}Constructor (){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(B___),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_7_),[MethodDecl(Id($A),Static,[param(Id(T_H_),ClassType(Id(T))),param(Id(a),ClassType(Id(T))),param(Id(_),ClassType(Id(T))),param(Id(b),ClassType(Id(T))),param(Id(_),ArrayType(5,BoolType)),param(Id(_),BoolType),param(Id(TUb),BoolType),param(Id(I_),ClassType(Id(_))),param(Id(R),ClassType(Id(_))),param(Id(n),ClassType(Id(_)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 748))

    def test_749(self):
        line = '''Class K_V:eIO{Constructor (_1_:Int ;_,_,__,s,__,L,ZI,v:String ;oU_3052:Array [String ,074];__:Float ){}$_(_:Array [Boolean ,0x2B];q,_7,_3,_:Array [Array [Array [Int ,12],0B1100000],0XA];___:Array [Boolean ,12];B5,_93_:_;j:Array [Array [Float ,0b1],0b110011];V:Float ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(K_V),Id(eIO),[MethodDecl(Id(Constructor),Instance,[param(Id(_1_),IntType),param(Id(_),StringType),param(Id(_),StringType),param(Id(__),StringType),param(Id(s),StringType),param(Id(__),StringType),param(Id(L),StringType),param(Id(ZI),StringType),param(Id(v),StringType),param(Id(oU_3052),ArrayType(60,StringType)),param(Id(__),FloatType)],Block([])),MethodDecl(Id($_),Static,[param(Id(_),ArrayType(43,BoolType)),param(Id(q),ArrayType(10,ArrayType(96,ArrayType(12,IntType)))),param(Id(_7),ArrayType(10,ArrayType(96,ArrayType(12,IntType)))),param(Id(_3),ArrayType(10,ArrayType(96,ArrayType(12,IntType)))),param(Id(_),ArrayType(10,ArrayType(96,ArrayType(12,IntType)))),param(Id(___),ArrayType(12,BoolType)),param(Id(B5),ClassType(Id(_))),param(Id(_93_),ClassType(Id(_))),param(Id(j),ArrayType(51,ArrayType(1,FloatType))),param(Id(V),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 749))

    def test_750(self):
        line = '''Class _S03w6{Val vk__02:Array [Boolean ,0b11010];Var _6,W_O,$0:Ac_I;Val A_:String ;}Class z:g__{Constructor (_U:b;S,v,b_t:Array [Int ,0b11010]){}Constructor (){ {} }}Class __d{}'''
        expect = '''Program([ClassDecl(Id(_S03w6),[AttributeDecl(Instance,ConstDecl(Id(vk__02),ArrayType(26,BoolType),None)),AttributeDecl(Instance,VarDecl(Id(_6),ClassType(Id(Ac_I)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(W_O),ClassType(Id(Ac_I)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($0),ClassType(Id(Ac_I)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(A_),StringType,None))]),ClassDecl(Id(z),Id(g__),[MethodDecl(Id(Constructor),Instance,[param(Id(_U),ClassType(Id(b))),param(Id(S),ArrayType(26,IntType)),param(Id(v),ArrayType(26,IntType)),param(Id(b_t),ArrayType(26,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(__d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 750))

    def test_751(self):
        line = '''Class f__9:j67_{}Class _X:g{Val $74:Y_;Val _9L_:Xn;}Class c:D_8{}Class _i{Var _,f,_0:S;}Class _P{Constructor (){} }Class K:_{_Y8(N0:Int ;_:Array [Array [Array [Int ,5],07],58];v:Int ;_:___;J,Y0Q,a_r,_,V9,N_,_,e_:Int ){Return ;__Uv9::$1();} }Class _:O{Val G:_=h::$_47;}'''
        expect = '''Program([ClassDecl(Id(f__9),Id(j67_),[]),ClassDecl(Id(_X),Id(g),[AttributeDecl(Static,ConstDecl(Id($74),ClassType(Id(Y_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_9L_),ClassType(Id(Xn)),NullLiteral()))]),ClassDecl(Id(c),Id(D_8),[]),ClassDecl(Id(_i),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(S)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(f),ClassType(Id(S)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_0),ClassType(Id(S)),NullLiteral()))]),ClassDecl(Id(_P),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(K),Id(_),[MethodDecl(Id(_Y8),Instance,[param(Id(N0),IntType),param(Id(_),ArrayType(58,ArrayType(7,ArrayType(5,IntType)))),param(Id(v),IntType),param(Id(_),ClassType(Id(___))),param(Id(J),IntType),param(Id(Y0Q),IntType),param(Id(a_r),IntType),param(Id(_),IntType),param(Id(V9),IntType),param(Id(N_),IntType),param(Id(_),IntType),param(Id(e_),IntType)],Block([Return(),Call(Id(__Uv9),Id($1),[])]))]),ClassDecl(Id(_),Id(O),[AttributeDecl(Instance,ConstDecl(Id(_h8),ClassType(Id(_)),FieldAccess(Id(h),Id($_47))))])])'''
        #self.assertTrue(TestAST.test(line, expect, 751))

    def test_752(self):
        line = '''Class _299:_7{Constructor (){}Var $_1dL_:P;Destructor (){Continue ;Return ;} }Class o_{Constructor (q0yv:Array [Array [Array [Array [Int ,4_6],065],065],0B1];K6y90:__){} }Class i:_{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_299),Id(_7),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_1dL_),ClassType(Id(P)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Return()]))]),ClassDecl(Id(o_),[MethodDecl(Id(Constructor),Instance,[param(Id(q0yv),ArrayType(1,ArrayType(53,ArrayType(53,ArrayType(46,IntType))))),param(Id(K6y90),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(i),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 752))

    def test_753(self):
        line = '''Class Xn_{$_A(_:Boolean ;m,_3,_,_,_5,E__J:_;__,_a:Boolean ;_,_U:Float ;_Z,x5:Array [Array [Float ,0b1_0],0X8];N,l_9_71_,_:T_;G:Array [Int ,70];_:Boolean ;_G,y:Array [Array [Array [Array [Array [Boolean ,9],01],0X1_C029B_F],05],07_05];B__g:Array [Array [String ,01],70];_,w,_,_:Array [Array [Array [Array [Float ,0b11],0b10],0b1],0x2];_,qOM,_,_o:Array [String ,0b1010101];_6:Array [Int ,0X6];_:Array [Array [Array [String ,01],0X6],0x42]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(Xn_),[MethodDecl(Id($_A),Static,[param(Id(_),BoolType),param(Id(m),ClassType(Id(_))),param(Id(_3),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_5),ClassType(Id(_))),param(Id(E__J),ClassType(Id(_))),param(Id(__),BoolType),param(Id(_a),BoolType),param(Id(_),FloatType),param(Id(_U),FloatType),param(Id(_Z),ArrayType(8,ArrayType(2,FloatType))),param(Id(x5),ArrayType(8,ArrayType(2,FloatType))),param(Id(N),ClassType(Id(T_))),param(Id(l_9_71_),ClassType(Id(T_))),param(Id(_),ClassType(Id(T_))),param(Id(G),ArrayType(70,IntType)),param(Id(_),BoolType),param(Id(_G),ArrayType(453,ArrayType(5,ArrayType(29370815,ArrayType(1,ArrayType(9,BoolType)))))),param(Id(y),ArrayType(453,ArrayType(5,ArrayType(29370815,ArrayType(1,ArrayType(9,BoolType)))))),param(Id(B__g),ArrayType(70,ArrayType(1,StringType))),param(Id(_),ArrayType(2,ArrayType(1,ArrayType(2,ArrayType(3,FloatType))))),param(Id(w),ArrayType(2,ArrayType(1,ArrayType(2,ArrayType(3,FloatType))))),param(Id(_),ArrayType(2,ArrayType(1,ArrayType(2,ArrayType(3,FloatType))))),param(Id(_),ArrayType(2,ArrayType(1,ArrayType(2,ArrayType(3,FloatType))))),param(Id(_),ArrayType(85,StringType)),param(Id(qOM),ArrayType(85,StringType)),param(Id(_),ArrayType(85,StringType)),param(Id(_o),ArrayType(85,StringType)),param(Id(_6),ArrayType(6,IntType)),param(Id(_),ArrayType(66,ArrayType(6,ArrayType(1,StringType))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 753))

    def test_754(self):
        line = '''Class _:_{}Class KS{Constructor (_,_,q,h,t,_____,ew:a;D6_2,h,_,_,_g_j_:_8;V:Array [Array [Array [Array [Array [Array [Array [Array [String ,42],05_3_6_1],0x25],42],42],0260],42],0B11_00]){Continue ;} }Class A_{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(KS),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(a))),param(Id(_),ClassType(Id(a))),param(Id(q),ClassType(Id(a))),param(Id(h),ClassType(Id(a))),param(Id(t),ClassType(Id(a))),param(Id(_____),ClassType(Id(a))),param(Id(ew),ClassType(Id(a))),param(Id(D6_2),ClassType(Id(_8))),param(Id(h),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(_g_j_),ClassType(Id(_8))),param(Id(V),ArrayType(12,ArrayType(42,ArrayType(176,ArrayType(42,ArrayType(42,ArrayType(37,ArrayType(2801,ArrayType(42,StringType)))))))))],Block([Continue]))]),ClassDecl(Id(A_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 754))

    def test_755(self):
        line = '''Class __7{Val $_g7:_4_;Val z,F,h__,$57:Float ;Constructor (){}Var e:Array [Boolean ,0xB];Constructor (_93,kV__6,e:Array [Boolean ,027];_,N,v,_:cDH;C5e,_:Array [String ,0XE];C0_:Boolean ;AS,_v9:Float ;_:Array [Array [Array [Float ,0x35],027],0X3F];_t_2:Array [Boolean ,95]){} }'''
        expect = '''Program([ClassDecl(Id(__7),[AttributeDecl(Static,ConstDecl(Id($_g7),ClassType(Id(_4_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(z),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(F),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(h__),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($57),FloatType,None)),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(e),ArrayType(11,BoolType))),MethodDecl(Id(Constructor),Instance,[param(Id(_93),ArrayType(23,BoolType)),param(Id(kV__6),ArrayType(23,BoolType)),param(Id(e),ArrayType(23,BoolType)),param(Id(_),ClassType(Id(cDH))),param(Id(N),ClassType(Id(cDH))),param(Id(v),ClassType(Id(cDH))),param(Id(_),ClassType(Id(cDH))),param(Id(C5e),ArrayType(14,StringType)),param(Id(_),ArrayType(14,StringType)),param(Id(C0_),BoolType),param(Id(AS),FloatType),param(Id(_v9),FloatType),param(Id(_),ArrayType(63,ArrayType(23,ArrayType(53,FloatType)))),param(Id(_t_2),ArrayType(95,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 755))

    def test_756(self):
        line = '''Class __S:zXs{Var $B:t;}Class _P{Val _:Array [Int ,0B1_1];Constructor (__:Float ;iW7:Array [Int ,01_2];C,_,fM_:Array [Array [Array [Array [Array [Boolean ,07],1],0B1001],13],4]){} }'''
        expect = '''Program([ClassDecl(Id(__S),Id(zXs),[AttributeDecl(Static,VarDecl(Id($B),ClassType(Id(t)),NullLiteral()))]),ClassDecl(Id(_P),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(3,IntType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),FloatType),param(Id(iW7),ArrayType(10,IntType)),param(Id(C),ArrayType(4,ArrayType(13,ArrayType(9,ArrayType(1,ArrayType(7,BoolType)))))),param(Id(_),ArrayType(4,ArrayType(13,ArrayType(9,ArrayType(1,ArrayType(7,BoolType)))))),param(Id(fM_),ArrayType(4,ArrayType(13,ArrayType(9,ArrayType(1,ArrayType(7,BoolType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 756))

    def test_757(self):
        line = '''Class j{Constructor (){} }Class L___x{_(X_,C:Array [Array [String ,4],050];_0G,_,F81___:Boolean ;W,Mu,_:Array [Array [Boolean ,0b101010],0x64];E5_kA:Array [Array [Array [Array [String ,06],0XA],06],0x64]){Break ;}Val l:String ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(j),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(L___x),[MethodDecl(Id(_),Instance,[param(Id(X_),ArrayType(40,ArrayType(4,StringType))),param(Id(C),ArrayType(40,ArrayType(4,StringType))),param(Id(_0G),BoolType),param(Id(_),BoolType),param(Id(F81___),BoolType),param(Id(W),ArrayType(100,ArrayType(42,BoolType))),param(Id(Mu),ArrayType(100,ArrayType(42,BoolType))),param(Id(_),ArrayType(100,ArrayType(42,BoolType))),param(Id(E5_kA),ArrayType(100,ArrayType(6,ArrayType(10,ArrayType(6,StringType)))))],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(l),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 757))

    def test_758(self):
        line = '''Class _8:GG{}Class _:iHJ{K_6(P:W0gV;_5,_V,__:Float ;Wm_,A,__,___8JD,t,__U3:Array [String ,1];_:String ;_d:Array [Array [String ,0B1011110],0x5];__,_:Array [Array [String ,0B1011110],0b110111]){ {} }}'''
        expect = '''Program([ClassDecl(Id(_8),Id(GG),[]),ClassDecl(Id(_),Id(iHJ),[MethodDecl(Id(K_6),Instance,[param(Id(P),ClassType(Id(W0gV))),param(Id(_5),FloatType),param(Id(_V),FloatType),param(Id(__),FloatType),param(Id(Wm_),ArrayType(1,StringType)),param(Id(A),ArrayType(1,StringType)),param(Id(__),ArrayType(1,StringType)),param(Id(___8JD),ArrayType(1,StringType)),param(Id(t),ArrayType(1,StringType)),param(Id(__U3),ArrayType(1,StringType)),param(Id(_),StringType),param(Id(_d),ArrayType(5,ArrayType(94,StringType))),param(Id(__),ArrayType(55,ArrayType(94,StringType))),param(Id(_),ArrayType(55,ArrayType(94,StringType)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 758))

    def test_759(self):
        line = '''Class oU:p{Constructor (){}Q(){}$k(F:Int ;U,e:_6;__:String ;_,_:Boolean ){}Var $R:T;Constructor (_:Int ){Q_::$1E8_().P();Break ;Break ;}Constructor (){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(oU),Id(p),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Q),Instance,[],Block([])),MethodDecl(Id($k),Static,[param(Id(F),IntType),param(Id(U),ClassType(Id(_6))),param(Id(e),ClassType(Id(_6))),param(Id(__),StringType),param(Id(_),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Static,VarDecl(Id($R),ClassType(Id(T)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType)],Block([Call(CallExpr(Id(Q_),Id($1E8_),[]),Id(P),[]),Break,Break])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 759))

    def test_760(self):
        line = '''Class g:__6_{Var A_86:Array [Array [Array [Float ,0x6],0xC],04_1];Var N3,t,$_,F:Array [Array [String ,0B10011],46];}Class _:_o__{}Class nn{Constructor (d:__;_2,_,__:Z5){} }Class ___{}'''
        expect = '''Program([ClassDecl(Id(g),Id(__6_),[AttributeDecl(Instance,VarDecl(Id(A_86),ArrayType(33,ArrayType(12,ArrayType(6,FloatType))))),AttributeDecl(Instance,VarDecl(Id(N3),ArrayType(46,ArrayType(19,StringType)))),AttributeDecl(Instance,VarDecl(Id(t),ArrayType(46,ArrayType(19,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(46,ArrayType(19,StringType)))),AttributeDecl(Instance,VarDecl(Id(F),ArrayType(46,ArrayType(19,StringType))))]),ClassDecl(Id(_),Id(_o__),[]),ClassDecl(Id(nn),[MethodDecl(Id(Constructor),Instance,[param(Id(d),ClassType(Id(__))),param(Id(_2),ClassType(Id(Z5))),param(Id(_),ClassType(Id(Z5))),param(Id(__),ClassType(Id(Z5)))],Block([]))]),ClassDecl(Id(___),[])])'''
        self.assertTrue(TestAST.test(line, expect, 760))

    def test_761(self):
        line = '''Class _{}Class h{Val F:Array [Array [Float ,0B1_11],0B1];}Class Q{}Class aV{Constructor (){ {Continue ;Continue ;} }Var Q4:_;Destructor (){Val S:__Iye;} }Class jn:G{Constructor (_,m_9a9:Array [Array [Array [String ,75],015],015]){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(h),[AttributeDecl(Instance,ConstDecl(Id(F),ArrayType(1,ArrayType(7,FloatType)),None))]),ClassDecl(Id(Q),[]),ClassDecl(Id(aV),[MethodDecl(Id(Constructor),Instance,[],Block([Block([Continue,Continue])])),AttributeDecl(Instance,VarDecl(Id(Q4),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(S),ClassType(Id(__Iye)),NullLiteral())]))]),ClassDecl(Id(jn),Id(G),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(13,ArrayType(13,ArrayType(75,StringType)))),param(Id(m_9a9),ArrayType(13,ArrayType(13,ArrayType(75,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 761))

    def test_762(self):
        line = '''Class _:_u18_H{Destructor (){} }Class _d:R{Val $_,$7,$4,V,v__6:Array [Boolean ,02_7];}Class N_:a_5{WC4(){Continue ;} }Class s{Constructor (_,sf_g:Array [Array [String ,075],0x5]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_u18_H),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_d),Id(R),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(23,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(23,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($4),ArrayType(23,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(V),ArrayType(23,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(v__6),ArrayType(23,BoolType),None))]),ClassDecl(Id(N_),Id(a_5),[MethodDecl(Id(WC4),Instance,[],Block([Continue]))]),ClassDecl(Id(s),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(5,ArrayType(61,StringType))),param(Id(sf_g),ArrayType(5,ArrayType(61,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 762))

    def test_763(self):
        line = '''Class __:M{}Class _4HX:r{}Class xI{$2J___J3(A:Array [Array [Array [Int ,0b1_0],9],2_4];__:w__V;z,b6p4wM_9:Array [Int ,94];p:Float ;__:Array [Boolean ,0B110_0_1]){} }Class _ZG:r_{Val $4f7:Array [Array [Array [Array [Array [Array [Array [Array [String ,93],0b1_1_0],0b100101],0x8],93],0B1_1],0106],9];}'''
        expect = '''Program([ClassDecl(Id(__),Id(M),[]),ClassDecl(Id(_4HX),Id(r),[]),ClassDecl(Id(xI),[MethodDecl(Id($2J___J3),Static,[param(Id(A),ArrayType(24,ArrayType(9,ArrayType(2,IntType)))),param(Id(__),ClassType(Id(w__V))),param(Id(z),ArrayType(94,IntType)),param(Id(b6p4wM_9),ArrayType(94,IntType)),param(Id(p),FloatType),param(Id(__),ArrayType(25,BoolType))],Block([]))]),ClassDecl(Id(_ZG),Id(r_),[AttributeDecl(Static,ConstDecl(Id($4f7),ArrayType(9,ArrayType(70,ArrayType(3,ArrayType(93,ArrayType(8,ArrayType(37,ArrayType(6,ArrayType(93,StringType)))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 763))

    def test_764(self):
        line = '''Class ___{Constructor (){Return ;}Destructor (){}u2(i:Float ;_q5__,p:Array [Array [Array [Array [Array [Boolean ,0xB],0B1001101],0X5C],03_4],0x21]){}_0_O(){}Constructor (){Continue ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(___),[MethodDecl(Id(Constructor),Instance,[],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(u2),Instance,[param(Id(i),FloatType),param(Id(_q5__),ArrayType(33,ArrayType(28,ArrayType(92,ArrayType(77,ArrayType(11,BoolType)))))),param(Id(p),ArrayType(33,ArrayType(28,ArrayType(92,ArrayType(77,ArrayType(11,BoolType))))))],Block([])),MethodDecl(Id(_0_O),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 764))

    def test_765(self):
        line = '''Class _:__{}Class a_:j_{Constructor (__,s,_3,F,_:String ;__,l190T_8:Array [Array [Array [Array [Array [Array [Boolean ,0B10],0XC_198],5],0x43DC_5],02],07]){Break ;} }Class __o__{Var A_1,$x:Array [Boolean ,07];Constructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(a_),Id(j_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),StringType),param(Id(s),StringType),param(Id(_3),StringType),param(Id(F),StringType),param(Id(_),StringType),param(Id(__),ArrayType(7,ArrayType(2,ArrayType(277957,ArrayType(5,ArrayType(49560,ArrayType(2,BoolType))))))),param(Id(l190T_8),ArrayType(7,ArrayType(2,ArrayType(277957,ArrayType(5,ArrayType(49560,ArrayType(2,BoolType)))))))],Block([Break]))]),ClassDecl(Id(__o__),[AttributeDecl(Instance,VarDecl(Id(A_1),ArrayType(7,BoolType))),AttributeDecl(Static,VarDecl(Id($x),ArrayType(7,BoolType))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 765))

    def test_766(self):
        line = '''Class d5_{Val O_9t2,_,j:Array [Array [Array [Array [Array [Array [Array [Float ,06_1_6_5_7],011],01_0],07_6],1],0b1_1],0b110010];Val $G5_y,z7:Boolean ;Destructor (){Break ;} }Class yS:__K{}'''
        expect = '''Program([ClassDecl(Id(d5_),[AttributeDecl(Instance,ConstDecl(Id(O_9t2),ArrayType(50,ArrayType(3,ArrayType(1,ArrayType(62,ArrayType(8,ArrayType(9,ArrayType(25519,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(50,ArrayType(3,ArrayType(1,ArrayType(62,ArrayType(8,ArrayType(9,ArrayType(25519,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(j),ArrayType(50,ArrayType(3,ArrayType(1,ArrayType(62,ArrayType(8,ArrayType(9,ArrayType(25519,FloatType))))))),None)),AttributeDecl(Static,ConstDecl(Id($G5_y),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(z7),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(yS),Id(__K),[])])'''
        self.assertTrue(TestAST.test(line, expect, 766))

    def test_767(self):
        line = '''Class j_:_{Constructor (){}$_(w:Array [Array [Float ,0B1100100],0b1_1_1_0];E0:t;WQ:String ;J:Array [Array [Array [Array [Array [String ,0X8],0B1100100],0x50],0B1],067];_,_,_:__;_,__O:Array [Int ,02_3]){}Var X_6,$_,$m8:Int ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(j_),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[param(Id(w),ArrayType(14,ArrayType(100,FloatType))),param(Id(E0),ClassType(Id(t))),param(Id(WQ),StringType),param(Id(J),ArrayType(55,ArrayType(1,ArrayType(80,ArrayType(100,ArrayType(8,StringType)))))),param(Id(_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(_),ArrayType(19,IntType)),param(Id(__O),ArrayType(19,IntType))],Block([])),AttributeDecl(Instance,VarDecl(Id(X_6),IntType)),AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Static,VarDecl(Id($m8),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 767))

    def test_768(self):
        line = '''Class f_{$5(){}Val $w7:Float ;$__(_,_1,E,_6:Boolean ;_1ccd04R,_,_kTbI:___4_;C,_2,H,c:Array [Array [Float ,0B1011100],0x3]){Continue ;{} }Constructor (){}Constructor (){}$7(_:q;d:Array [Float ,7]){} }'''
        expect = '''Program([ClassDecl(Id(f_),[MethodDecl(Id($5),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($w7),FloatType,None)),MethodDecl(Id($__),Static,[param(Id(_),BoolType),param(Id(_1),BoolType),param(Id(E),BoolType),param(Id(_6),BoolType),param(Id(_1ccd04R),ClassType(Id(___4_))),param(Id(_),ClassType(Id(___4_))),param(Id(_kTbI),ClassType(Id(___4_))),param(Id(C),ArrayType(3,ArrayType(92,FloatType))),param(Id(_2),ArrayType(3,ArrayType(92,FloatType))),param(Id(H),ArrayType(3,ArrayType(92,FloatType))),param(Id(c),ArrayType(3,ArrayType(92,FloatType)))],Block([Continue,Block([])])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($7),Static,[param(Id(_),ClassType(Id(q))),param(Id(d),ArrayType(7,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 768))

    def test_769(self):
        line = '''Class O_l_22{}Class _{_(){}Var _0q,$5h__:String ;Destructor (){}Constructor (I52,_Y,_,_,x:Array [Boolean ,044]){} }Class C51y{}Class __{Constructor (){ {Continue ;} }}'''
        expect = '''Program([ClassDecl(Id(O_l_22),[]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_0q),StringType)),AttributeDecl(Static,VarDecl(Id($5h__),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(I52),ArrayType(36,BoolType)),param(Id(_Y),ArrayType(36,BoolType)),param(Id(_),ArrayType(36,BoolType)),param(Id(_),ArrayType(36,BoolType)),param(Id(x),ArrayType(36,BoolType))],Block([]))]),ClassDecl(Id(C51y),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([Block([Continue])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 769))

    def test_770(self):
        line = '''Class l_{Constructor (n_,x,m:Array [String ,0b11_11]){}Val $7:Float ;Val $75:Array [Array [Boolean ,0X5B],0xB];}Class S_9:w_b_{}Class _{$_(_3,_V8,Z,_,_:Int ;T1:F;zM,s:Float ;V1:_){} }Class Q{}'''
        expect = '''Program([ClassDecl(Id(l_),[MethodDecl(Id(Constructor),Instance,[param(Id(n_),ArrayType(15,StringType)),param(Id(x),ArrayType(15,StringType)),param(Id(m),ArrayType(15,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($7),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($75),ArrayType(11,ArrayType(91,BoolType)),None))]),ClassDecl(Id(S_9),Id(w_b_),[]),ClassDecl(Id(_),[MethodDecl(Id($_),Static,[param(Id(_3),IntType),param(Id(_V8),IntType),param(Id(Z),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(T1),ClassType(Id(F))),param(Id(zM),FloatType),param(Id(s),FloatType),param(Id(V1),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(Q),[])])'''
        self.assertTrue(TestAST.test(line, expect, 770))

    def test_771(self):
        line = '''Class _{}Class z_4_:_{__(w,aL3_8M_,_v,_7F5:V;h:Array [Array [Array [Array [Int ,0B1_000_1_000],0B11],0B1],3_6_1];S:Array [Array [Boolean ,0b11],046_70_745]){Val _:Array [Array [Boolean ,1],2];} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(z_4_),Id(_),[MethodDecl(Id(__),Instance,[param(Id(w),ClassType(Id(V))),param(Id(aL3_8M_),ClassType(Id(V))),param(Id(_v),ClassType(Id(V))),param(Id(_7F5),ClassType(Id(V))),param(Id(h),ArrayType(361,ArrayType(1,ArrayType(3,ArrayType(136,IntType))))),param(Id(S),ArrayType(1274341,ArrayType(3,BoolType)))],Block([ConstDecl(Id(_),ArrayType(2,ArrayType(1,BoolType)),None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 771))

    def test_772(self):
        line = '''Class O{Val P_:Array [Array [Array [String ,0x63],0B1],13];Var o:Array [Array [Array [String ,10],13],13];}Class o2:_i6{}Class _:c{}Class i6{}Class N9_{}Class Av:r6{}Class wZT___{}Class k:w_s{}'''
        expect = '''Program([ClassDecl(Id(O),[AttributeDecl(Instance,ConstDecl(Id(P_),ArrayType(13,ArrayType(1,ArrayType(99,StringType))),None)),AttributeDecl(Instance,VarDecl(Id(o),ArrayType(13,ArrayType(13,ArrayType(10,StringType)))))]),ClassDecl(Id(o2),Id(_i6),[]),ClassDecl(Id(_),Id(c),[]),ClassDecl(Id(i6),[]),ClassDecl(Id(N9_),[]),ClassDecl(Id(Av),Id(r6),[]),ClassDecl(Id(wZT___),[]),ClassDecl(Id(k),Id(w_s),[])])'''
        self.assertTrue(TestAST.test(line, expect, 772))

    def test_773(self):
        line = '''Class _{Val $71:__9;}Class _7s:__{}Class _{Constructor (_,M,_S:Boolean ){} }Class ch3{$a1(_,n,l3N,U:Array [Array [Array [Int ,0x21],0b1],5];I:Array [Int ,05_2]){Continue ;Continue ;} }Class Nl_z:u__{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($71),ClassType(Id(__9)),NullLiteral()))]),ClassDecl(Id(_7s),Id(__),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(M),BoolType),param(Id(_S),BoolType)],Block([]))]),ClassDecl(Id(ch3),[MethodDecl(Id($a1),Static,[param(Id(_),ArrayType(5,ArrayType(1,ArrayType(33,IntType)))),param(Id(n),ArrayType(5,ArrayType(1,ArrayType(33,IntType)))),param(Id(l3N),ArrayType(5,ArrayType(1,ArrayType(33,IntType)))),param(Id(U),ArrayType(5,ArrayType(1,ArrayType(33,IntType)))),param(Id(I),ArrayType(42,IntType))],Block([Continue,Continue]))]),ClassDecl(Id(Nl_z),Id(u__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 773))

    def test_774(self):
        line = '''Class D2_6:F_{Constructor (){_::$7l();}Constructor (){}Var $__,_:g;}Class __{Destructor (){}Constructor (_IIl:String ;_:String ;c__,k,D:Int ;y:Float ;K,q:Boolean ;OM,_:Array [String ,0x6]){Val wFx,X_v_s:_;}Var $_W4_S_:W;}'''
        expect = '''Program([ClassDecl(Id(D2_6),Id(F_),[MethodDecl(Id(Constructor),Instance,[],Block([Call(Id(_),Id($7l),[])])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(g)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(g)),NullLiteral()))]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_IIl),StringType),param(Id(_),StringType),param(Id(c__),IntType),param(Id(k),IntType),param(Id(D),IntType),param(Id(y),FloatType),param(Id(K),BoolType),param(Id(q),BoolType),param(Id(OM),ArrayType(6,StringType)),param(Id(_),ArrayType(6,StringType))],Block([ConstDecl(Id(wFx),ClassType(Id(_)),NullLiteral()),ConstDecl(Id(X_v_s),ClassType(Id(_)),NullLiteral())])),AttributeDecl(Static,VarDecl(Id($_W4_S_),ClassType(Id(W)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 774))

    def test_775(self):
        line = '''Class _S:_U4{Constructor (c5,_9_3_,_q:Array [String ,03];_3:Array [Array [Array [Array [String ,0B11],0b1001101],0B1010111],0XE]){ {{Continue ;}Return ;} }Destructor (){}$_D(){} }Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_S),Id(_U4),[MethodDecl(Id(Constructor),Instance,[param(Id(c5),ArrayType(3,StringType)),param(Id(_9_3_),ArrayType(3,StringType)),param(Id(_q),ArrayType(3,StringType)),param(Id(_3),ArrayType(14,ArrayType(87,ArrayType(77,ArrayType(3,StringType)))))],Block([Block([Block([Continue]),Return()])])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_D),Static,[],Block([]))]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 775))

    def test_776(self):
        line = '''Class _08_:_W6_{s(_,A4y9E23:_7_G;_:Float ;j,_9,_3:Array [Int ,023_2];L:Int ;_8:___){Break ;} }Class U{Val _74V_U:LC5e;Constructor (K,__:Array [Boolean ,0562]){} }Class D:_{}Class O{}'''
        expect = '''Program([ClassDecl(Id(_08_),Id(_W6_),[MethodDecl(Id(s),Instance,[param(Id(_),ClassType(Id(_7_G))),param(Id(A4y9E23),ClassType(Id(_7_G))),param(Id(_),FloatType),param(Id(j),ArrayType(154,IntType)),param(Id(_9),ArrayType(154,IntType)),param(Id(_3),ArrayType(154,IntType)),param(Id(L),IntType),param(Id(_8),ClassType(Id(___)))],Block([Break]))]),ClassDecl(Id(U),[AttributeDecl(Instance,ConstDecl(Id(_74V_U),ClassType(Id(LC5e)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(K),ArrayType(370,BoolType)),param(Id(__),ArrayType(370,BoolType))],Block([]))]),ClassDecl(Id(D),Id(_),[]),ClassDecl(Id(O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 776))

    def test_777(self):
        line = '''Class ___:_8_{}Class N{$9_3C50(){ {} }}Class d:b{}Class __8:_{_(N,__,_:Int ;Z_0vu_:String ;J:String ;X:Array [Int ,0x2];j_1,K__,x,_Y_,____4w:Boolean ;_,_:Array [Array [Int ,0xC],02];a_,E,O:String ;__,_,x4__:Array [Array [Int ,046],7_1_4];J:Boolean ){} }Class P:G{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(___),Id(_8_),[]),ClassDecl(Id(N),[MethodDecl(Id($9_3C50),Static,[],Block([Block([])]))]),ClassDecl(Id(d),Id(b),[]),ClassDecl(Id(__8),Id(_),[MethodDecl(Id(_),Instance,[param(Id(N),IntType),param(Id(__),IntType),param(Id(_),IntType),param(Id(Z_0vu_),StringType),param(Id(J),StringType),param(Id(X),ArrayType(2,IntType)),param(Id(j_1),BoolType),param(Id(K__),BoolType),param(Id(x),BoolType),param(Id(_Y_),BoolType),param(Id(____4w),BoolType),param(Id(_),ArrayType(2,ArrayType(12,IntType))),param(Id(_),ArrayType(2,ArrayType(12,IntType))),param(Id(a_),StringType),param(Id(E),StringType),param(Id(O),StringType),param(Id(__),ArrayType(714,ArrayType(38,IntType))),param(Id(_),ArrayType(714,ArrayType(38,IntType))),param(Id(x4__),ArrayType(714,ArrayType(38,IntType))),param(Id(J),BoolType)],Block([]))]),ClassDecl(Id(P),Id(G),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 777))

    def test_778(self):
        line = '''Class _{}Class U0:_j{Constructor (_,l:Array [Array [Float ,06_13],0X5];n_:String ;_6v:String ;u,_,p,_,_:String ;I1,_4:Array [Array [Float ,034],0b100000]){} }Class _{}Class l2{__X(z7_:__;_,_:_;Z,_K4:__W__;_:Float ;Q2:S;i1,w,Ns0:_2;a:Int ;P,a,x:Float ;di3:Array [Array [Int ,3],034];_S:String ;A:Array [Float ,0xD1]){Var r:String ;} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(U0),Id(_j),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(5,ArrayType(395,FloatType))),param(Id(l),ArrayType(5,ArrayType(395,FloatType))),param(Id(n_),StringType),param(Id(_6v),StringType),param(Id(u),StringType),param(Id(_),StringType),param(Id(p),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(I1),ArrayType(32,ArrayType(28,FloatType))),param(Id(_4),ArrayType(32,ArrayType(28,FloatType)))],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(l2),[MethodDecl(Id(__X),Instance,[param(Id(z7_),ClassType(Id(__))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(Z),ClassType(Id(__W__))),param(Id(_K4),ClassType(Id(__W__))),param(Id(_),FloatType),param(Id(Q2),ClassType(Id(S))),param(Id(i1),ClassType(Id(_2))),param(Id(w),ClassType(Id(_2))),param(Id(Ns0),ClassType(Id(_2))),param(Id(a),IntType),param(Id(P),FloatType),param(Id(a),FloatType),param(Id(x),FloatType),param(Id(di3),ArrayType(28,ArrayType(3,IntType))),param(Id(_S),StringType),param(Id(A),ArrayType(209,FloatType))],Block([VarDecl(Id(r),StringType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 778))

    def test_779(self):
        line = '''Class _o{Constructor (V,K2:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0B111000],0X45],0B1],077],8],0x30],0b1_0_1],0X2_2E_7D],0B1_0];a:E){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_o),[MethodDecl(Id(Constructor),Instance,[param(Id(V),ArrayType(2,ArrayType(142973,ArrayType(5,ArrayType(48,ArrayType(8,ArrayType(63,ArrayType(1,ArrayType(69,ArrayType(56,FloatType)))))))))),param(Id(K2),ArrayType(2,ArrayType(142973,ArrayType(5,ArrayType(48,ArrayType(8,ArrayType(63,ArrayType(1,ArrayType(69,ArrayType(56,FloatType)))))))))),param(Id(a),ClassType(Id(E)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 779))

    def test_780(self):
        line = '''Class O{Destructor (){A8_::$4ga();} }Class _:WL7{Constructor (___,M_,R,n8_,C:Array [Array [String ,02],90]){}Val _:Array [Array [Array [Array [Array [Float ,0143],0xF_B_8_D],6_0],0b11],0143];$z(H_,__,_,F9_,o:Int ){} }'''
        expect = '''Program([ClassDecl(Id(O),[MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(A8_),Id($4ga),[])]))]),ClassDecl(Id(_),Id(WL7),[MethodDecl(Id(Constructor),Instance,[param(Id(___),ArrayType(90,ArrayType(2,StringType))),param(Id(M_),ArrayType(90,ArrayType(2,StringType))),param(Id(R),ArrayType(90,ArrayType(2,StringType))),param(Id(n8_),ArrayType(90,ArrayType(2,StringType))),param(Id(C),ArrayType(90,ArrayType(2,StringType)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(99,ArrayType(3,ArrayType(60,ArrayType(64397,ArrayType(99,FloatType))))),None)),MethodDecl(Id($z),Static,[param(Id(H_),IntType),param(Id(__),IntType),param(Id(_),IntType),param(Id(F9_),IntType),param(Id(o),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 780))

    def test_781(self):
        line = '''Class wS{}Class _:J{Var G:String =!-New _34();}Class _:Y353{Val $401,_iV81,_0_D,$s_:H0l;Var $6R,c:Array [Float ,0137];}Class a:Nb{Var $w,$_2,M_k:Array [Array [Array [Array [Float ,0X17],0B1],0137],0x15];Val $__:Array [Int ,9];}'''
        expect = '''Program([ClassDecl(Id(wS),[]),ClassDecl(Id(_),Id(J),[AttributeDecl(Instance,VarDecl(Id(_s),StringType,UnaryOp(!,UnaryOp(-,NewExpr(Id(_34),[])))))]),ClassDecl(Id(_),Id(Y353),[AttributeDecl(Static,ConstDecl(Id($401),ClassType(Id(H0l)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_iV81),ClassType(Id(H0l)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_0_D),ClassType(Id(H0l)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($s_),ClassType(Id(H0l)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6R),ArrayType(95,FloatType))),AttributeDecl(Instance,VarDecl(Id(c),ArrayType(95,FloatType)))]),ClassDecl(Id(a),Id(Nb),[AttributeDecl(Static,VarDecl(Id($w),ArrayType(21,ArrayType(95,ArrayType(1,ArrayType(23,FloatType)))))),AttributeDecl(Static,VarDecl(Id($_2),ArrayType(21,ArrayType(95,ArrayType(1,ArrayType(23,FloatType)))))),AttributeDecl(Instance,VarDecl(Id(M_k),ArrayType(21,ArrayType(95,ArrayType(1,ArrayType(23,FloatType)))))),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(9,IntType),None))])])'''
        #self.assertTrue(TestAST.test(line, expect, 781))

    def test_782(self):
        line = '''Class u:_{__5(){}Var _:hmT16__;Destructor (){}Val $k:Array [Int ,0xF_D_B_4F_BF];Var $__:String ;}Class __a_M{Var $5__u:Array [Array [Float ,0X14],0x9];}Class n:c{Val $645_:b_;}'''
        expect = '''Program([ClassDecl(Id(u),Id(_),[MethodDecl(Id(__5),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(hmT16__)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($k),ArrayType(266031039,IntType),None)),AttributeDecl(Static,VarDecl(Id($__),StringType))]),ClassDecl(Id(__a_M),[AttributeDecl(Static,VarDecl(Id($5__u),ArrayType(9,ArrayType(20,FloatType))))]),ClassDecl(Id(n),Id(c),[AttributeDecl(Static,ConstDecl(Id($645_),ClassType(Id(b_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 782))

    def test_783(self):
        line = '''Class _zh_1:_{}Class _{Destructor (){}Var $3_:Boolean ;Val _:l_;}Class _5_e:_m2v{Destructor (){}$a(_U,_X0:Array [Array [Array [Boolean ,0x19],0b1],0XD];_:Array [Array [Array [Int ,0b1001111],63],63];x,_5__:String ;_56,_:Int ;x:String ){} }'''
        expect = '''Program([ClassDecl(Id(_zh_1),Id(_),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($3_),BoolType)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(l_)),NullLiteral()))]),ClassDecl(Id(_5_e),Id(_m2v),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($a),Static,[param(Id(_U),ArrayType(13,ArrayType(1,ArrayType(25,BoolType)))),param(Id(_X0),ArrayType(13,ArrayType(1,ArrayType(25,BoolType)))),param(Id(_),ArrayType(63,ArrayType(63,ArrayType(79,IntType)))),param(Id(x),StringType),param(Id(_5__),StringType),param(Id(_56),IntType),param(Id(_),IntType),param(Id(x),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 783))

    def test_784(self):
        line = '''Class _:W{Constructor (W5p:Array [Boolean ,072];q:Boolean ;_3sV,z8B_6_F,a0,_2,nI_,__A,_:c){} }Class __{Val R,_:_;}Class u5:ms{Val $3,_:Array [Array [Array [Array [Int ,74],74],0b1000000],0x47];Constructor (s,U,Z:Float ){}Constructor (){} }Class __E{}'''
        expect = '''Program([ClassDecl(Id(_),Id(W),[MethodDecl(Id(Constructor),Instance,[param(Id(W5p),ArrayType(58,BoolType)),param(Id(q),BoolType),param(Id(_3sV),ClassType(Id(c))),param(Id(z8B_6_F),ClassType(Id(c))),param(Id(a0),ClassType(Id(c))),param(Id(_2),ClassType(Id(c))),param(Id(nI_),ClassType(Id(c))),param(Id(__A),ClassType(Id(c))),param(Id(_),ClassType(Id(c)))],Block([]))]),ClassDecl(Id(__),[AttributeDecl(Instance,ConstDecl(Id(R),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(u5),Id(ms),[AttributeDecl(Static,ConstDecl(Id($3),ArrayType(71,ArrayType(64,ArrayType(74,ArrayType(74,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(71,ArrayType(64,ArrayType(74,ArrayType(74,IntType)))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(s),FloatType),param(Id(U),FloatType),param(Id(Z),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(__E),[])])'''
        self.assertTrue(TestAST.test(line, expect, 784))

    def test_785(self):
        line = '''Class j1ME{d5(___x__f,G,_:Array [Array [Array [Array [Array [Boolean ,0B1010101],4_0_9_58],9_3_4878],18],18];x:Array [Array [Float ,0B1],04];__:Int ;___339,i:Int ;t,N,A_,_:Array [Array [String ,6],0B1010101];D:_){} }Class g{}Class _{}'''
        expect = '''Program([ClassDecl(Id(j1ME),[MethodDecl(Id(d5),Instance,[param(Id(___x__f),ArrayType(18,ArrayType(18,ArrayType(934878,ArrayType(40958,ArrayType(85,BoolType)))))),param(Id(G),ArrayType(18,ArrayType(18,ArrayType(934878,ArrayType(40958,ArrayType(85,BoolType)))))),param(Id(_),ArrayType(18,ArrayType(18,ArrayType(934878,ArrayType(40958,ArrayType(85,BoolType)))))),param(Id(x),ArrayType(4,ArrayType(1,FloatType))),param(Id(__),IntType),param(Id(___339),IntType),param(Id(i),IntType),param(Id(t),ArrayType(85,ArrayType(6,StringType))),param(Id(N),ArrayType(85,ArrayType(6,StringType))),param(Id(A_),ArrayType(85,ArrayType(6,StringType))),param(Id(_),ArrayType(85,ArrayType(6,StringType))),param(Id(D),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(g),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 785))

    def test_786(self):
        line = '''Class z_:_{Val _,_mYO:Array [Array [Array [Array [Array [Array [Array [Array [Float ,0B111001],0B111001],053],07_0],29],06_7],5],053];}Class _M42:N{$CM(w:Array [Boolean ,053]){}Var ___,$6,_,xFC4:F;Val $y:Array [Array [Array [Float ,29],0XD],0B1_11_1];Destructor (){} }Class _{}Class U:__{}Class T{}'''
        expect = '''Program([ClassDecl(Id(z_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(43,ArrayType(5,ArrayType(55,ArrayType(29,ArrayType(56,ArrayType(43,ArrayType(57,ArrayType(57,FloatType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_mYO),ArrayType(43,ArrayType(5,ArrayType(55,ArrayType(29,ArrayType(56,ArrayType(43,ArrayType(57,ArrayType(57,FloatType)))))))),None))]),ClassDecl(Id(_M42),Id(N),[MethodDecl(Id($CM),Static,[param(Id(w),ArrayType(43,BoolType))],Block([])),AttributeDecl(Instance,VarDecl(Id(___),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(F)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(F)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(xFC4),ClassType(Id(F)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($y),ArrayType(15,ArrayType(13,ArrayType(29,FloatType))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(U),Id(__),[]),ClassDecl(Id(T),[])])'''
        self.assertTrue(TestAST.test(line, expect, 786))

    def test_787(self):
        line = '''Class _3:_e{}Class _1{}Class kQV6{__(J_x:Array [Array [Array [Array [Array [String ,0xA],07_41],9],0XF1],0B1011110]){}Val $A__78_,_4,b:_;}Class V:C{}Class Cu:E{}Class H:kT{__(){} }'''
        expect = '''Program([ClassDecl(Id(_3),Id(_e),[]),ClassDecl(Id(_1),[]),ClassDecl(Id(kQV6),[MethodDecl(Id(__),Instance,[param(Id(J_x),ArrayType(94,ArrayType(241,ArrayType(9,ArrayType(481,ArrayType(10,StringType))))))],Block([])),AttributeDecl(Static,ConstDecl(Id($A__78_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_4),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(b),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(V),Id(C),[]),ClassDecl(Id(Cu),Id(E),[]),ClassDecl(Id(H),Id(kT),[MethodDecl(Id(__),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 787))

    def test_788(self):
        line = '''Class fg_{Constructor (n:Array [Int ,0X2A];M4_o0:RS;P__:_){Var T562__,o_w,d40:Array [String ,1_2];Return ;}Destructor (){}Constructor (){}Constructor (){}sw6(_:_){}Destructor (){}$k__(F04:String ;_,_,_2fA:_){} }'''
        expect = '''Program([ClassDecl(Id(fg_),[MethodDecl(Id(Constructor),Instance,[param(Id(n),ArrayType(42,IntType)),param(Id(M4_o0),ClassType(Id(RS))),param(Id(P__),ClassType(Id(_)))],Block([VarDecl(Id(T562__),ArrayType(12,StringType)),VarDecl(Id(o_w),ArrayType(12,StringType)),VarDecl(Id(d40),ArrayType(12,StringType)),Return()])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(sw6),Instance,[param(Id(_),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($k__),Static,[param(Id(F04),StringType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_2fA),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 788))

    def test_789(self):
        line = '''Class r4:s{}Class v_{Val q_,F,$r:Boolean ;}Class I:G{Var _k_:Array [Array [Int ,0120],0X59];Destructor (){}Constructor (c_:Int ;y,e_2n,_:Array [Array [Boolean ,2],0B10111]){Continue ;Continue ;}Var $o:Array [Int ,0x8];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(r4),Id(s),[]),ClassDecl(Id(v_),[AttributeDecl(Instance,ConstDecl(Id(q_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(F),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($r),BoolType,None))]),ClassDecl(Id(I),Id(G),[AttributeDecl(Instance,VarDecl(Id(_k_),ArrayType(89,ArrayType(80,IntType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(c_),IntType),param(Id(y),ArrayType(23,ArrayType(2,BoolType))),param(Id(e_2n),ArrayType(23,ArrayType(2,BoolType))),param(Id(_),ArrayType(23,ArrayType(2,BoolType)))],Block([Continue,Continue])),AttributeDecl(Static,VarDecl(Id($o),ArrayType(8,IntType))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 789))

    def test_790(self):
        line = '''Class k{Constructor (_,E,_:String ){} }Class _{}Class c_{}Class j{Destructor (){}Var $3l:Array [Array [Float ,0x9_D2_B],0B1];Var $j1,__:J;}Class J:_{}Class v2:B{}Class _93m:m{}'''
        expect = '''Program([ClassDecl(Id(k),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(E),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(c_),[]),ClassDecl(Id(j),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($3l),ArrayType(1,ArrayType(40235,FloatType)))),AttributeDecl(Static,VarDecl(Id($j1),ClassType(Id(J)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(__),ClassType(Id(J)),NullLiteral()))]),ClassDecl(Id(J),Id(_),[]),ClassDecl(Id(v2),Id(B),[]),ClassDecl(Id(_93m),Id(m),[])])'''
        self.assertTrue(TestAST.test(line, expect, 790))

    def test_791(self):
        line = '''Class Mk_N:F41{Constructor (F_,_,_:H4Z;t,S,Wf1_5__E:Q_9;_63,_H:_;c,V,_,d,_I,q,_,_:Array [Array [Boolean ,0x61],016];_xm:Array [String ,0XC_0];_,G:Array [Array [Boolean ,0b111],06_07]){} }'''
        expect = '''Program([ClassDecl(Id(Mk_N),Id(F41),[MethodDecl(Id(Constructor),Instance,[param(Id(F_),ClassType(Id(H4Z))),param(Id(_),ClassType(Id(H4Z))),param(Id(_),ClassType(Id(H4Z))),param(Id(t),ClassType(Id(Q_9))),param(Id(S),ClassType(Id(Q_9))),param(Id(Wf1_5__E),ClassType(Id(Q_9))),param(Id(_63),ClassType(Id(_))),param(Id(_H),ClassType(Id(_))),param(Id(c),ArrayType(14,ArrayType(97,BoolType))),param(Id(V),ArrayType(14,ArrayType(97,BoolType))),param(Id(_),ArrayType(14,ArrayType(97,BoolType))),param(Id(d),ArrayType(14,ArrayType(97,BoolType))),param(Id(_I),ArrayType(14,ArrayType(97,BoolType))),param(Id(q),ArrayType(14,ArrayType(97,BoolType))),param(Id(_),ArrayType(14,ArrayType(97,BoolType))),param(Id(_),ArrayType(14,ArrayType(97,BoolType))),param(Id(_xm),ArrayType(192,StringType)),param(Id(_),ArrayType(391,ArrayType(7,BoolType))),param(Id(G),ArrayType(391,ArrayType(7,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 791))

    def test_792(self):
        line = '''Class b1_{q(gO0,J,Z002_:Array [Array [Int ,55],0x58];_:Array [Array [Array [Array [Float ,0x58],0B1101],4],55];_1_x3N:String ;hv3,__H,q,e_,E:E){}Constructor (__6A90:Array [Array [Array [String ,03],0X10],55]){} }'''
        expect = '''Program([ClassDecl(Id(b1_),[MethodDecl(Id(q),Instance,[param(Id(gO0),ArrayType(88,ArrayType(55,IntType))),param(Id(J),ArrayType(88,ArrayType(55,IntType))),param(Id(Z002_),ArrayType(88,ArrayType(55,IntType))),param(Id(_),ArrayType(55,ArrayType(4,ArrayType(13,ArrayType(88,FloatType))))),param(Id(_1_x3N),StringType),param(Id(hv3),ClassType(Id(E))),param(Id(__H),ClassType(Id(E))),param(Id(q),ClassType(Id(E))),param(Id(e_),ClassType(Id(E))),param(Id(E),ClassType(Id(E)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(__6A90),ArrayType(55,ArrayType(16,ArrayType(3,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 792))

    def test_793(self):
        line = '''Class _:e{}Class K:_{Var $3__,$_0_:Array [Array [Boolean ,0112],036];Destructor (){}Val $__:Array [Array [Array [Float ,036],99],99];Val __w:Array [Array [Array [Int ,99],99],0x19];}'''
        expect = '''Program([ClassDecl(Id(_),Id(e),[]),ClassDecl(Id(K),Id(_),[AttributeDecl(Static,VarDecl(Id($3__),ArrayType(30,ArrayType(74,BoolType)))),AttributeDecl(Static,VarDecl(Id($_0_),ArrayType(30,ArrayType(74,BoolType)))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(99,ArrayType(99,ArrayType(30,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(__w),ArrayType(25,ArrayType(99,ArrayType(99,IntType))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 793))

    def test_794(self):
        line = '''Class FM__:_{Constructor (U6:Array [Array [Int ,0X41],0b1];r_,s:Array [Float ,68];_:Array [Array [Array [Array [String ,86],9_6_9_1],0X41],0B11001];f6,U_M:Int ;_:w7tV;A3:C_;s,_:Int ;QV,_,_:g;_yC_,__30,P:Array [Boolean ,86];_,X:_){} }Class _:q{}Class __{}'''
        expect = '''Program([ClassDecl(Id(FM__),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(U6),ArrayType(1,ArrayType(65,IntType))),param(Id(r_),ArrayType(68,FloatType)),param(Id(s),ArrayType(68,FloatType)),param(Id(_),ArrayType(25,ArrayType(65,ArrayType(9691,ArrayType(86,StringType))))),param(Id(f6),IntType),param(Id(U_M),IntType),param(Id(_),ClassType(Id(w7tV))),param(Id(A3),ClassType(Id(C_))),param(Id(s),IntType),param(Id(_),IntType),param(Id(QV),ClassType(Id(g))),param(Id(_),ClassType(Id(g))),param(Id(_),ClassType(Id(g))),param(Id(_yC_),ArrayType(86,BoolType)),param(Id(__30),ArrayType(86,BoolType)),param(Id(P),ArrayType(86,BoolType)),param(Id(_),ClassType(Id(_))),param(Id(X),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(q),[]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 794))

    def test_795(self):
        line = '''Class P0_{Constructor (H,T8UdY:Boolean ){}Constructor (J,_5__5:V;_z3A,_09,f:Array [Array [Array [Float ,0B1000100],0B1],01]){}Var _,N,$8,$H,_,_,_8_,$_D_,q__:_;Val M:String ;$_Y7(){} }'''
        expect = '''Program([ClassDecl(Id(P0_),[MethodDecl(Id(Constructor),Instance,[param(Id(H),BoolType),param(Id(T8UdY),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(J),ClassType(Id(V))),param(Id(_5__5),ClassType(Id(V))),param(Id(_z3A),ArrayType(1,ArrayType(1,ArrayType(68,FloatType)))),param(Id(_09),ArrayType(1,ArrayType(1,ArrayType(68,FloatType)))),param(Id(f),ArrayType(1,ArrayType(1,ArrayType(68,FloatType))))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(N),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($H),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_8_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_D_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(q__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(M),StringType,None)),MethodDecl(Id($_Y7),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 795))

    def test_796(self):
        line = '''Class _7H_:_{$_(_:Boolean ;_1,_S7,b:Array [Array [Float ,0X6],25];_:Array [Array [Array [Array [Array [Array [Int ,0x3_6],0b1],051],0xC],04],15_2_8]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_7H_),Id(_),[MethodDecl(Id($_),Static,[param(Id(_),BoolType),param(Id(_1),ArrayType(25,ArrayType(6,FloatType))),param(Id(_S7),ArrayType(25,ArrayType(6,FloatType))),param(Id(b),ArrayType(25,ArrayType(6,FloatType))),param(Id(_),ArrayType(1528,ArrayType(4,ArrayType(12,ArrayType(41,ArrayType(1,ArrayType(54,IntType)))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 796))

    def test_797(self):
        line = '''Class _6_:b{Destructor (){Val __,_L,x_1,Y8f,S33:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,15],1],15],15],0b1],0b1],0B1001],0b111],05_07];} }Class _{}Class h:_{}'''
        expect = '''Program([ClassDecl(Id(_6_),Id(b),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(__),ArrayType(327,ArrayType(7,ArrayType(9,ArrayType(1,ArrayType(1,ArrayType(15,ArrayType(15,ArrayType(1,ArrayType(15,FloatType))))))))),None),ConstDecl(Id(_L),ArrayType(327,ArrayType(7,ArrayType(9,ArrayType(1,ArrayType(1,ArrayType(15,ArrayType(15,ArrayType(1,ArrayType(15,FloatType))))))))),None),ConstDecl(Id(x_1),ArrayType(327,ArrayType(7,ArrayType(9,ArrayType(1,ArrayType(1,ArrayType(15,ArrayType(15,ArrayType(1,ArrayType(15,FloatType))))))))),None),ConstDecl(Id(Y8f),ArrayType(327,ArrayType(7,ArrayType(9,ArrayType(1,ArrayType(1,ArrayType(15,ArrayType(15,ArrayType(1,ArrayType(15,FloatType))))))))),None),ConstDecl(Id(S33),ArrayType(327,ArrayType(7,ArrayType(9,ArrayType(1,ArrayType(1,ArrayType(15,ArrayType(15,ArrayType(1,ArrayType(15,FloatType))))))))),None)]))]),ClassDecl(Id(_),[]),ClassDecl(Id(h),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 797))

    def test_798(self):
        line = '''Class __{Var _,k,$v,$2,$esB_I:Boolean ;$_(_:Array [Boolean ,5];P:Array [Array [Array [Array [Array [Array [Int ,5],0x4],0B1000101],69_78],7_12503],0b1]){} }Class J_{Destructor (){} }Class mo{}'''
        expect = '''Program([ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(k),BoolType)),AttributeDecl(Static,VarDecl(Id($v),BoolType)),AttributeDecl(Static,VarDecl(Id($2),BoolType)),AttributeDecl(Static,VarDecl(Id($esB_I),BoolType)),MethodDecl(Id($_),Static,[param(Id(_),ArrayType(5,BoolType)),param(Id(P),ArrayType(1,ArrayType(712503,ArrayType(6978,ArrayType(69,ArrayType(4,ArrayType(5,IntType)))))))],Block([]))]),ClassDecl(Id(J_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(mo),[])])'''
        self.assertTrue(TestAST.test(line, expect, 798))

    def test_799(self):
        line = '''Class ___1:_{Var $1___,$7,g4SD_Y,_n,$__,_:xZP_;Constructor (aR,p_,_,_,g:Array [Float ,0b1]){Val S9,y_X_,j,u1,tF:ojk;}Destructor (){Continue ;} }Class W_8:___60{}Class Y{Var __,$7:Float ;}'''
        expect = '''Program([ClassDecl(Id(___1),Id(_),[AttributeDecl(Static,VarDecl(Id($1___),ClassType(Id(xZP_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($7),ClassType(Id(xZP_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(g4SD_Y),ClassType(Id(xZP_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_n),ClassType(Id(xZP_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(xZP_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(xZP_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(aR),ArrayType(1,FloatType)),param(Id(p_),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(g),ArrayType(1,FloatType))],Block([ConstDecl(Id(S9),ClassType(Id(ojk)),NullLiteral()),ConstDecl(Id(y_X_),ClassType(Id(ojk)),NullLiteral()),ConstDecl(Id(j),ClassType(Id(ojk)),NullLiteral()),ConstDecl(Id(u1),ClassType(Id(ojk)),NullLiteral()),ConstDecl(Id(tF),ClassType(Id(ojk)),NullLiteral())])),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(W_8),Id(___60),[]),ClassDecl(Id(Y),[AttributeDecl(Instance,VarDecl(Id(__),FloatType)),AttributeDecl(Static,VarDecl(Id($7),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 799))

    def test_800(self):
        line = '''Class Y2{Var $d,U:Int ;_(){}Constructor (_,_V_G,_:Array [Array [Float ,0B1],0X34];_:Array [Boolean ,64];_,_,_3:Array [Float ,02];_9c:_8J9){Break ;Return ;} }Class Q_0_:L1{}'''
        expect = '''Program([ClassDecl(Id(Y2),[AttributeDecl(Static,VarDecl(Id($d),IntType)),AttributeDecl(Instance,VarDecl(Id(U),IntType)),MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(52,ArrayType(1,FloatType))),param(Id(_V_G),ArrayType(52,ArrayType(1,FloatType))),param(Id(_),ArrayType(52,ArrayType(1,FloatType))),param(Id(_),ArrayType(64,BoolType)),param(Id(_),ArrayType(2,FloatType)),param(Id(_),ArrayType(2,FloatType)),param(Id(_3),ArrayType(2,FloatType)),param(Id(_9c),ClassType(Id(_8J9)))],Block([Break,Return()]))]),ClassDecl(Id(Q_0_),Id(L1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 800))

    def test_801(self):
        line = '''Class _{}Class H_{Destructor (){Val h2,lJ,f_,__Q:String ;}Val $_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,8_0],5],0104],7_68],0B1_1],0xAF],0B1_1_1],0x4E],0X1];}Class a_{}Class Q_:_{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(H_),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(h2),StringType,None),ConstDecl(Id(lJ),StringType,None),ConstDecl(Id(f_),StringType,None),ConstDecl(Id(__Q),StringType,None)])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(1,ArrayType(78,ArrayType(7,ArrayType(175,ArrayType(3,ArrayType(768,ArrayType(68,ArrayType(5,ArrayType(80,FloatType))))))))),None))]),ClassDecl(Id(a_),[]),ClassDecl(Id(Q_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 801))

    def test_802(self):
        line = '''Class ydrK8{Constructor (_v:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B1_001],0b1000100],0b1000100],0b1000100],69],72],1_0_8_4],0b1000100],0111];i8_,Q:Boolean ;_9K:Int ){Var _,_:_B;} }Class I:_{}Class I:__{}'''
        expect = '''Program([ClassDecl(Id(ydrK8),[MethodDecl(Id(Constructor),Instance,[param(Id(_v),ArrayType(73,ArrayType(68,ArrayType(1084,ArrayType(72,ArrayType(69,ArrayType(68,ArrayType(68,ArrayType(68,ArrayType(9,IntType)))))))))),param(Id(i8_),BoolType),param(Id(Q),BoolType),param(Id(_9K),IntType)],Block([VarDecl(Id(_),ClassType(Id(_B)),NullLiteral()),VarDecl(Id(_),ClassType(Id(_B)),NullLiteral())]))]),ClassDecl(Id(I),Id(_),[]),ClassDecl(Id(I),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 802))

    def test_803(self):
        line = '''Class _i:wX{Destructor (){} }Class _:_m{$C(_5:Array [Array [Array [Float ,6],12],73];_,f,H8,_x4:Array [Array [Array [Array [Float ,0B10_0_1],071],071],12];_:Array [Array [Boolean ,0B100],0B10];w_2:Boolean ;S:Array [Boolean ,0B1];__h:_;Y:Array [Array [Int ,071],04];_9,__:String ;_,e:Float ){ {} }Constructor (k,_92,u:Array [Array [Array [Array [Float ,04],0X3B],0B1_0],12]){} }Class _E{}Class _{}'''
        expect = '''Program([ClassDecl(Id(_i),Id(wX),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_m),[MethodDecl(Id($C),Static,[param(Id(_5),ArrayType(73,ArrayType(12,ArrayType(6,FloatType)))),param(Id(_),ArrayType(12,ArrayType(57,ArrayType(57,ArrayType(9,FloatType))))),param(Id(f),ArrayType(12,ArrayType(57,ArrayType(57,ArrayType(9,FloatType))))),param(Id(H8),ArrayType(12,ArrayType(57,ArrayType(57,ArrayType(9,FloatType))))),param(Id(_x4),ArrayType(12,ArrayType(57,ArrayType(57,ArrayType(9,FloatType))))),param(Id(_),ArrayType(2,ArrayType(4,BoolType))),param(Id(w_2),BoolType),param(Id(S),ArrayType(1,BoolType)),param(Id(__h),ClassType(Id(_))),param(Id(Y),ArrayType(4,ArrayType(57,IntType))),param(Id(_9),StringType),param(Id(__),StringType),param(Id(_),FloatType),param(Id(e),FloatType)],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(k),ArrayType(12,ArrayType(2,ArrayType(59,ArrayType(4,FloatType))))),param(Id(_92),ArrayType(12,ArrayType(2,ArrayType(59,ArrayType(4,FloatType))))),param(Id(u),ArrayType(12,ArrayType(2,ArrayType(59,ArrayType(4,FloatType)))))],Block([]))]),ClassDecl(Id(_E),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 803))

    def test_804(self):
        line = '''Class RB1:s__8{O99(Y,X,_x:b9;n4,x,G,_:_E;lK:Array [Int ,051];w,_,_,U,T2:Array [Array [Boolean ,051],90];_,Y,_,_:Int ){Break ;Continue ;}Constructor (){Return ;} }Class __{}'''
        expect = '''Program([ClassDecl(Id(RB1),Id(s__8),[MethodDecl(Id(O99),Instance,[param(Id(Y),ClassType(Id(b9))),param(Id(X),ClassType(Id(b9))),param(Id(_x),ClassType(Id(b9))),param(Id(n4),ClassType(Id(_E))),param(Id(x),ClassType(Id(_E))),param(Id(G),ClassType(Id(_E))),param(Id(_),ClassType(Id(_E))),param(Id(lK),ArrayType(41,IntType)),param(Id(w),ArrayType(90,ArrayType(41,BoolType))),param(Id(_),ArrayType(90,ArrayType(41,BoolType))),param(Id(_),ArrayType(90,ArrayType(41,BoolType))),param(Id(U),ArrayType(90,ArrayType(41,BoolType))),param(Id(T2),ArrayType(90,ArrayType(41,BoolType))),param(Id(_),IntType),param(Id(Y),IntType),param(Id(_),IntType),param(Id(_),IntType)],Block([Break,Continue])),MethodDecl(Id(Constructor),Instance,[],Block([Return()]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 804))

    def test_805(self):
        line = '''Class _5{}Class _942_s{Var $H,$i:Array [Float ,0B1];}Class G{Constructor (f,_:R;k_:Array [Array [Array [Array [Float ,510],0B101100],024],02];T,O_:Float ){}$__48(){} }Class __{}'''
        expect = '''Program([ClassDecl(Id(_5),[]),ClassDecl(Id(_942_s),[AttributeDecl(Static,VarDecl(Id($H),ArrayType(1,FloatType))),AttributeDecl(Static,VarDecl(Id($i),ArrayType(1,FloatType)))]),ClassDecl(Id(G),[MethodDecl(Id(Constructor),Instance,[param(Id(f),ClassType(Id(R))),param(Id(_),ClassType(Id(R))),param(Id(k_),ArrayType(2,ArrayType(20,ArrayType(44,ArrayType(510,FloatType))))),param(Id(T),FloatType),param(Id(O_),FloatType)],Block([])),MethodDecl(Id($__48),Static,[],Block([]))]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 805))

    def test_806(self):
        line = '''Class c{Var _0_:_;}Class _6Id_:k{}Class _:l{Destructor (){} }Class _:P{$3(){}Val _U2,_,g:_l;}Class _{Constructor (h,PH:Float ;_5K3,__9:Array [Array [Array [String ,30],0b1],0XB]){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(c),[AttributeDecl(Instance,VarDecl(Id(_0_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_6Id_),Id(k),[]),ClassDecl(Id(_),Id(l),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(P),[MethodDecl(Id($3),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_U2),ClassType(Id(_l)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_l)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(g),ClassType(Id(_l)),NullLiteral()))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(h),FloatType),param(Id(PH),FloatType),param(Id(_5K3),ArrayType(11,ArrayType(1,ArrayType(30,StringType)))),param(Id(__9),ArrayType(11,ArrayType(1,ArrayType(30,StringType))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 806))

    def test_807(self):
        line = '''Class S72{}Class _:m{}Class R:_{$X(mB,_6_:Array [Float ,0xC_D0];n:_7;J_,Y,_:M){}Var c,_:Array [Array [Array [Array [Int ,0b101110],0x2B],057],0X9_B];Constructor (){}$_(){Break ;}Destructor (){Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(S72),[]),ClassDecl(Id(_),Id(m),[]),ClassDecl(Id(R),Id(_),[MethodDecl(Id($X),Static,[param(Id(mB),ArrayType(3280,FloatType)),param(Id(_6_),ArrayType(3280,FloatType)),param(Id(n),ClassType(Id(_7))),param(Id(J_),ClassType(Id(M))),param(Id(Y),ClassType(Id(M))),param(Id(_),ClassType(Id(M)))],Block([])),AttributeDecl(Instance,VarDecl(Id(c),ArrayType(155,ArrayType(47,ArrayType(43,ArrayType(46,IntType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(155,ArrayType(47,ArrayType(43,ArrayType(46,IntType)))))),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[],Block([Break])),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 807))

    def test_808(self):
        line = '''Class _:_M21_{}Class __cKB:_{Constructor (p,_4Me_3e:_;_:Array [Array [Float ,7_4_33_9],06]){}Val $_:Boolean ;}Class _:_Z{Destructor (){Break ;}__(_,o3:Int ;_:String ;_6K,b6_:Float ;Bp:d){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_M21_),[]),ClassDecl(Id(__cKB),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(p),ClassType(Id(_))),param(Id(_4Me_3e),ClassType(Id(_))),param(Id(_),ArrayType(6,ArrayType(74339,FloatType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None))]),ClassDecl(Id(_),Id(_Z),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id(__),Instance,[param(Id(_),IntType),param(Id(o3),IntType),param(Id(_),StringType),param(Id(_6K),FloatType),param(Id(b6_),FloatType),param(Id(Bp),ClassType(Id(d)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 808))

    def test_809(self):
        line = '''Class jf:_{Var $36:_H_S;__(){}Var $mS:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0XD],0B1010111],05_57],8],03],0X20],0X20],80],80],0B1010111];Val _3:Array [Boolean ,0B1010111];Constructor (){} }Class o8:g{u(){_::$v();{}Continue ;} }'''
        expect = '''Program([ClassDecl(Id(jf),Id(_),[AttributeDecl(Static,VarDecl(Id($36),ClassType(Id(_H_S)),NullLiteral())),MethodDecl(Id(__),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($mS),ArrayType(87,ArrayType(80,ArrayType(80,ArrayType(32,ArrayType(32,ArrayType(3,ArrayType(8,ArrayType(367,ArrayType(87,ArrayType(13,FloatType)))))))))))),AttributeDecl(Instance,ConstDecl(Id(_3),ArrayType(87,BoolType),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(o8),Id(g),[MethodDecl(Id(u),Instance,[],Block([Call(Id(_),Id($v),[]),Block([]),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 809))

    def test_810(self):
        line = '''Class _Q_3{Val i:Array [Array [Float ,0B1],0B1_0];}Class _7:P5__{}Class _:I3{$_w(g:String ){}Var $_3:Array [Array [Int ,58],064];$88_a_(g4:Float ){}_(Y__:Array [Array [Array [Array [Boolean ,0X3E],0X8_E],531_0],05];M42q,_182:Array [Int ,064];_R,L,_:Uc_re_kEl5;I,j_,___:_7_;rpM:Array [Int ,0x16]){}Var $_,_:_0_;Destructor (){ {}{} }}Class s:K{Val O__8__:_;Constructor (){}Destructor (){Continue ;}Destructor (){Break ;}Val _,$nm:_r;}'''
        expect = '''Program([ClassDecl(Id(_Q_3),[AttributeDecl(Instance,ConstDecl(Id(i),ArrayType(2,ArrayType(1,FloatType)),None))]),ClassDecl(Id(_7),Id(P5__),[]),ClassDecl(Id(_),Id(I3),[MethodDecl(Id($_w),Static,[param(Id(g),StringType)],Block([])),AttributeDecl(Static,VarDecl(Id($_3),ArrayType(52,ArrayType(58,IntType)))),MethodDecl(Id($88_a_),Static,[param(Id(g4),FloatType)],Block([])),MethodDecl(Id(_),Instance,[param(Id(Y__),ArrayType(5,ArrayType(5310,ArrayType(142,ArrayType(62,BoolType))))),param(Id(M42q),ArrayType(52,IntType)),param(Id(_182),ArrayType(52,IntType)),param(Id(_R),ClassType(Id(Uc_re_kEl5))),param(Id(L),ClassType(Id(Uc_re_kEl5))),param(Id(_),ClassType(Id(Uc_re_kEl5))),param(Id(I),ClassType(Id(_7_))),param(Id(j_),ClassType(Id(_7_))),param(Id(___),ClassType(Id(_7_))),param(Id(rpM),ArrayType(22,IntType))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_0_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_0_)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([Block([]),Block([])]))]),ClassDecl(Id(s),Id(K),[AttributeDecl(Instance,ConstDecl(Id(O__8__),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_r)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($nm),ClassType(Id(_r)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 810))

    def test_811(self):
        line = '''Class rK5_{Val _Kch,$6:Array [Array [Array [Array [Float ,0133],15_2_3],0B1100001],0x37];}Class _:S{C_(_:Array [Array [Array [Array [String ,0554],0x37],0b1010000],6];CrGs__3,a_:Boolean ;x2kX_4_:_p){} }Class T:_{Var i,$4:Float ;}'''
        expect = '''Program([ClassDecl(Id(rK5_),[AttributeDecl(Instance,ConstDecl(Id(_Kch),ArrayType(55,ArrayType(97,ArrayType(1523,ArrayType(91,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($6),ArrayType(55,ArrayType(97,ArrayType(1523,ArrayType(91,FloatType)))),None))]),ClassDecl(Id(_),Id(S),[MethodDecl(Id(C_),Instance,[param(Id(_),ArrayType(6,ArrayType(80,ArrayType(55,ArrayType(364,StringType))))),param(Id(CrGs__3),BoolType),param(Id(a_),BoolType),param(Id(x2kX_4_),ClassType(Id(_p)))],Block([]))]),ClassDecl(Id(T),Id(_),[AttributeDecl(Instance,VarDecl(Id(i),FloatType)),AttributeDecl(Static,VarDecl(Id($4),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 811))

    def test_812(self):
        line = '''Class G{$Ij(_,M,l2,O3,u_R,hc8:y__;_k:Array [Float ,0B1];k:Array [Array [Array [Array [Int ,14],03],0B1_1],14];q_,_,_8,ski4,_,_Do3:Array [Array [Array [Array [Array [Boolean ,14],0x16],0X8],0x93_0],01];U,d:Array [Array [Int ,6],0XA_D]){}Destructor (){} }Class _M_:_{}Class bz_{$1(_,_,K:_){} }'''
        expect = '''Program([ClassDecl(Id(G),[MethodDecl(Id($Ij),Static,[param(Id(_),ClassType(Id(y__))),param(Id(M),ClassType(Id(y__))),param(Id(l2),ClassType(Id(y__))),param(Id(O3),ClassType(Id(y__))),param(Id(u_R),ClassType(Id(y__))),param(Id(hc8),ClassType(Id(y__))),param(Id(_k),ArrayType(1,FloatType)),param(Id(k),ArrayType(14,ArrayType(3,ArrayType(3,ArrayType(14,IntType))))),param(Id(q_),ArrayType(1,ArrayType(2352,ArrayType(8,ArrayType(22,ArrayType(14,BoolType)))))),param(Id(_),ArrayType(1,ArrayType(2352,ArrayType(8,ArrayType(22,ArrayType(14,BoolType)))))),param(Id(_8),ArrayType(1,ArrayType(2352,ArrayType(8,ArrayType(22,ArrayType(14,BoolType)))))),param(Id(ski4),ArrayType(1,ArrayType(2352,ArrayType(8,ArrayType(22,ArrayType(14,BoolType)))))),param(Id(_),ArrayType(1,ArrayType(2352,ArrayType(8,ArrayType(22,ArrayType(14,BoolType)))))),param(Id(_Do3),ArrayType(1,ArrayType(2352,ArrayType(8,ArrayType(22,ArrayType(14,BoolType)))))),param(Id(U),ArrayType(173,ArrayType(6,IntType))),param(Id(d),ArrayType(173,ArrayType(6,IntType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_M_),Id(_),[]),ClassDecl(Id(bz_),[MethodDecl(Id($1),Static,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(K),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 812))

    def test_813(self):
        line = '''Class _{}Class o5:J{}Class __:U{}Class p{Var $8W__:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0xC],043],043],0x2B],4],0B1],0b1_0_0],043],0X4_B],0x2B];}Class _c_:_X{Constructor (_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(o5),Id(J),[]),ClassDecl(Id(__),Id(U),[]),ClassDecl(Id(p),[AttributeDecl(Static,VarDecl(Id($8W__),ArrayType(43,ArrayType(75,ArrayType(35,ArrayType(4,ArrayType(1,ArrayType(4,ArrayType(43,ArrayType(35,ArrayType(35,ArrayType(12,FloatType))))))))))))]),ClassDecl(Id(_c_),Id(_X),[MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 813))

    def test_814(self):
        line = '''Class _H0{Constructor (_33M:Array [Array [Array [Array [Boolean ,052],03],0xF],0X42]){Continue ;}Val _,_,$_,$l_,$_:h4__;Constructor (_,_,fDxK:Array [Array [Array [Int ,052],0x4],0xF]){} }'''
        expect = '''Program([ClassDecl(Id(_H0),[MethodDecl(Id(Constructor),Instance,[param(Id(_33M),ArrayType(66,ArrayType(15,ArrayType(3,ArrayType(42,BoolType)))))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(h4__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(h4__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(h4__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($l_),ClassType(Id(h4__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(h4__)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(15,ArrayType(4,ArrayType(42,IntType)))),param(Id(_),ArrayType(15,ArrayType(4,ArrayType(42,IntType)))),param(Id(fDxK),ArrayType(15,ArrayType(4,ArrayType(42,IntType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 814))

    def test_815(self):
        line = '''Class _TX85{}Class m{Destructor (){}Val nI,T7:Array [Array [Array [Array [Array [Array [Array [Float ,0X5_650_2],68],0131],0131],01_6],9],0B1001011];Var $2_5Tr8:Float ;Val l:Array [Boolean ,4];}Class v310:h{}Class R{}'''
        expect = '''Program([ClassDecl(Id(_TX85),[]),ClassDecl(Id(m),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(nI),ArrayType(75,ArrayType(9,ArrayType(14,ArrayType(89,ArrayType(89,ArrayType(68,ArrayType(353538,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(T7),ArrayType(75,ArrayType(9,ArrayType(14,ArrayType(89,ArrayType(89,ArrayType(68,ArrayType(353538,FloatType))))))),None)),AttributeDecl(Static,VarDecl(Id($2_5Tr8),FloatType)),AttributeDecl(Instance,ConstDecl(Id(l),ArrayType(4,BoolType),None))]),ClassDecl(Id(v310),Id(h),[]),ClassDecl(Id(R),[])])'''
        self.assertTrue(TestAST.test(line, expect, 815))

    def test_816(self):
        line = '''Class P_7{Val $95_0_7,_:Float ;Destructor (){}Constructor (_7,_9qAB,n0_,c,J,X:Array [Array [Array [Array [Boolean ,0X8],036],036],49]){}x(_,_0_Q,f:Int ;_:m){__::$__5();} }'''
        expect = '''Program([ClassDecl(Id(P_7),[AttributeDecl(Static,ConstDecl(Id($95_0_7),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_7),ArrayType(49,ArrayType(30,ArrayType(30,ArrayType(8,BoolType))))),param(Id(_9qAB),ArrayType(49,ArrayType(30,ArrayType(30,ArrayType(8,BoolType))))),param(Id(n0_),ArrayType(49,ArrayType(30,ArrayType(30,ArrayType(8,BoolType))))),param(Id(c),ArrayType(49,ArrayType(30,ArrayType(30,ArrayType(8,BoolType))))),param(Id(J),ArrayType(49,ArrayType(30,ArrayType(30,ArrayType(8,BoolType))))),param(Id(X),ArrayType(49,ArrayType(30,ArrayType(30,ArrayType(8,BoolType)))))],Block([])),MethodDecl(Id(x),Instance,[param(Id(_),IntType),param(Id(_0_Q),IntType),param(Id(f),IntType),param(Id(_),ClassType(Id(m)))],Block([Call(Id(__),Id($__5),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 816))

    def test_817(self):
        line = '''Class wb9E:A_{}Class _3:Z3{$5d0(U_:Boolean ;f:_;N,__:Array [Array [Int ,0B1],0X9];T,w2:Array [Array [Array [Int ,04_7],0xD],022];o_k7,__W_4,_6:Array [Float ,0X63];_:Float ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(wb9E),Id(A_),[]),ClassDecl(Id(_3),Id(Z3),[MethodDecl(Id($5d0),Static,[param(Id(U_),BoolType),param(Id(f),ClassType(Id(_))),param(Id(N),ArrayType(9,ArrayType(1,IntType))),param(Id(__),ArrayType(9,ArrayType(1,IntType))),param(Id(T),ArrayType(18,ArrayType(13,ArrayType(39,IntType)))),param(Id(w2),ArrayType(18,ArrayType(13,ArrayType(39,IntType)))),param(Id(o_k7),ArrayType(99,FloatType)),param(Id(__W_4),ArrayType(99,FloatType)),param(Id(_6),ArrayType(99,FloatType)),param(Id(_),FloatType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 817))

    def test_818(self):
        line = '''Class F__xZ9:E{Constructor (){} }Class _{Constructor (H,j,FQ_:_;C,f__34:Boolean ;_:_;b,_,_:_hS;u9,_4,_1:_){} }Class _4Nl_{}Class ___{}Class i{Constructor (J:vv;_9,C_,_,_,_B7:_){} }Class G_R38:ca{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(F__xZ9),Id(E),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(H),ClassType(Id(_))),param(Id(j),ClassType(Id(_))),param(Id(FQ_),ClassType(Id(_))),param(Id(C),BoolType),param(Id(f__34),BoolType),param(Id(_),ClassType(Id(_))),param(Id(b),ClassType(Id(_hS))),param(Id(_),ClassType(Id(_hS))),param(Id(_),ClassType(Id(_hS))),param(Id(u9),ClassType(Id(_))),param(Id(_4),ClassType(Id(_))),param(Id(_1),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_4Nl_),[]),ClassDecl(Id(___),[]),ClassDecl(Id(i),[MethodDecl(Id(Constructor),Instance,[param(Id(J),ClassType(Id(vv))),param(Id(_9),ClassType(Id(_))),param(Id(C_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_B7),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(G_R38),Id(ca),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 818))

    def test_819(self):
        line = '''Class l4v_2i_7_f:__7{Constructor (p,R5:Array [Array [Array [Array [String ,0x49],056],0B1],0B111011]){} }Class _U9{_(g3,g:Array [Array [Array [Array [String ,6],0XB],8],9]){} }'''
        expect = '''Program([ClassDecl(Id(l4v_2i_7_f),Id(__7),[MethodDecl(Id(Constructor),Instance,[param(Id(p),ArrayType(59,ArrayType(1,ArrayType(46,ArrayType(73,StringType))))),param(Id(R5),ArrayType(59,ArrayType(1,ArrayType(46,ArrayType(73,StringType)))))],Block([]))]),ClassDecl(Id(_U9),[MethodDecl(Id(_),Instance,[param(Id(g3),ArrayType(9,ArrayType(8,ArrayType(11,ArrayType(6,StringType))))),param(Id(g),ArrayType(9,ArrayType(8,ArrayType(11,ArrayType(6,StringType)))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 819))

    def test_820(self):
        line = '''Class _x3{}Class x:_{Destructor (){}__7j(_:Array [Array [Array [Array [Int ,0b1],62],0x6B_5],62];_y,g_:Array [Array [Int ,014],0b111100];w2:Float ;Q:_44;_c1,Uz__:Float ){Continue ;_2::$_();}_(){} }'''
        expect = '''Program([ClassDecl(Id(_x3),[]),ClassDecl(Id(x),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(__7j),Instance,[param(Id(_),ArrayType(62,ArrayType(1717,ArrayType(62,ArrayType(1,IntType))))),param(Id(_y),ArrayType(60,ArrayType(12,IntType))),param(Id(g_),ArrayType(60,ArrayType(12,IntType))),param(Id(w2),FloatType),param(Id(Q),ClassType(Id(_44))),param(Id(_c1),FloatType),param(Id(Uz__),FloatType)],Block([Continue,Call(Id(_2),Id($_),[])])),MethodDecl(Id(_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 820))

    def test_821(self):
        line = '''Class _6:_{Destructor (){}sC(c,_w01,_C:Array [Array [Array [Array [Array [Float ,020_2],0B100100],07_04],0B100100],04];_,s,i:___H_D_;eH,_:Array [Array [Float ,93],0b11100];S,_3,H:jY;__:__d){} }'''
        expect = '''Program([ClassDecl(Id(_6),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(sC),Instance,[param(Id(c),ArrayType(4,ArrayType(36,ArrayType(452,ArrayType(36,ArrayType(130,FloatType)))))),param(Id(_w01),ArrayType(4,ArrayType(36,ArrayType(452,ArrayType(36,ArrayType(130,FloatType)))))),param(Id(_C),ArrayType(4,ArrayType(36,ArrayType(452,ArrayType(36,ArrayType(130,FloatType)))))),param(Id(_),ClassType(Id(___H_D_))),param(Id(s),ClassType(Id(___H_D_))),param(Id(i),ClassType(Id(___H_D_))),param(Id(eH),ArrayType(28,ArrayType(93,FloatType))),param(Id(_),ArrayType(28,ArrayType(93,FloatType))),param(Id(S),ClassType(Id(jY))),param(Id(_3),ClassType(Id(jY))),param(Id(H),ClassType(Id(jY))),param(Id(__),ClassType(Id(__d)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 821))

    def test_822(self):
        line = '''Class ____o_3{}Class _:_U{Var _A,$_,_,_:Float ;}Class v_Y{}Class e7_:_{Var b:String ;}Class a{}Class _:j__{}Class _f5tz{Val $3_:String ;Constructor (T:Array [Array [Int ,0b1],0X5]){} }'''
        expect = '''Program([ClassDecl(Id(____o_3),[]),ClassDecl(Id(_),Id(_U),[AttributeDecl(Instance,VarDecl(Id(_A),FloatType)),AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType))]),ClassDecl(Id(v_Y),[]),ClassDecl(Id(e7_),Id(_),[AttributeDecl(Instance,VarDecl(Id(b),StringType))]),ClassDecl(Id(a),[]),ClassDecl(Id(_),Id(j__),[]),ClassDecl(Id(_f5tz),[AttributeDecl(Static,ConstDecl(Id($3_),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(T),ArrayType(5,ArrayType(1,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 822))

    def test_823(self):
        line = '''Class K:j_Z_{Constructor (H_:Array [Array [String ,0b100111],33];_3h,_3:i;_5:Array [Boolean ,0x6]){}Constructor (F:Array [Array [Array [Array [String ,013],0B10],33],02]){} }Class d4:_{}Class xGdt7__:i03{}Class __{}'''
        expect = '''Program([ClassDecl(Id(K),Id(j_Z_),[MethodDecl(Id(Constructor),Instance,[param(Id(H_),ArrayType(33,ArrayType(39,StringType))),param(Id(_3h),ClassType(Id(i))),param(Id(_3),ClassType(Id(i))),param(Id(_5),ArrayType(6,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(F),ArrayType(2,ArrayType(33,ArrayType(2,ArrayType(11,StringType)))))],Block([]))]),ClassDecl(Id(d4),Id(_),[]),ClassDecl(Id(xGdt7__),Id(i03),[]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 823))

    def test_824(self):
        line = '''Class _P:_T{}Class _{Var $0b,Ys,__8H:Boolean ;i(_2:F39;N,k:Array [Array [Boolean ,0XB_E],0X42];l5_3,rHd,__:Float ){Continue ;} }Class _{Var U:Array [Boolean ,0b10_1_10_0_1_101_0101_1];}'''
        expect = '''Program([ClassDecl(Id(_P),Id(_T),[]),ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($0b),BoolType)),AttributeDecl(Instance,VarDecl(Id(Ys),BoolType)),AttributeDecl(Instance,VarDecl(Id(__8H),BoolType)),MethodDecl(Id(i),Instance,[param(Id(_2),ClassType(Id(F39))),param(Id(N),ArrayType(66,ArrayType(190,BoolType))),param(Id(k),ArrayType(66,ArrayType(190,BoolType))),param(Id(l5_3),FloatType),param(Id(rHd),FloatType),param(Id(__),FloatType)],Block([Continue]))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(U),ArrayType(22955,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 824))

    def test_825(self):
        line = '''Class q:u{Z(M2:Float ;v33_,_:Boolean ){}Constructor (_:_5;_Z,_,l,n:Array [Boolean ,0X1B]){Return ;}Var _,L:Array [Array [String ,0B1011010],0B1];Destructor (){ {} }}Class _{}'''
        expect = '''Program([ClassDecl(Id(q),Id(u),[MethodDecl(Id(Z),Instance,[param(Id(M2),FloatType),param(Id(v33_),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_5))),param(Id(_Z),ArrayType(27,BoolType)),param(Id(_),ArrayType(27,BoolType)),param(Id(l),ArrayType(27,BoolType)),param(Id(n),ArrayType(27,BoolType))],Block([Return()])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(90,StringType)))),AttributeDecl(Instance,VarDecl(Id(L),ArrayType(1,ArrayType(90,StringType)))),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 825))

    def test_826(self):
        line = '''Class _L:l26{Val $_H3,$__8Sw,_,$30:Float ;Var Zj:Array [Int ,0x12];$h(_8,_:OW_3;_:w;u3:Array [Boolean ,0xB_A];a:_;i:Array [Array [Boolean ,0x6],8];_,p,_,B_W,_,C,F,n_e,__,B92I,Z0:_){} }'''
        expect = '''Program([ClassDecl(Id(_L),Id(l26),[AttributeDecl(Static,ConstDecl(Id($_H3),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($__8Sw),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($30),FloatType,None)),AttributeDecl(Instance,VarDecl(Id(Zj),ArrayType(18,IntType))),MethodDecl(Id($h),Static,[param(Id(_8),ClassType(Id(OW_3))),param(Id(_),ClassType(Id(OW_3))),param(Id(_),ClassType(Id(w))),param(Id(u3),ArrayType(186,BoolType)),param(Id(a),ClassType(Id(_))),param(Id(i),ArrayType(8,ArrayType(6,BoolType))),param(Id(_),ClassType(Id(_))),param(Id(p),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(B_W),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(C),ClassType(Id(_))),param(Id(F),ClassType(Id(_))),param(Id(n_e),ClassType(Id(_))),param(Id(__),ClassType(Id(_))),param(Id(B92I),ClassType(Id(_))),param(Id(Z0),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 826))

    def test_827(self):
        line = '''Class k:_{Destructor (){}Val $_1__,$l_,$_,_n:Array [Array [String ,0X7],99];Val _8,h866_,$5,$8g,_0m1,n,$D86,$6_4_,$9___:Array [Array [Int ,055],0b11_0_0];Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(k),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($_1__),ArrayType(99,ArrayType(7,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($l_),ArrayType(99,ArrayType(7,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(99,ArrayType(7,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_n),ArrayType(99,ArrayType(7,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_8),ArrayType(12,ArrayType(45,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(h866_),ArrayType(12,ArrayType(45,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($5),ArrayType(12,ArrayType(45,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($8g),ArrayType(12,ArrayType(45,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_0m1),ArrayType(12,ArrayType(45,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(n),ArrayType(12,ArrayType(45,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($D86),ArrayType(12,ArrayType(45,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($6_4_),ArrayType(12,ArrayType(45,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($9___),ArrayType(12,ArrayType(45,IntType)),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 827))

    def test_828(self):
        line = '''Class _:_{Var e7_,$D1__,_9:Array [Array [Float ,6],6];}Class __q{Destructor (){}Constructor (K90,_:Array [String ,0x21_B]){} }Class S_6{}Class _:yR{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(e7_),ArrayType(6,ArrayType(6,FloatType)))),AttributeDecl(Static,VarDecl(Id($D1__),ArrayType(6,ArrayType(6,FloatType)))),AttributeDecl(Instance,VarDecl(Id(_9),ArrayType(6,ArrayType(6,FloatType))))]),ClassDecl(Id(__q),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(K90),ArrayType(539,StringType)),param(Id(_),ArrayType(539,StringType))],Block([]))]),ClassDecl(Id(S_6),[]),ClassDecl(Id(_),Id(yR),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 828))

    def test_829(self):
        line = '''Class u190W:_5D{Var $_,t:l_;}Class _z_:_{}Class Wn{}Class Z2{Destructor (){Return ;Continue ;Val _74,_,_,d:__h;}Constructor (M:Array [Array [Array [Array [Int ,0b11],0b110],0b110100],054];G:_1){}Val _:Array [Array [Array [String ,01],03_7],0B1];Var K,$_,$7,$9_:i_3;}'''
        expect = '''Program([ClassDecl(Id(u190W),Id(_5D),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(l_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(t),ClassType(Id(l_)),NullLiteral()))]),ClassDecl(Id(_z_),Id(_),[]),ClassDecl(Id(Wn),[]),ClassDecl(Id(Z2),[MethodDecl(Id(Destructor),Instance,[],Block([Return(),Continue,ConstDecl(Id(_74),ClassType(Id(__h)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(__h)),NullLiteral()),ConstDecl(Id(_),ClassType(Id(__h)),NullLiteral()),ConstDecl(Id(d),ClassType(Id(__h)),NullLiteral())])),MethodDecl(Id(Constructor),Instance,[param(Id(M),ArrayType(44,ArrayType(52,ArrayType(6,ArrayType(3,IntType))))),param(Id(G),ClassType(Id(_1)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(31,ArrayType(1,StringType))),None)),AttributeDecl(Instance,VarDecl(Id(K),ClassType(Id(i_3)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(i_3)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($7),ClassType(Id(i_3)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($9_),ClassType(Id(i_3)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 829))

    def test_830(self):
        line = '''Class Kl:_{}Class _:_{Val _,$X:Array [Array [Int ,713],0132];}Class X{$C3(_:_){} }Class _A_5p_:_G{Val _n,$8:String ;}Class _:cx{Constructor (t_7w,C:_;__,_:g_;v9_:String ;I,_:String ;S,_,_:Array [Array [Array [Float ,36],0B1_01],0B101]){Break ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(Kl),Id(_),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(90,ArrayType(713,IntType)),None)),AttributeDecl(Static,ConstDecl(Id($X),ArrayType(90,ArrayType(713,IntType)),None))]),ClassDecl(Id(X),[MethodDecl(Id($C3),Static,[param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_A_5p_),Id(_G),[AttributeDecl(Instance,ConstDecl(Id(_n),StringType,None)),AttributeDecl(Static,ConstDecl(Id($8),StringType,None))]),ClassDecl(Id(_),Id(cx),[MethodDecl(Id(Constructor),Instance,[param(Id(t_7w),ClassType(Id(_))),param(Id(C),ClassType(Id(_))),param(Id(__),ClassType(Id(g_))),param(Id(_),ClassType(Id(g_))),param(Id(v9_),StringType),param(Id(I),StringType),param(Id(_),StringType),param(Id(S),ArrayType(5,ArrayType(5,ArrayType(36,FloatType)))),param(Id(_),ArrayType(5,ArrayType(5,ArrayType(36,FloatType)))),param(Id(_),ArrayType(5,ArrayType(5,ArrayType(36,FloatType))))],Block([Break,Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 830))

    def test_831(self):
        line = '''Class _R_{Constructor (mUa,__5:_2;W0,h,_,_wM,n,q,_,N:_;_,_,_4:Array [Array [Boolean ,93],0B1];__,I3:Array [Array [Array [Array [Array [String ,0B1100001],030],43],0XC],031]){Val _1:Array [Array [String ,0B10],0b100011];} }Class e6___:__0{}Class _{$z(){} }'''
        expect = '''Program([ClassDecl(Id(_R_),[MethodDecl(Id(Constructor),Instance,[param(Id(mUa),ClassType(Id(_2))),param(Id(__5),ClassType(Id(_2))),param(Id(W0),ClassType(Id(_))),param(Id(h),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_wM),ClassType(Id(_))),param(Id(n),ClassType(Id(_))),param(Id(q),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(N),ClassType(Id(_))),param(Id(_),ArrayType(1,ArrayType(93,BoolType))),param(Id(_),ArrayType(1,ArrayType(93,BoolType))),param(Id(_4),ArrayType(1,ArrayType(93,BoolType))),param(Id(__),ArrayType(25,ArrayType(12,ArrayType(43,ArrayType(24,ArrayType(97,StringType)))))),param(Id(I3),ArrayType(25,ArrayType(12,ArrayType(43,ArrayType(24,ArrayType(97,StringType))))))],Block([ConstDecl(Id(_1),ArrayType(35,ArrayType(2,StringType)),None)]))]),ClassDecl(Id(e6___),Id(__0),[]),ClassDecl(Id(_),[MethodDecl(Id($z),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 831))

    def test_832(self):
        line = '''Class __7_8:_1_U{}Class _5__{}Class _{Constructor (){Val _r:String ;} }Class _:l_{_(A:Array [Array [Int ,8],0x2B];_b,h_:Boolean ;WCA4_,O6,H55__:y_;wm,_,__Qf:Boolean ){} }Class y{}'''
        expect = '''Program([ClassDecl(Id(__7_8),Id(_1_U),[]),ClassDecl(Id(_5__),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([ConstDecl(Id(_r),StringType,None)]))]),ClassDecl(Id(_),Id(l_),[MethodDecl(Id(_),Instance,[param(Id(A),ArrayType(43,ArrayType(8,IntType))),param(Id(_b),BoolType),param(Id(h_),BoolType),param(Id(WCA4_),ClassType(Id(y_))),param(Id(O6),ClassType(Id(y_))),param(Id(H55__),ClassType(Id(y_))),param(Id(wm),BoolType),param(Id(_),BoolType),param(Id(__Qf),BoolType)],Block([]))]),ClassDecl(Id(y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 832))

    def test_833(self):
        line = '''Class _{Constructor (){}q_qx_(__,__x88_,_,D,_:String ;_:Float ;p:Float ;_t:Array [Array [Array [Int ,01],0XC],0B1_0];_,_:Int ;S3:Array [Array [Array [Int ,0x6F],07_4],0B1_1_1_1_0]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(q_qx_),Instance,[param(Id(__),StringType),param(Id(__x88_),StringType),param(Id(_),StringType),param(Id(D),StringType),param(Id(_),StringType),param(Id(_),FloatType),param(Id(p),FloatType),param(Id(_t),ArrayType(2,ArrayType(12,ArrayType(1,IntType)))),param(Id(_),IntType),param(Id(_),IntType),param(Id(S3),ArrayType(30,ArrayType(60,ArrayType(111,IntType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 833))

    def test_834(self):
        line = '''Class _:F{Constructor (v_:Boolean ){}Constructor (_3:Array [Array [Array [String ,0X8_15_5],0b1000101],021]){}Var $_,$LZ:Array [Array [Array [String ,0B1001111_1],4_4],77];}'''
        expect = '''Program([ClassDecl(Id(_),Id(F),[MethodDecl(Id(Constructor),Instance,[param(Id(v_),BoolType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_3),ArrayType(17,ArrayType(69,ArrayType(33109,StringType))))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(77,ArrayType(44,ArrayType(159,StringType))))),AttributeDecl(Static,VarDecl(Id($LZ),ArrayType(77,ArrayType(44,ArrayType(159,StringType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 834))

    def test_835(self):
        line = '''Class V4S1{Var a3_,$C__,$_f,$3_:X;}Class _{}Class _:gb9{_(){}$1(_:String ;e5:Array [String ,0x5];_,ka,_:Int ){}Val $6,$o,a_,_:String ;}Class _8:p{Val v,_9,_:Array [Float ,0xD];}Class j{}'''
        expect = '''Program([ClassDecl(Id(V4S1),[AttributeDecl(Instance,VarDecl(Id(a3_),ClassType(Id(X)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($C__),ClassType(Id(X)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_f),ClassType(Id(X)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($3_),ClassType(Id(X)),NullLiteral()))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(gb9),[MethodDecl(Id(_),Instance,[],Block([])),MethodDecl(Id($1),Static,[param(Id(_),StringType),param(Id(e5),ArrayType(5,StringType)),param(Id(_),IntType),param(Id(ka),IntType),param(Id(_),IntType)],Block([])),AttributeDecl(Static,ConstDecl(Id($6),StringType,None)),AttributeDecl(Static,ConstDecl(Id($o),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(a_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None))]),ClassDecl(Id(_8),Id(p),[AttributeDecl(Instance,ConstDecl(Id(v),ArrayType(13,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_9),ArrayType(13,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(13,FloatType),None))]),ClassDecl(Id(j),[])])'''
        self.assertTrue(TestAST.test(line, expect, 835))

    def test_836(self):
        line = '''Class jm{Destructor (){}Constructor (L5:_6p_){} }Class __{}Class __{}Class g1{Val _:Array [Float ,02_5];Val __,__:g2_3;Var $8,Jp,_,$__,$__5,$S9,_k,$m,$6_,$0:Boolean ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(jm),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(L5),ClassType(Id(_6p_)))],Block([]))]),ClassDecl(Id(__),[]),ClassDecl(Id(__),[]),ClassDecl(Id(g1),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(21,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(g2_3)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(g2_3)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($8),BoolType)),AttributeDecl(Instance,VarDecl(Id(Jp),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($__),BoolType)),AttributeDecl(Static,VarDecl(Id($__5),BoolType)),AttributeDecl(Static,VarDecl(Id($S9),BoolType)),AttributeDecl(Instance,VarDecl(Id(_k),BoolType)),AttributeDecl(Static,VarDecl(Id($m),BoolType)),AttributeDecl(Static,VarDecl(Id($6_),BoolType)),AttributeDecl(Static,VarDecl(Id($0),BoolType)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 836))

    def test_837(self):
        line = '''Class _{Val __,g4,$71,$p_20:Int ;Constructor (r,Q:Array [Array [Array [Array [Float ,0x5D],01_1_1],0110],6_5_3];__:Array [Array [String ,0X2_61_6],0110];_d:Array [Array [Array [String ,0X34],0xF],01_4];r,_:Boolean ;d:__;_,___:Array [Array [Boolean ,0110],0X7]){ {} }}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(__),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(g4),IntType,None)),AttributeDecl(Static,ConstDecl(Id($71),IntType,None)),AttributeDecl(Static,ConstDecl(Id($p_20),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(r),ArrayType(653,ArrayType(72,ArrayType(73,ArrayType(93,FloatType))))),param(Id(Q),ArrayType(653,ArrayType(72,ArrayType(73,ArrayType(93,FloatType))))),param(Id(__),ArrayType(72,ArrayType(9750,StringType))),param(Id(_d),ArrayType(12,ArrayType(15,ArrayType(52,StringType)))),param(Id(r),BoolType),param(Id(_),BoolType),param(Id(d),ClassType(Id(__))),param(Id(_),ArrayType(7,ArrayType(72,BoolType))),param(Id(___),ArrayType(7,ArrayType(72,BoolType)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 837))

    def test_838(self):
        line = '''Class nT7{$_A(_,_u9:Boolean ;_:_z;_hAZ:Array [String ,06];M:_7){}Var _b:Array [Boolean ,0B1];$1(_8,_B8,_,_,_,_,_,__,_E_L9f:Float ;O1mD_E,_:Array [Int ,9];ikm,M:__;Ug:Float ;j,D__,j,_j_:Array [Float ,0b1001111];_:Array [Array [Array [String ,0x5A],4_1_50_6],2]){} }Class r_qNP:l3__{}Class _:M{}'''
        expect = '''Program([ClassDecl(Id(nT7),[MethodDecl(Id($_A),Static,[param(Id(_),BoolType),param(Id(_u9),BoolType),param(Id(_),ClassType(Id(_z))),param(Id(_hAZ),ArrayType(6,StringType)),param(Id(M),ClassType(Id(_7)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_b),ArrayType(1,BoolType))),MethodDecl(Id($1),Static,[param(Id(_8),FloatType),param(Id(_B8),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(_E_L9f),FloatType),param(Id(O1mD_E),ArrayType(9,IntType)),param(Id(_),ArrayType(9,IntType)),param(Id(ikm),ClassType(Id(__))),param(Id(M),ClassType(Id(__))),param(Id(Ug),FloatType),param(Id(j),ArrayType(79,FloatType)),param(Id(D__),ArrayType(79,FloatType)),param(Id(j),ArrayType(79,FloatType)),param(Id(_j_),ArrayType(79,FloatType)),param(Id(_),ArrayType(2,ArrayType(41506,ArrayType(90,StringType))))],Block([]))]),ClassDecl(Id(r_qNP),Id(l3__),[]),ClassDecl(Id(_),Id(M),[])])'''
        self.assertTrue(TestAST.test(line, expect, 838))

    def test_839(self):
        line = '''Class _{_(v_:Array [Boolean ,9_1];a,_:String ;_4,K,MP,x:Float ;B,E4,_y2,i,C83f5,_,wx,xO8:Array [Boolean ,0X31_3];q_,_b__,__,A_,__7:Float ){Break ;} }Class _j0G:_M_b_3q2{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[param(Id(v_),ArrayType(91,BoolType)),param(Id(a),StringType),param(Id(_),StringType),param(Id(_4),FloatType),param(Id(K),FloatType),param(Id(MP),FloatType),param(Id(x),FloatType),param(Id(B),ArrayType(787,BoolType)),param(Id(E4),ArrayType(787,BoolType)),param(Id(_y2),ArrayType(787,BoolType)),param(Id(i),ArrayType(787,BoolType)),param(Id(C83f5),ArrayType(787,BoolType)),param(Id(_),ArrayType(787,BoolType)),param(Id(wx),ArrayType(787,BoolType)),param(Id(xO8),ArrayType(787,BoolType)),param(Id(q_),FloatType),param(Id(_b__),FloatType),param(Id(__),FloatType),param(Id(A_),FloatType),param(Id(__7),FloatType)],Block([Break]))]),ClassDecl(Id(_j0G),Id(_M_b_3q2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 839))

    def test_840(self):
        line = '''Class _H{Destructor (){}$3_(P2__,_l,_A_,_6w:Array [Array [Array [Array [Array [Boolean ,041],0b111011],0b111011],100],075];_,j,_:Int ;y13,W,_o:v){}Constructor (G_k:_){}Destructor (){}$_(z932V5,E_,_N:Float ;K1:Array [String ,0x1E];L5:Array [Array [String ,0XD],075]){} }'''
        expect = '''Program([ClassDecl(Id(_H),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($3_),Static,[param(Id(P2__),ArrayType(61,ArrayType(100,ArrayType(59,ArrayType(59,ArrayType(33,BoolType)))))),param(Id(_l),ArrayType(61,ArrayType(100,ArrayType(59,ArrayType(59,ArrayType(33,BoolType)))))),param(Id(_A_),ArrayType(61,ArrayType(100,ArrayType(59,ArrayType(59,ArrayType(33,BoolType)))))),param(Id(_6w),ArrayType(61,ArrayType(100,ArrayType(59,ArrayType(59,ArrayType(33,BoolType)))))),param(Id(_),IntType),param(Id(j),IntType),param(Id(_),IntType),param(Id(y13),ClassType(Id(v))),param(Id(W),ClassType(Id(v))),param(Id(_o),ClassType(Id(v)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(G_k),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_),Static,[param(Id(z932V5),FloatType),param(Id(E_),FloatType),param(Id(_N),FloatType),param(Id(K1),ArrayType(30,StringType)),param(Id(L5),ArrayType(61,ArrayType(13,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 840))

    def test_841(self):
        line = '''Class __:Uh{$4(_l,c_,e_l,Y,__U:_m_;k:A;s,M_____1cR_48:String ){}$S(){Break ;} }Class __Y9_:U{}Class N:r_{$_(){}Constructor (k_3,WlYj,_:__8_;vf_R4,___:String ){} }Class i5_{}'''
        expect = '''Program([ClassDecl(Id(__),Id(Uh),[MethodDecl(Id($4),Static,[param(Id(_l),ClassType(Id(_m_))),param(Id(c_),ClassType(Id(_m_))),param(Id(e_l),ClassType(Id(_m_))),param(Id(Y),ClassType(Id(_m_))),param(Id(__U),ClassType(Id(_m_))),param(Id(k),ClassType(Id(A))),param(Id(s),StringType),param(Id(M_____1cR_48),StringType)],Block([])),MethodDecl(Id($S),Static,[],Block([Break]))]),ClassDecl(Id(__Y9_),Id(U),[]),ClassDecl(Id(N),Id(r_),[MethodDecl(Id($_),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(k_3),ClassType(Id(__8_))),param(Id(WlYj),ClassType(Id(__8_))),param(Id(_),ClassType(Id(__8_))),param(Id(vf_R4),StringType),param(Id(___),StringType)],Block([]))]),ClassDecl(Id(i5_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 841))

    def test_842(self):
        line = '''Class c{Val j_m,K__,$6m0:Array [Boolean ,0B1010001];Val $S_X:P;}Class _y:_{}Class t{}Class j:_U{Constructor (___:Int ){}Var $_:Array [Array [Array [Array [Array [Boolean ,0B1010001],07_6_3_3],044],044],0xE_7_D_F];Constructor (){} }Class H2___{}Class Z7:_{Val $O3,_0,_,$uk:_8;}Class _5_{}'''
        expect = '''Program([ClassDecl(Id(c),[AttributeDecl(Instance,ConstDecl(Id(j_m),ArrayType(81,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(K__),ArrayType(81,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($6m0),ArrayType(81,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($S_X),ClassType(Id(P)),NullLiteral()))]),ClassDecl(Id(_y),Id(_),[]),ClassDecl(Id(t),[]),ClassDecl(Id(j),Id(_U),[MethodDecl(Id(Constructor),Instance,[param(Id(___),IntType)],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(59359,ArrayType(36,ArrayType(36,ArrayType(3995,ArrayType(81,BoolType))))))),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(H2___),[]),ClassDecl(Id(Z7),Id(_),[AttributeDecl(Static,ConstDecl(Id($O3),ClassType(Id(_8)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_0),ClassType(Id(_8)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_8)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($uk),ClassType(Id(_8)),NullLiteral()))]),ClassDecl(Id(_5_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 842))

    def test_843(self):
        line = '''Class _:T{}Class _{}Class _1{Var $e8w:Array [Array [Array [Array [String ,0B1],0127],05],0X80F];Val $q:String ;Constructor (_:W){} }Class _:Z{Var F,_,$5,$o3,$9__:Array [Boolean ,0b1];}'''
        expect = '''Program([ClassDecl(Id(_),Id(T),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_1),[AttributeDecl(Static,VarDecl(Id($e8w),ArrayType(2063,ArrayType(5,ArrayType(87,ArrayType(1,StringType)))))),AttributeDecl(Static,ConstDecl(Id($q),StringType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(W)))],Block([]))]),ClassDecl(Id(_),Id(Z),[AttributeDecl(Instance,VarDecl(Id(F),ArrayType(1,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($5),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($o3),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($9__),ArrayType(1,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 843))

    def test_844(self):
        line = '''Class __S7:u{}Class IE4_{Val $a:Int ;Destructor (){ {} }}Class _b{Constructor (_,C:w_h){}T(_:Boolean ;_3_:Array [Array [Float ,0B1010111],0b10];_,o,_,_T:Float ;j,__:Float ){Continue ;}Destructor (){}Destructor (){}Val $4Rh8_O,$_2:Array [Float ,0b1_0_1];Var $_y_0Ys,$_,$_:Array [Array [Int ,0x20],043_3];}'''
        expect = '''Program([ClassDecl(Id(__S7),Id(u),[]),ClassDecl(Id(IE4_),[AttributeDecl(Static,ConstDecl(Id($a),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))]),ClassDecl(Id(_b),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(w_h))),param(Id(C),ClassType(Id(w_h)))],Block([])),MethodDecl(Id(T),Instance,[param(Id(_),BoolType),param(Id(_3_),ArrayType(2,ArrayType(87,FloatType))),param(Id(_),FloatType),param(Id(o),FloatType),param(Id(_),FloatType),param(Id(_T),FloatType),param(Id(j),FloatType),param(Id(__),FloatType)],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($4Rh8_O),ArrayType(5,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_2),ArrayType(5,FloatType),None)),AttributeDecl(Static,VarDecl(Id($_y_0Ys),ArrayType(283,ArrayType(32,IntType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(283,ArrayType(32,IntType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(283,ArrayType(32,IntType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 844))

    def test_845(self):
        line = '''Class B{}Class h:QD_{Destructor (){} }Class V:_{_29_(x_,_,D,r,_144m,O6_6K:Array [Array [Float ,0120],63];_3,z:Array [String ,0B11]){Var lX_,_6:Array [Array [Array [Array [Int ,0b11011],0x50],0B111010],0B111_0];} }'''
        expect = '''Program([ClassDecl(Id(B),[]),ClassDecl(Id(h),Id(QD_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(V),Id(_),[MethodDecl(Id(_29_),Instance,[param(Id(x_),ArrayType(63,ArrayType(80,FloatType))),param(Id(_),ArrayType(63,ArrayType(80,FloatType))),param(Id(D),ArrayType(63,ArrayType(80,FloatType))),param(Id(r),ArrayType(63,ArrayType(80,FloatType))),param(Id(_144m),ArrayType(63,ArrayType(80,FloatType))),param(Id(O6_6K),ArrayType(63,ArrayType(80,FloatType))),param(Id(_3),ArrayType(3,StringType)),param(Id(z),ArrayType(3,StringType))],Block([VarDecl(Id(lX_),ArrayType(14,ArrayType(58,ArrayType(80,ArrayType(27,IntType))))),VarDecl(Id(_6),ArrayType(14,ArrayType(58,ArrayType(80,ArrayType(27,IntType)))))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 845))

    def test_846(self):
        line = '''Class _:_{Var j5:Array [Array [Array [Array [Array [Array [Boolean ,0B111],0x5D],07],4_4],0X4F],0b111110];}Class X{r(I_:Array [Array [Boolean ,0b111110],0B111];_M3_:k;__:Array [Array [Array [Array [Array [Array [Float ,0xCA_5F_0B_0],1_5],0X5B0],70_09_60_47],60],0X4F];A:_qHh;J,_:x_){}O(x:String ){Return ;Continue ;} }Class F:f9{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,VarDecl(Id(j5),ArrayType(62,ArrayType(79,ArrayType(44,ArrayType(7,ArrayType(93,ArrayType(7,BoolType))))))))]),ClassDecl(Id(X),[MethodDecl(Id(r),Instance,[param(Id(I_),ArrayType(7,ArrayType(62,BoolType))),param(Id(_M3_),ClassType(Id(k))),param(Id(__),ArrayType(79,ArrayType(60,ArrayType(70096047,ArrayType(1456,ArrayType(15,ArrayType(212201648,FloatType))))))),param(Id(A),ClassType(Id(_qHh))),param(Id(J),ClassType(Id(x_))),param(Id(_),ClassType(Id(x_)))],Block([])),MethodDecl(Id(O),Instance,[param(Id(x),StringType)],Block([Return(),Continue]))]),ClassDecl(Id(F),Id(f9),[])])'''
        self.assertTrue(TestAST.test(line, expect, 846))

    def test_847(self):
        line = '''Class _{Constructor (J,mRvK_:Int ){}Constructor (z_53q3t9p__971,_,_F_4x9n_1,_G_4,d_A_:String ;Xq1_5:Int ;_,_C_z,Sf_3:Array [Array [Array [Array [Float ,0x38],0b1100001],07],0x38];c:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(J),IntType),param(Id(mRvK_),IntType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(z_53q3t9p__971),StringType),param(Id(_),StringType),param(Id(_F_4x9n_1),StringType),param(Id(_G_4),StringType),param(Id(d_A_),StringType),param(Id(Xq1_5),IntType),param(Id(_),ArrayType(56,ArrayType(7,ArrayType(97,ArrayType(56,FloatType))))),param(Id(_C_z),ArrayType(56,ArrayType(7,ArrayType(97,ArrayType(56,FloatType))))),param(Id(Sf_3),ArrayType(56,ArrayType(7,ArrayType(97,ArrayType(56,FloatType))))),param(Id(c),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 847))

    def test_848(self):
        line = '''Class _1h{s0_(fV_,__,w,_,_K_,_,Z_D,_,h,j,L_,_,U_gPS,_,w_J,_:Array [Boolean ,0X1]){ {} }}Class _{_4(c___n5,Q6_3_Q_,U,_:Array [Array [Float ,0B1100011],0x37]){}Destructor (){ {} }Val $__L:Array [Array [Int ,07],07];}'''
        expect = '''Program([ClassDecl(Id(_1h),[MethodDecl(Id(s0_),Instance,[param(Id(fV_),ArrayType(1,BoolType)),param(Id(__),ArrayType(1,BoolType)),param(Id(w),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(_K_),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(Z_D),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(h),ArrayType(1,BoolType)),param(Id(j),ArrayType(1,BoolType)),param(Id(L_),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(U_gPS),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(w_J),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType))],Block([Block([])]))]),ClassDecl(Id(_),[MethodDecl(Id(_4),Instance,[param(Id(c___n5),ArrayType(55,ArrayType(99,FloatType))),param(Id(Q6_3_Q_),ArrayType(55,ArrayType(99,FloatType))),param(Id(U),ArrayType(55,ArrayType(99,FloatType))),param(Id(_),ArrayType(55,ArrayType(99,FloatType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),AttributeDecl(Static,ConstDecl(Id($__L),ArrayType(7,ArrayType(7,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 848))

    def test_849(self):
        line = '''Class j:b{Constructor (){} }Class _{}Class b_{Var $741_:Int ;Constructor (R6__,_c,_K,_:Int ;_j,w:Array [String ,053];_:Array [String ,9];vq,o20:String ){} }Class _{$7__(){}Var h:Array [Int ,0b1];Var _c,PD9_H_:_;}Class _{Destructor (){} }Class _9:_{}'''
        expect = '''Program([ClassDecl(Id(j),Id(b),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(b_),[AttributeDecl(Static,VarDecl(Id($741_),IntType)),MethodDecl(Id(Constructor),Instance,[param(Id(R6__),IntType),param(Id(_c),IntType),param(Id(_K),IntType),param(Id(_),IntType),param(Id(_j),ArrayType(43,StringType)),param(Id(w),ArrayType(43,StringType)),param(Id(_),ArrayType(9,StringType)),param(Id(vq),StringType),param(Id(o20),StringType)],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id($7__),Static,[],Block([])),AttributeDecl(Instance,VarDecl(Id(h),ArrayType(1,IntType))),AttributeDecl(Instance,VarDecl(Id(_c),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(PD9_H_),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_9),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 849))

    def test_850(self):
        line = '''Class z:e{Val _,$F3,$e:Array [Float ,016];V7f5_(){}$0t(HKlZ,z,Dh:_5_){k::$_();} }Class _:a{Destructor (){}Val M:Boolean ;E(p_:S_;_5___,_640:String ;__:Array [Boolean ,77]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(z),Id(e),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(14,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($F3),ArrayType(14,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($e),ArrayType(14,FloatType),None)),MethodDecl(Id(V7f5_),Instance,[],Block([])),MethodDecl(Id($0t),Static,[param(Id(HKlZ),ClassType(Id(_5_))),param(Id(z),ClassType(Id(_5_))),param(Id(Dh),ClassType(Id(_5_)))],Block([Call(Id(k),Id($_),[])]))]),ClassDecl(Id(_),Id(a),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(M),BoolType,None)),MethodDecl(Id(E),Instance,[param(Id(p_),ClassType(Id(S_))),param(Id(_5___),StringType),param(Id(_640),StringType),param(Id(__),ArrayType(77,BoolType))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 850))

    def test_851(self):
        line = '''Class _{}Class _64:_{Destructor (){}Constructor (_:Array [Array [Array [Array [Array [Array [Boolean ,0106],84],0b110001],01],0106],84]){}$I5l_(_E,__,_M__:String ){}Val $j:_r;Destructor (){}Var w_p6Y:A___n3;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_64),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(84,ArrayType(70,ArrayType(1,ArrayType(49,ArrayType(84,ArrayType(70,BoolType)))))))],Block([])),MethodDecl(Id($I5l_),Static,[param(Id(_E),StringType),param(Id(__),StringType),param(Id(_M__),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($j),ClassType(Id(_r)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(w_p6Y),ClassType(Id(A___n3)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 851))

    def test_852(self):
        line = '''Class d0:p{Destructor (){Var M:Array [Array [Array [String ,27],0b1_1_11],0b1];Return ;}Constructor (m:String ;_,_Pr,J_8:String ;__8p1_0,z__Q:Array [Array [Array [Array [String ,0143],0b10],0X2],05]){_L_2::$_Y();} }'''
        expect = '''Program([ClassDecl(Id(d0),Id(p),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(M),ArrayType(1,ArrayType(15,ArrayType(27,StringType)))),Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(m),StringType),param(Id(_),StringType),param(Id(_Pr),StringType),param(Id(J_8),StringType),param(Id(__8p1_0),ArrayType(5,ArrayType(2,ArrayType(2,ArrayType(99,StringType))))),param(Id(z__Q),ArrayType(5,ArrayType(2,ArrayType(2,ArrayType(99,StringType)))))],Block([Call(Id(_L_2),Id($_Y),[])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 852))

    def test_853(self):
        line = '''Class ia7_{Destructor (){}Constructor (P1,_7__66:Array [Float ,0b111000];_5_,_3,_,__,_6Fr:Float ;P3_,p,M_,E,A:tG;_:String ){}Constructor (_n:String ;M:Array [Boolean ,0X2B]){ {} }Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(ia7_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(P1),ArrayType(56,FloatType)),param(Id(_7__66),ArrayType(56,FloatType)),param(Id(_5_),FloatType),param(Id(_3),FloatType),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(_6Fr),FloatType),param(Id(P3_),ClassType(Id(tG))),param(Id(p),ClassType(Id(tG))),param(Id(M_),ClassType(Id(tG))),param(Id(E),ClassType(Id(tG))),param(Id(A),ClassType(Id(tG))),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_n),StringType),param(Id(M),ArrayType(43,BoolType))],Block([Block([])])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 853))

    def test_854(self):
        line = '''Class _I:PY{Constructor (_1:String ){ {Break ;Continue ;Return ;}Break ;Break ;Continue ;Var y_:Array [Int ,2];j_6h::$O._().D7.I();Var F:Array [Array [Float ,0B1],0B1];} }'''
        expect = '''Program([ClassDecl(Id(_I),Id(PY),[MethodDecl(Id(Constructor),Instance,[param(Id(_1),StringType)],Block([Block([Break,Continue,Return()]),Break,Break,Continue,VarDecl(Id(y_),ArrayType(2,IntType)),Call(FieldAccess(CallExpr(FieldAccess(Id(j_6h),Id($O)),Id(_),[]),Id(D7)),Id(I),[]),VarDecl(Id(F),ArrayType(1,ArrayType(1,FloatType)))]))])])'''
        self.assertTrue(TestAST.test(line, expect, 854))

    def test_855(self):
        line = '''Class _83k7:_Y_w{Destructor (){}Var L91,_4,$20r:Array [Array [Int ,016],0B1100011];Val _1,__,$_7y,_4,$93:gx;$_(__0:_;X7:Array [Array [Array [Float ,5_9259],02],0B1100011]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_83k7),Id(_Y_w),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(L91),ArrayType(99,ArrayType(14,IntType)))),AttributeDecl(Instance,VarDecl(Id(_4),ArrayType(99,ArrayType(14,IntType)))),AttributeDecl(Static,VarDecl(Id($20r),ArrayType(99,ArrayType(14,IntType)))),AttributeDecl(Instance,ConstDecl(Id(_1),ClassType(Id(gx)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(gx)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_7y),ClassType(Id(gx)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_4),ClassType(Id(gx)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($93),ClassType(Id(gx)),NullLiteral())),MethodDecl(Id($_),Static,[param(Id(__0),ClassType(Id(_))),param(Id(X7),ArrayType(99,ArrayType(2,ArrayType(59259,FloatType))))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 855))

    def test_856(self):
        line = '''Class j:wN1r{Constructor (E:Array [Boolean ,0140];O,N_4,_6:Array [Array [Float ,76],76];C,_:Array [Array [Array [Float ,07],0b1000011],5_7];X9,_,_:Array [Array [String ,0B111000],76];_:Array [Array [Array [Int ,0x4B],02_14],0B1];__AL:j){} }'''
        expect = '''Program([ClassDecl(Id(j),Id(wN1r),[MethodDecl(Id(Constructor),Instance,[param(Id(E),ArrayType(96,BoolType)),param(Id(O),ArrayType(76,ArrayType(76,FloatType))),param(Id(N_4),ArrayType(76,ArrayType(76,FloatType))),param(Id(_6),ArrayType(76,ArrayType(76,FloatType))),param(Id(C),ArrayType(57,ArrayType(67,ArrayType(7,FloatType)))),param(Id(_),ArrayType(57,ArrayType(67,ArrayType(7,FloatType)))),param(Id(X9),ArrayType(76,ArrayType(56,StringType))),param(Id(_),ArrayType(76,ArrayType(56,StringType))),param(Id(_),ArrayType(76,ArrayType(56,StringType))),param(Id(_),ArrayType(1,ArrayType(140,ArrayType(75,IntType)))),param(Id(__AL),ClassType(Id(j)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 856))

    def test_857(self):
        line = '''Class _:_{}Class _:_{Destructor (){Continue ;}Val $8,qu_:Array [Array [Boolean ,0X5],2];Constructor (__:Int ;_7,M_,__:Array [Array [Array [Array [Array [Int ,0xE_3],0XD_2],0B1010111],0b1100100],2]){p::$_();}Constructor (l_U:Array [Int ,3_1];A03,uJ8,_:Int ;_2:Array [Float ,0B1010111]){Return ;}Constructor (_,q,D_O:Array [Boolean ,06]){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(2,ArrayType(5,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(qu_),ArrayType(2,ArrayType(5,BoolType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__),IntType),param(Id(_7),ArrayType(2,ArrayType(100,ArrayType(87,ArrayType(210,ArrayType(227,IntType)))))),param(Id(M_),ArrayType(2,ArrayType(100,ArrayType(87,ArrayType(210,ArrayType(227,IntType)))))),param(Id(__),ArrayType(2,ArrayType(100,ArrayType(87,ArrayType(210,ArrayType(227,IntType))))))],Block([Call(Id(p),Id($_),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(l_U),ArrayType(31,IntType)),param(Id(A03),IntType),param(Id(uJ8),IntType),param(Id(_),IntType),param(Id(_2),ArrayType(87,FloatType))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(6,BoolType)),param(Id(q),ArrayType(6,BoolType)),param(Id(D_O),ArrayType(6,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 857))

    def test_858(self):
        line = '''Class _9_op:nz9c{}Class p_:_{}Class M{_(_,Y:Array [String ,99];_,_:Int ;HF:c;____,_,W,_,_:Array [Boolean ,0XB_1];Y:____5_4_7V_;_,P,R:Float ;_:Array [Int ,0B1_11]){} }Class __e100l31:bg{}'''
        expect = '''Program([ClassDecl(Id(_9_op),Id(nz9c),[]),ClassDecl(Id(p_),Id(_),[]),ClassDecl(Id(M),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(99,StringType)),param(Id(Y),ArrayType(99,StringType)),param(Id(_),IntType),param(Id(_),IntType),param(Id(HF),ClassType(Id(c))),param(Id(____),ArrayType(177,BoolType)),param(Id(_),ArrayType(177,BoolType)),param(Id(W),ArrayType(177,BoolType)),param(Id(_),ArrayType(177,BoolType)),param(Id(_),ArrayType(177,BoolType)),param(Id(Y),ClassType(Id(____5_4_7V_))),param(Id(_),FloatType),param(Id(P),FloatType),param(Id(R),FloatType),param(Id(_),ArrayType(7,IntType))],Block([]))]),ClassDecl(Id(__e100l31),Id(bg),[])])'''
        self.assertTrue(TestAST.test(line, expect, 858))

    def test_859(self):
        line = '''Class __{}Class _2i:f{}Class s:___{}Class _8o____{Var _r,$_,J:Array [Array [Array [Array [Array [Int ,0X34],0116],74],0X4],023024344_1_174];}Class oc5_CE{}Class _Hdi1{}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(_2i),Id(f),[]),ClassDecl(Id(s),Id(___),[]),ClassDecl(Id(_8o____),[AttributeDecl(Instance,VarDecl(Id(_r),ArrayType(20443972220,ArrayType(4,ArrayType(74,ArrayType(78,ArrayType(52,IntType))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(20443972220,ArrayType(4,ArrayType(74,ArrayType(78,ArrayType(52,IntType))))))),AttributeDecl(Instance,VarDecl(Id(J),ArrayType(20443972220,ArrayType(4,ArrayType(74,ArrayType(78,ArrayType(52,IntType)))))))]),ClassDecl(Id(oc5_CE),[]),ClassDecl(Id(_Hdi1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 859))

    def test_860(self):
        line = '''Class _1{x8_(__C:Array [Array [Float ,0X4DC_E6_7],0xB]){}Constructor (_9:String ;v_:Array [Array [Float ,0b1_0],0xB];KX,_,___3,_:Array [Int ,0B11_1_100];f1A:Array [Array [Array [Int ,0X27],04],0B11100]){} }'''
        expect = '''Program([ClassDecl(Id(_1),[MethodDecl(Id(x8_),Instance,[param(Id(__C),ArrayType(11,ArrayType(5099111,FloatType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_9),StringType),param(Id(v_),ArrayType(11,ArrayType(2,FloatType))),param(Id(KX),ArrayType(60,IntType)),param(Id(_),ArrayType(60,IntType)),param(Id(___3),ArrayType(60,IntType)),param(Id(_),ArrayType(60,IntType)),param(Id(f1A),ArrayType(28,ArrayType(4,ArrayType(39,IntType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 860))

    def test_861(self):
        line = '''Class x:_65{Val i3__:Array [Array [Array [Float ,0B1_10_1],0X39],4_0];Val $9,h_,_o:_i;}Class x___9{}Class _V_kM_R8{}Class J:_3__96{}Class o_:Q9{Var $B__e,u:Int ;}Class A{}'''
        expect = '''Program([ClassDecl(Id(x),Id(_65),[AttributeDecl(Instance,ConstDecl(Id(i3__),ArrayType(40,ArrayType(57,ArrayType(13,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($9),ClassType(Id(_i)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(h_),ClassType(Id(_i)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_o),ClassType(Id(_i)),NullLiteral()))]),ClassDecl(Id(x___9),[]),ClassDecl(Id(_V_kM_R8),[]),ClassDecl(Id(J),Id(_3__96),[]),ClassDecl(Id(o_),Id(Q9),[AttributeDecl(Static,VarDecl(Id($B__e),IntType)),AttributeDecl(Instance,VarDecl(Id(u),IntType))]),ClassDecl(Id(A),[])])'''
        self.assertTrue(TestAST.test(line, expect, 861))

    def test_862(self):
        line = '''Class EC2w2{_(){}Var P,$k,$_:Array [Array [Boolean ,0B1010100],0XD_AB];}Class M2_:Yw{__7W(E,gA:Array [Array [Array [Int ,0X27],44],78];mX:Float ;_,rc:Array [Boolean ,0101]){} }'''
        expect = '''Program([ClassDecl(Id(EC2w2),[MethodDecl(Id(_),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(P),ArrayType(3499,ArrayType(84,BoolType)))),AttributeDecl(Static,VarDecl(Id($k),ArrayType(3499,ArrayType(84,BoolType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3499,ArrayType(84,BoolType))))]),ClassDecl(Id(M2_),Id(Yw),[MethodDecl(Id(__7W),Instance,[param(Id(E),ArrayType(78,ArrayType(44,ArrayType(39,IntType)))),param(Id(gA),ArrayType(78,ArrayType(44,ArrayType(39,IntType)))),param(Id(mX),FloatType),param(Id(_),ArrayType(65,BoolType)),param(Id(rc),ArrayType(65,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 862))

    def test_863(self):
        line = '''Class __{}Class y{Constructor (T:Int ;L8_:Boolean ){}Var $__:Array [Boolean ,05_21];Destructor (){} }Class _:_e{Constructor (P,k:Array [String ,3];cF:Array [Array [Array [Int ,0X46],0x52],7]){} }'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(y),[MethodDecl(Id(Constructor),Instance,[param(Id(T),IntType),param(Id(L8_),BoolType)],Block([])),AttributeDecl(Static,VarDecl(Id($__),ArrayType(337,BoolType))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_e),[MethodDecl(Id(Constructor),Instance,[param(Id(P),ArrayType(3,StringType)),param(Id(k),ArrayType(3,StringType)),param(Id(cF),ArrayType(7,ArrayType(82,ArrayType(70,IntType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 863))

    def test_864(self):
        line = '''Class y_:W{Var $3,om:Array [Boolean ,0xA];$i1(T1,_,Dn:_n7;i,____,d,_2,_v,_9,p_i,P_,_,r___R,V,C2,zI_i:Float ;_5__g_:_){Val q:Array [Array [Array [Array [Array [Array [Array [Array [String ,0B10010],1],0B1],27],0X4],0B1_0],054],0XA];}Destructor (){Break ;Continue ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(y_),Id(W),[AttributeDecl(Static,VarDecl(Id($3),ArrayType(10,BoolType))),AttributeDecl(Instance,VarDecl(Id(om),ArrayType(10,BoolType))),MethodDecl(Id($i1),Static,[param(Id(T1),ClassType(Id(_n7))),param(Id(_),ClassType(Id(_n7))),param(Id(Dn),ClassType(Id(_n7))),param(Id(i),FloatType),param(Id(____),FloatType),param(Id(d),FloatType),param(Id(_2),FloatType),param(Id(_v),FloatType),param(Id(_9),FloatType),param(Id(p_i),FloatType),param(Id(P_),FloatType),param(Id(_),FloatType),param(Id(r___R),FloatType),param(Id(V),FloatType),param(Id(C2),FloatType),param(Id(zI_i),FloatType),param(Id(_5__g_),ClassType(Id(_)))],Block([ConstDecl(Id(q),ArrayType(10,ArrayType(44,ArrayType(2,ArrayType(4,ArrayType(27,ArrayType(1,ArrayType(1,ArrayType(18,StringType)))))))),None)])),MethodDecl(Id(Destructor),Instance,[],Block([Break,Continue,Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 864))

    def test_865(self):
        line = '''Class MS:_{}Class __8w:I{}Class T4{}Class _{Val $o5,_,$6:Array [Array [Boolean ,38],0120];Val $4:Int ;}Class _{}Class H:U{Val $S,$L,$06,_,$sM,$9P:Array [Array [Float ,0b110000],38];}'''
        expect = '''Program([ClassDecl(Id(MS),Id(_),[]),ClassDecl(Id(__8w),Id(I),[]),ClassDecl(Id(T4),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($o5),ArrayType(80,ArrayType(38,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(80,ArrayType(38,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($6),ArrayType(80,ArrayType(38,BoolType)),None)),AttributeDecl(Static,ConstDecl(Id($4),IntType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(H),Id(U),[AttributeDecl(Static,ConstDecl(Id($S),ArrayType(38,ArrayType(48,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($L),ArrayType(38,ArrayType(48,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($06),ArrayType(38,ArrayType(48,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(38,ArrayType(48,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($sM),ArrayType(38,ArrayType(48,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($9P),ArrayType(38,ArrayType(48,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 865))

    def test_866(self):
        line = '''Class __:_{}Class D{}Class _:s{Val $_,Ax2h:String ;Destructor (){} }Class U{Val _,_3:Array [Array [Array [Array [String ,0b1100010],0B1000000],0B10_1],0B1];F_3d(_:Array [Int ,0X44]){}Val $_,M9:String ;Val _H:String ;Val X:I;}'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(D),[]),ClassDecl(Id(_),Id(s),[AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(Ax2h),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(U),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(5,ArrayType(64,ArrayType(98,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_3),ArrayType(1,ArrayType(5,ArrayType(64,ArrayType(98,StringType)))),None)),MethodDecl(Id(F_3d),Instance,[param(Id(_),ArrayType(68,IntType))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(M9),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_H),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(X),ClassType(Id(I)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 866))

    def test_867(self):
        line = '''Class _:_1{}Class z:S{_5(_5_84:Array [Array [String ,63],0b110100];v425:Array [Array [Array [Array [Int ,0141],0x16],0b110100],2];__K__,e,_,_:Array [Boolean ,0B10];E,i:Array [Array [Array [Array [Float ,0B1],63],0xB_F],02_4];_,c__7:String ){} }Class V{Val ___7,$849_,$_C85:Float ;}Class Y{__(){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_1),[]),ClassDecl(Id(z),Id(S),[MethodDecl(Id(_5),Instance,[param(Id(_5_84),ArrayType(52,ArrayType(63,StringType))),param(Id(v425),ArrayType(2,ArrayType(52,ArrayType(22,ArrayType(97,IntType))))),param(Id(__K__),ArrayType(2,BoolType)),param(Id(e),ArrayType(2,BoolType)),param(Id(_),ArrayType(2,BoolType)),param(Id(_),ArrayType(2,BoolType)),param(Id(E),ArrayType(20,ArrayType(191,ArrayType(63,ArrayType(1,FloatType))))),param(Id(i),ArrayType(20,ArrayType(191,ArrayType(63,ArrayType(1,FloatType))))),param(Id(_),StringType),param(Id(c__7),StringType)],Block([]))]),ClassDecl(Id(V),[AttributeDecl(Instance,ConstDecl(Id(___7),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($849_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_C85),FloatType,None))]),ClassDecl(Id(Y),[MethodDecl(Id(__),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 867))

    def test_868(self):
        line = '''Class ___:_{}Class eLR:z2X65_8{}Class p:_{Var G:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,78],02_4],04_5_3],3],0X5D],2],04],0x48_C],5],02];Val $y_:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(___),Id(_),[]),ClassDecl(Id(eLR),Id(z2X65_8),[]),ClassDecl(Id(p),Id(_),[AttributeDecl(Instance,VarDecl(Id(G),ArrayType(2,ArrayType(5,ArrayType(1164,ArrayType(4,ArrayType(2,ArrayType(93,ArrayType(3,ArrayType(299,ArrayType(20,ArrayType(78,FloatType)))))))))))),AttributeDecl(Static,ConstDecl(Id($y_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 868))

    def test_869(self):
        line = '''Class O:_m{Constructor (_:Boolean ;raw__,_:_;_9_:___D7;_,m5:Array [Array [Int ,06_26_1],02];_:Float ){Break ;}$G(Z:Array [Array [Boolean ,2_5_2],07_6_0];i:Ur_;W,q,_TJ:Int ;U,w,K:String ;_:Array [Int ,14];R:Array [String ,0b1010011]){} }'''
        expect = '''Program([ClassDecl(Id(O),Id(_m),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(raw__),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_9_),ClassType(Id(___D7))),param(Id(_),ArrayType(2,ArrayType(3249,IntType))),param(Id(m5),ArrayType(2,ArrayType(3249,IntType))),param(Id(_),FloatType)],Block([Break])),MethodDecl(Id($G),Static,[param(Id(Z),ArrayType(496,ArrayType(252,BoolType))),param(Id(i),ClassType(Id(Ur_))),param(Id(W),IntType),param(Id(q),IntType),param(Id(_TJ),IntType),param(Id(U),StringType),param(Id(w),StringType),param(Id(K),StringType),param(Id(_),ArrayType(14,IntType)),param(Id(R),ArrayType(83,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 869))

    def test_870(self):
        line = '''Class A0{}Class VPi7p_6{Var $_5:Array [Boolean ,77];Val $_67,_,R,$3,_iD__:Int ;b(O:Array [Int ,01]){}Var $_,$_j_:Array [Array [Array [Array [Array [Array [Float ,8],1],03],03],03],77];$s(){} }'''
        expect = '''Program([ClassDecl(Id(A0),[]),ClassDecl(Id(VPi7p_6),[AttributeDecl(Static,VarDecl(Id($_5),ArrayType(77,BoolType))),AttributeDecl(Static,ConstDecl(Id($_67),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(R),IntType,None)),AttributeDecl(Static,ConstDecl(Id($3),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_iD__),IntType,None)),MethodDecl(Id(b),Instance,[param(Id(O),ArrayType(1,IntType))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(77,ArrayType(3,ArrayType(3,ArrayType(3,ArrayType(1,ArrayType(8,FloatType)))))))),AttributeDecl(Static,VarDecl(Id($_j_),ArrayType(77,ArrayType(3,ArrayType(3,ArrayType(3,ArrayType(1,ArrayType(8,FloatType)))))))),MethodDecl(Id($s),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 870))

    def test_871(self):
        line = '''Class ___{}Class zR{Destructor (){Var t,__:Array [Array [Boolean ,0b1010011],0X4A];}J__i(_6:Array [Array [Array [Float ,06],0x5E],34_5_18];_,M:Array [Array [Array [Array [Array [Array [Float ,0b1010011],309],0106],0X992_C],07_4],0x5E];_2P,NX,O,B:__d){_74::$_();} }Class _{}Class S:_1{}Class m{$2_21(){}Constructor (){}Constructor (){}Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(___),[]),ClassDecl(Id(zR),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(t),ArrayType(74,ArrayType(83,BoolType))),VarDecl(Id(__),ArrayType(74,ArrayType(83,BoolType)))])),MethodDecl(Id(J__i),Instance,[param(Id(_6),ArrayType(34518,ArrayType(94,ArrayType(6,FloatType)))),param(Id(_),ArrayType(94,ArrayType(60,ArrayType(39212,ArrayType(70,ArrayType(309,ArrayType(83,FloatType))))))),param(Id(M),ArrayType(94,ArrayType(60,ArrayType(39212,ArrayType(70,ArrayType(309,ArrayType(83,FloatType))))))),param(Id(_2P),ClassType(Id(__d))),param(Id(NX),ClassType(Id(__d))),param(Id(O),ClassType(Id(__d))),param(Id(B),ClassType(Id(__d)))],Block([Call(Id(_74),Id($_),[])]))]),ClassDecl(Id(_),[]),ClassDecl(Id(S),Id(_1),[]),ClassDecl(Id(m),[MethodDecl(Id($2_21),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 871))

    def test_872(self):
        line = '''Class x{}Class H_5_{Var $__,$_w,$0,__v08_2_,$Iw:Array [Boolean ,0b1];Val _:_84D;Var _:Boolean ;Var $_,_D:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,87],0B1],87],025],0X55],0x42],0XA],0b1011],4],0x9],04];}Class m:E6{}'''
        expect = '''Program([ClassDecl(Id(x),[]),ClassDecl(Id(H_5_),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($_w),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($0),ArrayType(1,BoolType))),AttributeDecl(Instance,VarDecl(Id(__v08_2_),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($Iw),ArrayType(1,BoolType))),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_84D)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(4,ArrayType(9,ArrayType(4,ArrayType(11,ArrayType(10,ArrayType(66,ArrayType(85,ArrayType(21,ArrayType(87,ArrayType(1,ArrayType(87,IntType))))))))))))),AttributeDecl(Instance,VarDecl(Id(_D),ArrayType(4,ArrayType(9,ArrayType(4,ArrayType(11,ArrayType(10,ArrayType(66,ArrayType(85,ArrayType(21,ArrayType(87,ArrayType(1,ArrayType(87,IntType)))))))))))))]),ClassDecl(Id(m),Id(E6),[])])'''
        self.assertTrue(TestAST.test(line, expect, 872))

    def test_873(self):
        line = '''Class _a7{Zk(B:Array [Int ,0B110];m378:Array [Array [Array [Float ,0b100011],0b100011],0x58];S5,N_Bk:Array [Array [Array [Float ,14],14],02];Iq,_,_e:Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0100],0B11_1_0],04_4],0B1],0100],07],0100],14];d:_71_P2){Break ;} }Class _:b_8{}'''
        expect = '''Program([ClassDecl(Id(_a7),[MethodDecl(Id(Zk),Instance,[param(Id(B),ArrayType(6,IntType)),param(Id(m378),ArrayType(88,ArrayType(35,ArrayType(35,FloatType)))),param(Id(S5),ArrayType(2,ArrayType(14,ArrayType(14,FloatType)))),param(Id(N_Bk),ArrayType(2,ArrayType(14,ArrayType(14,FloatType)))),param(Id(Iq),ArrayType(14,ArrayType(64,ArrayType(7,ArrayType(64,ArrayType(1,ArrayType(36,ArrayType(14,ArrayType(64,BoolType))))))))),param(Id(_),ArrayType(14,ArrayType(64,ArrayType(7,ArrayType(64,ArrayType(1,ArrayType(36,ArrayType(14,ArrayType(64,BoolType))))))))),param(Id(_e),ArrayType(14,ArrayType(64,ArrayType(7,ArrayType(64,ArrayType(1,ArrayType(36,ArrayType(14,ArrayType(64,BoolType))))))))),param(Id(d),ClassType(Id(_71_P2)))],Block([Break]))]),ClassDecl(Id(_),Id(b_8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 873))

    def test_874(self):
        line = '''Class H_L_{Var $__1F:__;Destructor (){}Constructor (_,G,_2V_,h__,J,_,z__v:Boolean ;_38,_q:e0B_snA;_:Int ){Continue ;Break ;}Val _:Array [Float ,0110];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(H_L_),[AttributeDecl(Static,VarDecl(Id($__1F),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(G),BoolType),param(Id(_2V_),BoolType),param(Id(h__),BoolType),param(Id(J),BoolType),param(Id(_),BoolType),param(Id(z__v),BoolType),param(Id(_38),ClassType(Id(e0B_snA))),param(Id(_q),ClassType(Id(e0B_snA))),param(Id(_),IntType)],Block([Continue,Break])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(72,FloatType),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 874))

    def test_875(self):
        line = '''Class _x:_Xo{Constructor (__:Int ;_:Int ){} }Class _X:_9{}Class y2{Constructor (v:Boolean ){}Val $__,_:r;$1_7C86_H_d(Z,Vux,_:y_){ {{}Continue ;}Break ;} }Class p{}Class FI{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_x),Id(_Xo),[MethodDecl(Id(Constructor),Instance,[param(Id(__),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(_X),Id(_9),[]),ClassDecl(Id(y2),[MethodDecl(Id(Constructor),Instance,[param(Id(v),BoolType)],Block([])),AttributeDecl(Static,ConstDecl(Id($__),ClassType(Id(r)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(r)),NullLiteral())),MethodDecl(Id($1_7C86_H_d),Static,[param(Id(Z),ClassType(Id(y_))),param(Id(Vux),ClassType(Id(y_))),param(Id(_),ClassType(Id(y_)))],Block([Block([Block([]),Continue]),Break]))]),ClassDecl(Id(p),[]),ClassDecl(Id(FI),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 875))

    def test_876(self):
        line = '''Class _6_{Constructor (_,c_2I,S:Array [String ,04_3]){} }Class _d:_{Var __42_6_:Array [String ,06];}Class X0:BB{Val qAA_E:Int ;Constructor (g19F,R:Int ;w,Y_,_C:Array [Array [Int ,072],2];__,l:D;_,l:Int ;UK_:Array [Array [String ,0x7],2_0_0]){} }'''
        expect = '''Program([ClassDecl(Id(_6_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(35,StringType)),param(Id(c_2I),ArrayType(35,StringType)),param(Id(S),ArrayType(35,StringType))],Block([]))]),ClassDecl(Id(_d),Id(_),[AttributeDecl(Instance,VarDecl(Id(__42_6_),ArrayType(6,StringType)))]),ClassDecl(Id(X0),Id(BB),[AttributeDecl(Instance,ConstDecl(Id(qAA_E),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(g19F),IntType),param(Id(R),IntType),param(Id(w),ArrayType(2,ArrayType(58,IntType))),param(Id(Y_),ArrayType(2,ArrayType(58,IntType))),param(Id(_C),ArrayType(2,ArrayType(58,IntType))),param(Id(__),ClassType(Id(D))),param(Id(l),ClassType(Id(D))),param(Id(_),IntType),param(Id(l),IntType),param(Id(UK_),ArrayType(200,ArrayType(7,StringType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 876))

    def test_877(self):
        line = '''Class _s:w{Destructor (){Break ;}$1RJ__(_:Array [Array [Array [Boolean ,0X20],0120],0b1000011];n:q){Break ;} }Class _:X{}Class _c_{Destructor (){}Val _,Lx9__0_,va,$wr9:String ;}Class k4:__{}Class _:_63x{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(_s),Id(w),[MethodDecl(Id(Destructor),Instance,[],Block([Break])),MethodDecl(Id($1RJ__),Static,[param(Id(_),ArrayType(67,ArrayType(80,ArrayType(32,BoolType)))),param(Id(n),ClassType(Id(q)))],Block([Break]))]),ClassDecl(Id(_),Id(X),[]),ClassDecl(Id(_c_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(Lx9__0_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(va),StringType,None)),AttributeDecl(Static,ConstDecl(Id($wr9),StringType,None))]),ClassDecl(Id(k4),Id(__),[]),ClassDecl(Id(_),Id(_63x),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 877))

    def test_878(self):
        line = '''Class _24:R{Constructor (_4,Mt,O9:Array [Array [Boolean ,0b111111],0B111100];_Z:Array [Array [Array [Array [Array [Array [Array [Boolean ,024],4_8],0B1],0B111100],0B111100],0x57],61];_:Array [Array [Array [Float ,61],5],024]){} }'''
        expect = '''Program([ClassDecl(Id(_24),Id(R),[MethodDecl(Id(Constructor),Instance,[param(Id(_4),ArrayType(60,ArrayType(63,BoolType))),param(Id(Mt),ArrayType(60,ArrayType(63,BoolType))),param(Id(O9),ArrayType(60,ArrayType(63,BoolType))),param(Id(_Z),ArrayType(61,ArrayType(87,ArrayType(60,ArrayType(60,ArrayType(1,ArrayType(48,ArrayType(20,BoolType)))))))),param(Id(_),ArrayType(20,ArrayType(5,ArrayType(61,FloatType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 878))

    def test_879(self):
        line = '''Class p1{}Class d:_{}Class V_:s{Val Rl_OJ:Int ;Constructor (__5,w:Boolean ){Break ;}$r77(){}Constructor (){} }Class _:g27{}Class q:_4P{}Class _9{}Class _2{}Class __{}'''
        expect = '''Program([ClassDecl(Id(p1),[]),ClassDecl(Id(d),Id(_),[]),ClassDecl(Id(V_),Id(s),[AttributeDecl(Instance,ConstDecl(Id(Rl_OJ),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(__5),BoolType),param(Id(w),BoolType)],Block([Break])),MethodDecl(Id($r77),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(g27),[]),ClassDecl(Id(q),Id(_4P),[]),ClassDecl(Id(_9),[]),ClassDecl(Id(_2),[]),ClassDecl(Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 879))

    def test_880(self):
        line = '''Class _{Constructor (m,x,_h_,s_:_95;_,_,_k:W;Y_,____s,_2_,_U6,T,_6M_:Array [Array [Array [Array [Array [Array [String ,3],05],7],736_48],6_1],0B1_0_011_0_1];n_:Int ;l,H:TJ;GU_,Xp_zx_:aW4;m83J,_0,___,_,P3,_,__F_,__,Q,_:Int ){}Destructor (){}Constructor (){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(m),ClassType(Id(_95))),param(Id(x),ClassType(Id(_95))),param(Id(_h_),ClassType(Id(_95))),param(Id(s_),ClassType(Id(_95))),param(Id(_),ClassType(Id(W))),param(Id(_),ClassType(Id(W))),param(Id(_k),ClassType(Id(W))),param(Id(Y_),ArrayType(77,ArrayType(61,ArrayType(73648,ArrayType(7,ArrayType(5,ArrayType(3,StringType))))))),param(Id(____s),ArrayType(77,ArrayType(61,ArrayType(73648,ArrayType(7,ArrayType(5,ArrayType(3,StringType))))))),param(Id(_2_),ArrayType(77,ArrayType(61,ArrayType(73648,ArrayType(7,ArrayType(5,ArrayType(3,StringType))))))),param(Id(_U6),ArrayType(77,ArrayType(61,ArrayType(73648,ArrayType(7,ArrayType(5,ArrayType(3,StringType))))))),param(Id(T),ArrayType(77,ArrayType(61,ArrayType(73648,ArrayType(7,ArrayType(5,ArrayType(3,StringType))))))),param(Id(_6M_),ArrayType(77,ArrayType(61,ArrayType(73648,ArrayType(7,ArrayType(5,ArrayType(3,StringType))))))),param(Id(n_),IntType),param(Id(l),ClassType(Id(TJ))),param(Id(H),ClassType(Id(TJ))),param(Id(GU_),ClassType(Id(aW4))),param(Id(Xp_zx_),ClassType(Id(aW4))),param(Id(m83J),IntType),param(Id(_0),IntType),param(Id(___),IntType),param(Id(_),IntType),param(Id(P3),IntType),param(Id(_),IntType),param(Id(__F_),IntType),param(Id(__),IntType),param(Id(Q),IntType),param(Id(_),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 880))

    def test_881(self):
        line = '''Class _9F3{Constructor (g_,_:Array [Int ,0b100001];Q,u:Int ;X_,__,g,_L_:Float ){}Constructor (Oh,__2:Array [Array [Float ,0b1],04_7_0];_t_6,h:Int ;_:String ;_,_:_3Az;_v_:Ibz;q_x,r:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_9F3),[MethodDecl(Id(Constructor),Instance,[param(Id(g_),ArrayType(33,IntType)),param(Id(_),ArrayType(33,IntType)),param(Id(Q),IntType),param(Id(u),IntType),param(Id(X_),FloatType),param(Id(__),FloatType),param(Id(g),FloatType),param(Id(_L_),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(Oh),ArrayType(312,ArrayType(1,FloatType))),param(Id(__2),ArrayType(312,ArrayType(1,FloatType))),param(Id(_t_6),IntType),param(Id(h),IntType),param(Id(_),StringType),param(Id(_),ClassType(Id(_3Az))),param(Id(_),ClassType(Id(_3Az))),param(Id(_v_),ClassType(Id(Ibz))),param(Id(q_x),FloatType),param(Id(r),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 881))

    def test_882(self):
        line = '''Class _:_{Constructor (q6i,M,Y0,__:Array [String ,4];_,N___u,_:Boolean ;m_2,_:Array [Array [Array [Array [String ,0X17],1],0XA64],06];n_:String ;_,_,A:Float ;__,dJ,V,__m,_2n1:B){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(q6i),ArrayType(4,StringType)),param(Id(M),ArrayType(4,StringType)),param(Id(Y0),ArrayType(4,StringType)),param(Id(__),ArrayType(4,StringType)),param(Id(_),BoolType),param(Id(N___u),BoolType),param(Id(_),BoolType),param(Id(m_2),ArrayType(6,ArrayType(2660,ArrayType(1,ArrayType(23,StringType))))),param(Id(_),ArrayType(6,ArrayType(2660,ArrayType(1,ArrayType(23,StringType))))),param(Id(n_),StringType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(A),FloatType),param(Id(__),ClassType(Id(B))),param(Id(dJ),ClassType(Id(B))),param(Id(V),ClassType(Id(B))),param(Id(__m),ClassType(Id(B))),param(Id(_2n1),ClassType(Id(B)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 882))

    def test_883(self):
        line = '''Class r:_{Var W4_c846_p,_,$z,L_z,_:Array [Array [Float ,35_0],1];Val _9r,$l_:Boolean ;}Class vYc{}Class _:y6_{Var $e:Array [Array [Array [Float ,65],0X5_8],0X1];$V(){}Val x5:_K_g;}'''
        expect = '''Program([ClassDecl(Id(r),Id(_),[AttributeDecl(Instance,VarDecl(Id(W4_c846_p),ArrayType(1,ArrayType(350,FloatType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(350,FloatType)))),AttributeDecl(Static,VarDecl(Id($z),ArrayType(1,ArrayType(350,FloatType)))),AttributeDecl(Instance,VarDecl(Id(L_z),ArrayType(1,ArrayType(350,FloatType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,ArrayType(350,FloatType)))),AttributeDecl(Instance,ConstDecl(Id(_9r),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($l_),BoolType,None))]),ClassDecl(Id(vYc),[]),ClassDecl(Id(_),Id(y6_),[AttributeDecl(Static,VarDecl(Id($e),ArrayType(1,ArrayType(88,ArrayType(65,FloatType))))),MethodDecl(Id($V),Static,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(x5),ClassType(Id(_K_g)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 883))

    def test_884(self):
        line = '''Class _{}Class R{$0(X:Zi;_:_G40_;__1n0T_Q_3:String ;w_7,h3oi_,J,E,_,l:Array [Float ,0B1];q55:Array [Array [Array [String ,0x49],073],20]){}_(h:String ){}_(_,H,_:_){Continue ;} }Class u:_{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(R),[MethodDecl(Id($0),Static,[param(Id(X),ClassType(Id(Zi))),param(Id(_),ClassType(Id(_G40_))),param(Id(__1n0T_Q_3),StringType),param(Id(w_7),ArrayType(1,FloatType)),param(Id(h3oi_),ArrayType(1,FloatType)),param(Id(J),ArrayType(1,FloatType)),param(Id(E),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(l),ArrayType(1,FloatType)),param(Id(q55),ArrayType(20,ArrayType(59,ArrayType(73,StringType))))],Block([])),MethodDecl(Id(_),Instance,[param(Id(h),StringType)],Block([])),MethodDecl(Id(_),Instance,[param(Id(_),ClassType(Id(_))),param(Id(H),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([Continue]))]),ClassDecl(Id(u),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 884))

    def test_885(self):
        line = '''Class CfZ:H{Destructor (){} }Class dS{Constructor (_,M88,x0:Array [Boolean ,51];_,_,O,b,H7,vu,D,_,_T,_,Z,b__,y__:_){}Destructor (){}Var $j,_4,$3,__3,$__1p_,_,wh:Float ;}'''
        expect = '''Program([ClassDecl(Id(CfZ),Id(H),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(dS),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(51,BoolType)),param(Id(M88),ArrayType(51,BoolType)),param(Id(x0),ArrayType(51,BoolType)),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(O),ClassType(Id(_))),param(Id(b),ClassType(Id(_))),param(Id(H7),ClassType(Id(_))),param(Id(vu),ClassType(Id(_))),param(Id(D),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_T),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(Z),ClassType(Id(_))),param(Id(b__),ClassType(Id(_))),param(Id(y__),ClassType(Id(_)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($j),FloatType)),AttributeDecl(Instance,VarDecl(Id(_4),FloatType)),AttributeDecl(Static,VarDecl(Id($3),FloatType)),AttributeDecl(Instance,VarDecl(Id(__3),FloatType)),AttributeDecl(Static,VarDecl(Id($__1p_),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType)),AttributeDecl(Instance,VarDecl(Id(wh),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 885))

    def test_886(self):
        line = '''Class rv{Constructor (X:_){} }Class _:_{Val $pa:Int ;}Class _:a{}Class S4___{Constructor (O__g,I1k,v_,__,HH,m1,_:Float ){}Constructor (u,i:String ){} }Class _:e{Val __,S,$P:Boolean ;}Class _{Var d,$YBX7:D;}Class _:_77{}'''
        expect = '''Program([ClassDecl(Id(rv),[MethodDecl(Id(Constructor),Instance,[param(Id(X),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($pa),IntType,None))]),ClassDecl(Id(_),Id(a),[]),ClassDecl(Id(S4___),[MethodDecl(Id(Constructor),Instance,[param(Id(O__g),FloatType),param(Id(I1k),FloatType),param(Id(v_),FloatType),param(Id(__),FloatType),param(Id(HH),FloatType),param(Id(m1),FloatType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(u),StringType),param(Id(i),StringType)],Block([]))]),ClassDecl(Id(_),Id(e),[AttributeDecl(Instance,ConstDecl(Id(__),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(S),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($P),BoolType,None))]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(d),ClassType(Id(D)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($YBX7),ClassType(Id(D)),NullLiteral()))]),ClassDecl(Id(_),Id(_77),[])])'''
        self.assertTrue(TestAST.test(line, expect, 886))

    def test_887(self):
        line = '''Class _{$A(J,_T,_I,_,J:_;_:Array [String ,0X6];_,E,o:Array [Array [Array [Array [Float ,0B1000100],0b1_0],016],68_23]){}$38(e:Array [Array [Array [Int ,016],0B1000100],05];Q5:String ){}_(g_,_,_65,E6_59:Array [Array [Array [Boolean ,016],7],0b110101];G:Array [Array [Array [String ,04],0XB_55_E_8],0X8];z,_:Array [Array [Int ,04_1],22];_:Array [Array [Array [Array [Array [Float ,0xC3],0x33],1_7],0B1],22]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($A),Static,[param(Id(J),ClassType(Id(_))),param(Id(_T),ClassType(Id(_))),param(Id(_I),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(J),ClassType(Id(_))),param(Id(_),ArrayType(6,StringType)),param(Id(_),ArrayType(6823,ArrayType(14,ArrayType(2,ArrayType(68,FloatType))))),param(Id(E),ArrayType(6823,ArrayType(14,ArrayType(2,ArrayType(68,FloatType))))),param(Id(o),ArrayType(6823,ArrayType(14,ArrayType(2,ArrayType(68,FloatType)))))],Block([])),MethodDecl(Id($38),Static,[param(Id(e),ArrayType(5,ArrayType(68,ArrayType(14,IntType)))),param(Id(Q5),StringType)],Block([])),MethodDecl(Id(_),Instance,[param(Id(g_),ArrayType(53,ArrayType(7,ArrayType(14,BoolType)))),param(Id(_),ArrayType(53,ArrayType(7,ArrayType(14,BoolType)))),param(Id(_65),ArrayType(53,ArrayType(7,ArrayType(14,BoolType)))),param(Id(E6_59),ArrayType(53,ArrayType(7,ArrayType(14,BoolType)))),param(Id(G),ArrayType(8,ArrayType(742888,ArrayType(4,StringType)))),param(Id(z),ArrayType(22,ArrayType(33,IntType))),param(Id(_),ArrayType(22,ArrayType(33,IntType))),param(Id(_),ArrayType(22,ArrayType(1,ArrayType(17,ArrayType(51,ArrayType(195,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 887))

    def test_888(self):
        line = '''Class j85:_3{Var _93,$15_W85_7__CH,$s_7:__;Constructor (_:Array [Boolean ,0b1010111]){}L(_,w8,p,_7_,Q_6O:Float ;T,_:_;b,_i:Int ){}Destructor (){Break ;}Var $_:Array [Boolean ,0B1100000];Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(j85),Id(_3),[AttributeDecl(Instance,VarDecl(Id(_93),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($15_W85_7__CH),ClassType(Id(__)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($s_7),ClassType(Id(__)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(87,BoolType))],Block([])),MethodDecl(Id(L),Instance,[param(Id(_),FloatType),param(Id(w8),FloatType),param(Id(p),FloatType),param(Id(_7_),FloatType),param(Id(Q_6O),FloatType),param(Id(T),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(b),IntType),param(Id(_i),IntType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Break])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(96,BoolType))),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 888))

    def test_889(self):
        line = '''Class _:__d9{}Class _:_{}Class q9A_:_H{}Class __{Constructor (_,J:_;_L,_,ko,m8_,_:String ;s,P:f_;G8,_:Float ){}Var _H:_;}Class SL{Val _scX_,$8,$KE:String ;}Class h:_{Destructor (){} }Class _p{}'''
        expect = '''Program([ClassDecl(Id(_),Id(__d9),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(q9A_),Id(_H),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(J),ClassType(Id(_))),param(Id(_L),StringType),param(Id(_),StringType),param(Id(ko),StringType),param(Id(m8_),StringType),param(Id(_),StringType),param(Id(s),ClassType(Id(f_))),param(Id(P),ClassType(Id(f_))),param(Id(G8),FloatType),param(Id(_),FloatType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_H),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(SL),[AttributeDecl(Instance,ConstDecl(Id(_scX_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($8),StringType,None)),AttributeDecl(Static,ConstDecl(Id($KE),StringType,None))]),ClassDecl(Id(h),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_p),[])])'''
        self.assertTrue(TestAST.test(line, expect, 889))

    def test_890(self):
        line = '''Class _:_{Constructor (k,_3S_:Array [Array [Float ,0117],0xB9];d7,v:Array [Array [String ,0XE_77_D4A_7],57]){} }Class _a{Constructor (_,N23,__,_53Y:String ;L:_21;_,S_:Array [Array [String ,0x7],57];_:String ){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(k),ArrayType(185,ArrayType(79,FloatType))),param(Id(_3S_),ArrayType(185,ArrayType(79,FloatType))),param(Id(d7),ArrayType(57,ArrayType(242734247,StringType))),param(Id(v),ArrayType(57,ArrayType(242734247,StringType)))],Block([]))]),ClassDecl(Id(_a),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(N23),StringType),param(Id(__),StringType),param(Id(_53Y),StringType),param(Id(L),ClassType(Id(_21))),param(Id(_),ArrayType(57,ArrayType(7,StringType))),param(Id(S_),ArrayType(57,ArrayType(7,StringType))),param(Id(_),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 890))

    def test_891(self):
        line = '''Class A:__{Constructor (A:Array [Int ,0b1001011];s,L4w:_4s__;__:Array [Array [Float ,030_2_67],0x6_C_A_0]){Break ;Break ;}Var _,$84X9,_O_,$G,b_:Array [Int ,0b1_0];}Class _:Vq_{}Class __:D_{}Class __{Var $_:Array [Boolean ,68];}'''
        expect = '''Program([ClassDecl(Id(A),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(A),ArrayType(75,IntType)),param(Id(s),ClassType(Id(_4s__))),param(Id(L4w),ClassType(Id(_4s__))),param(Id(__),ArrayType(27808,ArrayType(12471,FloatType)))],Block([Break,Break])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2,IntType))),AttributeDecl(Static,VarDecl(Id($84X9),ArrayType(2,IntType))),AttributeDecl(Instance,VarDecl(Id(_O_),ArrayType(2,IntType))),AttributeDecl(Static,VarDecl(Id($G),ArrayType(2,IntType))),AttributeDecl(Instance,VarDecl(Id(b_),ArrayType(2,IntType)))]),ClassDecl(Id(_),Id(Vq_),[]),ClassDecl(Id(__),Id(D_),[]),ClassDecl(Id(__),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(68,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 891))

    def test_892(self):
        line = '''Class _2:c{Constructor (){}Constructor (){Break ;Val _tz:Array [Array [Array [Boolean ,017],96],0X24];} }Class _9_{}Class s:Ol6_{}Class I74{Var o:Array [Array [Boolean ,017],043_0];}'''
        expect = '''Program([ClassDecl(Id(_2),Id(c),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break,ConstDecl(Id(_tz),ArrayType(36,ArrayType(96,ArrayType(15,BoolType))),None)]))]),ClassDecl(Id(_9_),[]),ClassDecl(Id(s),Id(Ol6_),[]),ClassDecl(Id(I74),[AttributeDecl(Instance,VarDecl(Id(o),ArrayType(280,ArrayType(15,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 892))

    def test_893(self):
        line = '''Class u:v{Var $_,d,g_:f;Constructor (NGb:Boolean ;k,_,y:Boolean ;b7,R,_:Float ;u,N:_1;__2,U_,B,_2T,V,NJ,WC5,_,__,_:Array [Int ,0X32];_a3:__8;G,J_9z,_A:Array [String ,05_6];T00_j:Array [Int ,0X32]){}Destructor (){}Constructor (){} }Class V:a{}'''
        expect = '''Program([ClassDecl(Id(u),Id(v),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(d),ClassType(Id(f)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(g_),ClassType(Id(f)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(NGb),BoolType),param(Id(k),BoolType),param(Id(_),BoolType),param(Id(y),BoolType),param(Id(b7),FloatType),param(Id(R),FloatType),param(Id(_),FloatType),param(Id(u),ClassType(Id(_1))),param(Id(N),ClassType(Id(_1))),param(Id(__2),ArrayType(50,IntType)),param(Id(U_),ArrayType(50,IntType)),param(Id(B),ArrayType(50,IntType)),param(Id(_2T),ArrayType(50,IntType)),param(Id(V),ArrayType(50,IntType)),param(Id(NJ),ArrayType(50,IntType)),param(Id(WC5),ArrayType(50,IntType)),param(Id(_),ArrayType(50,IntType)),param(Id(__),ArrayType(50,IntType)),param(Id(_),ArrayType(50,IntType)),param(Id(_a3),ClassType(Id(__8))),param(Id(G),ArrayType(46,StringType)),param(Id(J_9z),ArrayType(46,StringType)),param(Id(_A),ArrayType(46,StringType)),param(Id(T00_j),ArrayType(50,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(V),Id(a),[])])'''
        self.assertTrue(TestAST.test(line, expect, 893))

    def test_894(self):
        line = '''Class D69:__{Constructor (_,M,_15_,_:String ){}Constructor (C:__){}Var $4:Array [Array [Array [Float ,03],0xC6],0XE_3];Destructor (){_::$_4();}Constructor (d_:Array [Int ,061];N3:Array [Int ,89]){} }Class _{Constructor (q:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(D69),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(M),StringType),param(Id(_15_),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(C),ClassType(Id(__)))],Block([])),AttributeDecl(Static,VarDecl(Id($4),ArrayType(227,ArrayType(198,ArrayType(3,FloatType))))),MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(_),Id($_4),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(d_),ArrayType(49,IntType)),param(Id(N3),ArrayType(89,IntType))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(q),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 894))

    def test_895(self):
        line = '''Class T{Constructor (_:Array [Array [Array [Int ,44_0_63],14],6];X_,D,_y:Array [Array [Array [Array [Array [Float ,03],0B1000100],2],03_6],0X8];_,_,v_:_;_1:Array [Boolean ,14];_B0:eV){}Val $3,F9:o_08;}'''
        expect = '''Program([ClassDecl(Id(T),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(6,ArrayType(14,ArrayType(44063,IntType)))),param(Id(X_),ArrayType(8,ArrayType(30,ArrayType(2,ArrayType(68,ArrayType(3,FloatType)))))),param(Id(D),ArrayType(8,ArrayType(30,ArrayType(2,ArrayType(68,ArrayType(3,FloatType)))))),param(Id(_y),ArrayType(8,ArrayType(30,ArrayType(2,ArrayType(68,ArrayType(3,FloatType)))))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(v_),ClassType(Id(_))),param(Id(_1),ArrayType(14,BoolType)),param(Id(_B0),ClassType(Id(eV)))],Block([])),AttributeDecl(Static,ConstDecl(Id($3),ClassType(Id(o_08)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(F9),ClassType(Id(o_08)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 895))

    def test_896(self):
        line = '''Class j_N{Val $_,$4_,_:Boolean ;Destructor (){0b1_0_1_0.q();Return ;} }Class k{Val $_:String ;}Class _{}Class _q2C3C_:O5{}Class _{Destructor (){}Val $__,$_3,$__,_,S_,_5s_E,$e,_d_,$q_,$z,$3,S:Array [Array [Array [Float ,0B10],03],0253_3];}Class g__{}Class _{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(j_N),[AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($4_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([Call(IntLit(10),Id(q),[]),Return()]))]),ClassDecl(Id(k),[AttributeDecl(Static,ConstDecl(Id($_),StringType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_q2C3C_),Id(O5),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($_3),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(S_),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_5s_E),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($e),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(_d_),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($q_),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($z),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(S),ArrayType(1371,ArrayType(3,ArrayType(2,FloatType))),None))]),ClassDecl(Id(g__),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 896))

    def test_897(self):
        line = '''Class G_h_4:w0__8{Constructor (_s,l,A,o6,z:Boolean ){}Y(k__:Boolean ;_,f_:_){Break ;}Val x:Array [Array [Array [Array [Float ,79],0b10010],0X1],0122];Val $61,S_I9_D0__3k_,E__f9_,__W,$_6,$g4S:Float ;}Class c_N_:r_N8{}'''
        expect = '''Program([ClassDecl(Id(G_h_4),Id(w0__8),[MethodDecl(Id(Constructor),Instance,[param(Id(_s),BoolType),param(Id(l),BoolType),param(Id(A),BoolType),param(Id(o6),BoolType),param(Id(z),BoolType)],Block([])),MethodDecl(Id(Y),Instance,[param(Id(k__),BoolType),param(Id(_),ClassType(Id(_))),param(Id(f_),ClassType(Id(_)))],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(x),ArrayType(82,ArrayType(1,ArrayType(18,ArrayType(79,FloatType)))),None)),AttributeDecl(Static,ConstDecl(Id($61),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(S_I9_D0__3k_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(E__f9_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(__W),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($_6),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($g4S),FloatType,None))]),ClassDecl(Id(c_N_),Id(r_N8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 897))

    def test_898(self):
        line = '''Class C{Var $1:Array [Array [Int ,0X3D],0B10100];}Class X_2:N{Val $2:Array [String ,06];}Class e:_{_(z,__Pd_:Array [Array [Array [Array [String ,03],29],0b1_0],29];b_:Array [Int ,0B1]){} }'''
        expect = '''Program([ClassDecl(Id(C),[AttributeDecl(Static,VarDecl(Id($1),ArrayType(20,ArrayType(61,IntType))))]),ClassDecl(Id(X_2),Id(N),[AttributeDecl(Static,ConstDecl(Id($2),ArrayType(6,StringType),None))]),ClassDecl(Id(e),Id(_),[MethodDecl(Id(_),Instance,[param(Id(z),ArrayType(29,ArrayType(2,ArrayType(29,ArrayType(3,StringType))))),param(Id(__Pd_),ArrayType(29,ArrayType(2,ArrayType(29,ArrayType(3,StringType))))),param(Id(b_),ArrayType(1,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 898))

    def test_899(self):
        line = '''Class _IGJ:_G{Constructor (_:Array [Array [String ,0B1110],046];X2_:Int ){}$_(){} }Class ___{Val _,__:Float ;}Class k_9:F{}Class _:_{Val $4,T,O,$_3_:Array [Float ,0X2E_3];}'''
        expect = '''Program([ClassDecl(Id(_IGJ),Id(_G),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(38,ArrayType(14,StringType))),param(Id(X2_),IntType)],Block([])),MethodDecl(Id($_),Static,[],Block([]))]),ClassDecl(Id(___),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(__),FloatType,None))]),ClassDecl(Id(k_9),Id(F),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Static,ConstDecl(Id($4),ArrayType(739,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(739,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(O),ArrayType(739,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_3_),ArrayType(739,FloatType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 899))

    def test_900(self):
        line = '''Class n9{__(_X_:Float ;M:g;_,_,_,wW,C_:Array [Array [Array [Float ,07],0B10],01_1_64];_,__0,z2_:Array [Boolean ,0X4D];h,__f3,_,_,I9,hY:Array [Array [Int ,05],0b1_00_1_0]){}Constructor (_:Int ;W,l9:_){} }'''
        expect = '''Program([ClassDecl(Id(n9),[MethodDecl(Id(__),Instance,[param(Id(_X_),FloatType),param(Id(M),ClassType(Id(g))),param(Id(_),ArrayType(628,ArrayType(2,ArrayType(7,FloatType)))),param(Id(_),ArrayType(628,ArrayType(2,ArrayType(7,FloatType)))),param(Id(_),ArrayType(628,ArrayType(2,ArrayType(7,FloatType)))),param(Id(wW),ArrayType(628,ArrayType(2,ArrayType(7,FloatType)))),param(Id(C_),ArrayType(628,ArrayType(2,ArrayType(7,FloatType)))),param(Id(_),ArrayType(77,BoolType)),param(Id(__0),ArrayType(77,BoolType)),param(Id(z2_),ArrayType(77,BoolType)),param(Id(h),ArrayType(18,ArrayType(5,IntType))),param(Id(__f3),ArrayType(18,ArrayType(5,IntType))),param(Id(_),ArrayType(18,ArrayType(5,IntType))),param(Id(_),ArrayType(18,ArrayType(5,IntType))),param(Id(I9),ArrayType(18,ArrayType(5,IntType))),param(Id(hY),ArrayType(18,ArrayType(5,IntType)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(W),ClassType(Id(_))),param(Id(l9),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 900))

    def test_901(self):
        line = '''Class _:_{}Class oj{}Class _:_{}Class _i2_4{Destructor (){}Constructor (H_38g,f4,_6__:Array [Array [Array [Int ,0X5F],067],2];z:Array [Array [Array [Array [Int ,73],0x4B],0xE_F_3],02];H_,L_,_:Array [Int ,0B1011110]){Break ;}Constructor (){}Var $2,O,_,$_I:String ;}Class Q{}Class f{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(oj),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_i2_4),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(H_38g),ArrayType(2,ArrayType(55,ArrayType(95,IntType)))),param(Id(f4),ArrayType(2,ArrayType(55,ArrayType(95,IntType)))),param(Id(_6__),ArrayType(2,ArrayType(55,ArrayType(95,IntType)))),param(Id(z),ArrayType(2,ArrayType(3827,ArrayType(75,ArrayType(73,IntType))))),param(Id(H_),ArrayType(94,IntType)),param(Id(L_),ArrayType(94,IntType)),param(Id(_),ArrayType(94,IntType))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($2),StringType)),AttributeDecl(Instance,VarDecl(Id(O),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($_I),StringType))]),ClassDecl(Id(Q),[]),ClassDecl(Id(f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 901))

    def test_902(self):
        line = '''Class g:_P{$L8x4(SY6b6:Array [Int ,0x9];m,_:Array [String ,4_76_703];P:Float ;B__0:A){Return ;Break ;Continue ;}Constructor (R:Array [Int ,69];tkk:String ){}Destructor (){Var N_,H,_,En:Float ;} }'''
        expect = '''Program([ClassDecl(Id(g),Id(_P),[MethodDecl(Id($L8x4),Static,[param(Id(SY6b6),ArrayType(9,IntType)),param(Id(m),ArrayType(476703,StringType)),param(Id(_),ArrayType(476703,StringType)),param(Id(P),FloatType),param(Id(B__0),ClassType(Id(A)))],Block([Return(),Break,Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(R),ArrayType(69,IntType)),param(Id(tkk),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(N_),FloatType),VarDecl(Id(H),FloatType),VarDecl(Id(_),FloatType),VarDecl(Id(En),FloatType)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 902))

    def test_903(self):
        line = '''Class _:_{Val _,$_,Lg:Boolean ;Val $H__,__:String ;Val PTn,A,$_ih_O1__C:Array [Boolean ,79];Constructor (_,_,_:Array [Array [Array [Array [Array [Boolean ,0B10100],0B10_00100_0],0x3B],0B1_1],0X56];_14,Ja,ug,_:_b){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(Lg),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($H__),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(__),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(PTn),ArrayType(79,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(A),ArrayType(79,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_ih_O1__C),ArrayType(79,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(86,ArrayType(3,ArrayType(59,ArrayType(136,ArrayType(20,BoolType)))))),param(Id(_),ArrayType(86,ArrayType(3,ArrayType(59,ArrayType(136,ArrayType(20,BoolType)))))),param(Id(_),ArrayType(86,ArrayType(3,ArrayType(59,ArrayType(136,ArrayType(20,BoolType)))))),param(Id(_14),ClassType(Id(_b))),param(Id(Ja),ClassType(Id(_b))),param(Id(ug),ClassType(Id(_b))),param(Id(_),ClassType(Id(_b)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 903))

    def test_904(self):
        line = '''Class _W_5{l(jo,_:Float ){Continue ;}Val uj4:W;}Class d:_V{Constructor (_:A_A){}$45_(c,p_,B1_,_2,_5q:__8;up:Array [Array [Int ,90],90];_,_:Array [Array [Array [Array [Float ,0b1000011],0XE7],0b1_0],90]){} }Class t8{}'''
        expect = '''Program([ClassDecl(Id(_W_5),[MethodDecl(Id(l),Instance,[param(Id(jo),FloatType),param(Id(_),FloatType)],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(uj4),ClassType(Id(W)),NullLiteral()))]),ClassDecl(Id(d),Id(_V),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(A_A)))],Block([])),MethodDecl(Id($45_),Static,[param(Id(c),ClassType(Id(__8))),param(Id(p_),ClassType(Id(__8))),param(Id(B1_),ClassType(Id(__8))),param(Id(_2),ClassType(Id(__8))),param(Id(_5q),ClassType(Id(__8))),param(Id(up),ArrayType(90,ArrayType(90,IntType))),param(Id(_),ArrayType(90,ArrayType(2,ArrayType(231,ArrayType(67,FloatType))))),param(Id(_),ArrayType(90,ArrayType(2,ArrayType(231,ArrayType(67,FloatType)))))],Block([]))]),ClassDecl(Id(t8),[])])'''
        self.assertTrue(TestAST.test(line, expect, 904))

    def test_905(self):
        line = '''Class C{$4(){} }Class I:J{}Class _Y{Constructor (m_,N_YL:Array [String ,7_7];b:Array [String ,05];t,_O,gf,_:Array [Array [Array [Float ,43],43],11]){}Val $l_v,$J2:Array [Boolean ,0b1];}'''
        expect = '''Program([ClassDecl(Id(C),[MethodDecl(Id($4),Static,[],Block([]))]),ClassDecl(Id(I),Id(J),[]),ClassDecl(Id(_Y),[MethodDecl(Id(Constructor),Instance,[param(Id(m_),ArrayType(77,StringType)),param(Id(N_YL),ArrayType(77,StringType)),param(Id(b),ArrayType(5,StringType)),param(Id(t),ArrayType(11,ArrayType(43,ArrayType(43,FloatType)))),param(Id(_O),ArrayType(11,ArrayType(43,ArrayType(43,FloatType)))),param(Id(gf),ArrayType(11,ArrayType(43,ArrayType(43,FloatType)))),param(Id(_),ArrayType(11,ArrayType(43,ArrayType(43,FloatType))))],Block([])),AttributeDecl(Static,ConstDecl(Id($l_v),ArrayType(1,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($J2),ArrayType(1,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 905))

    def test_906(self):
        line = '''Class _{Val $_h,mT_H:Array [Array [Boolean ,04],27_5_6_535];Var $5:Boolean ;$_(_4e:Array [Array [Array [Array [Array [Array [String ,0X666_4_B],6],0X2D],0x9],0X2D],0X2D];W:n6){}_(){} }Class QG0_:o{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_h),ArrayType(2756535,ArrayType(4,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(mT_H),ArrayType(2756535,ArrayType(4,BoolType)),None)),AttributeDecl(Static,VarDecl(Id($5),BoolType)),MethodDecl(Id($_),Static,[param(Id(_4e),ArrayType(45,ArrayType(45,ArrayType(9,ArrayType(45,ArrayType(6,ArrayType(419403,StringType))))))),param(Id(W),ClassType(Id(n6)))],Block([])),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(QG0_),Id(o),[])])'''
        self.assertTrue(TestAST.test(line, expect, 906))

    def test_907(self):
        line = '''Class D:f{}Class C_:_8K2{Var T_Y:Array [Array [Boolean ,013],0b1];}Class _f54_:_r_D{}Class X_{}Class x3m:CIBh2{Var d:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B100],0B100],063],59],063],46],063];Val Qei34_,$d_:Int ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(D),Id(f),[]),ClassDecl(Id(C_),Id(_8K2),[AttributeDecl(Instance,VarDecl(Id(T_Y),ArrayType(1,ArrayType(11,BoolType))))]),ClassDecl(Id(_f54_),Id(_r_D),[]),ClassDecl(Id(X_),[]),ClassDecl(Id(x3m),Id(CIBh2),[AttributeDecl(Instance,VarDecl(Id(d),ArrayType(51,ArrayType(46,ArrayType(51,ArrayType(59,ArrayType(51,ArrayType(4,ArrayType(4,BoolType))))))))),AttributeDecl(Instance,ConstDecl(Id(Qei34_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($d_),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 907))

    def test_908(self):
        line = '''Class _{Destructor (){} }Class _37{}Class _k:d_1{Destructor (){Continue ;{} }Val r:Int ;Constructor (_:Array [Int ,18]){}Val $4d:String ;_H0m1_71(){}$7(_:T__H;__:_6N){Break ;} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_37),[]),ClassDecl(Id(_k),Id(d_1),[MethodDecl(Id(Destructor),Instance,[],Block([Continue,Block([])])),AttributeDecl(Instance,ConstDecl(Id(r),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(18,IntType))],Block([])),AttributeDecl(Static,ConstDecl(Id($4d),StringType,None)),MethodDecl(Id(_H0m1_71),Instance,[],Block([])),MethodDecl(Id($7),Static,[param(Id(_),ClassType(Id(T__H))),param(Id(__),ClassType(Id(_6N)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 908))

    def test_909(self):
        line = '''Class _g{Val _x_,$3:Float ;_(_:Array [Array [Array [Array [Array [Float ,0b110],0X5],035],35],64];tf:Array [Array [Boolean ,06],0b110]){} }Class kOk:X{}Class __:_{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_g),[AttributeDecl(Instance,ConstDecl(Id(_x_),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($3),FloatType,None)),MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(64,ArrayType(35,ArrayType(29,ArrayType(5,ArrayType(6,FloatType)))))),param(Id(tf),ArrayType(6,ArrayType(6,BoolType)))],Block([]))]),ClassDecl(Id(kOk),Id(X),[]),ClassDecl(Id(__),Id(_),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 909))

    def test_910(self):
        line = '''Class H{}Class P{Constructor (c:String ;_kR_2_:Array [Float ,056];a,_:Array [Array [Array [Array [Array [String ,2],056],5_3],01],0XB_05_A_8_C]){Continue ;}Val KO,d9:_;Var _,i:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(H),[]),ClassDecl(Id(P),[MethodDecl(Id(Constructor),Instance,[param(Id(c),StringType),param(Id(_kR_2_),ArrayType(46,FloatType)),param(Id(a),ArrayType(11557516,ArrayType(1,ArrayType(53,ArrayType(46,ArrayType(2,StringType)))))),param(Id(_),ArrayType(11557516,ArrayType(1,ArrayType(53,ArrayType(46,ArrayType(2,StringType))))))],Block([Continue])),AttributeDecl(Instance,ConstDecl(Id(KO),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(d9),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(i),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 910))

    def test_911(self):
        line = '''Class f_:_{Constructor (_:_7;_,F:_DU;_JSp:Int ;__:Int ){}$_(_,_a,F:Array [Float ,0xE]){} }Class _:_1m6{Var $q:Array [Array [Array [Array [Int ,04],0B1010],04],0x1];Constructor (T,__0_9:pD_3;_:Float ){Break ;} }Class s{Var $76PL,$_2:b;}'''
        expect = '''Program([ClassDecl(Id(f_),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_7))),param(Id(_),ClassType(Id(_DU))),param(Id(F),ClassType(Id(_DU))),param(Id(_JSp),IntType),param(Id(__),IntType)],Block([])),MethodDecl(Id($_),Static,[param(Id(_),ArrayType(14,FloatType)),param(Id(_a),ArrayType(14,FloatType)),param(Id(F),ArrayType(14,FloatType))],Block([]))]),ClassDecl(Id(_),Id(_1m6),[AttributeDecl(Static,VarDecl(Id($q),ArrayType(1,ArrayType(4,ArrayType(10,ArrayType(4,IntType)))))),MethodDecl(Id(Constructor),Instance,[param(Id(T),ClassType(Id(pD_3))),param(Id(__0_9),ClassType(Id(pD_3))),param(Id(_),FloatType)],Block([Break]))]),ClassDecl(Id(s),[AttributeDecl(Static,VarDecl(Id($76PL),ClassType(Id(b)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_2),ClassType(Id(b)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 911))

    def test_912(self):
        line = '''Class _077{Constructor (y_9,h:Array [Array [String ,0106],5_838_9];__Ii_x2,z:c;s:_){}Val $_,u__:Array [Array [Boolean ,06_3],2];Var $L9:Array [Boolean ,0b100111];Val $o:Float ;Var B:Int ;$i(){} }'''
        expect = '''Program([ClassDecl(Id(_077),[MethodDecl(Id(Constructor),Instance,[param(Id(y_9),ArrayType(58389,ArrayType(70,StringType))),param(Id(h),ArrayType(58389,ArrayType(70,StringType))),param(Id(__Ii_x2),ClassType(Id(c))),param(Id(z),ClassType(Id(c))),param(Id(s),ClassType(Id(_)))],Block([])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(2,ArrayType(51,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(u__),ArrayType(2,ArrayType(51,BoolType)),None)),AttributeDecl(Static,VarDecl(Id($L9),ArrayType(39,BoolType))),AttributeDecl(Static,ConstDecl(Id($o),FloatType,None)),AttributeDecl(Instance,VarDecl(Id(B),IntType)),MethodDecl(Id($i),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 912))

    def test_913(self):
        line = '''Class S:R_1{_(_:Int ;__c:T;T,j:Array [Array [Float ,0120],1];v,V3:Float ;I:Array [Int ,0x32]){Return ;}_(O,q_,E,_3,_,_,__v_,_,_7:D_79_Z7;_584,_0:Array [Float ,0B1010101]){} }Class E0_7:Th{}'''
        expect = '''Program([ClassDecl(Id(S),Id(R_1),[MethodDecl(Id(_),Instance,[param(Id(_),IntType),param(Id(__c),ClassType(Id(T))),param(Id(T),ArrayType(1,ArrayType(80,FloatType))),param(Id(j),ArrayType(1,ArrayType(80,FloatType))),param(Id(v),FloatType),param(Id(V3),FloatType),param(Id(I),ArrayType(50,IntType))],Block([Return()])),MethodDecl(Id(_),Instance,[param(Id(O),ClassType(Id(D_79_Z7))),param(Id(q_),ClassType(Id(D_79_Z7))),param(Id(E),ClassType(Id(D_79_Z7))),param(Id(_3),ClassType(Id(D_79_Z7))),param(Id(_),ClassType(Id(D_79_Z7))),param(Id(_),ClassType(Id(D_79_Z7))),param(Id(__v_),ClassType(Id(D_79_Z7))),param(Id(_),ClassType(Id(D_79_Z7))),param(Id(_7),ClassType(Id(D_79_Z7))),param(Id(_584),ArrayType(85,FloatType)),param(Id(_0),ArrayType(85,FloatType))],Block([]))]),ClassDecl(Id(E0_7),Id(Th),[])])'''
        self.assertTrue(TestAST.test(line, expect, 913))

    def test_914(self):
        line = '''Class k:_{}Class _:_4{$3_0k(_,_pS:Array [Float ,733];E_:Array [Array [Float ,031],0b1];_,_:String ){}Destructor (){}Constructor (X__,k_A_,_,m,_40AHr,v:_;_,_,_:Array [Boolean ,0B1]){} }'''
        expect = '''Program([ClassDecl(Id(k),Id(_),[]),ClassDecl(Id(_),Id(_4),[MethodDecl(Id($3_0k),Static,[param(Id(_),ArrayType(733,FloatType)),param(Id(_pS),ArrayType(733,FloatType)),param(Id(E_),ArrayType(1,ArrayType(25,FloatType))),param(Id(_),StringType),param(Id(_),StringType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(X__),ClassType(Id(_))),param(Id(k_A_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(m),ClassType(Id(_))),param(Id(_40AHr),ClassType(Id(_))),param(Id(v),ClassType(Id(_))),param(Id(_),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType)),param(Id(_),ArrayType(1,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 914))

    def test_915(self):
        line = '''Class _2_lT__8c{Val s:_;Var $H___:Array [Array [Boolean ,0B1001_0_10],0x36];M(_:_;Fb,g__,__:o){} }Class Nr:_{}Class _:b{Constructor (l:Int ;__:o5;_:Array [Array [Array [Array [Array [Float ,02],051],5],70],0B1_1];BY,KMY_,_,__nEC:_;_,_K:____;h:_U0W){} }Class C8:_{}'''
        expect = '''Program([ClassDecl(Id(_2_lT__8c),[AttributeDecl(Instance,ConstDecl(Id(s),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($H___),ArrayType(54,ArrayType(74,BoolType)))),MethodDecl(Id(M),Instance,[param(Id(_),ClassType(Id(_))),param(Id(Fb),ClassType(Id(o))),param(Id(g__),ClassType(Id(o))),param(Id(__),ClassType(Id(o)))],Block([]))]),ClassDecl(Id(Nr),Id(_),[]),ClassDecl(Id(_),Id(b),[MethodDecl(Id(Constructor),Instance,[param(Id(l),IntType),param(Id(__),ClassType(Id(o5))),param(Id(_),ArrayType(3,ArrayType(70,ArrayType(5,ArrayType(41,ArrayType(2,FloatType)))))),param(Id(BY),ClassType(Id(_))),param(Id(KMY_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(__nEC),ClassType(Id(_))),param(Id(_),ClassType(Id(____))),param(Id(_K),ClassType(Id(____))),param(Id(h),ClassType(Id(_U0W)))],Block([]))]),ClassDecl(Id(C8),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 915))

    def test_916(self):
        line = '''Class _:K__082{O78(){Var _:Array [Array [Array [Array [Array [Array [Array [Boolean ,0X3D],0143],04],0X11],06],0143],0X11];}Val $_5,v,$7:Array [Array [Array [Boolean ,0b1010100],11],0X3D];}Class y:y{}'''
        expect = '''Program([ClassDecl(Id(_),Id(K__082),[MethodDecl(Id(O78),Instance,[],Block([VarDecl(Id(_),ArrayType(17,ArrayType(99,ArrayType(6,ArrayType(17,ArrayType(4,ArrayType(99,ArrayType(61,BoolType))))))))])),AttributeDecl(Static,ConstDecl(Id($_5),ArrayType(61,ArrayType(11,ArrayType(84,BoolType))),None)),AttributeDecl(Instance,ConstDecl(Id(v),ArrayType(61,ArrayType(11,ArrayType(84,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(61,ArrayType(11,ArrayType(84,BoolType))),None))]),ClassDecl(Id(y),Id(y),[])])'''
        self.assertTrue(TestAST.test(line, expect, 916))

    def test_917(self):
        line = '''Class _:j{Destructor (){} }Class w{}Class _:_O{Val $_,$0v_,T:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0152],0X1_C_B],0B10010],07],0XD_66],0X61_0_5EA0F],0X21],0b101011],41_984];}'''
        expect = '''Program([ClassDecl(Id(_),Id(j),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(w),[]),ClassDecl(Id(_),Id(_O),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(41984,ArrayType(43,ArrayType(33,ArrayType(1627777551,ArrayType(3430,ArrayType(7,ArrayType(18,ArrayType(459,ArrayType(106,IntType))))))))),None)),AttributeDecl(Static,ConstDecl(Id($0v_),ArrayType(41984,ArrayType(43,ArrayType(33,ArrayType(1627777551,ArrayType(3430,ArrayType(7,ArrayType(18,ArrayType(459,ArrayType(106,IntType))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(T),ArrayType(41984,ArrayType(43,ArrayType(33,ArrayType(1627777551,ArrayType(3430,ArrayType(7,ArrayType(18,ArrayType(459,ArrayType(106,IntType))))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 917))

    def test_918(self):
        line = '''Class K9:_{}Class O_{Var __2P,$_:String ;$e(){}Val $3,$__:Array [Array [Array [Array [String ,01],31],037_3],0b11];Var ___,_:Array [Array [Array [Array [Int ,0x3],0X3],1],0x53];Val $36,b,_,$Ba,P0:_2;}'''
        expect = '''Program([ClassDecl(Id(K9),Id(_),[]),ClassDecl(Id(O_),[AttributeDecl(Instance,VarDecl(Id(__2P),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),MethodDecl(Id($e),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($3),ArrayType(3,ArrayType(251,ArrayType(31,ArrayType(1,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(3,ArrayType(251,ArrayType(31,ArrayType(1,StringType)))),None)),AttributeDecl(Instance,VarDecl(Id(___),ArrayType(83,ArrayType(1,ArrayType(3,ArrayType(3,IntType)))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(83,ArrayType(1,ArrayType(3,ArrayType(3,IntType)))))),AttributeDecl(Static,ConstDecl(Id($36),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(b),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($Ba),ClassType(Id(_2)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(P0),ClassType(Id(_2)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 918))

    def test_919(self):
        line = '''Class _:c{}Class __{$z(z_:Boolean ;_4cc5Z:Array [Array [Array [Array [Array [Array [Array [Array [Float ,5_3],14],0xC],0b1_1],0XA_1],07_4],0131],0b101];t91,f,OjI2F,_:j){} }Class _:_{}Class _:H{}'''
        expect = '''Program([ClassDecl(Id(_),Id(c),[]),ClassDecl(Id(__),[MethodDecl(Id($z),Static,[param(Id(z_),BoolType),param(Id(_4cc5Z),ArrayType(5,ArrayType(89,ArrayType(60,ArrayType(161,ArrayType(3,ArrayType(12,ArrayType(14,ArrayType(53,FloatType))))))))),param(Id(t91),ClassType(Id(j))),param(Id(f),ClassType(Id(j))),param(Id(OjI2F),ClassType(Id(j))),param(Id(_),ClassType(Id(j)))],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(H),[])])'''
        self.assertTrue(TestAST.test(line, expect, 919))

    def test_920(self):
        line = '''Class Xp{Var $hL:Int ;Constructor (){l::$I();}Constructor (lM1Z9,Av_,MD2GU__,U,d0,__:Array [Array [Array [Array [Array [Array [Int ,0x5B],014],3],83],0b11],0b1_1];_:String ;_S9,l_g52,z_6r,N,__:Float ){}$A(_A_YTL_,_f:Array [Array [String ,0B1011],0143]){} }Class _{Constructor (A,RO,_,_q:D;u,W:Float ;k:String ){}Var $2Ai,_,sH:Array [Array [Array [Int ,83],05],83];}Class _{$8(_76i2:Array [Float ,4]){} }'''
        expect = '''Program([ClassDecl(Id(Xp),[AttributeDecl(Static,VarDecl(Id($hL),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([Call(Id(l),Id($I),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(lM1Z9),ArrayType(3,ArrayType(3,ArrayType(83,ArrayType(3,ArrayType(12,ArrayType(91,IntType))))))),param(Id(Av_),ArrayType(3,ArrayType(3,ArrayType(83,ArrayType(3,ArrayType(12,ArrayType(91,IntType))))))),param(Id(MD2GU__),ArrayType(3,ArrayType(3,ArrayType(83,ArrayType(3,ArrayType(12,ArrayType(91,IntType))))))),param(Id(U),ArrayType(3,ArrayType(3,ArrayType(83,ArrayType(3,ArrayType(12,ArrayType(91,IntType))))))),param(Id(d0),ArrayType(3,ArrayType(3,ArrayType(83,ArrayType(3,ArrayType(12,ArrayType(91,IntType))))))),param(Id(__),ArrayType(3,ArrayType(3,ArrayType(83,ArrayType(3,ArrayType(12,ArrayType(91,IntType))))))),param(Id(_),StringType),param(Id(_S9),FloatType),param(Id(l_g52),FloatType),param(Id(z_6r),FloatType),param(Id(N),FloatType),param(Id(__),FloatType)],Block([])),MethodDecl(Id($A),Static,[param(Id(_A_YTL_),ArrayType(99,ArrayType(11,StringType))),param(Id(_f),ArrayType(99,ArrayType(11,StringType)))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(A),ClassType(Id(D))),param(Id(RO),ClassType(Id(D))),param(Id(_),ClassType(Id(D))),param(Id(_q),ClassType(Id(D))),param(Id(u),FloatType),param(Id(W),FloatType),param(Id(k),StringType)],Block([])),AttributeDecl(Static,VarDecl(Id($2Ai),ArrayType(83,ArrayType(5,ArrayType(83,IntType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(83,ArrayType(5,ArrayType(83,IntType))))),AttributeDecl(Instance,VarDecl(Id(sH),ArrayType(83,ArrayType(5,ArrayType(83,IntType)))))]),ClassDecl(Id(_),[MethodDecl(Id($8),Static,[param(Id(_76i2),ArrayType(4,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 920))

    def test_921(self):
        line = '''Class _{Constructor (__k:Boolean ;S5:String ;_9,L4_5Kzb:Array [Array [Array [Array [Array [Array [Array [String ,2],0X46],0b111],9],84],05],0B100011];_,_:Array [String ,0XA]){} }Class G_:Vx2{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__k),BoolType),param(Id(S5),StringType),param(Id(_9),ArrayType(35,ArrayType(5,ArrayType(84,ArrayType(9,ArrayType(7,ArrayType(70,ArrayType(2,StringType)))))))),param(Id(L4_5Kzb),ArrayType(35,ArrayType(5,ArrayType(84,ArrayType(9,ArrayType(7,ArrayType(70,ArrayType(2,StringType)))))))),param(Id(_),ArrayType(10,StringType)),param(Id(_),ArrayType(10,StringType))],Block([]))]),ClassDecl(Id(G_),Id(Vx2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 921))

    def test_922(self):
        line = '''Class lL:qX5{}Class Ne{Constructor (z:_;X7,_JS:x;_,i,_:P){Return ;}Constructor (M38:Array [Array [Float ,562],0B11011];_ZE1:Boolean ;_j,r,_t,B,tKQ_:V5;_:String ;_,__M,F:_7_;Y:Array [Array [Int ,0b10101],0x6];_e,vI_,_,_,_:Array [Boolean ,0b10]){} }'''
        expect = '''Program([ClassDecl(Id(lL),Id(qX5),[]),ClassDecl(Id(Ne),[MethodDecl(Id(Constructor),Instance,[param(Id(z),ClassType(Id(_))),param(Id(X7),ClassType(Id(x))),param(Id(_JS),ClassType(Id(x))),param(Id(_),ClassType(Id(P))),param(Id(i),ClassType(Id(P))),param(Id(_),ClassType(Id(P)))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(M38),ArrayType(27,ArrayType(562,FloatType))),param(Id(_ZE1),BoolType),param(Id(_j),ClassType(Id(V5))),param(Id(r),ClassType(Id(V5))),param(Id(_t),ClassType(Id(V5))),param(Id(B),ClassType(Id(V5))),param(Id(tKQ_),ClassType(Id(V5))),param(Id(_),StringType),param(Id(_),ClassType(Id(_7_))),param(Id(__M),ClassType(Id(_7_))),param(Id(F),ClassType(Id(_7_))),param(Id(Y),ArrayType(6,ArrayType(21,IntType))),param(Id(_e),ArrayType(2,BoolType)),param(Id(vI_),ArrayType(2,BoolType)),param(Id(_),ArrayType(2,BoolType)),param(Id(_),ArrayType(2,BoolType)),param(Id(_),ArrayType(2,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 922))

    def test_923(self):
        line = '''Class G:D_5l1_{}Class E{$V2_5_(A,r,I:Array [Float ,27];_4_2l,w:String ;_:Array [Float ,0x2A];Z_8_:_;_4v:h){}Var _:Array [Array [Array [Array [Float ,9],0xA],27],27];}Class M1__1{}'''
        expect = '''Program([ClassDecl(Id(G),Id(D_5l1_),[]),ClassDecl(Id(E),[MethodDecl(Id($V2_5_),Static,[param(Id(A),ArrayType(27,FloatType)),param(Id(r),ArrayType(27,FloatType)),param(Id(I),ArrayType(27,FloatType)),param(Id(_4_2l),StringType),param(Id(w),StringType),param(Id(_),ArrayType(42,FloatType)),param(Id(Z_8_),ClassType(Id(_))),param(Id(_4v),ClassType(Id(h)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(27,ArrayType(27,ArrayType(10,ArrayType(9,FloatType))))))]),ClassDecl(Id(M1__1),[])])'''
        self.assertTrue(TestAST.test(line, expect, 923))

    def test_924(self):
        line = '''Class Ln:_T7Y{}Class _:_{}Class _g4_:__{Val D9_2:Array [Boolean ,0x33];Val _F:Array [Int ,51];Destructor (){Continue ;} }Class T0BE_{Var $I_:Array [Array [Array [Int ,0X10],0b111001],010];}'''
        expect = '''Program([ClassDecl(Id(Ln),Id(_T7Y),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_g4_),Id(__),[AttributeDecl(Instance,ConstDecl(Id(D9_2),ArrayType(51,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_F),ArrayType(51,IntType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue]))]),ClassDecl(Id(T0BE_),[AttributeDecl(Static,VarDecl(Id($I_),ArrayType(8,ArrayType(57,ArrayType(16,IntType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 924))

    def test_925(self):
        line = '''Class _{Constructor (__:_;i:Array [Float ,5]){Break ;}Var V_:Array [Array [Array [String ,01],93_9],0b110111];Destructor (){}Constructor (M:Boolean ;_:Boolean ){}Val _1,$_:lj_;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_))),param(Id(i),ArrayType(5,FloatType))],Block([Break])),AttributeDecl(Instance,VarDecl(Id(V_),ArrayType(55,ArrayType(939,ArrayType(1,StringType))))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(M),BoolType),param(Id(_),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_1),ClassType(Id(lj_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(lj_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 925))

    def test_926(self):
        line = '''Class _:R4__s__{Val $5J:Float ;Val _r:Int ;E(W3_0_22_:Array [String ,0B1011000];_:Boolean ;X,S_:Array [Array [Boolean ,0B1],87];_,_,_2,s_w,_M,H4:Boolean ){Val m:String ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_),Id(R4__s__),[AttributeDecl(Static,ConstDecl(Id($5J),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_r),IntType,None)),MethodDecl(Id(E),Instance,[param(Id(W3_0_22_),ArrayType(88,StringType)),param(Id(_),BoolType),param(Id(X),ArrayType(87,ArrayType(1,BoolType))),param(Id(S_),ArrayType(87,ArrayType(1,BoolType))),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_2),BoolType),param(Id(s_w),BoolType),param(Id(_M),BoolType),param(Id(H4),BoolType)],Block([ConstDecl(Id(m),StringType,None),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 926))

    def test_927(self):
        line = '''Class s:d_My_{Constructor (_2,_,_,_,_:Boolean ;V:Array [Array [Array [Array [Array [Float ,050],73],73],050],01];_,__3594:String ;_,X__8_7_h:Boolean ;S_,_jQ_1,uw:Int ){Break ;} }'''
        expect = '''Program([ClassDecl(Id(s),Id(d_My_),[MethodDecl(Id(Constructor),Instance,[param(Id(_2),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),BoolType),param(Id(V),ArrayType(1,ArrayType(40,ArrayType(73,ArrayType(73,ArrayType(40,FloatType)))))),param(Id(_),StringType),param(Id(__3594),StringType),param(Id(_),BoolType),param(Id(X__8_7_h),BoolType),param(Id(S_),IntType),param(Id(_jQ_1),IntType),param(Id(uw),IntType)],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 927))

    def test_928(self):
        line = '''Class Go:_{$R5(Dw,__vu,_s:Array [Array [Array [Array [Array [Array [Array [Array [String ,0b1_0],0B1000101],07],0b100100],62],62],0b100100],62]){Continue ;} }Class _{Constructor (){}Constructor (v4:String ){} }'''
        expect = '''Program([ClassDecl(Id(Go),Id(_),[MethodDecl(Id($R5),Static,[param(Id(Dw),ArrayType(62,ArrayType(36,ArrayType(62,ArrayType(62,ArrayType(36,ArrayType(7,ArrayType(69,ArrayType(2,StringType))))))))),param(Id(__vu),ArrayType(62,ArrayType(36,ArrayType(62,ArrayType(62,ArrayType(36,ArrayType(7,ArrayType(69,ArrayType(2,StringType))))))))),param(Id(_s),ArrayType(62,ArrayType(36,ArrayType(62,ArrayType(62,ArrayType(36,ArrayType(7,ArrayType(69,ArrayType(2,StringType)))))))))],Block([Continue]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(v4),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 928))

    def test_929(self):
        line = '''Class e:_u{Constructor (Pt:String ;S_,R5,_,r,_1:Array [Array [Array [Array [Array [String ,0B1],06],036_0],0B1],3];__,___,y,L:Float ;F:E;_,_O_,_t7_G:Boolean ;__2q,D,_:Boolean ;_,_yX:Int ;_:Array [String ,05];ap:Array [Float ,021];_4kc:String ){}Val $4_:Int ;}'''
        expect = '''Program([ClassDecl(Id(e),Id(_u),[MethodDecl(Id(Constructor),Instance,[param(Id(Pt),StringType),param(Id(S_),ArrayType(3,ArrayType(1,ArrayType(240,ArrayType(6,ArrayType(1,StringType)))))),param(Id(R5),ArrayType(3,ArrayType(1,ArrayType(240,ArrayType(6,ArrayType(1,StringType)))))),param(Id(_),ArrayType(3,ArrayType(1,ArrayType(240,ArrayType(6,ArrayType(1,StringType)))))),param(Id(r),ArrayType(3,ArrayType(1,ArrayType(240,ArrayType(6,ArrayType(1,StringType)))))),param(Id(_1),ArrayType(3,ArrayType(1,ArrayType(240,ArrayType(6,ArrayType(1,StringType)))))),param(Id(__),FloatType),param(Id(___),FloatType),param(Id(y),FloatType),param(Id(L),FloatType),param(Id(F),ClassType(Id(E))),param(Id(_),BoolType),param(Id(_O_),BoolType),param(Id(_t7_G),BoolType),param(Id(__2q),BoolType),param(Id(D),BoolType),param(Id(_),BoolType),param(Id(_),IntType),param(Id(_yX),IntType),param(Id(_),ArrayType(5,StringType)),param(Id(ap),ArrayType(17,FloatType)),param(Id(_4kc),StringType)],Block([])),AttributeDecl(Static,ConstDecl(Id($4_),IntType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 929))

    def test_930(self):
        line = '''Class __W{Constructor (T:Array [Boolean ,0B110001];_,_,k,_,li:Array [Array [Array [Array [Array [Array [Array [Array [Array [Int ,0B1],0B110001],0102],0B110001],0B110001],0XA_E],0b1010111],0xC],20]){Continue ;} }Class z:S{}Class sU6{}'''
        expect = '''Program([ClassDecl(Id(__W),[MethodDecl(Id(Constructor),Instance,[param(Id(T),ArrayType(49,BoolType)),param(Id(_),ArrayType(20,ArrayType(12,ArrayType(87,ArrayType(174,ArrayType(49,ArrayType(49,ArrayType(66,ArrayType(49,ArrayType(1,IntType)))))))))),param(Id(_),ArrayType(20,ArrayType(12,ArrayType(87,ArrayType(174,ArrayType(49,ArrayType(49,ArrayType(66,ArrayType(49,ArrayType(1,IntType)))))))))),param(Id(k),ArrayType(20,ArrayType(12,ArrayType(87,ArrayType(174,ArrayType(49,ArrayType(49,ArrayType(66,ArrayType(49,ArrayType(1,IntType)))))))))),param(Id(_),ArrayType(20,ArrayType(12,ArrayType(87,ArrayType(174,ArrayType(49,ArrayType(49,ArrayType(66,ArrayType(49,ArrayType(1,IntType)))))))))),param(Id(li),ArrayType(20,ArrayType(12,ArrayType(87,ArrayType(174,ArrayType(49,ArrayType(49,ArrayType(66,ArrayType(49,ArrayType(1,IntType))))))))))],Block([Continue]))]),ClassDecl(Id(z),Id(S),[]),ClassDecl(Id(sU6),[])])'''
        self.assertTrue(TestAST.test(line, expect, 930))

    def test_931(self):
        line = '''Class e{Constructor (_36,_1:String ;__0,_,T:Array [Array [Boolean ,37],03];qY4,L__4_,x,t,R,r:G;__,v,z:_;k,L_71,t,_,___f:_q_Q9_;_:Array [Array [Array [Array [Array [Int ,0x9],03],26],0B10000],5];_,_R0:String ;_4,P:_){} }'''
        expect = '''Program([ClassDecl(Id(e),[MethodDecl(Id(Constructor),Instance,[param(Id(_36),StringType),param(Id(_1),StringType),param(Id(__0),ArrayType(3,ArrayType(37,BoolType))),param(Id(_),ArrayType(3,ArrayType(37,BoolType))),param(Id(T),ArrayType(3,ArrayType(37,BoolType))),param(Id(qY4),ClassType(Id(G))),param(Id(L__4_),ClassType(Id(G))),param(Id(x),ClassType(Id(G))),param(Id(t),ClassType(Id(G))),param(Id(R),ClassType(Id(G))),param(Id(r),ClassType(Id(G))),param(Id(__),ClassType(Id(_))),param(Id(v),ClassType(Id(_))),param(Id(z),ClassType(Id(_))),param(Id(k),ClassType(Id(_q_Q9_))),param(Id(L_71),ClassType(Id(_q_Q9_))),param(Id(t),ClassType(Id(_q_Q9_))),param(Id(_),ClassType(Id(_q_Q9_))),param(Id(___f),ClassType(Id(_q_Q9_))),param(Id(_),ArrayType(5,ArrayType(16,ArrayType(26,ArrayType(3,ArrayType(9,IntType)))))),param(Id(_),StringType),param(Id(_R0),StringType),param(Id(_4),ClassType(Id(_))),param(Id(P),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 931))

    def test_932(self):
        line = '''Class F2{Constructor (_,_,m:Int ;Z61,g7p,_,o:Int ;DTj:p){} }Class zD:B_8{Destructor (){}$4dGk(_,_,___,__,_1,__H:Int ;_P0:Array [Array [Boolean ,11],0X5];_:Array [Array [Array [Float ,0XE],0B1100000],0b1100000];RNe,V:i_;s6_02iO,o1X:_;_8_:String ){} }Class _:__{}Class U:L59{}'''
        expect = '''Program([ClassDecl(Id(F2),[MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),IntType),param(Id(m),IntType),param(Id(Z61),IntType),param(Id(g7p),IntType),param(Id(_),IntType),param(Id(o),IntType),param(Id(DTj),ClassType(Id(p)))],Block([]))]),ClassDecl(Id(zD),Id(B_8),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($4dGk),Static,[param(Id(_),IntType),param(Id(_),IntType),param(Id(___),IntType),param(Id(__),IntType),param(Id(_1),IntType),param(Id(__H),IntType),param(Id(_P0),ArrayType(5,ArrayType(11,BoolType))),param(Id(_),ArrayType(96,ArrayType(96,ArrayType(14,FloatType)))),param(Id(RNe),ClassType(Id(i_))),param(Id(V),ClassType(Id(i_))),param(Id(s6_02iO),ClassType(Id(_))),param(Id(o1X),ClassType(Id(_))),param(Id(_8_),StringType)],Block([]))]),ClassDecl(Id(_),Id(__),[]),ClassDecl(Id(U),Id(L59),[])])'''
        self.assertTrue(TestAST.test(line, expect, 932))

    def test_933(self):
        line = '''Class _C{}Class Lg:U{}Class HO:_N{Constructor (_,C,_9,_p:Array [Boolean ,7_9_5_5];_2,h8,H_:p_;_2:String ;_,_u:String ;_,_E6,w__,_8_:Array [Int ,026];y:Array [Array [Int ,95],0xA_1]){} }'''
        expect = '''Program([ClassDecl(Id(_C),[]),ClassDecl(Id(Lg),Id(U),[]),ClassDecl(Id(HO),Id(_N),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(7955,BoolType)),param(Id(C),ArrayType(7955,BoolType)),param(Id(_9),ArrayType(7955,BoolType)),param(Id(_p),ArrayType(7955,BoolType)),param(Id(_2),ClassType(Id(p_))),param(Id(h8),ClassType(Id(p_))),param(Id(H_),ClassType(Id(p_))),param(Id(_2),StringType),param(Id(_),StringType),param(Id(_u),StringType),param(Id(_),ArrayType(22,IntType)),param(Id(_E6),ArrayType(22,IntType)),param(Id(w__),ArrayType(22,IntType)),param(Id(_8_),ArrayType(22,IntType)),param(Id(y),ArrayType(161,ArrayType(95,IntType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 933))

    def test_934(self):
        line = '''Class __:_q{Constructor (n,M:Boolean ;d_,_6h:f;n6,r6z:Array [Boolean ,0x33];V,_,_58,_:Array [String ,6_2];j408,_,_:Array [Float ,0x4_AA];_,d:Array [Float ,0b101];_,_6,_:_Q){Break ;} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_q),[MethodDecl(Id(Constructor),Instance,[param(Id(n),BoolType),param(Id(M),BoolType),param(Id(d_),ClassType(Id(f))),param(Id(_6h),ClassType(Id(f))),param(Id(n6),ArrayType(51,BoolType)),param(Id(r6z),ArrayType(51,BoolType)),param(Id(V),ArrayType(62,StringType)),param(Id(_),ArrayType(62,StringType)),param(Id(_58),ArrayType(62,StringType)),param(Id(_),ArrayType(62,StringType)),param(Id(j408),ArrayType(1194,FloatType)),param(Id(_),ArrayType(1194,FloatType)),param(Id(_),ArrayType(1194,FloatType)),param(Id(_),ArrayType(5,FloatType)),param(Id(d),ArrayType(5,FloatType)),param(Id(_),ClassType(Id(_Q))),param(Id(_6),ClassType(Id(_Q))),param(Id(_),ClassType(Id(_Q)))],Block([Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 934))

    def test_935(self):
        line = '''Class a{Destructor (){}Var _D__2:Array [Int ,05];Val $ORMd6,$_:_6;$s_8Y_(){} }Class _:_{}Class Bn0:__BM{$ps(b,y,l:String ){}Var $58:Array [String ,064];}Class _{Destructor (){ {} }}'''
        expect = '''Program([ClassDecl(Id(a),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_D__2),ArrayType(5,IntType))),AttributeDecl(Static,ConstDecl(Id($ORMd6),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_6)),NullLiteral())),MethodDecl(Id($s_8Y_),Static,[],Block([]))]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(Bn0),Id(__BM),[MethodDecl(Id($ps),Static,[param(Id(b),StringType),param(Id(y),StringType),param(Id(l),StringType)],Block([])),AttributeDecl(Static,VarDecl(Id($58),ArrayType(52,StringType)))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 935))

    def test_936(self):
        line = '''Class M:_{$_3(O,n,_:Array [Array [Float ,0b1_0],0B1]){Continue ;Continue ;}Constructor (u_:Array [Array [Boolean ,05_3_72_73_3],02];_0_,__:Float ;_9__v:String ;l7,_R:_;h6_R_:Array [Array [Array [String ,58],0X3_6_9],0b1_0]){} }'''
        expect = '''Program([ClassDecl(Id(M),Id(_),[MethodDecl(Id($_3),Static,[param(Id(O),ArrayType(1,ArrayType(2,FloatType))),param(Id(n),ArrayType(1,ArrayType(2,FloatType))),param(Id(_),ArrayType(1,ArrayType(2,FloatType)))],Block([Continue,Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(u_),ArrayType(2,ArrayType(1439195,BoolType))),param(Id(_0_),FloatType),param(Id(__),FloatType),param(Id(_9__v),StringType),param(Id(l7),ClassType(Id(_))),param(Id(_R),ClassType(Id(_))),param(Id(h6_R_),ArrayType(2,ArrayType(873,ArrayType(58,StringType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 936))

    def test_937(self):
        line = '''Class k:_{Destructor (){Val T_h_,U_:Array [Float ,0X3_5C0_C];Continue ;} }Class _of:_{Var h,_,_1,$5,$_,$2,$G_b_:Array [Boolean ,0B1];Var Q,$_,Y_:Array [Array [Array [Array [Array [Array [Array [Array [Int ,71],0103],0b1],0b1001110],44],0xD],71],4];Destructor (){}_(){} }Class S:JA{}'''
        expect = '''Program([ClassDecl(Id(k),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(T_h_),ArrayType(220172,FloatType),None),ConstDecl(Id(U_),ArrayType(220172,FloatType),None),Continue]))]),ClassDecl(Id(_of),Id(_),[AttributeDecl(Instance,VarDecl(Id(h),ArrayType(1,BoolType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(1,BoolType))),AttributeDecl(Instance,VarDecl(Id(_1),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($5),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(1,BoolType))),AttributeDecl(Static,VarDecl(Id($G_b_),ArrayType(1,BoolType))),AttributeDecl(Instance,VarDecl(Id(Q),ArrayType(4,ArrayType(71,ArrayType(13,ArrayType(44,ArrayType(78,ArrayType(1,ArrayType(67,ArrayType(71,IntType)))))))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(4,ArrayType(71,ArrayType(13,ArrayType(44,ArrayType(78,ArrayType(1,ArrayType(67,ArrayType(71,IntType)))))))))),AttributeDecl(Instance,VarDecl(Id(Y_),ArrayType(4,ArrayType(71,ArrayType(13,ArrayType(44,ArrayType(78,ArrayType(1,ArrayType(67,ArrayType(71,IntType)))))))))),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(S),Id(JA),[])])'''
        self.assertTrue(TestAST.test(line, expect, 937))

    def test_938(self):
        line = '''Class _{Constructor (r:O;zT0127_,_,_,_,L:Array [Array [Array [Int ,056],0X45],65];_,_N7__:Array [Boolean ,65];_:Array [Boolean ,4_5_9];Ae769,____,G:Boolean ){} }Class F_:s_6{}Class _{Val _7U5:Array [Int ,1]=New _()--n::$L0;Val KW,$__8:Int ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(r),ClassType(Id(O))),param(Id(zT0127_),ArrayType(65,ArrayType(69,ArrayType(46,IntType)))),param(Id(_),ArrayType(65,ArrayType(69,ArrayType(46,IntType)))),param(Id(_),ArrayType(65,ArrayType(69,ArrayType(46,IntType)))),param(Id(_),ArrayType(65,ArrayType(69,ArrayType(46,IntType)))),param(Id(L),ArrayType(65,ArrayType(69,ArrayType(46,IntType)))),param(Id(_),ArrayType(65,BoolType)),param(Id(_N7__),ArrayType(65,BoolType)),param(Id(_),ArrayType(459,BoolType)),param(Id(Ae769),BoolType),param(Id(____),BoolType),param(Id(G),BoolType)],Block([]))]),ClassDecl(Id(F_),Id(s_6),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(G),ArrayType(1,IntType),BinaryOp(-,NewExpr(Id(_),[]),UnaryOp(-,FieldAccess(Id(n),Id($L0)))))),AttributeDecl(Instance,ConstDecl(Id(KW),IntType,None)),AttributeDecl(Static,ConstDecl(Id($__8),IntType,None))])])'''
        #self.assertTrue(TestAST.test(line, expect, 938))

    def test_939(self):
        line = '''Class __{Constructor (__3,rVX291,Z:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,0X1A],59],5],0B1_1],0x1],0B111110],0B111110],0x8],0X5_5_A_E],0X1A],0b11],07]){} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(__3),ArrayType(7,ArrayType(3,ArrayType(26,ArrayType(21934,ArrayType(8,ArrayType(62,ArrayType(62,ArrayType(1,ArrayType(3,ArrayType(5,ArrayType(59,ArrayType(26,FloatType))))))))))))),param(Id(rVX291),ArrayType(7,ArrayType(3,ArrayType(26,ArrayType(21934,ArrayType(8,ArrayType(62,ArrayType(62,ArrayType(1,ArrayType(3,ArrayType(5,ArrayType(59,ArrayType(26,FloatType))))))))))))),param(Id(Z),ArrayType(7,ArrayType(3,ArrayType(26,ArrayType(21934,ArrayType(8,ArrayType(62,ArrayType(62,ArrayType(1,ArrayType(3,ArrayType(5,ArrayType(59,ArrayType(26,FloatType)))))))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 939))

    def test_940(self):
        line = '''Class _0:D{Val _L7_:Array [Float ,32];}Class h0_8:E{Val _76,$TLq:Array [Array [String ,0x47],0B1001100];}Class f{}Class W:P{}Class U_{Constructor (_r,C,U57_7wO:Array [String ,48];F,z_Lg,_,v_s:_){ {} }}'''
        expect = '''Program([ClassDecl(Id(_0),Id(D),[AttributeDecl(Instance,ConstDecl(Id(_L7_),ArrayType(32,FloatType),None))]),ClassDecl(Id(h0_8),Id(E),[AttributeDecl(Instance,ConstDecl(Id(_76),ArrayType(76,ArrayType(71,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($TLq),ArrayType(76,ArrayType(71,StringType)),None))]),ClassDecl(Id(f),[]),ClassDecl(Id(W),Id(P),[]),ClassDecl(Id(U_),[MethodDecl(Id(Constructor),Instance,[param(Id(_r),ArrayType(48,StringType)),param(Id(C),ArrayType(48,StringType)),param(Id(U57_7wO),ArrayType(48,StringType)),param(Id(F),ClassType(Id(_))),param(Id(z_Lg),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(v_s),ClassType(Id(_)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 940))

    def test_941(self):
        line = '''Class _j5o:_e4_{Var _3g87,J:__;}Class e{Val $_,_,_:Array [Array [String ,05_32],07_477_6];Val f:_;Constructor (s2:Boolean ;r,__:Array [Int ,050];e83_6_,i8_,rMsp_:Float ;__04_,__di6,T__:Float ){ {}Continue ;} }Class X{$1(_9:Int ;_:tn;S,HW,U:__){} }'''
        expect = '''Program([ClassDecl(Id(_j5o),Id(_e4_),[AttributeDecl(Instance,VarDecl(Id(_3g87),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(J),ClassType(Id(__)),NullLiteral()))]),ClassDecl(Id(e),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(31230,ArrayType(346,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(31230,ArrayType(346,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(31230,ArrayType(346,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(f),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(s2),BoolType),param(Id(r),ArrayType(40,IntType)),param(Id(__),ArrayType(40,IntType)),param(Id(e83_6_),FloatType),param(Id(i8_),FloatType),param(Id(rMsp_),FloatType),param(Id(__04_),FloatType),param(Id(__di6),FloatType),param(Id(T__),FloatType)],Block([Block([]),Continue]))]),ClassDecl(Id(X),[MethodDecl(Id($1),Static,[param(Id(_9),IntType),param(Id(_),ClassType(Id(tn))),param(Id(S),ClassType(Id(__))),param(Id(HW),ClassType(Id(__))),param(Id(U),ClassType(Id(__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 941))

    def test_942(self):
        line = '''Class _{_2_y1(){} }Class u_{Val $0:Int ;$______(l:E;___2_9,o:Array [Array [String ,0b1],6]){}Constructor (){} }Class _:G_7_{Constructor (t:String ){} }Class C_{}Class m{Constructor (_,_:_){} }Class O{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(_2_y1),Instance,[],Block([]))]),ClassDecl(Id(u_),[AttributeDecl(Static,ConstDecl(Id($0),IntType,None)),MethodDecl(Id($______),Static,[param(Id(l),ClassType(Id(E))),param(Id(___2_9),ArrayType(6,ArrayType(1,StringType))),param(Id(o),ArrayType(6,ArrayType(1,StringType)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(G_7_),[MethodDecl(Id(Constructor),Instance,[param(Id(t),StringType)],Block([]))]),ClassDecl(Id(C_),[]),ClassDecl(Id(m),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(O),[])])'''
        self.assertTrue(TestAST.test(line, expect, 942))

    def test_943(self):
        line = '''Class W{Cd(y,_,_5_,_,w39,_,u,aD__,_,l:_;_:Int ;_474,__6:_;N,_,_:Array [Float ,0B1100001];d2_:Float ;__,P9:Boolean ){} }Class M{Destructor (){}Val $__Y:q1;V(){} }Class pP:s{}'''
        expect = '''Program([ClassDecl(Id(W),[MethodDecl(Id(Cd),Instance,[param(Id(y),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_5_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(w39),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(u),ClassType(Id(_))),param(Id(aD__),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(l),ClassType(Id(_))),param(Id(_),IntType),param(Id(_474),ClassType(Id(_))),param(Id(__6),ClassType(Id(_))),param(Id(N),ArrayType(97,FloatType)),param(Id(_),ArrayType(97,FloatType)),param(Id(_),ArrayType(97,FloatType)),param(Id(d2_),FloatType),param(Id(__),BoolType),param(Id(P9),BoolType)],Block([]))]),ClassDecl(Id(M),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($__Y),ClassType(Id(q1)),NullLiteral())),MethodDecl(Id(V),Instance,[],Block([]))]),ClassDecl(Id(pP),Id(s),[])])'''
        self.assertTrue(TestAST.test(line, expect, 943))

    def test_944(self):
        line = '''Class uu{}Class G{r(R:R;WSDYl:iD46;_0,i__,v_:_49;_,kd:nM;S_:Float ;_:Array [Array [Boolean ,0b111010],0b1];e_:Array [Array [Array [Float ,0123],0123],0B11];I:Array [Array [Array [Array [Float ,0123],0b100_0_0],74],0b11]){} }Class F:T_4u{Var $7,$29P,$7,$B:Int ;}Class _1{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(uu),[]),ClassDecl(Id(G),[MethodDecl(Id(r),Instance,[param(Id(R),ClassType(Id(R))),param(Id(WSDYl),ClassType(Id(iD46))),param(Id(_0),ClassType(Id(_49))),param(Id(i__),ClassType(Id(_49))),param(Id(v_),ClassType(Id(_49))),param(Id(_),ClassType(Id(nM))),param(Id(kd),ClassType(Id(nM))),param(Id(S_),FloatType),param(Id(_),ArrayType(1,ArrayType(58,BoolType))),param(Id(e_),ArrayType(3,ArrayType(83,ArrayType(83,FloatType)))),param(Id(I),ArrayType(3,ArrayType(74,ArrayType(16,ArrayType(83,FloatType)))))],Block([]))]),ClassDecl(Id(F),Id(T_4u),[AttributeDecl(Static,VarDecl(Id($7),IntType)),AttributeDecl(Static,VarDecl(Id($29P),IntType)),AttributeDecl(Static,VarDecl(Id($7),IntType)),AttributeDecl(Static,VarDecl(Id($B),IntType))]),ClassDecl(Id(_1),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 944))

    def test_945(self):
        line = '''Class i6:_{Var $z,$n,$7gI7_1,$_:Array [Array [Array [Array [String ,027],0xB_9],0b11],0b1];Val $_:Array [Array [Array [Float ,0b1001001],0x40],0B1];Val $1:_N;}Class _v{Val h:Array [Array [Float ,0B110010],2];}'''
        expect = '''Program([ClassDecl(Id(i6),Id(_),[AttributeDecl(Static,VarDecl(Id($z),ArrayType(1,ArrayType(3,ArrayType(185,ArrayType(23,StringType)))))),AttributeDecl(Static,VarDecl(Id($n),ArrayType(1,ArrayType(3,ArrayType(185,ArrayType(23,StringType)))))),AttributeDecl(Static,VarDecl(Id($7gI7_1),ArrayType(1,ArrayType(3,ArrayType(185,ArrayType(23,StringType)))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,ArrayType(3,ArrayType(185,ArrayType(23,StringType)))))),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(1,ArrayType(64,ArrayType(73,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(_N)),NullLiteral()))]),ClassDecl(Id(_v),[AttributeDecl(Instance,ConstDecl(Id(h),ArrayType(2,ArrayType(50,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 945))

    def test_946(self):
        line = '''Class J:k_{Val $_K,$w:_6;Constructor (){} }Class _Es4{Destructor (){Var _7:String ;} }Class c:N_{}Class V_8:g_{__(){_::$_();Break ;Continue ;} }Class e0_4_{Constructor (){} }Class p:__{}Class U{}'''
        expect = '''Program([ClassDecl(Id(J),Id(k_),[AttributeDecl(Static,ConstDecl(Id($_K),ClassType(Id(_6)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($w),ClassType(Id(_6)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_Es4),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_7),StringType)]))]),ClassDecl(Id(c),Id(N_),[]),ClassDecl(Id(V_8),Id(g_),[MethodDecl(Id(__),Instance,[],Block([Call(Id(_),Id($_),[]),Break,Continue]))]),ClassDecl(Id(e0_4_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(p),Id(__),[]),ClassDecl(Id(U),[])])'''
        self.assertTrue(TestAST.test(line, expect, 946))

    def test_947(self):
        line = '''Class B{}Class f{Val $__,$WG:Boolean ;Constructor (_xK,_1,T,RU5,z,_f:Float ;W,X,F,q:Float ;i:u;h_:Array [Array [Array [Array [Array [Array [Float ,035],040_4],0XD77_FF_9],2_3],03],50]){} }'''
        expect = '''Program([ClassDecl(Id(B),[]),ClassDecl(Id(f),[AttributeDecl(Static,ConstDecl(Id($__),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($WG),BoolType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_xK),FloatType),param(Id(_1),FloatType),param(Id(T),FloatType),param(Id(RU5),FloatType),param(Id(z),FloatType),param(Id(_f),FloatType),param(Id(W),FloatType),param(Id(X),FloatType),param(Id(F),FloatType),param(Id(q),FloatType),param(Id(i),ClassType(Id(u))),param(Id(h_),ArrayType(50,ArrayType(3,ArrayType(23,ArrayType(14123001,ArrayType(260,ArrayType(29,FloatType)))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 947))

    def test_948(self):
        line = '''Class I_q:V{Constructor (_,_5__:bX;_:Array [Array [Array [Array [Boolean ,0b1_1_00],49],0xB],0X4B];_,R3,_,_,L6,_,Y:Array [Array [Boolean ,49],0b111001];_2cB:String ;D5B1:_){} }Class _:I{}'''
        expect = '''Program([ClassDecl(Id(I_q),Id(V),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(bX))),param(Id(_5__),ClassType(Id(bX))),param(Id(_),ArrayType(75,ArrayType(11,ArrayType(49,ArrayType(12,BoolType))))),param(Id(_),ArrayType(57,ArrayType(49,BoolType))),param(Id(R3),ArrayType(57,ArrayType(49,BoolType))),param(Id(_),ArrayType(57,ArrayType(49,BoolType))),param(Id(_),ArrayType(57,ArrayType(49,BoolType))),param(Id(L6),ArrayType(57,ArrayType(49,BoolType))),param(Id(_),ArrayType(57,ArrayType(49,BoolType))),param(Id(Y),ArrayType(57,ArrayType(49,BoolType))),param(Id(_2cB),StringType),param(Id(D5B1),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(_),Id(I),[])])'''
        self.assertTrue(TestAST.test(line, expect, 948))

    def test_949(self):
        line = '''Class J7_:_B{Constructor (_,tr9,N,_1:Array [Array [Array [String ,01_7_7],0x40],0B1_1];y,_3T1_2:Array [Boolean ,0112];_,Q4,M4,_:__;v:_;_,g_,A:Float ){} }Class _:x1_{Var _a__:Float ;}'''
        expect = '''Program([ClassDecl(Id(J7_),Id(_B),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3,ArrayType(64,ArrayType(127,StringType)))),param(Id(tr9),ArrayType(3,ArrayType(64,ArrayType(127,StringType)))),param(Id(N),ArrayType(3,ArrayType(64,ArrayType(127,StringType)))),param(Id(_1),ArrayType(3,ArrayType(64,ArrayType(127,StringType)))),param(Id(y),ArrayType(74,BoolType)),param(Id(_3T1_2),ArrayType(74,BoolType)),param(Id(_),ClassType(Id(__))),param(Id(Q4),ClassType(Id(__))),param(Id(M4),ClassType(Id(__))),param(Id(_),ClassType(Id(__))),param(Id(v),ClassType(Id(_))),param(Id(_),FloatType),param(Id(g_),FloatType),param(Id(A),FloatType)],Block([]))]),ClassDecl(Id(_),Id(x1_),[AttributeDecl(Instance,VarDecl(Id(_a__),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 949))

    def test_950(self):
        line = '''Class a{Val r_m:E;Constructor (_,v__,_s_:String ;a:Array [Boolean ,0B11000]){Val _:String ;}_A_(_:Array [Int ,0x2];S_,m1,L_6:String ;_,L,kKq,_,__h6,eEU50T:Array [Float ,0B11000];_:Int ;iiP:String ){} }'''
        expect = '''Program([ClassDecl(Id(a),[AttributeDecl(Instance,ConstDecl(Id(r_m),ClassType(Id(E)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(v__),StringType),param(Id(_s_),StringType),param(Id(a),ArrayType(24,BoolType))],Block([ConstDecl(Id(_),StringType,None)])),MethodDecl(Id(_A_),Instance,[param(Id(_),ArrayType(2,IntType)),param(Id(S_),StringType),param(Id(m1),StringType),param(Id(L_6),StringType),param(Id(_),ArrayType(24,FloatType)),param(Id(L),ArrayType(24,FloatType)),param(Id(kKq),ArrayType(24,FloatType)),param(Id(_),ArrayType(24,FloatType)),param(Id(__h6),ArrayType(24,FloatType)),param(Id(eEU50T),ArrayType(24,FloatType)),param(Id(_),IntType),param(Id(iiP),StringType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 950))

    def test_951(self):
        line = '''Class _{Constructor (_,w:Array [Array [Array [Array [Array [Array [Int ,063],0XF8E9_1],0B10],0b1011011],0x1],063];P,s,eMX_H,p,W:String ;_9_e_,n_5:_){Var u,_,_dF2:Array [String ,0b1];} }Class N:_0fd{}Class hu{}Class Jd{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(51,ArrayType(1,ArrayType(91,ArrayType(2,ArrayType(1019537,ArrayType(51,IntType))))))),param(Id(w),ArrayType(51,ArrayType(1,ArrayType(91,ArrayType(2,ArrayType(1019537,ArrayType(51,IntType))))))),param(Id(P),StringType),param(Id(s),StringType),param(Id(eMX_H),StringType),param(Id(p),StringType),param(Id(W),StringType),param(Id(_9_e_),ClassType(Id(_))),param(Id(n_5),ClassType(Id(_)))],Block([VarDecl(Id(u),ArrayType(1,StringType)),VarDecl(Id(_),ArrayType(1,StringType)),VarDecl(Id(_dF2),ArrayType(1,StringType))]))]),ClassDecl(Id(N),Id(_0fd),[]),ClassDecl(Id(hu),[]),ClassDecl(Id(Jd),[])])'''
        self.assertTrue(TestAST.test(line, expect, 951))

    def test_952(self):
        line = '''Class _h{Constructor (_:Array [Boolean ,0X1D];A:Array [Array [Array [Array [Array [Array [Float ,0b1100100],0251_5],053],0b1_0_0],2_1_20],72];hG_g1,_YJ0:Array [Array [Float ,72],0x13];_:Array [Array [Float ,0XF_1],72]){Continue ;} }Class N7:_{J_(){} }'''
        expect = '''Program([ClassDecl(Id(_h),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(29,BoolType)),param(Id(A),ArrayType(72,ArrayType(2120,ArrayType(4,ArrayType(43,ArrayType(1357,ArrayType(100,FloatType))))))),param(Id(hG_g1),ArrayType(19,ArrayType(72,FloatType))),param(Id(_YJ0),ArrayType(19,ArrayType(72,FloatType))),param(Id(_),ArrayType(72,ArrayType(241,FloatType)))],Block([Continue]))]),ClassDecl(Id(N7),Id(_),[MethodDecl(Id(J_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 952))

    def test_953(self):
        line = '''Class __{Destructor (){}v_(v2_,w:Array [Array [Array [String ,063],063],063];_,z,_y,_bPS:Array [Float ,0B101000];a2:Int ;_61:_;_6,_0:Array [Array [Float ,0B101000],0B101000]){Continue ;}Val $_8c:Array [Array [Float ,0x4B],0X64];}'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(v_),Instance,[param(Id(v2_),ArrayType(51,ArrayType(51,ArrayType(51,StringType)))),param(Id(w),ArrayType(51,ArrayType(51,ArrayType(51,StringType)))),param(Id(_),ArrayType(40,FloatType)),param(Id(z),ArrayType(40,FloatType)),param(Id(_y),ArrayType(40,FloatType)),param(Id(_bPS),ArrayType(40,FloatType)),param(Id(a2),IntType),param(Id(_61),ClassType(Id(_))),param(Id(_6),ArrayType(40,ArrayType(40,FloatType))),param(Id(_0),ArrayType(40,ArrayType(40,FloatType)))],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($_8c),ArrayType(100,ArrayType(75,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 953))

    def test_954(self):
        line = '''Class CO_u0{}Class fR7:q1{Var NJ:String ;}Class n:g_U{}Class G2{Var NW,$_,$5:Array [Array [Array [Array [Float ,035],0b10101],0B1010001],2];}Class u8w:_2_6{Val j8:Array [String ,58];}'''
        expect = '''Program([ClassDecl(Id(CO_u0),[]),ClassDecl(Id(fR7),Id(q1),[AttributeDecl(Instance,VarDecl(Id(NJ),StringType))]),ClassDecl(Id(n),Id(g_U),[]),ClassDecl(Id(G2),[AttributeDecl(Instance,VarDecl(Id(NW),ArrayType(2,ArrayType(81,ArrayType(21,ArrayType(29,FloatType)))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(2,ArrayType(81,ArrayType(21,ArrayType(29,FloatType)))))),AttributeDecl(Static,VarDecl(Id($5),ArrayType(2,ArrayType(81,ArrayType(21,ArrayType(29,FloatType))))))]),ClassDecl(Id(u8w),Id(_2_6),[AttributeDecl(Instance,ConstDecl(Id(j8),ArrayType(58,StringType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 954))

    def test_955(self):
        line = '''Class _q:__V___{Val $_,$_,$_eX_,z5,_3,$_2,$l,_:_;Val $Z:Array [Array [Array [Array [Float ,0B1],0XAAC_5],3],013];WQ(_,v_h_,_iK___0,_,_M_Y,__Ok_7:Y;_V:String ;_Hd9W35_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_q),Id(__V___),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_eX_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(z5),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_3),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_2),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($l),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($Z),ArrayType(11,ArrayType(3,ArrayType(43717,ArrayType(1,FloatType)))),None)),MethodDecl(Id(WQ),Instance,[param(Id(_),ClassType(Id(Y))),param(Id(v_h_),ClassType(Id(Y))),param(Id(_iK___0),ClassType(Id(Y))),param(Id(_),ClassType(Id(Y))),param(Id(_M_Y),ClassType(Id(Y))),param(Id(__Ok_7),ClassType(Id(Y))),param(Id(_V),StringType),param(Id(_Hd9W35_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 955))

    def test_956(self):
        line = '''Class H_{Val _:String ;_(a,b:Array [Array [Array [String ,6],060],9];t,___R8:aO;_,_,__:Array [Array [Array [Boolean ,07],39],0X5];LO:Array [Array [Boolean ,8_1_2],0B1010111];_,O_:Array [Array [Int ,0x2],50_5]){} }Class Zl_:R{}'''
        expect = '''Program([ClassDecl(Id(H_),[AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),MethodDecl(Id(_),Instance,[param(Id(a),ArrayType(9,ArrayType(48,ArrayType(6,StringType)))),param(Id(b),ArrayType(9,ArrayType(48,ArrayType(6,StringType)))),param(Id(t),ClassType(Id(aO))),param(Id(___R8),ClassType(Id(aO))),param(Id(_),ArrayType(5,ArrayType(39,ArrayType(7,BoolType)))),param(Id(_),ArrayType(5,ArrayType(39,ArrayType(7,BoolType)))),param(Id(__),ArrayType(5,ArrayType(39,ArrayType(7,BoolType)))),param(Id(LO),ArrayType(87,ArrayType(812,BoolType))),param(Id(_),ArrayType(505,ArrayType(2,IntType))),param(Id(O_),ArrayType(505,ArrayType(2,IntType)))],Block([]))]),ClassDecl(Id(Zl_),Id(R),[])])'''
        self.assertTrue(TestAST.test(line, expect, 956))

    def test_957(self):
        line = '''Class l_d{$9(__X293_:Boolean ;__,__:Array [Array [Int ,0B1000011],0x49]){} }Class R_{Constructor (_:Array [Array [Array [Int ,0X58],30],0b10100];__,_ku:Array [Int ,0X58]){Break ;} }Class G{}'''
        expect = '''Program([ClassDecl(Id(l_d),[MethodDecl(Id($9),Static,[param(Id(__X293_),BoolType),param(Id(__),ArrayType(73,ArrayType(67,IntType))),param(Id(__),ArrayType(73,ArrayType(67,IntType)))],Block([]))]),ClassDecl(Id(R_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(20,ArrayType(30,ArrayType(88,IntType)))),param(Id(__),ArrayType(88,IntType)),param(Id(_ku),ArrayType(88,IntType))],Block([Break]))]),ClassDecl(Id(G),[])])'''
        self.assertTrue(TestAST.test(line, expect, 957))

    def test_958(self):
        line = '''Class _{Val _,C:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,0b1100011],0x31],0134],0X5],0B1],0134],0b1100011],0134],0xB0_6],0B1_1],4];}Class _H6K{}Class _{}Class L{}'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(4,ArrayType(3,ArrayType(2822,ArrayType(92,ArrayType(99,ArrayType(92,ArrayType(1,ArrayType(5,ArrayType(92,ArrayType(49,ArrayType(99,BoolType))))))))))),None)),AttributeDecl(Instance,ConstDecl(Id(C),ArrayType(4,ArrayType(3,ArrayType(2822,ArrayType(92,ArrayType(99,ArrayType(92,ArrayType(1,ArrayType(5,ArrayType(92,ArrayType(49,ArrayType(99,BoolType))))))))))),None))]),ClassDecl(Id(_H6K),[]),ClassDecl(Id(_),[]),ClassDecl(Id(L),[])])'''
        self.assertTrue(TestAST.test(line, expect, 958))

    def test_959(self):
        line = '''Class _:d{}Class w{Val $_12S:Array [String ,054];}Class V_{Var _:__;Val _,w,_,M1,f_W7_,l__,$K4l,$_,b_710P0:String ;f(Wr:Float ){}Val $yn,_o,_8,Nx,$_,uF:Array [Boolean ,0X50F_C_0];Constructor (){} }Class _{}Class _m{Constructor (_W2:e){} }Class _:E886{}'''
        expect = '''Program([ClassDecl(Id(_),Id(d),[]),ClassDecl(Id(w),[AttributeDecl(Static,ConstDecl(Id($_12S),ArrayType(44,StringType),None))]),ClassDecl(Id(V_),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(__)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(w),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(M1),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(f_W7_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(l__),StringType,None)),AttributeDecl(Static,ConstDecl(Id($K4l),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(b_710P0),StringType,None)),MethodDecl(Id(f),Instance,[param(Id(Wr),FloatType)],Block([])),AttributeDecl(Static,ConstDecl(Id($yn),ArrayType(331712,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_o),ArrayType(331712,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_8),ArrayType(331712,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(Nx),ArrayType(331712,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(331712,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(uF),ArrayType(331712,BoolType),None)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_m),[MethodDecl(Id(Constructor),Instance,[param(Id(_W2),ClassType(Id(e)))],Block([]))]),ClassDecl(Id(_),Id(E886),[])])'''
        self.assertTrue(TestAST.test(line, expect, 959))

    def test_960(self):
        line = '''Class C0{Constructor (_,I,c:__I9;_:Array [Array [Array [Array [Array [Array [String ,0b1000011],024],0142],04_6],1_9],61];V7,G_:_m;_,_:Float ;v,i_t:zN;Wcga0_0U,M:Array [String ,0142]){} }'''
        expect = '''Program([ClassDecl(Id(C0),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__I9))),param(Id(I),ClassType(Id(__I9))),param(Id(c),ClassType(Id(__I9))),param(Id(_),ArrayType(61,ArrayType(19,ArrayType(38,ArrayType(98,ArrayType(20,ArrayType(67,StringType))))))),param(Id(V7),ClassType(Id(_m))),param(Id(G_),ClassType(Id(_m))),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(v),ClassType(Id(zN))),param(Id(i_t),ClassType(Id(zN))),param(Id(Wcga0_0U),ArrayType(98,StringType)),param(Id(M),ArrayType(98,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 960))

    def test_961(self):
        line = '''Class __{}Class _:t{$_1(edgd:Array [String ,046];U,T7,_:Array [Float ,0B1];p:Array [String ,0B1010101]){} }Class DB{Constructor (_0RO:r;xw_:KL_){} }Class E_:Y{}Class Oz{}Class B{}Class _p{}'''
        expect = '''Program([ClassDecl(Id(__),[]),ClassDecl(Id(_),Id(t),[MethodDecl(Id($_1),Static,[param(Id(edgd),ArrayType(38,StringType)),param(Id(U),ArrayType(1,FloatType)),param(Id(T7),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType)),param(Id(p),ArrayType(85,StringType))],Block([]))]),ClassDecl(Id(DB),[MethodDecl(Id(Constructor),Instance,[param(Id(_0RO),ClassType(Id(r))),param(Id(xw_),ClassType(Id(KL_)))],Block([]))]),ClassDecl(Id(E_),Id(Y),[]),ClassDecl(Id(Oz),[]),ClassDecl(Id(B),[]),ClassDecl(Id(_p),[])])'''
        self.assertTrue(TestAST.test(line, expect, 961))

    def test_962(self):
        line = '''Class _X__{Var $h_k,$C,R,_:lN0;}Class _1:c{Constructor (v:Boolean ;x65R:Array [Array [Array [Array [Array [Array [Array [Array [Array [String ,0x2],5_7],0B110010],02],0115],0B110010],0X1],2],71]){} }'''
        expect = '''Program([ClassDecl(Id(_X__),[AttributeDecl(Static,VarDecl(Id($h_k),ClassType(Id(lN0)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($C),ClassType(Id(lN0)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(R),ClassType(Id(lN0)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(lN0)),NullLiteral()))]),ClassDecl(Id(_1),Id(c),[MethodDecl(Id(Constructor),Instance,[param(Id(v),BoolType),param(Id(x65R),ArrayType(71,ArrayType(2,ArrayType(1,ArrayType(50,ArrayType(77,ArrayType(2,ArrayType(50,ArrayType(57,ArrayType(2,StringType))))))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 962))

    def test_963(self):
        line = '''Class _5{Destructor (){Var _:Int ;Break ;} }Class UR:__{Destructor (){ {} }Constructor (xvHW3_,y1l,_,L,_:Array [Array [Array [Float ,0X3_D],043],0x4C];_70n,qYx__4,L,_,_:_Dfw9;x,_4O,_0,_,_,s:Float ;S,s,_,_bo_8_g_:K2x){} }'''
        expect = '''Program([ClassDecl(Id(_5),[MethodDecl(Id(Destructor),Instance,[],Block([VarDecl(Id(_),IntType),Break]))]),ClassDecl(Id(UR),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(xvHW3_),ArrayType(76,ArrayType(35,ArrayType(61,FloatType)))),param(Id(y1l),ArrayType(76,ArrayType(35,ArrayType(61,FloatType)))),param(Id(_),ArrayType(76,ArrayType(35,ArrayType(61,FloatType)))),param(Id(L),ArrayType(76,ArrayType(35,ArrayType(61,FloatType)))),param(Id(_),ArrayType(76,ArrayType(35,ArrayType(61,FloatType)))),param(Id(_70n),ClassType(Id(_Dfw9))),param(Id(qYx__4),ClassType(Id(_Dfw9))),param(Id(L),ClassType(Id(_Dfw9))),param(Id(_),ClassType(Id(_Dfw9))),param(Id(_),ClassType(Id(_Dfw9))),param(Id(x),FloatType),param(Id(_4O),FloatType),param(Id(_0),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(s),FloatType),param(Id(S),ClassType(Id(K2x))),param(Id(s),ClassType(Id(K2x))),param(Id(_),ClassType(Id(K2x))),param(Id(_bo_8_g_),ClassType(Id(K2x)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 963))

    def test_964(self):
        line = '''Class AvG:FFl{$X(_,_:String ;zy:Array [Array [String ,0x7_0],056];_:String ;K0,_k,___CA2_:Float ){} }Class _7{Constructor (){} }Class _U:u{$2(){Continue ;}Var K,e,_:Float ;}'''
        expect = '''Program([ClassDecl(Id(AvG),Id(FFl),[MethodDecl(Id($X),Static,[param(Id(_),StringType),param(Id(_),StringType),param(Id(zy),ArrayType(46,ArrayType(112,StringType))),param(Id(_),StringType),param(Id(K0),FloatType),param(Id(_k),FloatType),param(Id(___CA2_),FloatType)],Block([]))]),ClassDecl(Id(_7),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_U),Id(u),[MethodDecl(Id($2),Static,[],Block([Continue])),AttributeDecl(Instance,VarDecl(Id(K),FloatType)),AttributeDecl(Instance,VarDecl(Id(e),FloatType)),AttributeDecl(Instance,VarDecl(Id(_),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 964))

    def test_965(self):
        line = '''Class _UH{Constructor (y_2:Array [Array [Int ,0x1],8_0];_8N1r_,V,h9:Array [Array [Array [Array [Array [Array [Array [Array [String ,9],0B111111],0b1010110],0x30],0X53],055],0xD_6_0_F_D0_B1],9];_5:Float ){} }'''
        expect = '''Program([ClassDecl(Id(_UH),[MethodDecl(Id(Constructor),Instance,[param(Id(y_2),ArrayType(80,ArrayType(1,IntType))),param(Id(_8N1r_),ArrayType(9,ArrayType(3591360689,ArrayType(45,ArrayType(83,ArrayType(48,ArrayType(86,ArrayType(63,ArrayType(9,StringType))))))))),param(Id(V),ArrayType(9,ArrayType(3591360689,ArrayType(45,ArrayType(83,ArrayType(48,ArrayType(86,ArrayType(63,ArrayType(9,StringType))))))))),param(Id(h9),ArrayType(9,ArrayType(3591360689,ArrayType(45,ArrayType(83,ArrayType(48,ArrayType(86,ArrayType(63,ArrayType(9,StringType))))))))),param(Id(_5),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 965))

    def test_966(self):
        line = '''Class w{_(p35:Array [Float ,0xF];Z:Array [Array [Array [Array [Array [String ,041],01],01],0x34_7],8];_Ef,_,S,_75_,K__,_n,uk,y:Array [Float ,020];F,Y,H_:Array [Int ,0X48];_w:String ;__q,L7:Float ){} }'''
        expect = '''Program([ClassDecl(Id(w),[MethodDecl(Id(_),Instance,[param(Id(p35),ArrayType(15,FloatType)),param(Id(Z),ArrayType(8,ArrayType(839,ArrayType(1,ArrayType(1,ArrayType(33,StringType)))))),param(Id(_Ef),ArrayType(16,FloatType)),param(Id(_),ArrayType(16,FloatType)),param(Id(S),ArrayType(16,FloatType)),param(Id(_75_),ArrayType(16,FloatType)),param(Id(K__),ArrayType(16,FloatType)),param(Id(_n),ArrayType(16,FloatType)),param(Id(uk),ArrayType(16,FloatType)),param(Id(y),ArrayType(16,FloatType)),param(Id(F),ArrayType(72,IntType)),param(Id(Y),ArrayType(72,IntType)),param(Id(H_),ArrayType(72,IntType)),param(Id(_w),StringType),param(Id(__q),FloatType),param(Id(L7),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 966))

    def test_967(self):
        line = '''Class G_l_{Var Z,U,$s0,$8_,$7_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0xC],0107],0107],0b1],03_2],0b1],0xC];}Class c_:U6G{Constructor (_,_:Boolean ;_,_0,_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(G_l_),[AttributeDecl(Instance,VarDecl(Id(Z),ArrayType(12,ArrayType(1,ArrayType(26,ArrayType(1,ArrayType(71,ArrayType(71,ArrayType(12,BoolType))))))))),AttributeDecl(Instance,VarDecl(Id(U),ArrayType(12,ArrayType(1,ArrayType(26,ArrayType(1,ArrayType(71,ArrayType(71,ArrayType(12,BoolType))))))))),AttributeDecl(Static,VarDecl(Id($s0),ArrayType(12,ArrayType(1,ArrayType(26,ArrayType(1,ArrayType(71,ArrayType(71,ArrayType(12,BoolType))))))))),AttributeDecl(Static,VarDecl(Id($8_),ArrayType(12,ArrayType(1,ArrayType(26,ArrayType(1,ArrayType(71,ArrayType(71,ArrayType(12,BoolType))))))))),AttributeDecl(Static,VarDecl(Id($7_),ArrayType(12,ArrayType(1,ArrayType(26,ArrayType(1,ArrayType(71,ArrayType(71,ArrayType(12,BoolType)))))))))]),ClassDecl(Id(c_),Id(U6G),[MethodDecl(Id(Constructor),Instance,[param(Id(_),BoolType),param(Id(_),BoolType),param(Id(_),IntType),param(Id(_0),IntType),param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 967))

    def test_968(self):
        line = '''Class Fb:N3y_z{}Class _2:C{Val _E7,$9_,$_,A,$2:Int ;}Class _:v{Destructor (){}Var $72,_:K;Constructor (bxB9,_x,__,___iz26,i3g:Array [Array [Array [Float ,0x11],0xE],0B1010000]){Return ;Continue ;} }'''
        expect = '''Program([ClassDecl(Id(Fb),Id(N3y_z),[]),ClassDecl(Id(_2),Id(C),[AttributeDecl(Instance,ConstDecl(Id(_E7),IntType,None)),AttributeDecl(Static,ConstDecl(Id($9_),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(A),IntType,None)),AttributeDecl(Static,ConstDecl(Id($2),IntType,None))]),ClassDecl(Id(_),Id(v),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($72),ClassType(Id(K)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(K)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(bxB9),ArrayType(80,ArrayType(14,ArrayType(17,FloatType)))),param(Id(_x),ArrayType(80,ArrayType(14,ArrayType(17,FloatType)))),param(Id(__),ArrayType(80,ArrayType(14,ArrayType(17,FloatType)))),param(Id(___iz26),ArrayType(80,ArrayType(14,ArrayType(17,FloatType)))),param(Id(i3g),ArrayType(80,ArrayType(14,ArrayType(17,FloatType))))],Block([Return(),Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 968))

    def test_969(self):
        line = '''Class V:az{}Class _0:c_{Val __r_,_a2p3:Array [Array [Boolean ,5],06];$z_1__8g(Kc_9_N5,o:Array [String ,0xB];l_:String ;l9:Array [Float ,0x5C];C,_,x:Array [Array [Array [Array [Float ,017_4],1],0XC],0x9];_6_,___,j8,NE:R;_,__:Float ;_:Array [Array [Array [Boolean ,01_4657_4],0x6],3]){} }'''
        expect = '''Program([ClassDecl(Id(V),Id(az),[]),ClassDecl(Id(_0),Id(c_),[AttributeDecl(Instance,ConstDecl(Id(__r_),ArrayType(6,ArrayType(5,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_a2p3),ArrayType(6,ArrayType(5,BoolType)),None)),MethodDecl(Id($z_1__8g),Static,[param(Id(Kc_9_N5),ArrayType(11,StringType)),param(Id(o),ArrayType(11,StringType)),param(Id(l_),StringType),param(Id(l9),ArrayType(92,FloatType)),param(Id(C),ArrayType(9,ArrayType(12,ArrayType(1,ArrayType(124,FloatType))))),param(Id(_),ArrayType(9,ArrayType(12,ArrayType(1,ArrayType(124,FloatType))))),param(Id(x),ArrayType(9,ArrayType(12,ArrayType(1,ArrayType(124,FloatType))))),param(Id(_6_),ClassType(Id(R))),param(Id(___),ClassType(Id(R))),param(Id(j8),ClassType(Id(R))),param(Id(NE),ClassType(Id(R))),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(_),ArrayType(3,ArrayType(6,ArrayType(52604,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 969))

    def test_970(self):
        line = '''Class _:M{Destructor (){}Val _,_,$F:Array [String ,63];}Class _:E{}Class P{Val _,$_,$1_:Boolean ;Destructor (){}$Q(_:_;M,CjD,_:Float ){}Destructor (){} }Class b:_{}Class t3R{}'''
        expect = '''Program([ClassDecl(Id(_),Id(M),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(63,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(63,StringType),None)),AttributeDecl(Static,ConstDecl(Id($F),ArrayType(63,StringType),None))]),ClassDecl(Id(_),Id(E),[]),ClassDecl(Id(P),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($1_),BoolType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($Q),Static,[param(Id(_),ClassType(Id(_))),param(Id(M),FloatType),param(Id(CjD),FloatType),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(b),Id(_),[]),ClassDecl(Id(t3R),[])])'''
        self.assertTrue(TestAST.test(line, expect, 970))

    def test_971(self):
        line = '''Class X_1:_{Constructor (_:String ){}_(c:Array [Array [Array [Array [Boolean ,0B1],56],0B1],0X7];N6_0_,p,Y:_y__8263;r3:_B_8y;_:c;Y6,mk:Float ;_:Array [Array [Float ,8_5],0B1_1];_n:_;__,_4:Float ){Continue ;{Val _:String ;Continue ;} }}'''
        expect = '''Program([ClassDecl(Id(X_1),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType)],Block([])),MethodDecl(Id(_),Instance,[param(Id(c),ArrayType(7,ArrayType(1,ArrayType(56,ArrayType(1,BoolType))))),param(Id(N6_0_),ClassType(Id(_y__8263))),param(Id(p),ClassType(Id(_y__8263))),param(Id(Y),ClassType(Id(_y__8263))),param(Id(r3),ClassType(Id(_B_8y))),param(Id(_),ClassType(Id(c))),param(Id(Y6),FloatType),param(Id(mk),FloatType),param(Id(_),ArrayType(3,ArrayType(85,FloatType))),param(Id(_n),ClassType(Id(_))),param(Id(__),FloatType),param(Id(_4),FloatType)],Block([Continue,Block([ConstDecl(Id(_),StringType,None),Continue])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 971))

    def test_972(self):
        line = '''Class _8{$Yv(bz_,W2:_){Return ;Break ;} }Class _{Constructor (_177:X78_Pn7;_,_,_1H,_Hl:Array [Array [Float ,0X1_3],02_515_773];T:Array [Float ,0100]){} }Class _3:Z{Var _,$_A28,$7,$__,$6:_;Val _O,V_:p;}'''
        expect = '''Program([ClassDecl(Id(_8),[MethodDecl(Id($Yv),Static,[param(Id(bz_),ClassType(Id(_))),param(Id(W2),ClassType(Id(_)))],Block([Return(),Break]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_177),ClassType(Id(X78_Pn7))),param(Id(_),ArrayType(695291,ArrayType(19,FloatType))),param(Id(_),ArrayType(695291,ArrayType(19,FloatType))),param(Id(_1H),ArrayType(695291,ArrayType(19,FloatType))),param(Id(_Hl),ArrayType(695291,ArrayType(19,FloatType))),param(Id(T),ArrayType(64,FloatType))],Block([]))]),ClassDecl(Id(_3),Id(Z),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_A28),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($7),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_O),ClassType(Id(p)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(V_),ClassType(Id(p)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 972))

    def test_973(self):
        line = '''Class gy:J85{}Class P:_{Destructor (){} }Class h{Destructor (){} }Class ___:_7{Constructor (_8,__7,_6:Array [String ,8];J:Q;H_4:Array [Array [Float ,0B11011],052];Q_01,__q,_9:Float ;_51_,d:Float ;E,n9_6oH:Array [Array [Int ,8],6_8_21];_:Array [Float ,052];_:String ){}Constructor (){Break ;} }Class x:_8h6{}'''
        expect = '''Program([ClassDecl(Id(gy),Id(J85),[]),ClassDecl(Id(P),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(h),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(___),Id(_7),[MethodDecl(Id(Constructor),Instance,[param(Id(_8),ArrayType(8,StringType)),param(Id(__7),ArrayType(8,StringType)),param(Id(_6),ArrayType(8,StringType)),param(Id(J),ClassType(Id(Q))),param(Id(H_4),ArrayType(42,ArrayType(27,FloatType))),param(Id(Q_01),FloatType),param(Id(__q),FloatType),param(Id(_9),FloatType),param(Id(_51_),FloatType),param(Id(d),FloatType),param(Id(E),ArrayType(6821,ArrayType(8,IntType))),param(Id(n9_6oH),ArrayType(6821,ArrayType(8,IntType))),param(Id(_),ArrayType(42,FloatType)),param(Id(_),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(x),Id(_8h6),[])])'''
        self.assertTrue(TestAST.test(line, expect, 973))

    def test_974(self):
        line = '''Class _:s{Destructor (){}$Ml(H,n:yM){Val _y:String ;} }Class _:D{}Class E:q{}Class _y{Var $_,$T:Array [Array [String ,0b11],76];}Class j:E{Var $2,_1:___;}Class n__{}Class _:_9W{}'''
        expect = '''Program([ClassDecl(Id(_),Id(s),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($Ml),Static,[param(Id(H),ClassType(Id(yM))),param(Id(n),ClassType(Id(yM)))],Block([ConstDecl(Id(_y),StringType,None)]))]),ClassDecl(Id(_),Id(D),[]),ClassDecl(Id(E),Id(q),[]),ClassDecl(Id(_y),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(76,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($T),ArrayType(76,ArrayType(3,StringType))))]),ClassDecl(Id(j),Id(E),[AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(___)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_1),ClassType(Id(___)),NullLiteral()))]),ClassDecl(Id(n__),[]),ClassDecl(Id(_),Id(_9W),[])])'''
        self.assertTrue(TestAST.test(line, expect, 974))

    def test_975(self):
        line = '''Class _{}Class __{Val $_6:Array [Array [Array [Array [Array [Boolean ,3_27],0B1],0x7],29],0132];Val $A,D,$_u1:Array [Int ,0b1010010];Destructor (){o1::$5();}Var _4,T,_,__,$_:String ;}Class W:K{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(__),[AttributeDecl(Static,ConstDecl(Id($_6),ArrayType(90,ArrayType(29,ArrayType(7,ArrayType(1,ArrayType(327,BoolType))))),None)),AttributeDecl(Static,ConstDecl(Id($A),ArrayType(82,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(D),ArrayType(82,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_u1),ArrayType(82,IntType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Call(Id(o1),Id($5),[])])),AttributeDecl(Instance,VarDecl(Id(_4),StringType)),AttributeDecl(Instance,VarDecl(Id(T),StringType)),AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Instance,VarDecl(Id(__),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType))]),ClassDecl(Id(W),Id(K),[])])'''
        self.assertTrue(TestAST.test(line, expect, 975))

    def test_976(self):
        line = '''Class __56:SM{}Class _{}Class _:f{}Class _{S_(R,_B_:__;A,O:Array [Boolean ,0x4F]){}B(_:Int ){Continue ;}Constructor (){}Constructor (x5b_,J75u:Xn;z:Array [Int ,021]){}Val i,____O:Array [String ,0b1];}Class r{}'''
        expect = '''Program([ClassDecl(Id(__56),Id(SM),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(f),[]),ClassDecl(Id(_),[MethodDecl(Id(S_),Instance,[param(Id(R),ClassType(Id(__))),param(Id(_B_),ClassType(Id(__))),param(Id(A),ArrayType(79,BoolType)),param(Id(O),ArrayType(79,BoolType))],Block([])),MethodDecl(Id(B),Instance,[param(Id(_),IntType)],Block([Continue])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(x5b_),ClassType(Id(Xn))),param(Id(J75u),ClassType(Id(Xn))),param(Id(z),ArrayType(17,IntType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(i),ArrayType(1,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(____O),ArrayType(1,StringType),None))]),ClassDecl(Id(r),[])])'''
        self.assertTrue(TestAST.test(line, expect, 976))

    def test_977(self):
        line = '''Class E2:_Z85BR_{Var $__W_,____O72_,$M_,Y:String ;}Class a:__{}Class _{Constructor (_:Array [Array [Int ,0x45],91]){Break ;}Var I,_,$__,_,p,$5_z_,$9,I7,$4x,$_6,$_o,$k,$xX9,_,$5,$6,W8_6,_1_,$s4:r;}Class N_:F_{}'''
        expect = '''Program([ClassDecl(Id(E2),Id(_Z85BR_),[AttributeDecl(Static,VarDecl(Id($__W_),StringType)),AttributeDecl(Instance,VarDecl(Id(____O72_),StringType)),AttributeDecl(Static,VarDecl(Id($M_),StringType)),AttributeDecl(Instance,VarDecl(Id(Y),StringType))]),ClassDecl(Id(a),Id(__),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(91,ArrayType(69,IntType)))],Block([Break])),AttributeDecl(Instance,VarDecl(Id(I),ClassType(Id(r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(p),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5_z_),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($9),ClassType(Id(r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(I7),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4x),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_6),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_o),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($k),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($xX9),ClassType(Id(r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($5),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($6),ClassType(Id(r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(W8_6),ClassType(Id(r)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_1_),ClassType(Id(r)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($s4),ClassType(Id(r)),NullLiteral()))]),ClassDecl(Id(N_),Id(F_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 977))

    def test_978(self):
        line = '''Class _5p{Val $d_:String ;Val $8,W_,_2_b,_h:Int ;Constructor (_5,_,G:Array [Array [String ,05_35],0144];_:Array [Array [Array [String ,012],1_64_3_3],3];_H_,___:Array [Array [Int ,3],07]){Return ;}Var $9:String ;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_5p),[AttributeDecl(Static,ConstDecl(Id($d_),StringType,None)),AttributeDecl(Static,ConstDecl(Id($8),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(W_),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_2_b),IntType,None)),AttributeDecl(Instance,ConstDecl(Id(_h),IntType,None)),MethodDecl(Id(Constructor),Instance,[param(Id(_5),ArrayType(100,ArrayType(349,StringType))),param(Id(_),ArrayType(100,ArrayType(349,StringType))),param(Id(G),ArrayType(100,ArrayType(349,StringType))),param(Id(_),ArrayType(3,ArrayType(16433,ArrayType(10,StringType)))),param(Id(_H_),ArrayType(7,ArrayType(3,IntType))),param(Id(___),ArrayType(7,ArrayType(3,IntType)))],Block([Return()])),AttributeDecl(Static,VarDecl(Id($9),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 978))

    def test_979(self):
        line = '''Class __:RY{}Class _:bF{}Class Z{Destructor (){} }Class Rv__{}Class u9H3{__(_,_gE:Array [Array [Array [Int ,0XDD],0107],0107]){Return ;}Constructor (_,l,_,_:String ){} }Class _1{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(RY),[]),ClassDecl(Id(_),Id(bF),[]),ClassDecl(Id(Z),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(Rv__),[]),ClassDecl(Id(u9H3),[MethodDecl(Id(__),Instance,[param(Id(_),ArrayType(71,ArrayType(71,ArrayType(221,IntType)))),param(Id(_gE),ArrayType(71,ArrayType(71,ArrayType(221,IntType))))],Block([Return()])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(l),StringType),param(Id(_),StringType),param(Id(_),StringType)],Block([]))]),ClassDecl(Id(_1),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 979))

    def test_980(self):
        line = '''Class M{}Class A:_5_M{N(ooh,__5287:Float ;__:Float ;K:Array [Float ,0124];yW:Int ;PS6,f_,s_6zq:z){ {}Var _,_I_7_9,_:Array [Array [Array [Boolean ,0B10],0124],30];}Val $_,_n:Array [Boolean ,023_6];Var $D,W,$8:Float ;}'''
        expect = '''Program([ClassDecl(Id(M),[]),ClassDecl(Id(A),Id(_5_M),[MethodDecl(Id(N),Instance,[param(Id(ooh),FloatType),param(Id(__5287),FloatType),param(Id(__),FloatType),param(Id(K),ArrayType(84,FloatType)),param(Id(yW),IntType),param(Id(PS6),ClassType(Id(z))),param(Id(f_),ClassType(Id(z))),param(Id(s_6zq),ClassType(Id(z)))],Block([Block([]),VarDecl(Id(_),ArrayType(30,ArrayType(84,ArrayType(2,BoolType)))),VarDecl(Id(_I_7_9),ArrayType(30,ArrayType(84,ArrayType(2,BoolType)))),VarDecl(Id(_),ArrayType(30,ArrayType(84,ArrayType(2,BoolType))))])),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(158,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_n),ArrayType(158,BoolType),None)),AttributeDecl(Static,VarDecl(Id($D),FloatType)),AttributeDecl(Instance,VarDecl(Id(W),FloatType)),AttributeDecl(Static,VarDecl(Id($8),FloatType))])])'''
        self.assertTrue(TestAST.test(line, expect, 980))

    def test_981(self):
        line = '''Class tw_3q{Var _q:Array [Array [String ,0B1],0436];$B(_:Array [Array [Float ,0X5],7_3_1_1];wQ4w,__:_M_h;H1:Array [Boolean ,027];h:Boolean ;_,_:Float ;j_:Int ;V:Array [Array [Boolean ,0b100],027]){} }'''
        expect = '''Program([ClassDecl(Id(tw_3q),[AttributeDecl(Instance,VarDecl(Id(_q),ArrayType(286,ArrayType(1,StringType)))),MethodDecl(Id($B),Static,[param(Id(_),ArrayType(7311,ArrayType(5,FloatType))),param(Id(wQ4w),ClassType(Id(_M_h))),param(Id(__),ClassType(Id(_M_h))),param(Id(H1),ArrayType(23,BoolType)),param(Id(h),BoolType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(j_),IntType),param(Id(V),ArrayType(23,ArrayType(4,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 981))

    def test_982(self):
        line = '''Class __:_{Constructor (_:Array [Array [Array [Array [Array [Array [Array [Boolean ,0B1],01],01],01],1],01],03];T,_9O:Array [Array [Array [Int ,0x2_C],0xE],01];a_P8,___,_:_8;N_:Array [Array [Boolean ,04],0X2_633];b3J3_,F__V:Array [Array [Boolean ,0B110100],0B110100]){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(3,ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(1,ArrayType(1,BoolType)))))))),param(Id(T),ArrayType(1,ArrayType(14,ArrayType(44,IntType)))),param(Id(_9O),ArrayType(1,ArrayType(14,ArrayType(44,IntType)))),param(Id(a_P8),ClassType(Id(_8))),param(Id(___),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(N_),ArrayType(9779,ArrayType(4,BoolType))),param(Id(b3J3_),ArrayType(52,ArrayType(52,BoolType))),param(Id(F__V),ArrayType(52,ArrayType(52,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 982))

    def test_983(self):
        line = '''Class __:H_{Val _:_;Val _4,$V,Ok:Boolean ;$3(){Break ;}Val u_4__,G:Array [Array [Int ,010],4_37_4];b34(p6:_;s3:k_Z;o1_3_1,_,__:Float ;u_9,_,__:Array [Boolean ,9]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(__),Id(H_),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,ConstDecl(Id(_4),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($V),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(Ok),BoolType,None)),MethodDecl(Id($3),Static,[],Block([Break])),AttributeDecl(Instance,ConstDecl(Id(u_4__),ArrayType(4374,ArrayType(8,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(G),ArrayType(4374,ArrayType(8,IntType)),None)),MethodDecl(Id(b34),Instance,[param(Id(p6),ClassType(Id(_))),param(Id(s3),ClassType(Id(k_Z))),param(Id(o1_3_1),FloatType),param(Id(_),FloatType),param(Id(__),FloatType),param(Id(u_9),ArrayType(9,BoolType)),param(Id(_),ArrayType(9,BoolType)),param(Id(__),ArrayType(9,BoolType))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 983))

    def test_984(self):
        line = '''Class V4g{}Class x:_{}Class _:_s{Destructor (){}$_4(ZZvN5,_Ba8,G_6,a5_84:Array [String ,2_1];P2:Array [Array [Array [String ,7],024],024]){Break ;Var __:Array [Array [Boolean ,59],0x27];} }Class _2_1_6{$O(a0:Float ;A_,q,w,_P:Array [Int ,0X49];X,_:Array [Array [Float ,1],0B10001];R,N,_4:y){}Constructor (){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(V4g),[]),ClassDecl(Id(x),Id(_),[]),ClassDecl(Id(_),Id(_s),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_4),Static,[param(Id(ZZvN5),ArrayType(21,StringType)),param(Id(_Ba8),ArrayType(21,StringType)),param(Id(G_6),ArrayType(21,StringType)),param(Id(a5_84),ArrayType(21,StringType)),param(Id(P2),ArrayType(20,ArrayType(20,ArrayType(7,StringType))))],Block([Break,VarDecl(Id(__),ArrayType(39,ArrayType(59,BoolType)))]))]),ClassDecl(Id(_2_1_6),[MethodDecl(Id($O),Static,[param(Id(a0),FloatType),param(Id(A_),ArrayType(73,IntType)),param(Id(q),ArrayType(73,IntType)),param(Id(w),ArrayType(73,IntType)),param(Id(_P),ArrayType(73,IntType)),param(Id(X),ArrayType(17,ArrayType(1,FloatType))),param(Id(_),ArrayType(17,ArrayType(1,FloatType))),param(Id(R),ClassType(Id(y))),param(Id(N),ClassType(Id(y))),param(Id(_4),ClassType(Id(y)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 984))

    def test_985(self):
        line = '''Class f:_____{Constructor (_:__5;_8_,__:Array [Array [Float ,2_2_8],0X6];s,M:I1;_:Array [Array [Array [Array [String ,0B1],0XC],02],0XA_D];_,_,q:I_){ {} }Var $4,U__:Array [Boolean ,92];}'''
        expect = '''Program([ClassDecl(Id(f),Id(_____),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__5))),param(Id(_8_),ArrayType(6,ArrayType(228,FloatType))),param(Id(__),ArrayType(6,ArrayType(228,FloatType))),param(Id(s),ClassType(Id(I1))),param(Id(M),ClassType(Id(I1))),param(Id(_),ArrayType(173,ArrayType(2,ArrayType(12,ArrayType(1,StringType))))),param(Id(_),ClassType(Id(I_))),param(Id(_),ClassType(Id(I_))),param(Id(q),ClassType(Id(I_)))],Block([Block([])])),AttributeDecl(Static,VarDecl(Id($4),ArrayType(92,BoolType))),AttributeDecl(Instance,VarDecl(Id(U__),ArrayType(92,BoolType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 985))

    def test_986(self):
        line = '''Class _{$__(_5_IL:_2g__;x,x_:Array [Array [Array [Array [Array [Array [Array [Float ,96],0B1],0B10010],0x7FD],0B11],0x5B],0x5B];L4382:Array [Array [Array [Array [Float ,87],8],87],04_0];_v,__7,x8:Float ;_sU:O4_7;_,_L,L:Boolean ;n:Array [String ,0XF]){} }Class _{_(){_::$T8Z();Break ;Continue ;} }Class _{Xj(){Break ;}Lb(){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($__),Static,[param(Id(_5_IL),ClassType(Id(_2g__))),param(Id(x),ArrayType(91,ArrayType(91,ArrayType(3,ArrayType(2045,ArrayType(18,ArrayType(1,ArrayType(96,FloatType)))))))),param(Id(x_),ArrayType(91,ArrayType(91,ArrayType(3,ArrayType(2045,ArrayType(18,ArrayType(1,ArrayType(96,FloatType)))))))),param(Id(L4382),ArrayType(32,ArrayType(87,ArrayType(8,ArrayType(87,FloatType))))),param(Id(_v),FloatType),param(Id(__7),FloatType),param(Id(x8),FloatType),param(Id(_sU),ClassType(Id(O4_7))),param(Id(_),BoolType),param(Id(_L),BoolType),param(Id(L),BoolType),param(Id(n),ArrayType(15,StringType))],Block([]))]),ClassDecl(Id(_),[MethodDecl(Id(_),Instance,[],Block([Call(Id(_),Id($T8Z),[]),Break,Continue]))]),ClassDecl(Id(_),[MethodDecl(Id(Xj),Instance,[],Block([Break])),MethodDecl(Id(Lb),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 986))

    def test_987(self):
        line = '''Class n:h{}Class B{Val oL_,$_,$_o,$2:Ev;Var $_3,s,$r:__00;__(B,c,F,__7_:Boolean ){Continue ;Break ;} }Class B3:Q{Val _:Float ;Var _,$_,$70__2:_;}Class _:__{Constructor (_,s,_,X:QA){} }Class Rd:ZK{}Class i5{Destructor (){} }Class w6:_{}Class _{Var G__:Array [Array [Boolean ,04],05];}'''
        expect = '''Program([ClassDecl(Id(n),Id(h),[]),ClassDecl(Id(B),[AttributeDecl(Instance,ConstDecl(Id(oL_),ClassType(Id(Ev)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(Ev)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_o),ClassType(Id(Ev)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($2),ClassType(Id(Ev)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_3),ClassType(Id(__00)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(s),ClassType(Id(__00)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($r),ClassType(Id(__00)),NullLiteral())),MethodDecl(Id(__),Instance,[param(Id(B),BoolType),param(Id(c),BoolType),param(Id(F),BoolType),param(Id(__7_),BoolType)],Block([Continue,Break]))]),ClassDecl(Id(B3),Id(Q),[AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($70__2),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(QA))),param(Id(s),ClassType(Id(QA))),param(Id(_),ClassType(Id(QA))),param(Id(X),ClassType(Id(QA)))],Block([]))]),ClassDecl(Id(Rd),Id(ZK),[]),ClassDecl(Id(i5),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(w6),Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(G__),ArrayType(5,ArrayType(4,BoolType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 987))

    def test_988(self):
        line = '''Class T:_5{i9_m20(_,I,_,U_:Array [String ,81]){}$k09(_:Array [Int ,0b10_01];__,U_a_5,m,_8__,V,_6:_;_:E;d,S,_:Boolean ;_,_t,T:Array [Array [Boolean ,0X44],0x49]){} }Class _9:z__{Val $4,_:Array [Int ,0X44];}'''
        expect = '''Program([ClassDecl(Id(T),Id(_5),[MethodDecl(Id(i9_m20),Instance,[param(Id(_),ArrayType(81,StringType)),param(Id(I),ArrayType(81,StringType)),param(Id(_),ArrayType(81,StringType)),param(Id(U_),ArrayType(81,StringType))],Block([])),MethodDecl(Id($k09),Static,[param(Id(_),ArrayType(9,IntType)),param(Id(__),ClassType(Id(_))),param(Id(U_a_5),ClassType(Id(_))),param(Id(m),ClassType(Id(_))),param(Id(_8__),ClassType(Id(_))),param(Id(V),ClassType(Id(_))),param(Id(_6),ClassType(Id(_))),param(Id(_),ClassType(Id(E))),param(Id(d),BoolType),param(Id(S),BoolType),param(Id(_),BoolType),param(Id(_),ArrayType(73,ArrayType(68,BoolType))),param(Id(_t),ArrayType(73,ArrayType(68,BoolType))),param(Id(T),ArrayType(73,ArrayType(68,BoolType)))],Block([]))]),ClassDecl(Id(_9),Id(z__),[AttributeDecl(Static,ConstDecl(Id($4),ArrayType(68,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(68,IntType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 988))

    def test_989(self):
        line = '''Class _0_j_:i5R{}Class d{}Class __h:n{Var $_,_8,$__X,t,A_c,$_d7:Int ;}Class b_9{_(){Return ;}Destructor (){Break ;} }Class r_{Var $3:Array [Array [Array [Array [Boolean ,0b11000],0106],0x30],03];Val $_:s3;}Class B{}'''
        expect = '''Program([ClassDecl(Id(_0_j_),Id(i5R),[]),ClassDecl(Id(d),[]),ClassDecl(Id(__h),Id(n),[AttributeDecl(Static,VarDecl(Id($_),IntType)),AttributeDecl(Instance,VarDecl(Id(_8),IntType)),AttributeDecl(Static,VarDecl(Id($__X),IntType)),AttributeDecl(Instance,VarDecl(Id(t),IntType)),AttributeDecl(Instance,VarDecl(Id(A_c),IntType)),AttributeDecl(Static,VarDecl(Id($_d7),IntType))]),ClassDecl(Id(b_9),[MethodDecl(Id(_),Instance,[],Block([Return()])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(r_),[AttributeDecl(Static,VarDecl(Id($3),ArrayType(3,ArrayType(48,ArrayType(70,ArrayType(24,BoolType)))))),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(s3)),NullLiteral()))]),ClassDecl(Id(B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 989))

    def test_990(self):
        line = '''Class L_{Constructor (___9U3x_:t){}Constructor (){Continue ;} }Class __{Constructor (){}Val lL_,$_:Array [Array [Array [Array [Array [Array [Array [Float ,0B1],0xB_2],0140],0x1],0X20],29],0X20];}'''
        expect = '''Program([ClassDecl(Id(L_),[MethodDecl(Id(Constructor),Instance,[param(Id(___9U3x_),ClassType(Id(t)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Continue]))]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(lL_),ArrayType(32,ArrayType(29,ArrayType(32,ArrayType(1,ArrayType(96,ArrayType(178,ArrayType(1,FloatType))))))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(32,ArrayType(29,ArrayType(32,ArrayType(1,ArrayType(96,ArrayType(178,ArrayType(1,FloatType))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 990))

    def test_991(self):
        line = '''Class U{Constructor (d8_,D,__u:Array [Array [Int ,077],74]){}Val $960:_;}Class _{}Class _:_X_{Val $36:String ;Destructor (){} }Class _1:h{Val AN3v,_A_,_s,c,_,_D,$_2K_:Array [Boolean ,4510_1246];}'''
        expect = '''Program([ClassDecl(Id(U),[MethodDecl(Id(Constructor),Instance,[param(Id(d8_),ArrayType(74,ArrayType(63,IntType))),param(Id(D),ArrayType(74,ArrayType(63,IntType))),param(Id(__u),ArrayType(74,ArrayType(63,IntType)))],Block([])),AttributeDecl(Static,ConstDecl(Id($960),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_X_),[AttributeDecl(Static,ConstDecl(Id($36),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_1),Id(h),[AttributeDecl(Instance,ConstDecl(Id(AN3v),ArrayType(45101246,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_A_),ArrayType(45101246,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_s),ArrayType(45101246,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(c),ArrayType(45101246,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(45101246,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_D),ArrayType(45101246,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_2K_),ArrayType(45101246,BoolType),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 991))

    def test_992(self):
        line = '''Class _:_{Val _:_6__6;Constructor (_J:Array [Array [Array [Array [Array [Array [Array [String ,04_7_3],017],0526_3],90],0753],05_3],0x2];U_71,R0,v,__,_:Array [Array [Array [String ,0X4C],0X4_C],0457_34]){} }Class _:__{}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_6__6)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(_J),ArrayType(2,ArrayType(43,ArrayType(491,ArrayType(90,ArrayType(2739,ArrayType(15,ArrayType(315,StringType)))))))),param(Id(U_71),ArrayType(19420,ArrayType(76,ArrayType(76,StringType)))),param(Id(R0),ArrayType(19420,ArrayType(76,ArrayType(76,StringType)))),param(Id(v),ArrayType(19420,ArrayType(76,ArrayType(76,StringType)))),param(Id(__),ArrayType(19420,ArrayType(76,ArrayType(76,StringType)))),param(Id(_),ArrayType(19420,ArrayType(76,ArrayType(76,StringType))))],Block([]))]),ClassDecl(Id(_),Id(__),[])])'''
        self.assertTrue(TestAST.test(line, expect, 992))

    def test_993(self):
        line = '''Class N:_{$_(c,eZ8:Array [Float ,0x2E];_,_:Array [Array [Int ,93],0X19];K0__E:Array [Array [Boolean ,013],93];G,L26T_z:I){}Val $l:K_;}Class _:E{Constructor (){Return ;Continue ;{} }}'''
        expect = '''Program([ClassDecl(Id(N),Id(_),[MethodDecl(Id($_),Static,[param(Id(c),ArrayType(46,FloatType)),param(Id(eZ8),ArrayType(46,FloatType)),param(Id(_),ArrayType(25,ArrayType(93,IntType))),param(Id(_),ArrayType(25,ArrayType(93,IntType))),param(Id(K0__E),ArrayType(93,ArrayType(11,BoolType))),param(Id(G),ClassType(Id(I))),param(Id(L26T_z),ClassType(Id(I)))],Block([])),AttributeDecl(Static,ConstDecl(Id($l),ClassType(Id(K_)),NullLiteral()))]),ClassDecl(Id(_),Id(E),[MethodDecl(Id(Constructor),Instance,[],Block([Return(),Continue,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 993))

    def test_994(self):
        line = '''Class b_11_uH{Val d_:Array [String ,0x24];}Class B:__{Val S_,$5_:Array [Array [Array [Boolean ,07],0b11],0x24];Constructor (k__5_:Boolean ;_:_){Break ;Continue ;Return ;} }Class AQ_:w_{}'''
        expect = '''Program([ClassDecl(Id(b_11_uH),[AttributeDecl(Instance,ConstDecl(Id(d_),ArrayType(36,StringType),None))]),ClassDecl(Id(B),Id(__),[AttributeDecl(Instance,ConstDecl(Id(S_),ArrayType(36,ArrayType(3,ArrayType(7,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($5_),ArrayType(36,ArrayType(3,ArrayType(7,BoolType))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(k__5_),BoolType),param(Id(_),ClassType(Id(_)))],Block([Break,Continue,Return()]))]),ClassDecl(Id(AQ_),Id(w_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 994))

    def test_995(self):
        line = '''Class t:J{Var _U_j:Boolean ;Var $7K:Array [Array [Array [Boolean ,015],0x3_20],0x31];Constructor (T5_,_:String ;__,j___m2f_5C,T77,M:a_f){}Val $1:_H;Constructor (___f:__){} }Class _:P_{}'''
        expect = '''Program([ClassDecl(Id(t),Id(J),[AttributeDecl(Instance,VarDecl(Id(_U_j),BoolType)),AttributeDecl(Static,VarDecl(Id($7K),ArrayType(49,ArrayType(800,ArrayType(13,BoolType))))),MethodDecl(Id(Constructor),Instance,[param(Id(T5_),StringType),param(Id(_),StringType),param(Id(__),ClassType(Id(a_f))),param(Id(j___m2f_5C),ClassType(Id(a_f))),param(Id(T77),ClassType(Id(a_f))),param(Id(M),ClassType(Id(a_f)))],Block([])),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(_H)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(___f),ClassType(Id(__)))],Block([]))]),ClassDecl(Id(_),Id(P_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 995))

    def test_996(self):
        line = '''Class e4x:_6_{Constructor (__5:Array [Array [Array [Array [Array [Array [Int ,01],040],072],34],0B100111],05];L8,z,_,_,_,i,_d,d,_:gZ0;w_:Array [Float ,2_2_7];l4:k;_:Array [Boolean ,0XB6];_:Array [Array [Float ,0b1_1_0_110],0B1_0_01];Z,H,h9c,J:Float ){} }'''
        expect = '''Program([ClassDecl(Id(e4x),Id(_6_),[MethodDecl(Id(Constructor),Instance,[param(Id(__5),ArrayType(5,ArrayType(39,ArrayType(34,ArrayType(58,ArrayType(32,ArrayType(1,IntType))))))),param(Id(L8),ClassType(Id(gZ0))),param(Id(z),ClassType(Id(gZ0))),param(Id(_),ClassType(Id(gZ0))),param(Id(_),ClassType(Id(gZ0))),param(Id(_),ClassType(Id(gZ0))),param(Id(i),ClassType(Id(gZ0))),param(Id(_d),ClassType(Id(gZ0))),param(Id(d),ClassType(Id(gZ0))),param(Id(_),ClassType(Id(gZ0))),param(Id(w_),ArrayType(227,FloatType)),param(Id(l4),ClassType(Id(k))),param(Id(_),ArrayType(182,BoolType)),param(Id(_),ArrayType(9,ArrayType(54,FloatType))),param(Id(Z),FloatType),param(Id(H),FloatType),param(Id(h9c),FloatType),param(Id(J),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 996))

    def test_997(self):
        line = '''Class _:_{}Class _:_2{}Class _{Val M:Array [Array [Array [Array [String ,05],0B1_01],01_6_46],0XC_EB];Var __3_L,$_9:String ;}Class T_{_(_,_,_:Array [Array [Float ,8873],0B11_01];_S2_O:Int ){}Var _V_:o;}Class F_{Var d,$l:b2_;Constructor (){}Var _,$_j:Array [String ,4];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(_),Id(_2),[]),ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(M),ArrayType(3307,ArrayType(934,ArrayType(5,ArrayType(5,StringType)))),None)),AttributeDecl(Instance,VarDecl(Id(__3_L),StringType)),AttributeDecl(Static,VarDecl(Id($_9),StringType))]),ClassDecl(Id(T_),[MethodDecl(Id(_),Instance,[param(Id(_),ArrayType(13,ArrayType(8873,FloatType))),param(Id(_),ArrayType(13,ArrayType(8873,FloatType))),param(Id(_),ArrayType(13,ArrayType(8873,FloatType))),param(Id(_S2_O),IntType)],Block([])),AttributeDecl(Instance,VarDecl(Id(_V_),ClassType(Id(o)),NullLiteral()))]),ClassDecl(Id(F_),[AttributeDecl(Instance,VarDecl(Id(d),ClassType(Id(b2_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($l),ClassType(Id(b2_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(4,StringType))),AttributeDecl(Static,VarDecl(Id($_j),ArrayType(4,StringType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 997))

    def test_998(self):
        line = '''Class ru{}Class dW{}Class W:_3{Constructor (B:d;__,v68:String ;N:Array [Array [Boolean ,4],0XE];_:Array [Array [Array [Array [Float ,0b1],0b1_0],020],0625]){}$1d_(){Continue ;} }Class _:v{}Class _{}'''
        expect = '''Program([ClassDecl(Id(ru),[]),ClassDecl(Id(dW),[]),ClassDecl(Id(W),Id(_3),[MethodDecl(Id(Constructor),Instance,[param(Id(B),ClassType(Id(d))),param(Id(__),StringType),param(Id(v68),StringType),param(Id(N),ArrayType(14,ArrayType(4,BoolType))),param(Id(_),ArrayType(405,ArrayType(16,ArrayType(2,ArrayType(1,FloatType)))))],Block([])),MethodDecl(Id($1d_),Static,[],Block([Continue]))]),ClassDecl(Id(_),Id(v),[]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 998))

    def test_999(self):
        line = '''Class _{Var $8_:_;$_(HN:Q;__U_9,U_7x,_,_:Array [Array [Float ,0B101000],27];zQ:Array [Array [Float ,0B1],02_0];O,Z:Array [Float ,27]){Return ;Return ;} }Class bH0___{}Class __3D__{Constructor (){Break ;Return ;} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,VarDecl(Id($8_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id($_),Static,[param(Id(HN),ClassType(Id(Q))),param(Id(__U_9),ArrayType(27,ArrayType(40,FloatType))),param(Id(U_7x),ArrayType(27,ArrayType(40,FloatType))),param(Id(_),ArrayType(27,ArrayType(40,FloatType))),param(Id(_),ArrayType(27,ArrayType(40,FloatType))),param(Id(zQ),ArrayType(16,ArrayType(1,FloatType))),param(Id(O),ArrayType(27,FloatType)),param(Id(Z),ArrayType(27,FloatType))],Block([Return(),Return()]))]),ClassDecl(Id(bH0___),[]),ClassDecl(Id(__3D__),[MethodDecl(Id(Constructor),Instance,[],Block([Break,Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 999))
