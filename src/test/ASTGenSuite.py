import unittest
from TestUtils import TestAST
from AST import *

# !!! COMMENT THIS OUT
from main.d96.utils.AST import *


class ASTGenSuite(unittest.TestCase):
    def test_0(self):
        line = '''Class _{}Class _J_{}Class __r{o__(aI4_,M,d:bA;xQ:Boolean ){}_5K(_,_3_6_L_3:z;s:i_4){Break ;Break ;}Constructor (_lu:Int ;k:Array [Array [Array [Array [Array [Float ,0x21],0x46],0x46],0x46],0x46]){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_J_),[]),ClassDecl(Id(__r),[MethodDecl(Id(o__),Instance,[param(Id(aI4_),ClassType(Id(bA))),param(Id(M),ClassType(Id(bA))),param(Id(d),ClassType(Id(bA))),param(Id(xQ),BoolType)],Block([])),MethodDecl(Id(_5K),Instance,[param(Id(_),ClassType(Id(z))),param(Id(_3_6_L_3),ClassType(Id(z))),param(Id(s),ClassType(Id(i_4)))],Block([Break,Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_lu),IntType),param(Id(k),ArrayType(70,ArrayType(70,ArrayType(70,ArrayType(70,ArrayType(33,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 800))

    def test_1(self):
        line = '''Class _{Destructor (){} }Class z_W:_{}Class __{}Class _5:_{}Class H{}Class _{}Class z:__{$0_29(ZV_,_i__:String ;A:Array [Boolean ,8_6_6_27];_,s_:Array [Array [Boolean ,39],06];X3:p;p_wV_I_:Array [Boolean ,2];t0V,Q:Array [String ,040]){}Val $0,b__:Q_7W;}Class __:z_G{Z5_9(B:_;__6a:Int ;kt:Array [Array [Float ,39],0b1];xx:Array [Int ,3_0];_:String ;_m_:Array [Array [Float ,03_5_7],5_6]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(z_W),Id(_),[]),ClassDecl(Id(__),[]),ClassDecl(Id(_5),Id(_),[]),ClassDecl(Id(H),[]),ClassDecl(Id(_),[]),ClassDecl(Id(z),Id(__),[MethodDecl(Id($0_29),Static,[param(Id(ZV_),StringType),param(Id(_i__),StringType),param(Id(A),ArrayType(86627,BoolType)),param(Id(_),ArrayType(6,ArrayType(39,BoolType))),param(Id(s_),ArrayType(6,ArrayType(39,BoolType))),param(Id(X3),ClassType(Id(p))),param(Id(p_wV_I_),ArrayType(2,BoolType)),param(Id(t0V),ArrayType(32,StringType)),param(Id(Q),ArrayType(32,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($0),ClassType(Id(Q_7W)),None)),AttributeDecl(Instance,ConstDecl(Id(b__),ClassType(Id(Q_7W)),None))]),ClassDecl(Id(__),Id(z_G),[MethodDecl(Id(Z5_9),Instance,[param(Id(B),ClassType(Id(_))),param(Id(__6a),IntType),param(Id(kt),ArrayType(1,ArrayType(39,FloatType))),param(Id(xx),ArrayType(30,IntType)),param(Id(_),StringType),param(Id(_m_),ArrayType(56,ArrayType(239,FloatType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 801))

    def test_2(self):
        line = '''Class Q:iq_{Val B653:Array [Array [Float ,0430],100];}Class U2:a{Constructor (){} }Class n8{Constructor (U:Array [Boolean ,0B1010010];_B,_:Array [Int ,0b1101];t6,e:Boolean ){} }Class H2_{}'''
        expect = '''Program([ClassDecl(Id(Q),Id(iq_),[AttributeDecl(Instance,ConstDecl(Id(B653),ArrayType(100,ArrayType(280,FloatType)),None))]),ClassDecl(Id(U2),Id(a),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(n8),[MethodDecl(Id(Constructor),Instance,[param(Id(U),ArrayType(82,BoolType)),param(Id(_B),ArrayType(13,IntType)),param(Id(_),ArrayType(13,IntType)),param(Id(t6),BoolType),param(Id(e),BoolType)],Block([]))]),ClassDecl(Id(H2_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 802))

    def test_3(self):
        line = '''Class _{Constructor (L,P8,_,cYG853,_1:Float ;M,_R:Array [String ,016];W:Float ;_2:Array [Array [Float ,5],0x456]){}Destructor (){}Constructor (_:__se){}Var C_:String ;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(L),FloatType),param(Id(P8),FloatType),param(Id(_),FloatType),param(Id(cYG853),FloatType),param(Id(_1),FloatType),param(Id(M),ArrayType(14,StringType)),param(Id(_R),ArrayType(14,StringType)),param(Id(W),FloatType),param(Id(_2),ArrayType(1110,ArrayType(5,FloatType)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(__se)))],Block([])),AttributeDecl(Instance,VarDecl(Id(C_),StringType))])])'''
        self.assertTrue(TestAST.test(line, expect, 803))

    def test_4(self):
        line = '''Class O:z{Var $B,$E,$u7:_d;}Class J:_{}Class K{}Class M_H{}Class _6_{}Class jus{}Class H{Var $_,$FM,$__,tBy ,$9,$9:_;}Class _3:_{Constructor (_:_x;_:f64;x:String ;O:Array [String ,0X3D]){} }'''
        expect = '''Program([ClassDecl(Id(O),Id(z),[AttributeDecl(Static,VarDecl(Id($B),ClassType(Id(_d)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($E),ClassType(Id(_d)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($u7),ClassType(Id(_d)),NullLiteral()))]),ClassDecl(Id(J),Id(_),[]),ClassDecl(Id(K),[]),ClassDecl(Id(M_H),[]),ClassDecl(Id(_6_),[]),ClassDecl(Id(jus),[]),ClassDecl(Id(H),[AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($FM),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($__),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(tBy),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($9),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($9),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_3),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_x))),param(Id(_),ClassType(Id(f64))),param(Id(x),StringType),param(Id(O),ArrayType(61,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 804))

    def test_5(self):
        line = '''Class c:_e18{}Class K:_{}Class b_{Var $y98:Int ;Val $_,$3j5:Array [Array [Array [Array [Array [Float ,0x2A],0X1_D_1_6],0B10],0B11],0b1010000];Val c_,$_,$7,$x3d6,z,_:Array [Array [Array [Array [Boolean ,0B1000110],04],47],0X5A];Val $U_:Boolean ;$aur(__,G6_,_:Float ;B17:C){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(c),Id(_e18),[]),ClassDecl(Id(K),Id(_),[]),ClassDecl(Id(b_),[AttributeDecl(Static,VarDecl(Id($y98),IntType)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(80,ArrayType(3,ArrayType(2,ArrayType(7446,ArrayType(42,FloatType))))),None)),AttributeDecl(Static,ConstDecl(Id($3j5),ArrayType(80,ArrayType(3,ArrayType(2,ArrayType(7446,ArrayType(42,FloatType))))),None)),AttributeDecl(Instance,ConstDecl(Id(c_),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($x3d6),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(z),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(90,ArrayType(47,ArrayType(4,ArrayType(70,BoolType)))),None)),AttributeDecl(Static,ConstDecl(Id($U_),BoolType,None)),MethodDecl(Id($aur),Static,[param(Id(__),FloatType),param(Id(G6_),FloatType),param(Id(_),FloatType),param(Id(B17),ClassType(Id(C)))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 805))

    def test_6(self):
        line = '''Class CAR_3_{}Class _J1:_{O_(){}$b(a:Array [Array [Array [Int ,0X7],0b1],0B10111];Q,T__w,__,Oe_:Int ;w6,i:Int ;m,g:Array [Int ,0100];G_4:Int ;_:S;__,t:Array [String ,2];Z,_:Float ){} }'''
        expect = '''Program([ClassDecl(Id(CAR_3_),[]),ClassDecl(Id(_J1),Id(_),[MethodDecl(Id(O_),Instance,[],Block([])),MethodDecl(Id($b),Static,[param(Id(a),ArrayType(23,ArrayType(1,ArrayType(7,IntType)))),param(Id(Q),IntType),param(Id(T__w),IntType),param(Id(__),IntType),param(Id(Oe_),IntType),param(Id(w6),IntType),param(Id(i),IntType),param(Id(m),ArrayType(64,IntType)),param(Id(g),ArrayType(64,IntType)),param(Id(G_4),IntType),param(Id(_),ClassType(Id(S))),param(Id(__),ArrayType(2,StringType)),param(Id(t),ArrayType(2,StringType)),param(Id(Z),FloatType),param(Id(_),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 806))

    def test_7(self):
        line = '''Class _4:___{Constructor (_7,_:Array [Int ,0B10_0]){}Var I,$1FzI,$_:Array [Array [String ,0x8],0122];Val _,$t2Q,_,t4,$2p:Array [Array [Array [Array [Array [Array [Array [Float ,021_6],0X23],0122],075],1],05],77];Constructor (__3:Array [Array [Array [Boolean ,0122],77],02_430];H8,_1:Array [Int ,77];_,_:k){} }'''
        expect = '''Program([ClassDecl(Id(_4),Id(___),[MethodDecl(Id(Constructor),Instance,[param(Id(_7),ArrayType(4,IntType)),param(Id(_),ArrayType(4,IntType))],Block([])),AttributeDecl(Instance,VarDecl(Id(I),ArrayType(82,ArrayType(8,StringType)))),AttributeDecl(Static,VarDecl(Id($1FzI),ArrayType(82,ArrayType(8,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(82,ArrayType(8,StringType)))),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(77,ArrayType(5,ArrayType(1,ArrayType(61,ArrayType(82,ArrayType(35,ArrayType(142,FloatType))))))),None)),AttributeDecl(Static,ConstDecl(Id($t2Q),ArrayType(77,ArrayType(5,ArrayType(1,ArrayType(61,ArrayType(82,ArrayType(35,ArrayType(142,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(77,ArrayType(5,ArrayType(1,ArrayType(61,ArrayType(82,ArrayType(35,ArrayType(142,FloatType))))))),None)),AttributeDecl(Instance,ConstDecl(Id(t4),ArrayType(77,ArrayType(5,ArrayType(1,ArrayType(61,ArrayType(82,ArrayType(35,ArrayType(142,FloatType))))))),None)),AttributeDecl(Static,ConstDecl(Id($2p),ArrayType(77,ArrayType(5,ArrayType(1,ArrayType(61,ArrayType(82,ArrayType(35,ArrayType(142,FloatType))))))),None)),MethodDecl(Id(Constructor),Instance,[param(Id(__3),ArrayType(1304,ArrayType(77,ArrayType(82,BoolType)))),param(Id(H8),ArrayType(77,IntType)),param(Id(_1),ArrayType(77,IntType)),param(Id(_),ClassType(Id(k))),param(Id(_),ClassType(Id(k)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 807))

    def test_8(self):
        line = '''Class _{}Class S:_7H{Val wRq:Array [Int ,0b10];}Class _u{}Class _6l:_{}Class _23P:__{Val g_V,x__,_90,_,$_:Array [Array [Array [Array [String ,3_7],0142],69],7];Var iZ,$4,Qh3:jK;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(S),Id(_7H),[AttributeDecl(Instance,ConstDecl(Id(wRq),ArrayType(2,IntType),None))]),ClassDecl(Id(_u),[]),ClassDecl(Id(_6l),Id(_),[]),ClassDecl(Id(_23P),Id(__),[AttributeDecl(Instance,ConstDecl(Id(g_V),ArrayType(7,ArrayType(69,ArrayType(98,ArrayType(37,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(x__),ArrayType(7,ArrayType(69,ArrayType(98,ArrayType(37,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_90),ArrayType(7,ArrayType(69,ArrayType(98,ArrayType(37,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(7,ArrayType(69,ArrayType(98,ArrayType(37,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(7,ArrayType(69,ArrayType(98,ArrayType(37,StringType)))),None)),AttributeDecl(Instance,VarDecl(Id(iZ),ClassType(Id(jK)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($4),ClassType(Id(jK)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Qh3),ClassType(Id(jK)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 808))

    def test_9(self):
        line = '''Class _{Constructor (){Break ;} }Class h7{}Class n:_S_{}Class m{}Class w:Gb{Val $o,$_,$_,$_,_:Array [Array [Array [Array [String ,0X9B],0x2],023],077_6];Destructor (){}Val _:Array [Array [Array [Array [Boolean ,6],07],0x53],0b1];}Class __l_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Break]))]),ClassDecl(Id(h7),[]),ClassDecl(Id(n),Id(_S_),[]),ClassDecl(Id(m),[]),ClassDecl(Id(w),Id(Gb),[AttributeDecl(Static,ConstDecl(Id($o),ArrayType(510,ArrayType(19,ArrayType(2,ArrayType(155,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(510,ArrayType(19,ArrayType(2,ArrayType(155,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(510,ArrayType(19,ArrayType(2,ArrayType(155,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(510,ArrayType(19,ArrayType(2,ArrayType(155,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(510,ArrayType(19,ArrayType(2,ArrayType(155,StringType)))),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(1,ArrayType(83,ArrayType(7,ArrayType(6,BoolType)))),None))]),ClassDecl(Id(__l_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 809))

    def test_0(self):
        line = '''Class _X{}Class _:sk_{Val $6:Array [Array [Array [Array [Array [Boolean ,0X4],0B1],0X6_8_1],48],0X3A];Val r:_;Destructor (){}Val $W_6_:B;Constructor (_,_:Float ;kJ6H,_:Y){ {}Continue ;Continue ;} }Class _i44:RI{Var AZ:Float ;}Class _{}Class cb{}'''
        expect = '''Program([ClassDecl(Id(_X),[]),ClassDecl(Id(_),Id(sk_),[AttributeDecl(Static,ConstDecl(Id($6),ArrayType(58,ArrayType(48,ArrayType(1665,ArrayType(1,ArrayType(4,BoolType))))),None)),AttributeDecl(Instance,ConstDecl(Id(r),ClassType(Id(_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($W_6_),ClassType(Id(B)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_),FloatType),param(Id(kJ6H),ClassType(Id(Y))),param(Id(_),ClassType(Id(Y)))],Block([Block([]),Continue,Continue]))]),ClassDecl(Id(_i44),Id(RI),[AttributeDecl(Instance,VarDecl(Id(AZ),FloatType))]),ClassDecl(Id(_),[]),ClassDecl(Id(cb),[])])'''
        self.assertTrue(TestAST.test(line, expect, 810))

    def test_1(self):
        line = '''Class _2T{}Class U_:__{Destructor (){}$h_(){Continue ;} }Class _7V8:b_2L{Constructor (_Es,_,_:Array [Array [Array [Array [Float ,04],8_3],0B11],0106];t,u,Y9m:Array [Array [Array [Array [Array [Array [Float ,0b1],0B1],0B1_00_00],85],0106],5_49_9_3]){} }Class H_{}'''
        expect = '''Program([ClassDecl(Id(_2T),[]),ClassDecl(Id(U_),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($h_),Static,[],Block([Continue]))]),ClassDecl(Id(_7V8),Id(b_2L),[MethodDecl(Id(Constructor),Instance,[param(Id(_Es),ArrayType(70,ArrayType(3,ArrayType(83,ArrayType(4,FloatType))))),param(Id(_),ArrayType(70,ArrayType(3,ArrayType(83,ArrayType(4,FloatType))))),param(Id(_),ArrayType(70,ArrayType(3,ArrayType(83,ArrayType(4,FloatType))))),param(Id(t),ArrayType(54993,ArrayType(70,ArrayType(85,ArrayType(16,ArrayType(1,ArrayType(1,FloatType))))))),param(Id(u),ArrayType(54993,ArrayType(70,ArrayType(85,ArrayType(16,ArrayType(1,ArrayType(1,FloatType))))))),param(Id(Y9m),ArrayType(54993,ArrayType(70,ArrayType(85,ArrayType(16,ArrayType(1,ArrayType(1,FloatType)))))))],Block([]))]),ClassDecl(Id(H_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 811))

    def test_2(self):
        line = '''Class G{}Class f679{Val $_:Array [Int ,0b1_01];Constructor (s43,__:n){}Val $5_,d,$__:Array [Array [Array [Array [String ,0X2F],0B1],0X28],64];Destructor (){} }Class _:__X__M{Destructor (){}_(){Val _,_,c:_6M;}Val _,_,_:Float ;}'''
        expect = '''Program([ClassDecl(Id(G),[]),ClassDecl(Id(f679),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(5,IntType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(s43),ClassType(Id(n))),param(Id(__),ClassType(Id(n)))],Block([])),AttributeDecl(Static,ConstDecl(Id($5_),ArrayType(64,ArrayType(40,ArrayType(1,ArrayType(47,StringType)))),None)),AttributeDecl(Instance,ConstDecl(Id(d),ArrayType(64,ArrayType(40,ArrayType(1,ArrayType(47,StringType)))),None)),AttributeDecl(Static,ConstDecl(Id($__),ArrayType(64,ArrayType(40,ArrayType(1,ArrayType(47,StringType)))),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(__X__M),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[],Block([ConstDecl(Id(_),ClassType(Id(_6M)),None),ConstDecl(Id(_),ClassType(Id(_6M)),None),ConstDecl(Id(c),ClassType(Id(_6M)),None)])),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 812))

    def test_3(self):
        line = '''Class __6{I_(n,_:Q){ {}{} }}Class ____:___{}Class M8:_{Constructor (u:_;vHrL4,_7,_r:Float ;N3a,_:Int ;H59yj4R,j,__:_){}Var _,$_v,$u5:T;}Class _9:t2{Var $A,N2,$_:Array [Array [Array [String ,7],07_6],6_1];}'''
        expect = '''Program([ClassDecl(Id(__6),[MethodDecl(Id(I_),Instance,[param(Id(n),ClassType(Id(Q))),param(Id(_),ClassType(Id(Q)))],Block([Block([]),Block([])]))]),ClassDecl(Id(____),Id(___),[]),ClassDecl(Id(M8),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(u),ClassType(Id(_))),param(Id(vHrL4),FloatType),param(Id(_7),FloatType),param(Id(_r),FloatType),param(Id(N3a),IntType),param(Id(_),IntType),param(Id(H59yj4R),ClassType(Id(_))),param(Id(j),ClassType(Id(_))),param(Id(__),ClassType(Id(_)))],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(T)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_v),ClassType(Id(T)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($u5),ClassType(Id(T)),NullLiteral()))]),ClassDecl(Id(_9),Id(t2),[AttributeDecl(Static,VarDecl(Id($A),ArrayType(61,ArrayType(62,ArrayType(7,StringType))))),AttributeDecl(Instance,VarDecl(Id(N2),ArrayType(61,ArrayType(62,ArrayType(7,StringType))))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(61,ArrayType(62,ArrayType(7,StringType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 813))

    def test_4(self):
        line = '''Class k{Constructor (){} }Class aT6SU{}Class _u:_V{Constructor (w8k:Array [Boolean ,0XC]){}Constructor (_6_:Int ;y2,m_B_,P,l,x:n){Var _,A1:Array [Array [Array [Boolean ,075],6],0x29];}Destructor (){Break ;} }Class _:g{}'''
        expect = '''Program([ClassDecl(Id(k),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(aT6SU),[]),ClassDecl(Id(_u),Id(_V),[MethodDecl(Id(Constructor),Instance,[param(Id(w8k),ArrayType(12,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_6_),IntType),param(Id(y2),ClassType(Id(n))),param(Id(m_B_),ClassType(Id(n))),param(Id(P),ClassType(Id(n))),param(Id(l),ClassType(Id(n))),param(Id(x),ClassType(Id(n)))],Block([VarDecl(Id(_),ArrayType(41,ArrayType(6,ArrayType(61,BoolType)))),VarDecl(Id(A1),ArrayType(41,ArrayType(6,ArrayType(61,BoolType))))])),MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(_),Id(g),[])])'''
        self.assertTrue(TestAST.test(line, expect, 814))

    def test_5(self):
        line = '''Class y_7{Destructor (){} }Class _1_2__5__{$Xx_(MW3:Array [String ,0B111001]){Var __:Array [Array [Float ,0b1101],06_4_7];Continue ;}Val _4,n4:String ;Val $vG,$y:Boolean ;}Class Ee{}'''
        expect = '''Program([ClassDecl(Id(y_7),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_1_2__5__),[MethodDecl(Id($Xx_),Static,[param(Id(MW3),ArrayType(57,StringType))],Block([VarDecl(Id(__),ArrayType(423,ArrayType(13,FloatType))),Continue])),AttributeDecl(Instance,ConstDecl(Id(_4),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(n4),StringType,None)),AttributeDecl(Static,ConstDecl(Id($vG),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($y),BoolType,None))]),ClassDecl(Id(Ee),[])])'''
        self.assertTrue(TestAST.test(line, expect, 815))

    def test_6(self):
        line = '''Class P:_n1C__A{}Class __{}Class _0:_{Destructor (){}Constructor (){} }Class _:z_{}Class I__l:e_0n{Val $_8,h,_:__;Constructor (O__wQ:_x;l_c,p_2:Boolean ){Var _:Array [Float ,8_85];Continue ;} }Class __:_{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(P),Id(_n1C__A),[]),ClassDecl(Id(__),[]),ClassDecl(Id(_0),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(z_),[]),ClassDecl(Id(I__l),Id(e_0n),[AttributeDecl(Static,ConstDecl(Id($_8),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(h),ClassType(Id(__)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(__)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(O__wQ),ClassType(Id(_x))),param(Id(l_c),BoolType),param(Id(p_2),BoolType)],Block([VarDecl(Id(_),ArrayType(885,FloatType)),Continue]))]),ClassDecl(Id(__),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 816))

    def test_7(self):
        line = '''Class _I:Q{}Class _:_{}Class q86{Val $12:Array [String ,0b1010110];Val _7:_U4U__;}Class __7:_up{}Class R:cV{Constructor (z1,A:_;PdK:Array [Int ,0B10]){ {Var r_7_W:Array [Float ,062];}Break ;} }Class _{Constructor (zh6:Array [Array [Array [Array [Array [Array [Array [Boolean ,54],3],54],54],062],0B1],7];_,_41,__,pR,_:Int ){} }Class p4:_{Var P:Array [Array [Array [Array [Float ,0x3C],062],0X5],0x9C];Val _:P;}Class _{}Class _:_{}'''
        expect = '''Program([ClassDecl(Id(_I),Id(Q),[]),ClassDecl(Id(_),Id(_),[]),ClassDecl(Id(q86),[AttributeDecl(Static,ConstDecl(Id($12),ArrayType(86,StringType),None)),AttributeDecl(Instance,ConstDecl(Id(_7),ClassType(Id(_U4U__)),None))]),ClassDecl(Id(__7),Id(_up),[]),ClassDecl(Id(R),Id(cV),[MethodDecl(Id(Constructor),Instance,[param(Id(z1),ClassType(Id(_))),param(Id(A),ClassType(Id(_))),param(Id(PdK),ArrayType(2,IntType))],Block([Block([VarDecl(Id(r_7_W),ArrayType(50,FloatType))]),Break]))]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(zh6),ArrayType(7,ArrayType(1,ArrayType(50,ArrayType(54,ArrayType(54,ArrayType(3,ArrayType(54,BoolType)))))))),param(Id(_),IntType),param(Id(_41),IntType),param(Id(__),IntType),param(Id(pR),IntType),param(Id(_),IntType)],Block([]))]),ClassDecl(Id(p4),Id(_),[AttributeDecl(Instance,VarDecl(Id(P),ArrayType(156,ArrayType(5,ArrayType(50,ArrayType(60,FloatType)))))),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(P)),None))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 817))

    def test_8(self):
        line = '''Class z:n_{}Class _{Constructor (u__l,ek_,_,q:F;Q,Q:_;j5,_,__z,_:g;_,NF:Array [Boolean ,6559_38_0];__B:Array [Array [Boolean ,0XD],0b1_011];x:_z;__H3_:_0;e,_Y,o0_,_:_;e,_:_;K,X:Int ;_qjJ2_,S,_,___l5_,B_:Int ){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(z),Id(n_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(u__l),ClassType(Id(F))),param(Id(ek_),ClassType(Id(F))),param(Id(_),ClassType(Id(F))),param(Id(q),ClassType(Id(F))),param(Id(Q),ClassType(Id(_))),param(Id(Q),ClassType(Id(_))),param(Id(j5),ClassType(Id(g))),param(Id(_),ClassType(Id(g))),param(Id(__z),ClassType(Id(g))),param(Id(_),ClassType(Id(g))),param(Id(_),ArrayType(6559380,BoolType)),param(Id(NF),ArrayType(6559380,BoolType)),param(Id(__B),ArrayType(11,ArrayType(13,BoolType))),param(Id(x),ClassType(Id(_z))),param(Id(__H3_),ClassType(Id(_0))),param(Id(e),ClassType(Id(_))),param(Id(_Y),ClassType(Id(_))),param(Id(o0_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(e),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(K),IntType),param(Id(X),IntType),param(Id(_qjJ2_),IntType),param(Id(S),IntType),param(Id(_),IntType),param(Id(___l5_),IntType),param(Id(B_),IntType)],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 818))

    def test_9(self):
        line = '''Class __E:__{Constructor (_5,_:Array [Float ,01]){Return ;}$F2_I_h8_(_,Q1,A:Array [Array [Int ,053],0X4D];_x4:Array [Int ,062]){}Var $_,$cpW05,R:Array [Array [Array [Array [String ,40],0B110],0X4D],053];}Class _{}Class X2{}'''
        expect = '''Program([ClassDecl(Id(__E),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_5),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,FloatType))],Block([Return()])),MethodDecl(Id($F2_I_h8_),Static,[param(Id(_),ArrayType(77,ArrayType(43,IntType))),param(Id(Q1),ArrayType(77,ArrayType(43,IntType))),param(Id(A),ArrayType(77,ArrayType(43,IntType))),param(Id(_x4),ArrayType(50,IntType))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(43,ArrayType(77,ArrayType(6,ArrayType(40,StringType)))))),AttributeDecl(Static,VarDecl(Id($cpW05),ArrayType(43,ArrayType(77,ArrayType(6,ArrayType(40,StringType)))))),AttributeDecl(Instance,VarDecl(Id(R),ArrayType(43,ArrayType(77,ArrayType(6,ArrayType(40,StringType))))))]),ClassDecl(Id(_),[]),ClassDecl(Id(X2),[])])'''
        self.assertTrue(TestAST.test(line, expect, 819))

    def test_0(self):
        line = '''Class _{$p_5_bG__8(__:Array [String ,0X3];_:i;_9,L:Boolean ;_:Float ;P,_,__4U:Boolean ;I_:Array [Array [String ,0x8],0X87];_:w;_2:Array [Array [Boolean ,58],301_8_4_1]){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id($p_5_bG__8),Static,[param(Id(__),ArrayType(3,StringType)),param(Id(_),ClassType(Id(i))),param(Id(_9),BoolType),param(Id(L),BoolType),param(Id(_),FloatType),param(Id(P),BoolType),param(Id(_),BoolType),param(Id(__4U),BoolType),param(Id(I_),ArrayType(135,ArrayType(8,StringType))),param(Id(_),ClassType(Id(w))),param(Id(_2),ArrayType(301841,ArrayType(58,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 820))

    def test_1(self):
        line = '''Class W:_{Constructor (){_::$_._.z._();__8R_0::$K.o5g1().Qr.h().i4.r();Return ;}Val _,m_p,$_,Y2t19:_;}Class S:_ewl__{Var $7:Int ;Destructor (){}$__2(){}c(y,q:Int ){} }'''
        expect = '''Program([ClassDecl(Id(W),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([Call(FieldAccess(FieldAccess(FieldAccess(Id(_),Id($_)),Id(_)),Id(z)),Id(_),[]),Call(FieldAccess(CallExpr(FieldAccess(CallExpr(FieldAccess(Id(__8R_0),Id($K)),Id(o5g1),[]),Id(Qr)),Id(h),[]),Id(i4)),Id(r),[]),Return()])),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(m_p),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(Y2t19),ClassType(Id(_)),None))]),ClassDecl(Id(S),Id(_ewl__),[AttributeDecl(Static,VarDecl(Id($7),IntType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($__2),Static,[],Block([])),MethodDecl(Id(c),Instance,[param(Id(y),IntType),param(Id(q),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 821))

    def test_2(self):
        line = '''Class _7:u{Val _:Boolean ;_H(w_0:u;h,__:Float ;R_,E5,t:Array [Array [String ,83],0B111];i,_:Array [Array [Array [Array [Float ,036],0B1],83],0X1A];_:Array [Array [Array [Boolean ,0x9B_1],8_8],8];_:Boolean ){} }Class _:____{Var _:String ;Var $_:Array [Array [Int ,83],4];}Class t:_{$E_Gd_(){} }'''
        expect = '''Program([ClassDecl(Id(_7),Id(u),[AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),MethodDecl(Id(_H),Instance,[param(Id(w_0),ClassType(Id(u))),param(Id(h),FloatType),param(Id(__),FloatType),param(Id(R_),ArrayType(7,ArrayType(83,StringType))),param(Id(E5),ArrayType(7,ArrayType(83,StringType))),param(Id(t),ArrayType(7,ArrayType(83,StringType))),param(Id(i),ArrayType(26,ArrayType(83,ArrayType(1,ArrayType(30,FloatType))))),param(Id(_),ArrayType(26,ArrayType(83,ArrayType(1,ArrayType(30,FloatType))))),param(Id(_),ArrayType(8,ArrayType(88,ArrayType(2481,BoolType)))),param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(_),Id(____),[AttributeDecl(Instance,VarDecl(Id(_),StringType)),AttributeDecl(Static,VarDecl(Id($_),ArrayType(4,ArrayType(83,IntType))))]),ClassDecl(Id(t),Id(_),[MethodDecl(Id($E_Gd_),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 822))

    def test_3(self):
        line = '''Class l:_hJ{Var X0,L2:Int ;$__4(_,x1:Boolean ;_1:Float ;_T:Boolean ;_:_;V_,__1_r:e_D;a:Float ;U:Array [String ,0x43];s,y,TA:Array [Array [String ,0b100],0X4D];_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(l),Id(_hJ),[AttributeDecl(Instance,VarDecl(Id(X0),IntType)),AttributeDecl(Instance,VarDecl(Id(L2),IntType)),MethodDecl(Id($__4),Static,[param(Id(_),BoolType),param(Id(x1),BoolType),param(Id(_1),FloatType),param(Id(_T),BoolType),param(Id(_),ClassType(Id(_))),param(Id(V_),ClassType(Id(e_D))),param(Id(__1_r),ClassType(Id(e_D))),param(Id(a),FloatType),param(Id(U),ArrayType(67,StringType)),param(Id(s),ArrayType(77,ArrayType(4,StringType))),param(Id(y),ArrayType(77,ArrayType(4,StringType))),param(Id(TA),ArrayType(77,ArrayType(4,StringType))),param(Id(_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 823))

    def test_4(self):
        line = '''Class __{Var G,_:Array [Array [String ,0xB4_7],0xF19];Val V,k:Boolean ;Var $6,t,$069,L4:Array [Array [Boolean ,4_8_9_0],92];}Class u:__0{Var $5_:_;Constructor (__:_){} }'''
        expect = '''Program([ClassDecl(Id(__),[AttributeDecl(Instance,VarDecl(Id(G),ArrayType(3865,ArrayType(2887,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3865,ArrayType(2887,StringType)))),AttributeDecl(Instance,ConstDecl(Id(V),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(k),BoolType,None)),AttributeDecl(Static,VarDecl(Id($6),ArrayType(92,ArrayType(4890,BoolType)))),AttributeDecl(Instance,VarDecl(Id(t),ArrayType(92,ArrayType(4890,BoolType)))),AttributeDecl(Static,VarDecl(Id($069),ArrayType(92,ArrayType(4890,BoolType)))),AttributeDecl(Instance,VarDecl(Id(L4),ArrayType(92,ArrayType(4890,BoolType))))]),ClassDecl(Id(u),Id(__0),[AttributeDecl(Static,VarDecl(Id($5_),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 824))

    def test_5(self):
        line = '''Class Q{}Class r{}Class j:_l5_xA{Destructor (){} }Class p:V_{}Class U4_23:_{Var _9:String ;Destructor (){}Constructor (y4,_,_,K:String ;__,Y:q_o){}Constructor (){ {} }Var Iw3S,$9,$_,a:Array [Float ,57];Constructor (P04y5:String ){}Var $_:Int ;}Class _s_{}Class s6:r{Constructor (I_:Array [Int ,0B11000];o_:Array [Array [Array [Boolean ,0B1_011_00_1],077],0X5E];V8:Float ;Rj,h,_r1,KF9Y6:Array [Array [Boolean ,0B11000],077]){} }'''
        expect = '''Program([ClassDecl(Id(Q),[]),ClassDecl(Id(r),[]),ClassDecl(Id(j),Id(_l5_xA),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(p),Id(V_),[]),ClassDecl(Id(U4_23),Id(_),[AttributeDecl(Instance,VarDecl(Id(_9),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(y4),StringType),param(Id(_),StringType),param(Id(_),StringType),param(Id(K),StringType),param(Id(__),ClassType(Id(q_o))),param(Id(Y),ClassType(Id(q_o)))],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([Block([])])),AttributeDecl(Instance,VarDecl(Id(Iw3S),ArrayType(57,FloatType))),AttributeDecl(Static,VarDecl(Id($9),ArrayType(57,FloatType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(57,FloatType))),AttributeDecl(Instance,VarDecl(Id(a),ArrayType(57,FloatType))),MethodDecl(Id(Constructor),Instance,[param(Id(P04y5),StringType)],Block([])),AttributeDecl(Static,VarDecl(Id($_),IntType))]),ClassDecl(Id(_s_),[]),ClassDecl(Id(s6),Id(r),[MethodDecl(Id(Constructor),Instance,[param(Id(I_),ArrayType(24,IntType)),param(Id(o_),ArrayType(94,ArrayType(63,ArrayType(89,BoolType)))),param(Id(V8),FloatType),param(Id(Rj),ArrayType(63,ArrayType(24,BoolType))),param(Id(h),ArrayType(63,ArrayType(24,BoolType))),param(Id(_r1),ArrayType(63,ArrayType(24,BoolType))),param(Id(KF9Y6),ArrayType(63,ArrayType(24,BoolType)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 825))

    def test_6(self):
        line = '''Class o{Val _:Array [Float ,076];}Class ___3Ki{}Class _o{Constructor (I,_J6:Int ;_4_F_k:_){"'"\n"._.__I.q();Return ;} }Class k_{y(T_,KEQ,rx:Array [Array [Int ,0b1_0],83];_,_:v){Continue ;}Constructor (Pe:String ;_,v_,_,u:_7){Break ;}$076_(){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(o),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(62,FloatType),None))]),ClassDecl(Id(___3Ki),[]),ClassDecl(Id(_o),[MethodDecl(Id(Constructor),Instance,[param(Id(I),IntType),param(Id(_J6),IntType),param(Id(_4_F_k),ClassType(Id(_)))],Block([Call(FieldAccess(FieldAccess(StringLit('"\n),Id(_)),Id(__I)),Id(q),[]),Return()]))]),ClassDecl(Id(k_),[MethodDecl(Id(y),Instance,[param(Id(T_),ArrayType(83,ArrayType(2,IntType))),param(Id(KEQ),ArrayType(83,ArrayType(2,IntType))),param(Id(rx),ArrayType(83,ArrayType(2,IntType))),param(Id(_),ClassType(Id(v))),param(Id(_),ClassType(Id(v)))],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(Pe),StringType),param(Id(_),ClassType(Id(_7))),param(Id(v_),ClassType(Id(_7))),param(Id(_),ClassType(Id(_7))),param(Id(u),ClassType(Id(_7)))],Block([Break])),MethodDecl(Id($076_),Static,[],Block([]))]),ClassDecl(Id(_),[])])'''
        #self.assertTrue(TestAST.test(line, expect, 826))

    def test_7(self):
        line = '''Class _s:__{Constructor (){}Val $8__:Array [Int ,0x3];Constructor (){ {}Break ;g::$8();}Constructor (_,Y,_38:I;l7,Ip39:Float ;Z,q:_P;C,R,R,O_:_59c){}Val _:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_s),Id(__),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($8__),ArrayType(3,IntType),None)),MethodDecl(Id(Constructor),Instance,[],Block([Block([]),Break,Call(Id(g),Id($8),[])])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(I))),param(Id(Y),ClassType(Id(I))),param(Id(_38),ClassType(Id(I))),param(Id(l7),FloatType),param(Id(Ip39),FloatType),param(Id(Z),ClassType(Id(_P))),param(Id(q),ClassType(Id(_P))),param(Id(C),ClassType(Id(_59c))),param(Id(R),ClassType(Id(_59c))),param(Id(R),ClassType(Id(_59c))),param(Id(O_),ClassType(Id(_59c)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 827))

    def test_8(self):
        line = '''Class _{Constructor (l,x,P:Array [String ,17];_G,_:Array [Array [Array [Array [Array [Int ,06],0B101111],0X4A],07_64],0XD64];w:Array [Int ,0b1]){} }Class _:_A_{Var A,_,_:_;}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(l),ArrayType(17,StringType)),param(Id(x),ArrayType(17,StringType)),param(Id(P),ArrayType(17,StringType)),param(Id(_G),ArrayType(3428,ArrayType(500,ArrayType(74,ArrayType(47,ArrayType(6,IntType)))))),param(Id(_),ArrayType(3428,ArrayType(500,ArrayType(74,ArrayType(47,ArrayType(6,IntType)))))),param(Id(w),ArrayType(1,IntType))],Block([]))]),ClassDecl(Id(_),Id(_A_),[AttributeDecl(Instance,VarDecl(Id(A),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 828))

    def test_9(self):
        line = '''Class u_k_:_6{}Class __:_zi6{}Class _O_4{Constructor (){}$7(_,_RQJ_,___9,Jb20__3m:String ){Continue ;Break ;Break ;}Constructor (_,V:Array [Boolean ,0b1111]){Break ;{} }}'''
        expect = '''Program([ClassDecl(Id(u_k_),Id(_6),[]),ClassDecl(Id(__),Id(_zi6),[]),ClassDecl(Id(_O_4),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($7),Static,[param(Id(_),StringType),param(Id(_RQJ_),StringType),param(Id(___9),StringType),param(Id(Jb20__3m),StringType)],Block([Continue,Break,Break])),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(15,BoolType)),param(Id(V),ArrayType(15,BoolType))],Block([Break,Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 829))

    def test_0(self):
        line = '''Class _46:N{}Class dV:k{}Class _Rz{}Class _96:___{}Class _5:X{Constructor (x_3_,t__K:Array [Array [Array [Int ,1_7],3],7];L,_Z8:Og;_:Float ){}Destructor (){}__x(___M:_;_:Array [String ,030_25_47];_40_,_P,_45_,Q_:_;_,_:Int ){}$P(OG,__,w:_k;F3F,_:Array [Array [Int ,0X3F],055]){Continue ;} }'''
        expect = '''Program([ClassDecl(Id(_46),Id(N),[]),ClassDecl(Id(dV),Id(k),[]),ClassDecl(Id(_Rz),[]),ClassDecl(Id(_96),Id(___),[]),ClassDecl(Id(_5),Id(X),[MethodDecl(Id(Constructor),Instance,[param(Id(x_3_),ArrayType(7,ArrayType(3,ArrayType(17,IntType)))),param(Id(t__K),ArrayType(7,ArrayType(3,ArrayType(17,IntType)))),param(Id(L),ClassType(Id(Og))),param(Id(_Z8),ClassType(Id(Og))),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(__x),Instance,[param(Id(___M),ClassType(Id(_))),param(Id(_),ArrayType(99687,StringType)),param(Id(_40_),ClassType(Id(_))),param(Id(_P),ClassType(Id(_))),param(Id(_45_),ClassType(Id(_))),param(Id(Q_),ClassType(Id(_))),param(Id(_),IntType),param(Id(_),IntType)],Block([])),MethodDecl(Id($P),Static,[param(Id(OG),ClassType(Id(_k))),param(Id(__),ClassType(Id(_k))),param(Id(w),ClassType(Id(_k))),param(Id(F3F),ArrayType(45,ArrayType(63,IntType))),param(Id(_),ArrayType(45,ArrayType(63,IntType)))],Block([Continue]))])])'''
        self.assertTrue(TestAST.test(line, expect, 830))

    def test_1(self):
        line = '''Class _{}Class R{Val I4:Array [Float ,0b11100];}Class bR:_0_{Val P:w7_;Var $6,$211:String ;}Class M:H{Val $_:Array [Array [Array [Array [Array [Array [Int ,0xF_A70],0b1_0],6],0X2C],0X2C],010];}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(R),[AttributeDecl(Instance,ConstDecl(Id(I4),ArrayType(28,FloatType),None))]),ClassDecl(Id(bR),Id(_0_),[AttributeDecl(Instance,ConstDecl(Id(P),ClassType(Id(w7_)),None)),AttributeDecl(Static,VarDecl(Id($6),StringType)),AttributeDecl(Static,VarDecl(Id($211),StringType))]),ClassDecl(Id(M),Id(H),[AttributeDecl(Static,ConstDecl(Id($_),ArrayType(8,ArrayType(44,ArrayType(44,ArrayType(6,ArrayType(2,ArrayType(64112,IntType)))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 831))

    def test_2(self):
        line = '''Class __{Constructor (_,_,H,h9,F,_0_d1_,_,_51xD,_:Array [Float ,5];_517,k5:Array [Float ,24];_,_X,_:String ;_e___,_8,k,_J_:Array [Array [Array [Array [Array [Float ,0B111101],8_78],0X3_5],0xF_BF],8]){} }'''
        expect = '''Program([ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(5,FloatType)),param(Id(_),ArrayType(5,FloatType)),param(Id(H),ArrayType(5,FloatType)),param(Id(h9),ArrayType(5,FloatType)),param(Id(F),ArrayType(5,FloatType)),param(Id(_0_d1_),ArrayType(5,FloatType)),param(Id(_),ArrayType(5,FloatType)),param(Id(_51xD),ArrayType(5,FloatType)),param(Id(_),ArrayType(5,FloatType)),param(Id(_517),ArrayType(24,FloatType)),param(Id(k5),ArrayType(24,FloatType)),param(Id(_),StringType),param(Id(_X),StringType),param(Id(_),StringType),param(Id(_e___),ArrayType(8,ArrayType(4031,ArrayType(53,ArrayType(878,ArrayType(61,FloatType)))))),param(Id(_8),ArrayType(8,ArrayType(4031,ArrayType(53,ArrayType(878,ArrayType(61,FloatType)))))),param(Id(k),ArrayType(8,ArrayType(4031,ArrayType(53,ArrayType(878,ArrayType(61,FloatType)))))),param(Id(_J_),ArrayType(8,ArrayType(4031,ArrayType(53,ArrayType(878,ArrayType(61,FloatType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 832))

    def test_3(self):
        line = '''Class s{$J1(_,S,_:S;__:H;c_z_,__:Array [Array [Boolean ,06],6];W2j_:Array [Array [Array [Array [Int ,0XAA5_6],0xAA],0B1_0],03];O,K:Float ;H:Int ;gv:Array [Float ,011];_:Array [Float ,16_8]){} }'''
        expect = '''Program([ClassDecl(Id(s),[MethodDecl(Id($J1),Static,[param(Id(_),ClassType(Id(S))),param(Id(S),ClassType(Id(S))),param(Id(_),ClassType(Id(S))),param(Id(__),ClassType(Id(H))),param(Id(c_z_),ArrayType(6,ArrayType(6,BoolType))),param(Id(__),ArrayType(6,ArrayType(6,BoolType))),param(Id(W2j_),ArrayType(3,ArrayType(2,ArrayType(170,ArrayType(43606,IntType))))),param(Id(O),FloatType),param(Id(K),FloatType),param(Id(H),IntType),param(Id(gv),ArrayType(9,FloatType)),param(Id(_),ArrayType(168,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 833))

    def test_4(self):
        line = '''Class y:A_3{Val _7_12,_W,$13__,$CC,_e,$4x,$E:Array [Array [Array [Array [Int ,0325_6],0B1_0_1_0],017],0X2F];}Class __L_{}Class _{Constructor (){}Val $I2,s_,S:String ;Destructor (){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(y),Id(A_3),[AttributeDecl(Instance,ConstDecl(Id(_7_12),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_W),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($13__),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($CC),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(_e),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($4x),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($E),ArrayType(47,ArrayType(15,ArrayType(10,ArrayType(1710,IntType)))),None))]),ClassDecl(Id(__L_),[]),ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($I2),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(s_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(S),StringType,None)),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 834))

    def test_5(self):
        line = '''Class cT{Var h,$_:String ;Constructor (___,I7:Array [Array [Array [Array [Array [Array [Array [Float ,0b11],5],89],89],0b1],89],03];_,Q:w;_:Array [Array [Array [Int ,0X33],0b1111],0xA]){}Val ___,n3:Array [Float ,89];$2(){} }Class _1{}Class Jp{}Class H_:k_75{$_bd(__:_A;_:Array [Array [String ,0XD],072_2];_7:W;_T,w,_V_:_;_:Float ;_,_:_;o_:Int ;_4,_4:Array [Array [Array [Boolean ,89],047],0XB8D_7]){} }'''
        expect = '''Program([ClassDecl(Id(cT),[AttributeDecl(Instance,VarDecl(Id(h),StringType)),AttributeDecl(Static,VarDecl(Id($_),StringType)),MethodDecl(Id(Constructor),Instance,[param(Id(___),ArrayType(3,ArrayType(89,ArrayType(1,ArrayType(89,ArrayType(89,ArrayType(5,ArrayType(3,FloatType)))))))),param(Id(I7),ArrayType(3,ArrayType(89,ArrayType(1,ArrayType(89,ArrayType(89,ArrayType(5,ArrayType(3,FloatType)))))))),param(Id(_),ClassType(Id(w))),param(Id(Q),ClassType(Id(w))),param(Id(_),ArrayType(10,ArrayType(15,ArrayType(51,IntType))))],Block([])),AttributeDecl(Instance,ConstDecl(Id(___),ArrayType(89,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(n3),ArrayType(89,FloatType),None)),MethodDecl(Id($2),Static,[],Block([]))]),ClassDecl(Id(_1),[]),ClassDecl(Id(Jp),[]),ClassDecl(Id(H_),Id(k_75),[MethodDecl(Id($_bd),Static,[param(Id(__),ClassType(Id(_A))),param(Id(_),ArrayType(466,ArrayType(13,StringType))),param(Id(_7),ClassType(Id(W))),param(Id(_T),ClassType(Id(_))),param(Id(w),ClassType(Id(_))),param(Id(_V_),ClassType(Id(_))),param(Id(_),FloatType),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(o_),IntType),param(Id(_4),ArrayType(47319,ArrayType(39,ArrayType(89,BoolType)))),param(Id(_4),ArrayType(47319,ArrayType(39,ArrayType(89,BoolType))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 835))

    def test_6(self):
        line = '''Class _0_4{}Class __a:_{}Class P{Var _v_:Array [Array [Array [Boolean ,043_1],0B11111],076_5];Destructor (){}Val $8,Q_139,$S_a:Array [Array [Float ,0X5A],70];Var $R_2,$9:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_0_4),[]),ClassDecl(Id(__a),Id(_),[]),ClassDecl(Id(P),[AttributeDecl(Instance,VarDecl(Id(_v_),ArrayType(501,ArrayType(31,ArrayType(281,BoolType))))),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($8),ArrayType(70,ArrayType(90,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(Q_139),ArrayType(70,ArrayType(90,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($S_a),ArrayType(70,ArrayType(90,FloatType)),None)),AttributeDecl(Static,VarDecl(Id($R_2),BoolType)),AttributeDecl(Static,VarDecl(Id($9),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 836))

    def test_7(self):
        line = '''Class a{Constructor (){}_(J,W5,__,u:String ){}Constructor (){} }Class _S8:_{Constructor (L,_,G95:T;f655:Int ;eO,j:String ;_,o,___:Boolean ){} }Class lM{Constructor (){} }Class e{}Class V_:_I{Val am,$1,$u,s:Array [Array [Array [Array [Int ,0X38],025],0x42],0X38];}'''
        expect = '''Program([ClassDecl(Id(a),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(J),StringType),param(Id(W5),StringType),param(Id(__),StringType),param(Id(u),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_S8),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(L),ClassType(Id(T))),param(Id(_),ClassType(Id(T))),param(Id(G95),ClassType(Id(T))),param(Id(f655),IntType),param(Id(eO),StringType),param(Id(j),StringType),param(Id(_),BoolType),param(Id(o),BoolType),param(Id(___),BoolType)],Block([]))]),ClassDecl(Id(lM),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(e),[]),ClassDecl(Id(V_),Id(_I),[AttributeDecl(Instance,ConstDecl(Id(am),ArrayType(56,ArrayType(66,ArrayType(21,ArrayType(56,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($1),ArrayType(56,ArrayType(66,ArrayType(21,ArrayType(56,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($u),ArrayType(56,ArrayType(66,ArrayType(21,ArrayType(56,IntType)))),None)),AttributeDecl(Instance,ConstDecl(Id(s),ArrayType(56,ArrayType(66,ArrayType(21,ArrayType(56,IntType)))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 837))

    def test_8(self):
        line = '''Class _:_9{}Class tK_95:y{$Y_(){} }Class _{Val $b:Float ;J(_:Float ;t,J:Boolean ;f36,_:Array [Array [Int ,0126],0XE]){Val _v:Z_;Var dPC:Array [Array [Boolean ,0B100],0X45];}Constructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),Id(_9),[]),ClassDecl(Id(tK_95),Id(y),[MethodDecl(Id($Y_),Static,[],Block([]))]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($b),FloatType,None)),MethodDecl(Id(J),Instance,[param(Id(_),FloatType),param(Id(t),BoolType),param(Id(J),BoolType),param(Id(f36),ArrayType(14,ArrayType(86,IntType))),param(Id(_),ArrayType(14,ArrayType(86,IntType)))],Block([ConstDecl(Id(_v),ClassType(Id(Z_)),None),VarDecl(Id(dPC),ArrayType(69,ArrayType(4,BoolType)))])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 838))

    def test_9(self):
        line = '''Class R:_{}Class g6{Constructor (P:Array [Array [Array [Array [Array [Int ,0B1100001],04],0B1100001],91_1],01];_1:Boolean ;_:Array [Array [Array [Array [Array [Int ,0xA],046],0103],0XA],0b1]){}Destructor (){} }Class _{}Class _:_{Val E:Array [Array [Array [Array [Array [Array [Array [String ,71],9_7],71],0XC],71],0b11000],71];}'''
        expect = '''Program([ClassDecl(Id(R),Id(_),[]),ClassDecl(Id(g6),[MethodDecl(Id(Constructor),Instance,[param(Id(P),ArrayType(1,ArrayType(911,ArrayType(97,ArrayType(4,ArrayType(97,IntType)))))),param(Id(_1),BoolType),param(Id(_),ArrayType(1,ArrayType(10,ArrayType(67,ArrayType(38,ArrayType(10,IntType))))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(_),[AttributeDecl(Instance,ConstDecl(Id(E),ArrayType(71,ArrayType(24,ArrayType(71,ArrayType(12,ArrayType(71,ArrayType(97,ArrayType(71,StringType))))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 839))

    def test_0(self):
        line = '''Class ny_6:_{$_(){Break ;Return ;} }Class l5d:_{Var r:Int ;Constructor (){}Constructor (){} }Class y_{}Class _{}Class _gN2_:x___54{Destructor (){}$_4(){} }Class _D9:l{}'''
        expect = '''Program([ClassDecl(Id(ny_6),Id(_),[MethodDecl(Id($_),Static,[],Block([Break,Return()]))]),ClassDecl(Id(l5d),Id(_),[AttributeDecl(Instance,VarDecl(Id(r),IntType)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(y_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_gN2_),Id(x___54),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($_4),Static,[],Block([]))]),ClassDecl(Id(_D9),Id(l),[])])'''
        self.assertTrue(TestAST.test(line, expect, 840))

    def test_1(self):
        line = '''Class Hx{Constructor (CTC3n9QMB_:Array [Array [Array [String ,0B1100010],03],0X2D];v1_:Int ;_,c:Array [Array [Array [Array [Array [Float ,01],66],01],0x3_34],01];__:Array [String ,98]){} }'''
        expect = '''Program([ClassDecl(Id(Hx),[MethodDecl(Id(Constructor),Instance,[param(Id(CTC3n9QMB_),ArrayType(45,ArrayType(3,ArrayType(98,StringType)))),param(Id(v1_),IntType),param(Id(_),ArrayType(1,ArrayType(820,ArrayType(1,ArrayType(66,ArrayType(1,FloatType)))))),param(Id(c),ArrayType(1,ArrayType(820,ArrayType(1,ArrayType(66,ArrayType(1,FloatType)))))),param(Id(__),ArrayType(98,StringType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 841))

    def test_2(self):
        line = '''Class _{Var _,$_,$4:Array [Boolean ,3];}Class __{Destructor (){}$S93(){}Constructor (){}$8(r:_R;_:Float ){Continue ;Break ;}Constructor (){}Val $KL:Boolean ;}Class W_R{}Class S{}Class _{}Class _{Var T,_,A9_:Array [Array [Array [Boolean ,0b11],0x5F],0x5F];}Class O:j{Val f,c7:R;Constructor (T,_:Int ;_:Array [Array [Array [Int ,0B100011],0b1_0],0X8];_:Float ){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(3,BoolType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(3,BoolType))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(3,BoolType)))]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id($S93),Static,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($8),Static,[param(Id(r),ClassType(Id(_R))),param(Id(_),FloatType)],Block([Continue,Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($KL),BoolType,None))]),ClassDecl(Id(W_R),[]),ClassDecl(Id(S),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_),[AttributeDecl(Instance,VarDecl(Id(T),ArrayType(95,ArrayType(95,ArrayType(3,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(95,ArrayType(95,ArrayType(3,BoolType))))),AttributeDecl(Instance,VarDecl(Id(A9_),ArrayType(95,ArrayType(95,ArrayType(3,BoolType)))))]),ClassDecl(Id(O),Id(j),[AttributeDecl(Instance,ConstDecl(Id(f),ClassType(Id(R)),None)),AttributeDecl(Instance,ConstDecl(Id(c7),ClassType(Id(R)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(T),IntType),param(Id(_),IntType),param(Id(_),ArrayType(8,ArrayType(2,ArrayType(35,IntType)))),param(Id(_),FloatType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 842))

    def test_3(self):
        line = '''Class u4ZWT{Destructor (){}_(_yUZ:Array [Float ,0B1];_,_:Array [Array [Array [Array [Array [Int ,0X5_2],25],022],0B110000],0b1];_:Array [Array [Array [Int ,0xE],0X12],9];___:Array [Int ,0B110000];__1,_v6W:_9U_;h_2,_P4_,__:Array [Array [Array [Array [Float ,0B110000],01_1_6_6],0126_15],022];t_,__:String ;r:Int ){} }'''
        expect = '''Program([ClassDecl(Id(u4ZWT),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(_),Instance,[param(Id(_yUZ),ArrayType(1,FloatType)),param(Id(_),ArrayType(1,ArrayType(48,ArrayType(18,ArrayType(25,ArrayType(82,IntType)))))),param(Id(_),ArrayType(1,ArrayType(48,ArrayType(18,ArrayType(25,ArrayType(82,IntType)))))),param(Id(_),ArrayType(9,ArrayType(18,ArrayType(14,IntType)))),param(Id(___),ArrayType(48,IntType)),param(Id(__1),ClassType(Id(_9U_))),param(Id(_v6W),ClassType(Id(_9U_))),param(Id(h_2),ArrayType(18,ArrayType(5517,ArrayType(630,ArrayType(48,FloatType))))),param(Id(_P4_),ArrayType(18,ArrayType(5517,ArrayType(630,ArrayType(48,FloatType))))),param(Id(__),ArrayType(18,ArrayType(5517,ArrayType(630,ArrayType(48,FloatType))))),param(Id(t_),StringType),param(Id(__),StringType),param(Id(r),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 843))

    def test_4(self):
        line = '''Class _{}Class _4{Val $y:Array [Array [Float ,5],5];Constructor (_,_j_,cVy__:Array [Array [Array [Array [Array [String ,0X6],3],0x1E],053],053];t:Array [Array [Array [String ,0b1001111],053],0b1001111];J1,d:k_e;v_Z_5:Float ){} }Class z28aS:__0x{}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_4),[AttributeDecl(Static,ConstDecl(Id($y),ArrayType(5,ArrayType(5,FloatType)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(43,ArrayType(43,ArrayType(30,ArrayType(3,ArrayType(6,StringType)))))),param(Id(_j_),ArrayType(43,ArrayType(43,ArrayType(30,ArrayType(3,ArrayType(6,StringType)))))),param(Id(cVy__),ArrayType(43,ArrayType(43,ArrayType(30,ArrayType(3,ArrayType(6,StringType)))))),param(Id(t),ArrayType(79,ArrayType(43,ArrayType(79,StringType)))),param(Id(J1),ClassType(Id(k_e))),param(Id(d),ClassType(Id(k_e))),param(Id(v_Z_5),FloatType)],Block([]))]),ClassDecl(Id(z28aS),Id(__0x),[])])'''
        self.assertTrue(TestAST.test(line, expect, 844))

    def test_5(self):
        line = '''Class _{}Class _:__4D8FMl{}Class _1{}Class _{Destructor (){Val _,_:Array [Float ,0x5_6_B];Val _,c_:Int ;Val _:Array [Array [Float ,0126],0b100000];Continue ;}Var $0:Boolean ;}'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_),Id(__4D8FMl),[]),ClassDecl(Id(_1),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),ArrayType(1387,FloatType),None),ConstDecl(Id(_),ArrayType(1387,FloatType),None),ConstDecl(Id(_),IntType,None),ConstDecl(Id(c_),IntType,None),ConstDecl(Id(_),ArrayType(32,ArrayType(86,FloatType)),None),Continue])),AttributeDecl(Static,VarDecl(Id($0),BoolType))])])'''
        self.assertTrue(TestAST.test(line, expect, 845))

    def test_6(self):
        line = '''Class q5{}Class S_4F_:_{$__(V,g3:Array [Array [Array [Array [Array [Array [Array [Boolean ,0x3],0x38],02566_5],44],01],87],060]){Var wk___:Array [Int ,060];} }Class f_3c_N___:_{}'''
        expect = '''Program([ClassDecl(Id(q5),[]),ClassDecl(Id(S_4F_),Id(_),[MethodDecl(Id($__),Static,[param(Id(V),ArrayType(48,ArrayType(87,ArrayType(1,ArrayType(44,ArrayType(11189,ArrayType(56,ArrayType(3,BoolType)))))))),param(Id(g3),ArrayType(48,ArrayType(87,ArrayType(1,ArrayType(44,ArrayType(11189,ArrayType(56,ArrayType(3,BoolType))))))))],Block([VarDecl(Id(wk___),ArrayType(48,IntType))]))]),ClassDecl(Id(f_3c_N___),Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 846))

    def test_7(self):
        line = '''Class C:v{r(d,_,_,An,d,Wc23,_W,_H_:Int ;_H_Ix:Array [Boolean ,012]){}Destructor (){Continue ;}Val $q91_3:String ;}Class J_:Zp{}Class _{Destructor (){}Destructor (){} }Class _:_X_{Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(C),Id(v),[MethodDecl(Id(r),Instance,[param(Id(d),IntType),param(Id(_),IntType),param(Id(_),IntType),param(Id(An),IntType),param(Id(d),IntType),param(Id(Wc23),IntType),param(Id(_W),IntType),param(Id(_H_),IntType),param(Id(_H_Ix),ArrayType(10,BoolType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($q91_3),StringType,None))]),ClassDecl(Id(J_),Id(Zp),[]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_),Id(_X_),[MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 847))

    def test_8(self):
        line = '''Class _1:O{$g7(_:Array [Array [Array [Int ,051],0x15],24]){} }Class _:HH{Var _r_:q;}Class PT:_{Var $0_,$vsL,Od,$N_:Array [Array [Boolean ,0b1],0B101110];}Class _:__{Constructor (_,__:m_){}_(){} }'''
        expect = '''Program([ClassDecl(Id(_1),Id(O),[MethodDecl(Id($g7),Static,[param(Id(_),ArrayType(24,ArrayType(21,ArrayType(41,IntType))))],Block([]))]),ClassDecl(Id(_),Id(HH),[AttributeDecl(Instance,VarDecl(Id(_r_),ClassType(Id(q)),NullLiteral()))]),ClassDecl(Id(PT),Id(_),[AttributeDecl(Static,VarDecl(Id($0_),ArrayType(46,ArrayType(1,BoolType)))),AttributeDecl(Static,VarDecl(Id($vsL),ArrayType(46,ArrayType(1,BoolType)))),AttributeDecl(Instance,VarDecl(Id(Od),ArrayType(46,ArrayType(1,BoolType)))),AttributeDecl(Static,VarDecl(Id($N_),ArrayType(46,ArrayType(1,BoolType))))]),ClassDecl(Id(_),Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(m_))),param(Id(__),ClassType(Id(m_)))],Block([])),MethodDecl(Id(_),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 848))

    def test_9(self):
        line = '''Class p:Y{Val _,_:_7_;Constructor (_:Int ;f4:_Q2Rf_;_,_,_31_N3_,K_:Array [Int ,0131];B,_709,_K,_:Boolean ;M,_r2_5:Int ;_,_,ED_Sq1_,T_9,_L3m_:J_;_,__,_,_3,_:_8_){}Var $_,_:Array [Array [String ,9_1_0],07];}'''
        expect = '''Program([ClassDecl(Id(p),Id(Y),[AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_7_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_7_)),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(f4),ClassType(Id(_Q2Rf_))),param(Id(_),ArrayType(89,IntType)),param(Id(_),ArrayType(89,IntType)),param(Id(_31_N3_),ArrayType(89,IntType)),param(Id(K_),ArrayType(89,IntType)),param(Id(B),BoolType),param(Id(_709),BoolType),param(Id(_K),BoolType),param(Id(_),BoolType),param(Id(M),IntType),param(Id(_r2_5),IntType),param(Id(_),ClassType(Id(J_))),param(Id(_),ClassType(Id(J_))),param(Id(ED_Sq1_),ClassType(Id(J_))),param(Id(T_9),ClassType(Id(J_))),param(Id(_L3m_),ClassType(Id(J_))),param(Id(_),ClassType(Id(_8_))),param(Id(__),ClassType(Id(_8_))),param(Id(_),ClassType(Id(_8_))),param(Id(_3),ClassType(Id(_8_))),param(Id(_),ClassType(Id(_8_)))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(7,ArrayType(910,StringType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(7,ArrayType(910,StringType))))])])'''
        self.assertTrue(TestAST.test(line, expect, 849))

    def test_0(self):
        line = '''Class G{Val $__,$92_8_,$_,_,r,A:Boolean ;Val $p,$_0Xy:Int ;Destructor (){} }Class q:_9U{Var $x,$20,Gf32,$F_,T:S;Constructor (){}Var $2,$_,_,$Oy_:a9;Val $4_6,_O:Array [Array [Int ,0103],0X32];}'''
        expect = '''Program([ClassDecl(Id(G),[AttributeDecl(Static,ConstDecl(Id($__),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($92_8_),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(_),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(r),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(A),BoolType,None)),AttributeDecl(Static,ConstDecl(Id($p),IntType,None)),AttributeDecl(Static,ConstDecl(Id($_0Xy),IntType,None)),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(q),Id(_9U),[AttributeDecl(Static,VarDecl(Id($x),ClassType(Id(S)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($20),ClassType(Id(S)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(Gf32),ClassType(Id(S)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($F_),ClassType(Id(S)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(T),ClassType(Id(S)),NullLiteral())),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($2),ClassType(Id(a9)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_),ClassType(Id(a9)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(a9)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Oy_),ClassType(Id(a9)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($4_6),ArrayType(50,ArrayType(67,IntType)),None)),AttributeDecl(Instance,ConstDecl(Id(_O),ArrayType(50,ArrayType(67,IntType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 850))

    def test_1(self):
        line = '''Class _:A_{}Class H:_{}Class __{Constructor (_,_:Array [Int ,0135];_:Array [Array [Array [Array [Int ,04],0XCE],0X30],01_1_4];_:Array [Int ,0x39];_x4,_,j:_;_,_5,_93:Float ){ {} }Var $8:E;}'''
        expect = '''Program([ClassDecl(Id(_),Id(A_),[]),ClassDecl(Id(H),Id(_),[]),ClassDecl(Id(__),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(93,IntType)),param(Id(_),ArrayType(93,IntType)),param(Id(_),ArrayType(76,ArrayType(48,ArrayType(206,ArrayType(4,IntType))))),param(Id(_),ArrayType(57,IntType)),param(Id(_x4),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(j),ClassType(Id(_))),param(Id(_),FloatType),param(Id(_5),FloatType),param(Id(_93),FloatType)],Block([Block([])])),AttributeDecl(Static,VarDecl(Id($8),ClassType(Id(E)),NullLiteral()))])])'''
        self.assertTrue(TestAST.test(line, expect, 851))

    def test_2(self):
        line = '''Class f:_{_(_U:_;G:String ;T:Array [Array [Array [Array [Boolean ,0111],0X2B],0B1011010],9_316990];u3:_;_,_v:Array [Float ,0B10_0_1_01];j,_,_,n,Q:w_;_,_:Array [Float ,0X2B]){} }'''
        expect = '''Program([ClassDecl(Id(f),Id(_),[MethodDecl(Id(_),Instance,[param(Id(_U),ClassType(Id(_))),param(Id(G),StringType),param(Id(T),ArrayType(9316990,ArrayType(90,ArrayType(43,ArrayType(73,BoolType))))),param(Id(u3),ClassType(Id(_))),param(Id(_),ArrayType(37,FloatType)),param(Id(_v),ArrayType(37,FloatType)),param(Id(j),ClassType(Id(w_))),param(Id(_),ClassType(Id(w_))),param(Id(_),ClassType(Id(w_))),param(Id(n),ClassType(Id(w_))),param(Id(Q),ClassType(Id(w_))),param(Id(_),ArrayType(43,FloatType)),param(Id(_),ArrayType(43,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 852))

    def test_3(self):
        line = '''Class _4{Val $j6,a_:Boolean ;Var $0,$_,_,$6i_,$68,$_:Boolean ;Constructor (){} }Class W:_{}Class _7{Var $E,$__,$X__4,$_4:Array [Array [Array [Int ,7],05_2_6_4_74],0X62];}'''
        expect = '''Program([ClassDecl(Id(_4),[AttributeDecl(Static,ConstDecl(Id($j6),BoolType,None)),AttributeDecl(Instance,ConstDecl(Id(a_),BoolType,None)),AttributeDecl(Static,VarDecl(Id($0),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($6i_),BoolType)),AttributeDecl(Static,VarDecl(Id($68),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(W),Id(_),[]),ClassDecl(Id(_7),[AttributeDecl(Static,VarDecl(Id($E),ArrayType(98,ArrayType(175420,ArrayType(7,IntType))))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(98,ArrayType(175420,ArrayType(7,IntType))))),AttributeDecl(Static,VarDecl(Id($X__4),ArrayType(98,ArrayType(175420,ArrayType(7,IntType))))),AttributeDecl(Static,VarDecl(Id($_4),ArrayType(98,ArrayType(175420,ArrayType(7,IntType)))))])])'''
        self.assertTrue(TestAST.test(line, expect, 853))

    def test_4(self):
        line = '''Class v{$__(l,T3:Array [Int ,0b1];W36:Boolean ;R:Int ;_:Array [Array [Boolean ,032],0X6];_qp_s:Array [Float ,0X6]){}Val __,w_7:_;}Class H_:P_{_(){} }Class j4{Constructor (o:D1;_,TE_,_l,_W2,_11M:_){} }'''
        expect = '''Program([ClassDecl(Id(v),[MethodDecl(Id($__),Static,[param(Id(l),ArrayType(1,IntType)),param(Id(T3),ArrayType(1,IntType)),param(Id(W36),BoolType),param(Id(R),IntType),param(Id(_),ArrayType(6,ArrayType(26,BoolType))),param(Id(_qp_s),ArrayType(6,FloatType))],Block([])),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(w_7),ClassType(Id(_)),None))]),ClassDecl(Id(H_),Id(P_),[MethodDecl(Id(_),Instance,[],Block([]))]),ClassDecl(Id(j4),[MethodDecl(Id(Constructor),Instance,[param(Id(o),ClassType(Id(D1))),param(Id(_),ClassType(Id(_))),param(Id(TE_),ClassType(Id(_))),param(Id(_l),ClassType(Id(_))),param(Id(_W2),ClassType(Id(_))),param(Id(_11M),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 854))

    def test_5(self):
        line = '''Class _14:_{Var $5u__4t:Array [Array [Int ,0x6_C],0x7];}Class n_T:g{ep7(_,w4:Array [Int ,07_04_2752];_tH1:Array [Float ,0XE];_T,_,_:Array [Array [Int ,0x4],0b1100100];vZ9:Array [Array [Boolean ,22],0B1_01];a0_,x_,_:_){} }'''
        expect = '''Program([ClassDecl(Id(_14),Id(_),[AttributeDecl(Static,VarDecl(Id($5u__4t),ArrayType(7,ArrayType(108,IntType))))]),ClassDecl(Id(n_T),Id(g),[MethodDecl(Id(ep7),Instance,[param(Id(_),ArrayType(1852906,IntType)),param(Id(w4),ArrayType(1852906,IntType)),param(Id(_tH1),ArrayType(14,FloatType)),param(Id(_T),ArrayType(100,ArrayType(4,IntType))),param(Id(_),ArrayType(100,ArrayType(4,IntType))),param(Id(_),ArrayType(100,ArrayType(4,IntType))),param(Id(vZ9),ArrayType(5,ArrayType(22,BoolType))),param(Id(a0_),ClassType(Id(_))),param(Id(x_),ClassType(Id(_))),param(Id(_),ClassType(Id(_)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 855))

    def test_6(self):
        line = '''Class J:LC{Val u,_:ds8_;}Class v:_2{Destructor (){}Constructor (L:Array [Boolean ,0B1001010]){}Constructor (_:Int ;f,_,c8gIt:Array [Array [Array [Array [Array [Float ,13],021_3],042],0b10001],0x3_FDC]){If (!-M_::$6()._1){}Else {}Continue ;} }Class V{Constructor (){Continue ;}Val $_72,_4,$L:_;Var $7:_;}Class _:U{}Class _3d{}'''
        expect = '''Program([ClassDecl(Id(J),Id(LC),[AttributeDecl(Instance,ConstDecl(Id(u),ClassType(Id(ds8_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(ds8_)),None))]),ClassDecl(Id(v),Id(_2),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(L),ArrayType(74,BoolType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(f),ArrayType(16348,ArrayType(17,ArrayType(34,ArrayType(139,ArrayType(13,FloatType)))))),param(Id(_),ArrayType(16348,ArrayType(17,ArrayType(34,ArrayType(139,ArrayType(13,FloatType)))))),param(Id(c8gIt),ArrayType(16348,ArrayType(17,ArrayType(34,ArrayType(139,ArrayType(13,FloatType))))))],Block([If(UnaryOp(!,UnaryOp(-,FieldAccess(CallExpr(Id(M_),Id($6),[]),Id(_1)))),Block([]),Block([])),Continue]))]),ClassDecl(Id(V),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($_72),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(_4),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($L),ClassType(Id(_)),None)),AttributeDecl(Static,VarDecl(Id($7),ClassType(Id(_)),NullLiteral()))]),ClassDecl(Id(_),Id(U),[]),ClassDecl(Id(_3d),[])])'''
        self.assertTrue(TestAST.test(line, expect, 856))

    def test_7(self):
        line = '''Class __07{_2(_V,_:n;_Q_bq_:String ;_0,U_,yp,_,S9_:Array [Array [Array [Int ,0xD],0X3D],0B11_1_1];_G_:Int ;d,v:J){}Val Tc9c,$_:Array [Int ,07];Val __:C;$_0s(yC:Array [Int ,0B100100]){} }'''
        expect = '''Program([ClassDecl(Id(__07),[MethodDecl(Id(_2),Instance,[param(Id(_V),ClassType(Id(n))),param(Id(_),ClassType(Id(n))),param(Id(_Q_bq_),StringType),param(Id(_0),ArrayType(15,ArrayType(61,ArrayType(13,IntType)))),param(Id(U_),ArrayType(15,ArrayType(61,ArrayType(13,IntType)))),param(Id(yp),ArrayType(15,ArrayType(61,ArrayType(13,IntType)))),param(Id(_),ArrayType(15,ArrayType(61,ArrayType(13,IntType)))),param(Id(S9_),ArrayType(15,ArrayType(61,ArrayType(13,IntType)))),param(Id(_G_),IntType),param(Id(d),ClassType(Id(J))),param(Id(v),ClassType(Id(J)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(Tc9c),ArrayType(7,IntType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(7,IntType),None)),AttributeDecl(Instance,ConstDecl(Id(__),ClassType(Id(C)),None)),MethodDecl(Id($_0s),Static,[param(Id(yC),ArrayType(36,IntType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 857))

    def test_8(self):
        line = '''Class _:_{Destructor (){}Var $9O9:Array [Array [String ,064],06];}Class _6:_{Val _9:Boolean ;}Class _:___d{Destructor (){}Var _,PQ,_s_,t,_,$t,$2,y,$_,Mv,G__m4,_,_J_,$__,$__,c_:Array [Float ,064];}'''
        expect = '''Program([ClassDecl(Id(_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($9O9),ArrayType(6,ArrayType(52,StringType))))]),ClassDecl(Id(_6),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_9),BoolType,None))]),ClassDecl(Id(_),Id(___d),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(PQ),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(_s_),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(t),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(52,FloatType))),AttributeDecl(Static,VarDecl(Id($t),ArrayType(52,FloatType))),AttributeDecl(Static,VarDecl(Id($2),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(y),ArrayType(52,FloatType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(Mv),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(G__m4),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(_J_),ArrayType(52,FloatType))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(52,FloatType))),AttributeDecl(Static,VarDecl(Id($__),ArrayType(52,FloatType))),AttributeDecl(Instance,VarDecl(Id(c_),ArrayType(52,FloatType)))])])'''
        self.assertTrue(TestAST.test(line, expect, 858))

    def test_9(self):
        line = '''Class J3{Constructor (_8,_S:Array [Boolean ,49]){} }Class kD{Var $j,Mqo_5__:Array [Int ,0X8F_8];Var $_2I:Array [Array [Boolean ,447_3],0X55];_(){Break ;Break ;}Destructor (){} }Class _N:_{Constructor (){}Var $_,e_,$1__:Float ;Val EM,$8:Int ;}Class k{}Class e:B{}'''
        expect = '''Program([ClassDecl(Id(J3),[MethodDecl(Id(Constructor),Instance,[param(Id(_8),ArrayType(49,BoolType)),param(Id(_S),ArrayType(49,BoolType))],Block([]))]),ClassDecl(Id(kD),[AttributeDecl(Static,VarDecl(Id($j),ArrayType(2296,IntType))),AttributeDecl(Instance,VarDecl(Id(Mqo_5__),ArrayType(2296,IntType))),AttributeDecl(Static,VarDecl(Id($_2I),ArrayType(85,ArrayType(4473,BoolType)))),MethodDecl(Id(_),Instance,[],Block([Break,Break])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_N),Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($_),FloatType)),AttributeDecl(Instance,VarDecl(Id(e_),FloatType)),AttributeDecl(Static,VarDecl(Id($1__),FloatType)),AttributeDecl(Instance,ConstDecl(Id(EM),IntType,None)),AttributeDecl(Static,ConstDecl(Id($8),IntType,None))]),ClassDecl(Id(k),[]),ClassDecl(Id(e),Id(B),[])])'''
        self.assertTrue(TestAST.test(line, expect, 859))

    def test_0(self):
        line = '''Class _{}Class _x_G3_:Z{Val _b_:Array [Boolean ,0x4B];Var $b_,$_,$H,_,_,$6:Boolean ;N(M,__,N_,__Q:Float ;_:_;__:String ;_:Array [Array [Array [Float ,0x4B],0170],0x2];_q,_:h8){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_x_G3_),Id(Z),[AttributeDecl(Instance,ConstDecl(Id(_b_),ArrayType(75,BoolType),None)),AttributeDecl(Static,VarDecl(Id($b_),BoolType)),AttributeDecl(Static,VarDecl(Id($_),BoolType)),AttributeDecl(Static,VarDecl(Id($H),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Instance,VarDecl(Id(_),BoolType)),AttributeDecl(Static,VarDecl(Id($6),BoolType)),MethodDecl(Id(N),Instance,[param(Id(M),FloatType),param(Id(__),FloatType),param(Id(N_),FloatType),param(Id(__Q),FloatType),param(Id(_),ClassType(Id(_))),param(Id(__),StringType),param(Id(_),ArrayType(2,ArrayType(120,ArrayType(75,FloatType)))),param(Id(_q),ClassType(Id(h8))),param(Id(_),ClassType(Id(h8)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 860))

    def test_1(self):
        line = '''Class V_:_94t{Var _,o,___,_M,$Q8:_;_(T,vKw_:Array [Boolean ,18];r7,_:Float ){} }Class _:_38{Val $Y:Array [Array [Array [Array [Array [Float ,0107],0XD],0107],1],0x88_8];}'''
        expect = '''Program([ClassDecl(Id(V_),Id(_94t),[AttributeDecl(Instance,VarDecl(Id(_),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(o),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(___),ClassType(Id(_)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_M),ClassType(Id(_)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($Q8),ClassType(Id(_)),NullLiteral())),MethodDecl(Id(_),Instance,[param(Id(T),ArrayType(18,BoolType)),param(Id(vKw_),ArrayType(18,BoolType)),param(Id(r7),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(_),Id(_38),[AttributeDecl(Static,ConstDecl(Id($Y),ArrayType(2184,ArrayType(1,ArrayType(71,ArrayType(13,ArrayType(71,FloatType))))),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 861))

    def test_2(self):
        line = '''Class h65:_8w{_(X_,A:B_1;_8bvWH:Float ;_,fy97:Array [String ,01_6_4_4];_:_3;__,_2:z__){} }Class _jonFA_1{}Class p{_2(){} }Class _0:_{}Class _:_N07{}Class _:w_M{}Class _280{Val $_M_Ws,N_,_,$_u74_3:_I;Destructor (){Return ;} }'''
        expect = '''Program([ClassDecl(Id(h65),Id(_8w),[MethodDecl(Id(_),Instance,[param(Id(X_),ClassType(Id(B_1))),param(Id(A),ClassType(Id(B_1))),param(Id(_8bvWH),FloatType),param(Id(_),ArrayType(932,StringType)),param(Id(fy97),ArrayType(932,StringType)),param(Id(_),ClassType(Id(_3))),param(Id(__),ClassType(Id(z__))),param(Id(_2),ClassType(Id(z__)))],Block([]))]),ClassDecl(Id(_jonFA_1),[]),ClassDecl(Id(p),[MethodDecl(Id(_2),Instance,[],Block([]))]),ClassDecl(Id(_0),Id(_),[]),ClassDecl(Id(_),Id(_N07),[]),ClassDecl(Id(_),Id(w_M),[]),ClassDecl(Id(_280),[AttributeDecl(Static,ConstDecl(Id($_M_Ws),ClassType(Id(_I)),None)),AttributeDecl(Instance,ConstDecl(Id(N_),ClassType(Id(_I)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(_I)),None)),AttributeDecl(Static,ConstDecl(Id($_u74_3),ClassType(Id(_I)),None)),MethodDecl(Id(Destructor),Instance,[],Block([Return()]))])])'''
        self.assertTrue(TestAST.test(line, expect, 862))

    def test_3(self):
        line = '''Class __t{Constructor (__:j1;_r:_;s_,E:Int ;F_6__7_,_:Array [String ,0b10001];o5_,G,_,_:Boolean ){}Destructor (){}Constructor (P,__,v___:Boolean ;DS:__){}$45(T,_8:Array [Float ,4_2];_F,_:_0){} }'''
        expect = '''Program([ClassDecl(Id(__t),[MethodDecl(Id(Constructor),Instance,[param(Id(__),ClassType(Id(j1))),param(Id(_r),ClassType(Id(_))),param(Id(s_),IntType),param(Id(E),IntType),param(Id(F_6__7_),ArrayType(17,StringType)),param(Id(_),ArrayType(17,StringType)),param(Id(o5_),BoolType),param(Id(G),BoolType),param(Id(_),BoolType),param(Id(_),BoolType)],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(P),BoolType),param(Id(__),BoolType),param(Id(v___),BoolType),param(Id(DS),ClassType(Id(__)))],Block([])),MethodDecl(Id($45),Static,[param(Id(T),ArrayType(42,FloatType)),param(Id(_8),ArrayType(42,FloatType)),param(Id(_F),ClassType(Id(_0))),param(Id(_),ClassType(Id(_0)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 863))

    def test_4(self):
        line = '''Class x{Constructor (E,_d:_x){}Val C,$_,T6l:Array [Float ,01_0];Val Z79217D__,$_:Array [Array [Array [Boolean ,0x9],036],4];}Class _:_5_{Constructor (a,V_:v){} }Class _m:l{}'''
        expect = '''Program([ClassDecl(Id(x),[MethodDecl(Id(Constructor),Instance,[param(Id(E),ClassType(Id(_x))),param(Id(_d),ClassType(Id(_x)))],Block([])),AttributeDecl(Instance,ConstDecl(Id(C),ArrayType(8,FloatType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(8,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(T6l),ArrayType(8,FloatType),None)),AttributeDecl(Instance,ConstDecl(Id(Z79217D__),ArrayType(4,ArrayType(30,ArrayType(9,BoolType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(4,ArrayType(30,ArrayType(9,BoolType))),None))]),ClassDecl(Id(_),Id(_5_),[MethodDecl(Id(Constructor),Instance,[param(Id(a),ClassType(Id(v))),param(Id(V_),ClassType(Id(v)))],Block([]))]),ClassDecl(Id(_m),Id(l),[])])'''
        self.assertTrue(TestAST.test(line, expect, 864))

    def test_5(self):
        line = '''Class _{Destructor (){}Var $1:Float ;}Class x__:_11O{Val _X_Vb:String ;}Class _{}Class K:__{Var $P__:B__;Val $_3_94,$_,l6:Array [Array [Array [Float ,855],82_87_5],0x5A];}Class _n:V{_c(_,J,_y:_;_,_j,_B,_:P;_,j:Int ;D1:yl_G__){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Static,VarDecl(Id($1),FloatType))]),ClassDecl(Id(x__),Id(_11O),[AttributeDecl(Instance,ConstDecl(Id(_X_Vb),StringType,None))]),ClassDecl(Id(_),[]),ClassDecl(Id(K),Id(__),[AttributeDecl(Static,VarDecl(Id($P__),ClassType(Id(B__)),NullLiteral())),AttributeDecl(Static,ConstDecl(Id($_3_94),ArrayType(90,ArrayType(82875,ArrayType(855,FloatType))),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(90,ArrayType(82875,ArrayType(855,FloatType))),None)),AttributeDecl(Instance,ConstDecl(Id(l6),ArrayType(90,ArrayType(82875,ArrayType(855,FloatType))),None))]),ClassDecl(Id(_n),Id(V),[MethodDecl(Id(_c),Instance,[param(Id(_),ClassType(Id(_))),param(Id(J),ClassType(Id(_))),param(Id(_y),ClassType(Id(_))),param(Id(_),ClassType(Id(P))),param(Id(_j),ClassType(Id(P))),param(Id(_B),ClassType(Id(P))),param(Id(_),ClassType(Id(P))),param(Id(_),IntType),param(Id(j),IntType),param(Id(D1),ClassType(Id(yl_G__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 865))

    def test_6(self):
        line = '''Class _{}Class _r__15{Var $75,V:Float ;}Class d:I_l{R_(_X_,G,k__:String ){ {}Break ;}Var $_:Array [Int ,0133];p(N,t,_,_:_Wm;u,___,V_5:Array [Int ,0b1010011]){}Destructor (){} }Class kb:GY{Constructor (_,Xr:_;b8:Array [Boolean ,05]){} }'''
        expect = '''Program([ClassDecl(Id(_),[]),ClassDecl(Id(_r__15),[AttributeDecl(Static,VarDecl(Id($75),FloatType)),AttributeDecl(Instance,VarDecl(Id(V),FloatType))]),ClassDecl(Id(d),Id(I_l),[MethodDecl(Id(R_),Instance,[param(Id(_X_),StringType),param(Id(G),StringType),param(Id(k__),StringType)],Block([Block([]),Break])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(91,IntType))),MethodDecl(Id(p),Instance,[param(Id(N),ClassType(Id(_Wm))),param(Id(t),ClassType(Id(_Wm))),param(Id(_),ClassType(Id(_Wm))),param(Id(_),ClassType(Id(_Wm))),param(Id(u),ArrayType(83,IntType)),param(Id(___),ArrayType(83,IntType)),param(Id(V_5),ArrayType(83,IntType))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(kb),Id(GY),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ClassType(Id(_))),param(Id(Xr),ClassType(Id(_))),param(Id(b8),ArrayType(5,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 866))

    def test_7(self):
        line = '''Class e__:_7{$r_(__:Boolean ;I:Array [Array [Float ,0XDB],032];Y_H1:Boolean ;b5Y:Array [Array [Array [Boolean ,032],0b1_0],89];_,_:String ;__0:q__v){}$6(u:_V_){} }Class kv50:o4{}'''
        expect = '''Program([ClassDecl(Id(e__),Id(_7),[MethodDecl(Id($r_),Static,[param(Id(__),BoolType),param(Id(I),ArrayType(26,ArrayType(219,FloatType))),param(Id(Y_H1),BoolType),param(Id(b5Y),ArrayType(89,ArrayType(2,ArrayType(26,BoolType)))),param(Id(_),StringType),param(Id(_),StringType),param(Id(__0),ClassType(Id(q__v)))],Block([])),MethodDecl(Id($6),Static,[param(Id(u),ClassType(Id(_V_)))],Block([]))]),ClassDecl(Id(kv50),Id(o4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 867))

    def test_8(self):
        line = '''Class u:_{}Class u:_m{}Class d4:_c{Var s2:_nw_;_(){False .__P=!!Self .y;}$_1v(_6,q,_:Array [String ,7];Z:Boolean ){Break ;}Var $7,d:Float ;s(A3,_:Int ;u3,H9:Float ){} }'''
        expect = '''Program([ClassDecl(Id(u),Id(_),[]),ClassDecl(Id(u),Id(_m),[]),ClassDecl(Id(d4),Id(_c),[AttributeDecl(Instance,VarDecl(Id(s2),ClassType(Id(_nw_)),NullLiteral())),MethodDecl(Id(_),Instance,[],Block([AssignStmt(FieldAccess(BooleanLit(False),Id(__P)),UnaryOp(!,UnaryOp(!,FieldAccess(Self(),Id(y)))))])),MethodDecl(Id($_1v),Static,[param(Id(_6),ArrayType(7,StringType)),param(Id(q),ArrayType(7,StringType)),param(Id(_),ArrayType(7,StringType)),param(Id(Z),BoolType)],Block([Break])),AttributeDecl(Static,VarDecl(Id($7),FloatType)),AttributeDecl(Instance,VarDecl(Id(d),FloatType)),MethodDecl(Id(s),Instance,[param(Id(A3),IntType),param(Id(_),IntType),param(Id(u3),FloatType),param(Id(H9),FloatType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 868))

    def test_9(self):
        line = '''Class W:f{Destructor (){} }Class _P{}Class _:_1g{Constructor (){}Val $X,$n7:Array [Array [Array [Array [Array [Array [Boolean ,39_2],0B1],0B1],9],0140],8];Destructor (){Return ;Break ;} }'''
        expect = '''Program([ClassDecl(Id(W),Id(f),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_P),[]),ClassDecl(Id(_),Id(_1g),[MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($X),ArrayType(8,ArrayType(96,ArrayType(9,ArrayType(1,ArrayType(1,ArrayType(392,BoolType)))))),None)),AttributeDecl(Static,ConstDecl(Id($n7),ArrayType(8,ArrayType(96,ArrayType(9,ArrayType(1,ArrayType(1,ArrayType(392,BoolType)))))),None)),MethodDecl(Id(Destructor),Instance,[],Block([Return(),Break]))])])'''
        self.assertTrue(TestAST.test(line, expect, 869))

    def test_0(self):
        line = '''Class _{Constructor (){} }Class Z97{Var $__:Array [Array [Int ,065],8];Constructor (_:Array [Array [Int ,63],0x6];_,Cg,B_:Float ;b4o,_G:Array [Float ,0B10_00]){} }Class A_8{}Class u:y_{Destructor (){} }Class m_{}'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(Z97),[AttributeDecl(Static,VarDecl(Id($__),ArrayType(8,ArrayType(53,IntType)))),MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(6,ArrayType(63,IntType))),param(Id(_),FloatType),param(Id(Cg),FloatType),param(Id(B_),FloatType),param(Id(b4o),ArrayType(8,FloatType)),param(Id(_G),ArrayType(8,FloatType))],Block([]))]),ClassDecl(Id(A_8),[]),ClassDecl(Id(u),Id(y_),[MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(m_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 870))

    def test_1(self):
        line = '''Class _3_4:_U_{_(k2_,O,_:Array [Array [Array [Float ,0b1000000],0X33],06];__,r_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Array [Float ,07667_7],0B100001],0xB],0x19],58],0B1],0xB],0X33],067],0b1_0_0],8];_:__;_4Hf5_:Array [Boolean ,0b1000000];S:x_2_1D){ {} }}'''
        expect = '''Program([ClassDecl(Id(_3_4),Id(_U_),[MethodDecl(Id(_),Instance,[param(Id(k2_),ArrayType(6,ArrayType(51,ArrayType(64,FloatType)))),param(Id(O),ArrayType(6,ArrayType(51,ArrayType(64,FloatType)))),param(Id(_),ArrayType(6,ArrayType(51,ArrayType(64,FloatType)))),param(Id(__),ArrayType(8,ArrayType(4,ArrayType(55,ArrayType(51,ArrayType(11,ArrayType(1,ArrayType(58,ArrayType(25,ArrayType(11,ArrayType(33,ArrayType(32191,FloatType)))))))))))),param(Id(r_),ArrayType(8,ArrayType(4,ArrayType(55,ArrayType(51,ArrayType(11,ArrayType(1,ArrayType(58,ArrayType(25,ArrayType(11,ArrayType(33,ArrayType(32191,FloatType)))))))))))),param(Id(_),ClassType(Id(__))),param(Id(_4Hf5_),ArrayType(64,BoolType)),param(Id(S),ClassType(Id(x_2_1D)))],Block([Block([])]))])])'''
        self.assertTrue(TestAST.test(line, expect, 871))

    def test_2(self):
        line = '''Class _{Val _ST18__:Array [Array [Array [Int ,5],044],0100];}Class t{Var $_,$R__1,$__24W,$h,$_:Array [Array [String ,0b1_1],1];Destructor (){} }Class J:__2C_t__{Constructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Instance,ConstDecl(Id(_ST18__),ArrayType(64,ArrayType(36,ArrayType(5,IntType))),None))]),ClassDecl(Id(t),[AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($R__1),ArrayType(1,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($__24W),ArrayType(1,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($h),ArrayType(1,ArrayType(3,StringType)))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,ArrayType(3,StringType)))),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(J),Id(__2C_t__),[MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 872))

    def test_3(self):
        line = '''Class __:_M{}Class s4f_{}Class _11_3:_1_{l(_,SH,_1_J:Boolean ;_1b,s,_,_,v:Array [Array [Array [Array [Array [Array [Array [Int ,0X1_4],76],031],031],0b100],063],76];__62__5,__Y__bU,_F__mI,s78,D,__49,_:Array [Boolean ,8]){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(_M),[]),ClassDecl(Id(s4f_),[]),ClassDecl(Id(_11_3),Id(_1_),[MethodDecl(Id(l),Instance,[param(Id(_),BoolType),param(Id(SH),BoolType),param(Id(_1_J),BoolType),param(Id(_1b),ArrayType(76,ArrayType(51,ArrayType(4,ArrayType(25,ArrayType(25,ArrayType(76,ArrayType(20,IntType)))))))),param(Id(s),ArrayType(76,ArrayType(51,ArrayType(4,ArrayType(25,ArrayType(25,ArrayType(76,ArrayType(20,IntType)))))))),param(Id(_),ArrayType(76,ArrayType(51,ArrayType(4,ArrayType(25,ArrayType(25,ArrayType(76,ArrayType(20,IntType)))))))),param(Id(_),ArrayType(76,ArrayType(51,ArrayType(4,ArrayType(25,ArrayType(25,ArrayType(76,ArrayType(20,IntType)))))))),param(Id(v),ArrayType(76,ArrayType(51,ArrayType(4,ArrayType(25,ArrayType(25,ArrayType(76,ArrayType(20,IntType)))))))),param(Id(__62__5),ArrayType(8,BoolType)),param(Id(__Y__bU),ArrayType(8,BoolType)),param(Id(_F__mI),ArrayType(8,BoolType)),param(Id(s78),ArrayType(8,BoolType)),param(Id(D),ArrayType(8,BoolType)),param(Id(__49),ArrayType(8,BoolType)),param(Id(_),ArrayType(8,BoolType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 873))

    def test_4(self):
        line = '''Class _{Val $h,$__3,$0u:Array [Boolean ,02_4];Constructor (_:Int ;e,_:_;_,_1:Int ;_,U,_:_;_E7,W_T,_W:Float ){Continue ;}$o3(I,__U,bf2_,U:Array [Array [Array [Array [Int ,0B110001],0b101010],87],6]){}Destructor (){}Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($h),ArrayType(20,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($__3),ArrayType(20,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($0u),ArrayType(20,BoolType),None)),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(e),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),IntType),param(Id(_1),IntType),param(Id(_),ClassType(Id(_))),param(Id(U),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_E7),FloatType),param(Id(W_T),FloatType),param(Id(_W),FloatType)],Block([Continue])),MethodDecl(Id($o3),Static,[param(Id(I),ArrayType(6,ArrayType(87,ArrayType(42,ArrayType(49,IntType))))),param(Id(__U),ArrayType(6,ArrayType(87,ArrayType(42,ArrayType(49,IntType))))),param(Id(bf2_),ArrayType(6,ArrayType(87,ArrayType(42,ArrayType(49,IntType))))),param(Id(U),ArrayType(6,ArrayType(87,ArrayType(42,ArrayType(49,IntType)))))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 874))

    def test_5(self):
        line = '''Class ___99O{Constructor (_:Array [Int ,0B100100]){}Constructor (_:Int ;_:_;E,_0:_2_l;C,____,_:Array [Array [Array [Int ,0xE6_1_43],0xF_9],0x29];__:Array [Float ,03]){} }'''
        expect = '''Program([ClassDecl(Id(___99O),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(36,IntType))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),IntType),param(Id(_),ClassType(Id(_))),param(Id(E),ClassType(Id(_2_l))),param(Id(_0),ClassType(Id(_2_l))),param(Id(C),ArrayType(41,ArrayType(249,ArrayType(942403,IntType)))),param(Id(____),ArrayType(41,ArrayType(249,ArrayType(942403,IntType)))),param(Id(_),ArrayType(41,ArrayType(249,ArrayType(942403,IntType)))),param(Id(__),ArrayType(3,FloatType))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 875))

    def test_6(self):
        line = '''Class M:_H{Constructor (){Continue ;}Constructor (D3_:U;f__:I;_,_2,F0bF1_,n_3,_,T_:E9;n2C1,e,y:Int ;d,_,_:Array [Array [Array [Int ,062],07246_6],0xC_D_4];_2,h,_:_C7;K_:Array [Array [Float ,0x5],0b1001100];kF:String ;Nl_,_p,_,P,o:Float ;F_7,_:Int ;_4,U:Array [Array [Array [String ,0B1010100],39],0XD4_FF];WP_,L:Array [Array [Int ,0x16],0x16];A,_:Int ;Qg75,_,y:_8;_:sw){}Destructor (){Val _,F:Float ;} }'''
        expect = '''Program([ClassDecl(Id(M),Id(_H),[MethodDecl(Id(Constructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(D3_),ClassType(Id(U))),param(Id(f__),ClassType(Id(I))),param(Id(_),ClassType(Id(E9))),param(Id(_2),ClassType(Id(E9))),param(Id(F0bF1_),ClassType(Id(E9))),param(Id(n_3),ClassType(Id(E9))),param(Id(_),ClassType(Id(E9))),param(Id(T_),ClassType(Id(E9))),param(Id(n2C1),IntType),param(Id(e),IntType),param(Id(y),IntType),param(Id(d),ArrayType(3284,ArrayType(30006,ArrayType(50,IntType)))),param(Id(_),ArrayType(3284,ArrayType(30006,ArrayType(50,IntType)))),param(Id(_),ArrayType(3284,ArrayType(30006,ArrayType(50,IntType)))),param(Id(_2),ClassType(Id(_C7))),param(Id(h),ClassType(Id(_C7))),param(Id(_),ClassType(Id(_C7))),param(Id(K_),ArrayType(76,ArrayType(5,FloatType))),param(Id(kF),StringType),param(Id(Nl_),FloatType),param(Id(_p),FloatType),param(Id(_),FloatType),param(Id(P),FloatType),param(Id(o),FloatType),param(Id(F_7),IntType),param(Id(_),IntType),param(Id(_4),ArrayType(54527,ArrayType(39,ArrayType(84,StringType)))),param(Id(U),ArrayType(54527,ArrayType(39,ArrayType(84,StringType)))),param(Id(WP_),ArrayType(22,ArrayType(22,IntType))),param(Id(L),ArrayType(22,ArrayType(22,IntType))),param(Id(A),IntType),param(Id(_),IntType),param(Id(Qg75),ClassType(Id(_8))),param(Id(_),ClassType(Id(_8))),param(Id(y),ClassType(Id(_8))),param(Id(_),ClassType(Id(sw)))],Block([])),MethodDecl(Id(Destructor),Instance,[],Block([ConstDecl(Id(_),FloatType,None),ConstDecl(Id(F),FloatType,None)]))])])'''
        self.assertTrue(TestAST.test(line, expect, 876))

    def test_7(self):
        line = '''Class __:v{Constructor (w:String ){}Constructor (){}Constructor (_,_9,__,Cl:String ;j__,M0P,__:Array [Int ,0x3];_:Float ;_:Array [Array [Array [Float ,0B1_0],05],0x3];j2:Array [Array [Array [Boolean ,0x3],0x3],0XC];_583Z_:W4_;q_,bX01_,_:Int ){} }'''
        expect = '''Program([ClassDecl(Id(__),Id(v),[MethodDecl(Id(Constructor),Instance,[param(Id(w),StringType)],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),StringType),param(Id(_9),StringType),param(Id(__),StringType),param(Id(Cl),StringType),param(Id(j__),ArrayType(3,IntType)),param(Id(M0P),ArrayType(3,IntType)),param(Id(__),ArrayType(3,IntType)),param(Id(_),FloatType),param(Id(_),ArrayType(3,ArrayType(5,ArrayType(2,FloatType)))),param(Id(j2),ArrayType(12,ArrayType(3,ArrayType(3,BoolType)))),param(Id(_583Z_),ClassType(Id(W4_))),param(Id(q_),IntType),param(Id(bX01_),IntType),param(Id(_),IntType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 877))

    def test_8(self):
        line = '''Class vQT9:_4{Constructor (FR:Float ;_B:Array [Array [Array [Array [Boolean ,0xB_660C1_6],0x3],0x33],0b1];q,_:String ;J6,m96:Array [Int ,03_14_5];O6_,_:Array [Array [Array [Array [Array [Boolean ,0101],0101],06_7],0x1],32]){} }'''
        expect = '''Program([ClassDecl(Id(vQT9),Id(_4),[MethodDecl(Id(Constructor),Instance,[param(Id(FR),FloatType),param(Id(_B),ArrayType(1,ArrayType(51,ArrayType(3,ArrayType(191237142,BoolType))))),param(Id(q),StringType),param(Id(_),StringType),param(Id(J6),ArrayType(1637,IntType)),param(Id(m96),ArrayType(1637,IntType)),param(Id(O6_),ArrayType(32,ArrayType(1,ArrayType(55,ArrayType(65,ArrayType(65,BoolType)))))),param(Id(_),ArrayType(32,ArrayType(1,ArrayType(55,ArrayType(65,ArrayType(65,BoolType))))))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 878))

    def test_9(self):
        line = '''Class n{_(__,yC:Array [Int ,033];_,_p,_,_,___,_1_,SW9_,I,Y_,_,_:_;_3:Boolean ;_4,U__:Array [Array [Array [Float ,0xC],0XE],0B1];w:Array [Float ,6_7];D,B:Int ){} }Class l:_{Val _82,$_,_,_,$2,$Y:Array [Boolean ,8];}Class _{Destructor (){}Constructor (){} }'''
        expect = '''Program([ClassDecl(Id(n),[MethodDecl(Id(_),Instance,[param(Id(__),ArrayType(27,IntType)),param(Id(yC),ArrayType(27,IntType)),param(Id(_),ClassType(Id(_))),param(Id(_p),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(___),ClassType(Id(_))),param(Id(_1_),ClassType(Id(_))),param(Id(SW9_),ClassType(Id(_))),param(Id(I),ClassType(Id(_))),param(Id(Y_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_),ClassType(Id(_))),param(Id(_3),BoolType),param(Id(_4),ArrayType(1,ArrayType(14,ArrayType(12,FloatType)))),param(Id(U__),ArrayType(1,ArrayType(14,ArrayType(12,FloatType)))),param(Id(w),ArrayType(67,FloatType)),param(Id(D),IntType),param(Id(B),IntType)],Block([]))]),ClassDecl(Id(l),Id(_),[AttributeDecl(Instance,ConstDecl(Id(_82),ArrayType(8,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(8,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(8,BoolType),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(8,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($2),ArrayType(8,BoolType),None)),AttributeDecl(Static,ConstDecl(Id($Y),ArrayType(8,BoolType),None))]),ClassDecl(Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 879))

    def test_0(self):
        line = '''Class _k8_7_{Var $3_D6U,$_:Array [Int ,68];Var o20,A,$V,W:Int ;}Class X5D_:_{Destructor (){Break ;} }Class w:q{}Class I{$_d(_4:Array [String ,03_7]){}Val $_ST,$80_:_;}Class _8:__{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_k8_7_),[AttributeDecl(Static,VarDecl(Id($3_D6U),ArrayType(68,IntType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(68,IntType))),AttributeDecl(Instance,VarDecl(Id(o20),IntType)),AttributeDecl(Instance,VarDecl(Id(A),IntType)),AttributeDecl(Static,VarDecl(Id($V),IntType)),AttributeDecl(Instance,VarDecl(Id(W),IntType))]),ClassDecl(Id(X5D_),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([Break]))]),ClassDecl(Id(w),Id(q),[]),ClassDecl(Id(I),[MethodDecl(Id($_d),Static,[param(Id(_4),ArrayType(31,StringType))],Block([])),AttributeDecl(Static,ConstDecl(Id($_ST),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($80_),ClassType(Id(_)),None))]),ClassDecl(Id(_8),Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 880))

    def test_1(self):
        line = '''Class _5{Var N,$8_,_,$xg:Array [Array [Array [Array [Array [Array [Boolean ,0x27],69],0X35],0x27],01],04_7_0_7];}Class _O999:_A{Constructor (){} }Class _9_:_{}Class lF_{}Class N__:____q79f{}'''
        expect = '''Program([ClassDecl(Id(_5),[AttributeDecl(Instance,VarDecl(Id(N),ArrayType(2503,ArrayType(1,ArrayType(39,ArrayType(53,ArrayType(69,ArrayType(39,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($8_),ArrayType(2503,ArrayType(1,ArrayType(39,ArrayType(53,ArrayType(69,ArrayType(39,BoolType)))))))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(2503,ArrayType(1,ArrayType(39,ArrayType(53,ArrayType(69,ArrayType(39,BoolType)))))))),AttributeDecl(Static,VarDecl(Id($xg),ArrayType(2503,ArrayType(1,ArrayType(39,ArrayType(53,ArrayType(69,ArrayType(39,BoolType))))))))]),ClassDecl(Id(_O999),Id(_A),[MethodDecl(Id(Constructor),Instance,[],Block([]))]),ClassDecl(Id(_9_),Id(_),[]),ClassDecl(Id(lF_),[]),ClassDecl(Id(N__),Id(____q79f),[])])'''
        self.assertTrue(TestAST.test(line, expect, 881))

    def test_2(self):
        line = '''Class _:g{Constructor (_,_:Array [Array [Array [Array [Array [Array [Array [Array [Array [Boolean ,60],01_2],60],0b1_0],0X9],4_868],074],0b1010111],60];z1R_,__5:Array [Array [Int ,0X5_DE_8],0x4_C]){}Var $kd,N_:sy;}Class X{Constructor (_5,x,D,_69_,X,_:Array [Float ,074]){}Var $5,G_:Float ;Val $4,$S:_53;}'''
        expect = '''Program([ClassDecl(Id(_),Id(g),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(60,ArrayType(87,ArrayType(60,ArrayType(4868,ArrayType(9,ArrayType(2,ArrayType(60,ArrayType(10,ArrayType(60,BoolType)))))))))),param(Id(_),ArrayType(60,ArrayType(87,ArrayType(60,ArrayType(4868,ArrayType(9,ArrayType(2,ArrayType(60,ArrayType(10,ArrayType(60,BoolType)))))))))),param(Id(z1R_),ArrayType(76,ArrayType(24040,IntType))),param(Id(__5),ArrayType(76,ArrayType(24040,IntType)))],Block([])),AttributeDecl(Static,VarDecl(Id($kd),ClassType(Id(sy)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(N_),ClassType(Id(sy)),NullLiteral()))]),ClassDecl(Id(X),[MethodDecl(Id(Constructor),Instance,[param(Id(_5),ArrayType(60,FloatType)),param(Id(x),ArrayType(60,FloatType)),param(Id(D),ArrayType(60,FloatType)),param(Id(_69_),ArrayType(60,FloatType)),param(Id(X),ArrayType(60,FloatType)),param(Id(_),ArrayType(60,FloatType))],Block([])),AttributeDecl(Static,VarDecl(Id($5),FloatType)),AttributeDecl(Instance,VarDecl(Id(G_),FloatType)),AttributeDecl(Static,ConstDecl(Id($4),ClassType(Id(_53)),None)),AttributeDecl(Static,ConstDecl(Id($S),ClassType(Id(_53)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 882))

    def test_3(self):
        line = '''Class _:k{}Class __mt:N8{___Q4V(Z:Array [Array [Array [Array [Array [Array [Boolean ,0B1010111],0X3_A1_8],0x9],84],84],0B1010111];U_,s:Array [Array [Array [Int ,0X76],0x1C],032];k:Array [Array [String ,04_2],0b1001010]){} }Class i{}'''
        expect = '''Program([ClassDecl(Id(_),Id(k),[]),ClassDecl(Id(__mt),Id(N8),[MethodDecl(Id(___Q4V),Instance,[param(Id(Z),ArrayType(87,ArrayType(84,ArrayType(84,ArrayType(9,ArrayType(14872,ArrayType(87,BoolType))))))),param(Id(U_),ArrayType(26,ArrayType(28,ArrayType(118,IntType)))),param(Id(s),ArrayType(26,ArrayType(28,ArrayType(118,IntType)))),param(Id(k),ArrayType(74,ArrayType(34,StringType)))],Block([]))]),ClassDecl(Id(i),[])])'''
        self.assertTrue(TestAST.test(line, expect, 883))

    def test_4(self):
        line = '''Class _A2{}Class _:P_6{Val $6,_:Array [Array [Boolean ,0B1001110],0x51];$48(){} }Class _3:____{Constructor (_:Array [Boolean ,0XE];_:_b){ {_::$3._._._();} }Val T_,___:_;}Class _P:_4{}'''
        expect = '''Program([ClassDecl(Id(_A2),[]),ClassDecl(Id(_),Id(P_6),[AttributeDecl(Static,ConstDecl(Id($6),ArrayType(81,ArrayType(78,BoolType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(81,ArrayType(78,BoolType)),None)),MethodDecl(Id($48),Static,[],Block([]))]),ClassDecl(Id(_3),Id(____),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(14,BoolType)),param(Id(_),ClassType(Id(_b)))],Block([Block([Call(FieldAccess(FieldAccess(FieldAccess(Id(_),Id($3)),Id(_)),Id(_)),Id(_),[])])])),AttributeDecl(Instance,ConstDecl(Id(T_),ClassType(Id(_)),None)),AttributeDecl(Instance,ConstDecl(Id(___),ClassType(Id(_)),None))]),ClassDecl(Id(_P),Id(_4),[])])'''
        self.assertTrue(TestAST.test(line, expect, 884))

    def test_5(self):
        line = '''Class n7:R6T_{Var $g:Array [Float ,047];}Class _u{Var _:Array [Array [Array [Boolean ,0B11101],0B1],047];Var $46,__X_d,$49D9,n,_:Array [Array [Int ,047],21];}Class _:__k{}Class _44b__1:_99W__8_{}'''
        expect = '''Program([ClassDecl(Id(n7),Id(R6T_),[AttributeDecl(Static,VarDecl(Id($g),ArrayType(39,FloatType)))]),ClassDecl(Id(_u),[AttributeDecl(Instance,VarDecl(Id(_),ArrayType(39,ArrayType(1,ArrayType(29,BoolType))))),AttributeDecl(Static,VarDecl(Id($46),ArrayType(21,ArrayType(39,IntType)))),AttributeDecl(Instance,VarDecl(Id(__X_d),ArrayType(21,ArrayType(39,IntType)))),AttributeDecl(Static,VarDecl(Id($49D9),ArrayType(21,ArrayType(39,IntType)))),AttributeDecl(Instance,VarDecl(Id(n),ArrayType(21,ArrayType(39,IntType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(21,ArrayType(39,IntType))))]),ClassDecl(Id(_),Id(__k),[]),ClassDecl(Id(_44b__1),Id(_99W__8_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 885))

    def test_6(self):
        line = '''Class d:_9_7{Constructor (_:Array [Array [Array [Array [Array [String ,02],9_9],01],0xEB],90];_,h3b1_g_,_6t:Array [Int ,0XCE5];w:i_B_L;_,_:Array [Boolean ,05];_,Lf:Float ;N:l;ba:______;T05,D:Array [Float ,90]){} }Class b:_7{}'''
        expect = '''Program([ClassDecl(Id(d),Id(_9_7),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(90,ArrayType(235,ArrayType(1,ArrayType(99,ArrayType(2,StringType)))))),param(Id(_),ArrayType(3301,IntType)),param(Id(h3b1_g_),ArrayType(3301,IntType)),param(Id(_6t),ArrayType(3301,IntType)),param(Id(w),ClassType(Id(i_B_L))),param(Id(_),ArrayType(5,BoolType)),param(Id(_),ArrayType(5,BoolType)),param(Id(_),FloatType),param(Id(Lf),FloatType),param(Id(N),ClassType(Id(l))),param(Id(ba),ClassType(Id(______))),param(Id(T05),ArrayType(90,FloatType)),param(Id(D),ArrayType(90,FloatType))],Block([]))]),ClassDecl(Id(b),Id(_7),[])])'''
        self.assertTrue(TestAST.test(line, expect, 886))

    def test_7(self):
        line = '''Class T_{Val $_,_9,$_vU6_3:String ;_(__:Array [Array [Float ,0XF],0B10101];_90:Array [Array [Array [Boolean ,0b1000],072],0X45];j,WQ,__,s,q3:Array [String ,0x43];_,____:Array [Array [Array [Array [Float ,0x43],07],54],0X45]){}Var $_,$V_4_97F_C8,$_,_sWP1_x:Array [String ,0B1];Val O3_33:U;}'''
        expect = '''Program([ClassDecl(Id(T_),[AttributeDecl(Static,ConstDecl(Id($_),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(_9),StringType,None)),AttributeDecl(Static,ConstDecl(Id($_vU6_3),StringType,None)),MethodDecl(Id(_),Instance,[param(Id(__),ArrayType(21,ArrayType(15,FloatType))),param(Id(_90),ArrayType(69,ArrayType(58,ArrayType(8,BoolType)))),param(Id(j),ArrayType(67,StringType)),param(Id(WQ),ArrayType(67,StringType)),param(Id(__),ArrayType(67,StringType)),param(Id(s),ArrayType(67,StringType)),param(Id(q3),ArrayType(67,StringType)),param(Id(_),ArrayType(69,ArrayType(54,ArrayType(7,ArrayType(67,FloatType))))),param(Id(____),ArrayType(69,ArrayType(54,ArrayType(7,ArrayType(67,FloatType)))))],Block([])),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,StringType))),AttributeDecl(Static,VarDecl(Id($V_4_97F_C8),ArrayType(1,StringType))),AttributeDecl(Static,VarDecl(Id($_),ArrayType(1,StringType))),AttributeDecl(Instance,VarDecl(Id(_sWP1_x),ArrayType(1,StringType))),AttributeDecl(Instance,ConstDecl(Id(O3_33),ClassType(Id(U)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 887))

    def test_8(self):
        line = '''Class ____:_{}Class F:U{Destructor (){Continue ;}Constructor (_E3,__:Array [Array [Array [Array [Array [Array [Boolean ,2],0b110101],0X7],0107],0x44],9];h53___,om,_:Array [Array [Array [String ,5],4],0X19];l_:Boolean ){} }'''
        expect = '''Program([ClassDecl(Id(____),Id(_),[]),ClassDecl(Id(F),Id(U),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),MethodDecl(Id(Constructor),Instance,[param(Id(_E3),ArrayType(9,ArrayType(68,ArrayType(71,ArrayType(7,ArrayType(53,ArrayType(2,BoolType))))))),param(Id(__),ArrayType(9,ArrayType(68,ArrayType(71,ArrayType(7,ArrayType(53,ArrayType(2,BoolType))))))),param(Id(h53___),ArrayType(25,ArrayType(4,ArrayType(5,StringType)))),param(Id(om),ArrayType(25,ArrayType(4,ArrayType(5,StringType)))),param(Id(_),ArrayType(25,ArrayType(4,ArrayType(5,StringType)))),param(Id(l_),BoolType)],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 888))

    def test_9(self):
        line = '''Class _6:J69{Val _,$024:Array [Array [Array [Array [Int ,041],0b1],3],0X2E];Constructor (){}$969(i:Array [Array [Float ,0B10110],0B1];_:Array [Array [String ,3_7],99];_g_:Array [Array [Array [Boolean ,0X2E],0b10],9_1];h:Array [Array [Array [Array [Int ,0X2E],06_3_2],1],0B10110]){v::$t()._._();}Destructor (){}Var Kf____:Array [Array [Array [String ,0x5],0b1100000],041];}Class J:gzf_{}Class _{}Class _zX_:__u{}Class D{}Class __{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_6),Id(J69),[AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(46,ArrayType(3,ArrayType(1,ArrayType(33,IntType)))),None)),AttributeDecl(Static,ConstDecl(Id($024),ArrayType(46,ArrayType(3,ArrayType(1,ArrayType(33,IntType)))),None)),MethodDecl(Id(Constructor),Instance,[],Block([])),MethodDecl(Id($969),Static,[param(Id(i),ArrayType(1,ArrayType(22,FloatType))),param(Id(_),ArrayType(99,ArrayType(37,StringType))),param(Id(_g_),ArrayType(91,ArrayType(2,ArrayType(46,BoolType)))),param(Id(h),ArrayType(22,ArrayType(1,ArrayType(410,ArrayType(46,IntType)))))],Block([Call(FieldAccess(CallExpr(Id(v),Id($t),[]),Id(_)),Id(_),[])])),MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(Kf____),ArrayType(33,ArrayType(96,ArrayType(5,StringType)))))]),ClassDecl(Id(J),Id(gzf_),[]),ClassDecl(Id(_),[]),ClassDecl(Id(_zX_),Id(__u),[]),ClassDecl(Id(D),[]),ClassDecl(Id(__),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 889))

    def test_0(self):
        line = '''Class _2:_{}Class _z:N{Var w18,$_U,t4_:T;Var _0,$30,_5__:Array [Array [Array [Boolean ,0102],03_00],63];Constructor (){Continue ;Break ;Continue ;}Destructor (){} }Class _3nr_82{}'''
        expect = '''Program([ClassDecl(Id(_2),Id(_),[]),ClassDecl(Id(_z),Id(N),[AttributeDecl(Instance,VarDecl(Id(w18),ClassType(Id(T)),NullLiteral())),AttributeDecl(Static,VarDecl(Id($_U),ClassType(Id(T)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(t4_),ClassType(Id(T)),NullLiteral())),AttributeDecl(Instance,VarDecl(Id(_0),ArrayType(63,ArrayType(192,ArrayType(66,BoolType))))),AttributeDecl(Static,VarDecl(Id($30),ArrayType(63,ArrayType(192,ArrayType(66,BoolType))))),AttributeDecl(Instance,VarDecl(Id(_5__),ArrayType(63,ArrayType(192,ArrayType(66,BoolType))))),MethodDecl(Id(Constructor),Instance,[],Block([Continue,Break,Continue])),MethodDecl(Id(Destructor),Instance,[],Block([]))]),ClassDecl(Id(_3nr_82),[])])'''
        self.assertTrue(TestAST.test(line, expect, 890))

    def test_1(self):
        line = '''Class h{}Class cv_N5{Destructor (){Continue ;}Val $7:Array [Array [Array [Array [Array [Array [Array [Array [Int ,063],0b1010100],063],044],16],16],07_5],6];Val _:Float ;}Class LR_:_5{}'''
        expect = '''Program([ClassDecl(Id(h),[]),ClassDecl(Id(cv_N5),[MethodDecl(Id(Destructor),Instance,[],Block([Continue])),AttributeDecl(Static,ConstDecl(Id($7),ArrayType(6,ArrayType(61,ArrayType(16,ArrayType(16,ArrayType(36,ArrayType(51,ArrayType(84,ArrayType(51,IntType)))))))),None)),AttributeDecl(Instance,ConstDecl(Id(_),FloatType,None))]),ClassDecl(Id(LR_),Id(_5),[])])'''
        self.assertTrue(TestAST.test(line, expect, 891))

    def test_2(self):
        line = '''Class _:_9{Val $my1q:Array [Boolean ,59];Destructor (){Continue ;{} }Constructor (sH_,_201:Boolean ){}Val _8E_39:M1;}Class A_:__m_{}Class qL6{$0(){}Val $4,C2,$0:String ;}'''
        expect = '''Program([ClassDecl(Id(_),Id(_9),[AttributeDecl(Static,ConstDecl(Id($my1q),ArrayType(59,BoolType),None)),MethodDecl(Id(Destructor),Instance,[],Block([Continue,Block([])])),MethodDecl(Id(Constructor),Instance,[param(Id(sH_),BoolType),param(Id(_201),BoolType)],Block([])),AttributeDecl(Instance,ConstDecl(Id(_8E_39),ClassType(Id(M1)),None))]),ClassDecl(Id(A_),Id(__m_),[]),ClassDecl(Id(qL6),[MethodDecl(Id($0),Static,[],Block([])),AttributeDecl(Static,ConstDecl(Id($4),StringType,None)),AttributeDecl(Instance,ConstDecl(Id(C2),StringType,None)),AttributeDecl(Static,ConstDecl(Id($0),StringType,None))])])'''
        self.assertTrue(TestAST.test(line, expect, 892))

    def test_3(self):
        line = '''Class ___{}Class _:N{Constructor (E,n:Array [Float ,45];_k_,_,___:Array [Array [Array [Array [Array [String ,0X7],45],45],0B110000],7];Pw,_:Boolean ;w4,f,_s,t,e4E9,k:ng;_H_x7ve,__,_,_:Float ;_:Array [Int ,2]){} }Class _{}'''
        expect = '''Program([ClassDecl(Id(___),[]),ClassDecl(Id(_),Id(N),[MethodDecl(Id(Constructor),Instance,[param(Id(E),ArrayType(45,FloatType)),param(Id(n),ArrayType(45,FloatType)),param(Id(_k_),ArrayType(7,ArrayType(48,ArrayType(45,ArrayType(45,ArrayType(7,StringType)))))),param(Id(_),ArrayType(7,ArrayType(48,ArrayType(45,ArrayType(45,ArrayType(7,StringType)))))),param(Id(___),ArrayType(7,ArrayType(48,ArrayType(45,ArrayType(45,ArrayType(7,StringType)))))),param(Id(Pw),BoolType),param(Id(_),BoolType),param(Id(w4),ClassType(Id(ng))),param(Id(f),ClassType(Id(ng))),param(Id(_s),ClassType(Id(ng))),param(Id(t),ClassType(Id(ng))),param(Id(e4E9),ClassType(Id(ng))),param(Id(k),ClassType(Id(ng))),param(Id(_H_x7ve),FloatType),param(Id(__),FloatType),param(Id(_),FloatType),param(Id(_),FloatType),param(Id(_),ArrayType(2,IntType))],Block([]))]),ClassDecl(Id(_),[])])'''
        self.assertTrue(TestAST.test(line, expect, 893))

    def test_4(self):
        line = '''Class _{Constructor (h8_,_G__H9BX4_:String ){ {Return ;Val h,wx_,__8__:Array [Boolean ,6];} }o(){Break ;}Var $_,$03,$I:String ;Destructor (){True .uty();Val Z8R:X;}Val _6,$k8_I:Float ;$_(){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(h8_),StringType),param(Id(_G__H9BX4_),StringType)],Block([Block([Return(),ConstDecl(Id(h),ArrayType(6,BoolType),None),ConstDecl(Id(wx_),ArrayType(6,BoolType),None),ConstDecl(Id(__8__),ArrayType(6,BoolType),None)])])),MethodDecl(Id(o),Instance,[],Block([Break])),AttributeDecl(Static,VarDecl(Id($_),StringType)),AttributeDecl(Static,VarDecl(Id($03),StringType)),AttributeDecl(Static,VarDecl(Id($I),StringType)),MethodDecl(Id(Destructor),Instance,[],Block([Call(BooleanLit(True),Id(uty),[]),ConstDecl(Id(Z8R),ClassType(Id(X)),None)])),AttributeDecl(Instance,ConstDecl(Id(_6),FloatType,None)),AttributeDecl(Static,ConstDecl(Id($k8_I),FloatType,None)),MethodDecl(Id($_),Static,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 894))

    def test_5(self):
        line = '''Class _59{Constructor (A_:_m_;_:Array [Array [Array [Array [Array [Float ,031_6],0b111111],0B11],0X34],0X1]){}Val $Z_02_y,$_,$69__,ESC,b,$_w,_,$ZS_,$6p:Array [Array [String ,8],020];}Class U{Val __1,$____X_,__,$__i:Array [Array [Float ,50],020];}'''
        expect = '''Program([ClassDecl(Id(_59),[MethodDecl(Id(Constructor),Instance,[param(Id(A_),ClassType(Id(_m_))),param(Id(_),ArrayType(1,ArrayType(52,ArrayType(3,ArrayType(63,ArrayType(206,FloatType))))))],Block([])),AttributeDecl(Static,ConstDecl(Id($Z_02_y),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($_),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($69__),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(ESC),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(b),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($_w),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($ZS_),ArrayType(16,ArrayType(8,StringType)),None)),AttributeDecl(Static,ConstDecl(Id($6p),ArrayType(16,ArrayType(8,StringType)),None))]),ClassDecl(Id(U),[AttributeDecl(Instance,ConstDecl(Id(__1),ArrayType(16,ArrayType(50,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($____X_),ArrayType(16,ArrayType(50,FloatType)),None)),AttributeDecl(Instance,ConstDecl(Id(__),ArrayType(16,ArrayType(50,FloatType)),None)),AttributeDecl(Static,ConstDecl(Id($__i),ArrayType(16,ArrayType(50,FloatType)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 895))

    def test_6(self):
        line = '''Class _Y:_{Constructor (G:String ;_J:Array [String ,0B1]){Continue ;}Destructor (){}j3_C(a_y:Array [String ,06];_h,c,_Q3:_;Y,_:Array [Array [Array [Float ,0X7],9_10],0B1110];_Wx51,C1,g3:_u){Break ;}Constructor (){}Val $1,$pm_x__G1:_;}'''
        expect = '''Program([ClassDecl(Id(_Y),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(G),StringType),param(Id(_J),ArrayType(1,StringType))],Block([Continue])),MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(j3_C),Instance,[param(Id(a_y),ArrayType(6,StringType)),param(Id(_h),ClassType(Id(_))),param(Id(c),ClassType(Id(_))),param(Id(_Q3),ClassType(Id(_))),param(Id(Y),ArrayType(14,ArrayType(910,ArrayType(7,FloatType)))),param(Id(_),ArrayType(14,ArrayType(910,ArrayType(7,FloatType)))),param(Id(_Wx51),ClassType(Id(_u))),param(Id(C1),ClassType(Id(_u))),param(Id(g3),ClassType(Id(_u)))],Block([Break])),MethodDecl(Id(Constructor),Instance,[],Block([])),AttributeDecl(Static,ConstDecl(Id($1),ClassType(Id(_)),None)),AttributeDecl(Static,ConstDecl(Id($pm_x__G1),ClassType(Id(_)),None))])])'''
        self.assertTrue(TestAST.test(line, expect, 896))

    def test_7(self):
        line = '''Class _C_6:J_{}Class i{Destructor (){}Var __,_:Array [Array [Boolean ,1],0X9];}Class m5:_{Constructor (_,_,_,__q,_:Array [Array [Float ,1],16];y__:Array [String ,0b1011011];fq:Array [Array [Array [Int ,1],0B110],1]){} }Class n{}'''
        expect = '''Program([ClassDecl(Id(_C_6),Id(J_),[]),ClassDecl(Id(i),[MethodDecl(Id(Destructor),Instance,[],Block([])),AttributeDecl(Instance,VarDecl(Id(__),ArrayType(9,ArrayType(1,BoolType)))),AttributeDecl(Instance,VarDecl(Id(_),ArrayType(9,ArrayType(1,BoolType))))]),ClassDecl(Id(m5),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(_),ArrayType(16,ArrayType(1,FloatType))),param(Id(_),ArrayType(16,ArrayType(1,FloatType))),param(Id(_),ArrayType(16,ArrayType(1,FloatType))),param(Id(__q),ArrayType(16,ArrayType(1,FloatType))),param(Id(_),ArrayType(16,ArrayType(1,FloatType))),param(Id(y__),ArrayType(91,StringType)),param(Id(fq),ArrayType(1,ArrayType(6,ArrayType(1,IntType))))],Block([]))]),ClassDecl(Id(n),[])])'''
        self.assertTrue(TestAST.test(line, expect, 897))

    def test_8(self):
        line = '''Class _{w_9F(_2x_,__6c_,Vf_j,_:Float ;m_73__:_;__,__f:Array [Array [Array [Boolean ,0125],0XC],0X61];_0J:_){} }Class __:_0{}Class i3P:__9x{$9(d:_;I,_97,f:Float ){} }Class _:z{}Class _H_J9:__{Var u_,$4:Array [String ,0X61];}Class X_:M{Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(_),[MethodDecl(Id(w_9F),Instance,[param(Id(_2x_),FloatType),param(Id(__6c_),FloatType),param(Id(Vf_j),FloatType),param(Id(_),FloatType),param(Id(m_73__),ClassType(Id(_))),param(Id(__),ArrayType(97,ArrayType(12,ArrayType(85,BoolType)))),param(Id(__f),ArrayType(97,ArrayType(12,ArrayType(85,BoolType)))),param(Id(_0J),ClassType(Id(_)))],Block([]))]),ClassDecl(Id(__),Id(_0),[]),ClassDecl(Id(i3P),Id(__9x),[MethodDecl(Id($9),Static,[param(Id(d),ClassType(Id(_))),param(Id(I),FloatType),param(Id(_97),FloatType),param(Id(f),FloatType)],Block([]))]),ClassDecl(Id(_),Id(z),[]),ClassDecl(Id(_H_J9),Id(__),[AttributeDecl(Instance,VarDecl(Id(u_),ArrayType(97,StringType))),AttributeDecl(Static,VarDecl(Id($4),ArrayType(97,StringType)))]),ClassDecl(Id(X_),Id(M),[MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 898))

    def test_9(self):
        line = '''Class __ft8{Constructor (_y3,_:Array [Float ,0B1_10_1_1]){Break ;Val J,_,a:Array [Array [Float ,0b1100],18];} }Class _9{}Class c:_{Constructor (t:Array [Float ,3];Es_A:O_5;_,__G,C:T_){}Constructor (_,_:Float ){} }Class c1{}Class _{Val $_,_:I_;Destructor (){} }'''
        expect = '''Program([ClassDecl(Id(__ft8),[MethodDecl(Id(Constructor),Instance,[param(Id(_y3),ArrayType(27,FloatType)),param(Id(_),ArrayType(27,FloatType))],Block([Break,ConstDecl(Id(J),ArrayType(18,ArrayType(12,FloatType)),None),ConstDecl(Id(_),ArrayType(18,ArrayType(12,FloatType)),None),ConstDecl(Id(a),ArrayType(18,ArrayType(12,FloatType)),None)]))]),ClassDecl(Id(_9),[]),ClassDecl(Id(c),Id(_),[MethodDecl(Id(Constructor),Instance,[param(Id(t),ArrayType(3,FloatType)),param(Id(Es_A),ClassType(Id(O_5))),param(Id(_),ClassType(Id(T_))),param(Id(__G),ClassType(Id(T_))),param(Id(C),ClassType(Id(T_)))],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(_),FloatType),param(Id(_),FloatType)],Block([]))]),ClassDecl(Id(c1),[]),ClassDecl(Id(_),[AttributeDecl(Static,ConstDecl(Id($_),ClassType(Id(I_)),None)),AttributeDecl(Instance,ConstDecl(Id(_),ClassType(Id(I_)),None)),MethodDecl(Id(Destructor),Instance,[],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 899))

    def test_0(self):
        line = '''Class w{_(_:Boolean ){} }Class _28:_{Destructor (){}Constructor (B0:Array [Array [Array [Array [Array [Array [Boolean ,0107],29],0B1],011],0b1_1_0],0b1];r_,_4,X:L_;hB_,_4f9,_:Array [Array [Float ,0X4],29];_:__){} }'''
        expect = '''Program([ClassDecl(Id(w),[MethodDecl(Id(_),Instance,[param(Id(_),BoolType)],Block([]))]),ClassDecl(Id(_28),Id(_),[MethodDecl(Id(Destructor),Instance,[],Block([])),MethodDecl(Id(Constructor),Instance,[param(Id(B0),ArrayType(1,ArrayType(6,ArrayType(9,ArrayType(1,ArrayType(29,ArrayType(71,BoolType))))))),param(Id(r_),ClassType(Id(L_))),param(Id(_4),ClassType(Id(L_))),param(Id(X),ClassType(Id(L_))),param(Id(hB_),ArrayType(29,ArrayType(4,FloatType))),param(Id(_4f9),ArrayType(29,ArrayType(4,FloatType))),param(Id(_),ArrayType(29,ArrayType(4,FloatType))),param(Id(_),ClassType(Id(__)))],Block([]))])])'''
        self.assertTrue(TestAST.test(line, expect, 900))
